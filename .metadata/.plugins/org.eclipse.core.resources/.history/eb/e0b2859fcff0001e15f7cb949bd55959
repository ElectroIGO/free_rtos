/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "usb_host.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "LIS3DSH.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define flag_msg_user 		(0x00)
#define flag_msg_rtc 		(0x01)
#define flag_msg_acc		(0x02)
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define sampling_rate 600
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

I2S_HandleTypeDef hi2s3;

RTC_HandleTypeDef hrtc;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

/* Definitions for myUserMsg */
osThreadId_t myUserMsgHandle;
const osThreadAttr_t myUserMsg_attributes = {
  .name = "myUserMsg",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for myRTCTime */
osThreadId_t myRTCTimeHandle;
const osThreadAttr_t myRTCTime_attributes = {
  .name = "myRTCTime",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for myGetAccData */
osThreadId_t myGetAccDataHandle;
const osThreadAttr_t myGetAccData_attributes = {
  .name = "myGetAccData",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for myIntTask */
osThreadId_t myIntTaskHandle;
const osThreadAttr_t myIntTask_attributes = {
  .name = "myIntTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for myfreeRTOSManager */
osThreadId_t myfreeRTOSManagerHandle;
const osThreadAttr_t myfreeRTOSManager_attributes = {
  .name = "myfreeRTOSManager",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for myProcessAccData */
osThreadId_t myProcessAccDataHandle;
const osThreadAttr_t myProcessAccData_attributes = {
  .name = "myProcessAccData",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for myProcessCMD */
osThreadId_t myProcessCMDHandle;
const osThreadAttr_t myProcessCMD_attributes = {
  .name = "myProcessCMD",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for LIS3DSH_DataScaled */
osMessageQueueId_t LIS3DSH_DataScaledHandle;
const osMessageQueueAttr_t LIS3DSH_DataScaled_attributes = {
  .name = "LIS3DSH_DataScaled"
};
/* Definitions for LIS3DSH_ProcessedData */
osMessageQueueId_t LIS3DSH_ProcessedDataHandle;
const osMessageQueueAttr_t LIS3DSH_ProcessedData_attributes = {
  .name = "LIS3DSH_ProcessedData"
};
/* Definitions for RTC_Date */
osMessageQueueId_t RTC_DateHandle;
const osMessageQueueAttr_t RTC_Date_attributes = {
  .name = "RTC_Date"
};
/* Definitions for RTC_Time */
osMessageQueueId_t RTC_TimeHandle;
const osMessageQueueAttr_t RTC_Time_attributes = {
  .name = "RTC_Time"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM2_Init(void);
void MY_User_Message(void *argument);
void MY_RTC_Time(void *argument);
void MY_Get_Acc_Data(void *argument);
void my_Int_Task(void *argument);
void MY_freeRTOS_Task_Manager(void *argument);
void MY_Process_AccData(void *argument);
void MY_Process_CMD(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile unsigned long ulHighFrequencyTimerTicks;

struct My_TaskManager{
	volatile int freemem;
	char taskListBuffer [1024];
	char taskTimingBuffer [1024];
};

struct My_TaskManager task_manager;

//RTC_DateTypeDef sDate;
//RTC_TimeTypeDef sTime;

struct My_RTC{
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;
};

uint8_t flag = flag_msg_user;

LIS3DSH_DataScaled g_myLIS3DSH;
LIS3DSH_DataScaled sg_myLIS3DSH;


float moving_avg[3][sampling_rate];

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  MX_RTC_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim4);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LIS3DSH_DataScaled */
  LIS3DSH_DataScaledHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_DataScaled_attributes);

  /* creation of LIS3DSH_ProcessedData */
  LIS3DSH_ProcessedDataHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_ProcessedData_attributes);

  /* creation of RTC_Date */
  RTC_DateHandle = osMessageQueueNew (3, sizeof(RTC_DateTypeDef), &RTC_Date_attributes);

  /* creation of RTC_Time */
  RTC_TimeHandle = osMessageQueueNew (3, sizeof(RTC_TimeTypeDef), &RTC_Time_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myUserMsg */
  myUserMsgHandle = osThreadNew(MY_User_Message, NULL, &myUserMsg_attributes);

  /* creation of myRTCTime */
  myRTCTimeHandle = osThreadNew(MY_RTC_Time, NULL, &myRTCTime_attributes);

  /* creation of myGetAccData */
  myGetAccDataHandle = osThreadNew(MY_Get_Acc_Data, NULL, &myGetAccData_attributes);

  /* creation of myIntTask */
  myIntTaskHandle = osThreadNew(my_Int_Task, NULL, &myIntTask_attributes);

  /* creation of myfreeRTOSManager */
  myfreeRTOSManagerHandle = osThreadNew(MY_freeRTOS_Task_Manager, NULL, &myfreeRTOSManager_attributes);

  /* creation of myProcessAccData */
  myProcessAccDataHandle = osThreadNew(MY_Process_AccData, NULL, &myProcessAccData_attributes);

  /* creation of myProcessCMD */
  myProcessCMDHandle = osThreadNew(MY_Process_CMD, NULL, &myProcessCMD_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{

  /* USER CODE BEGIN I2S3_Init 0 */

  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8400;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 2000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 84;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 8400;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 50000;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
//	if(GPIO_Pin == B1_Pin){
//		BaseType_t checkifYieldRequired = xTaskResumeFromISR(myIntTaskHandle);
//		portYIELD_FROM_ISR(checkifYieldRequired);
//	}
	if(GPIO_Pin == MEMS_INT1_Pin){
		osThreadFlagsSet(myGetAccDataHandle, 0x0001);
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	}
}

//int __io_putchar(int ch) {
//    ITM_SendChar(ch);
//    return ch;
//}
int _write(int file, char *ptr, int len){
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
        ITM_SendChar(*ptr++);

    return len;
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_MY_User_Message */
/**
  * @brief  Function implementing the myUserMsg thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MY_User_Message */
void MY_User_Message(void *argument)
{
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_MY_RTC_Time */
/**
* @brief Function implementing the myRTCTime thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_RTC_Time */
void MY_RTC_Time(void *argument)
{
  /* USER CODE BEGIN MY_RTC_Time */
	My_RTC RTC_data;
  /* Infinite loop */
  for(;;)
  {
	HAL_RTC_GetTime(&hrtc, &RTC_data.sTime, RTC_FORMAT_BCD);
	HAL_RTC_GetDate(&hrtc, &RTC_data.sDate, RTC_FORMAT_BCD);
	osDelay(1000);
  }
  /* USER CODE END MY_RTC_Time */
}

/* USER CODE BEGIN Header_MY_Get_Acc_Data */
/**
* @brief Function implementing the myGetAccData thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Get_Acc_Data */
void MY_Get_Acc_Data(void *argument)
{
  /* USER CODE BEGIN MY_Get_Acc_Data */
	LIS3DSH_InitTypeDef MY_LIS3DSH_Configuration;
	MY_LIS3DSH_Configuration.dataRate = LIS3DSH_DATARATE_800;
	MY_LIS3DSH_Configuration.fullScale = LIS3DSH_FULLSCALE_4;
	MY_LIS3DSH_Configuration.antiAliasingBW = LIS3DSH_FILTER_BW_50;
	MY_LIS3DSH_Configuration.enableAxes = LIS3DSH_XYZ_ENABLE;
	MY_LIS3DSH_Configuration.interruptEnable = true;
	LIS3DSH_Init(&hspi1, &MY_LIS3DSH_Configuration);
	LIS3DSH_DataScaled myLIS3DSH;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
	  myLIS3DSH = LIS3DSH_GetDataScaled();
	  g_myLIS3DSH = myLIS3DSH;
	  osMessageQueuePut(LIS3DSH_DataScaledHandle, &myLIS3DSH, 10, 1);

  }
  /* USER CODE END MY_Get_Acc_Data */
}

/* USER CODE BEGIN Header_my_Int_Task */
/**
* @brief Function implementing the myIntTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_my_Int_Task */
void my_Int_Task(void *argument)
{
  /* USER CODE BEGIN my_Int_Task */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
//	  if(++flag > 2)
//			flag = 0;
//		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
//			osDelay(50);
//		}
  }
  /* USER CODE END my_Int_Task */
}

/* USER CODE BEGIN Header_MY_freeRTOS_Task_Manager */
/**
* @brief Function implementing the myfreeRTOSManager thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_freeRTOS_Task_Manager */
void MY_freeRTOS_Task_Manager(void *argument)
{
  /* USER CODE BEGIN MY_freeRTOS_Task_Manager */
  /* Infinite loop */
  for(;;)
  {
	  task_manager.freemem = xPortGetFreeHeapSize();
	  vTaskList(task_manager.taskListBuffer);
	  vTaskGetRunTimeStats(task_manager.taskTimingBuffer);
	  osDelay(1000);
  }
  /* USER CODE END MY_freeRTOS_Task_Manager */
}

/* USER CODE BEGIN Header_MY_Process_AccData */
/**
* @brief Function implementing the myProcessAccData thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_AccData */
void MY_Process_AccData(void *argument)
{
  /* USER CODE BEGIN MY_Process_AccData */
	float avg[3] = {0};
	LIS3DSH_DataScaled myLIS3DSH;
	LIS3DSH_DataScaled myLIS3DSH_after_filter;
	uint16_t fill = 0;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
	if(fill < sampling_rate){
		moving_avg[0][fill] = myLIS3DSH.x;
		moving_avg[1][fill] = myLIS3DSH.y;
		moving_avg[2][fill] = myLIS3DSH.z;
		fill++;
	} else {
		for(uint8_t i = 0; i < 3; i++)
			avg[i] = 0;
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
			moving_avg[0][j] = moving_avg[0][j - 1];
			moving_avg[1][j] = moving_avg[0][j - 1];
			moving_avg[2][j] = moving_avg[0][j - 1];
		}
		moving_avg[0][0] = myLIS3DSH.x;
		moving_avg[1][0] = myLIS3DSH.y;
		moving_avg[2][0] = myLIS3DSH.z;
		for(uint8_t i = 0; i < 3; i++){
			for(uint16_t j = 0; j < sampling_rate; j++)
				avg[i] += moving_avg[i][j];
		}
		myLIS3DSH_after_filter.x = avg[0] / sampling_rate;
		myLIS3DSH_after_filter.y = avg[1] / sampling_rate;
		myLIS3DSH_after_filter.z = avg[2] / sampling_rate;
		sg_myLIS3DSH = myLIS3DSH_after_filter;
		osMessageQueuePut(LIS3DSH_ProcessedDataHandle, &myLIS3DSH_after_filter, 10, 1);
	}
  }
  /* USER CODE END MY_Process_AccData */
}

/* USER CODE BEGIN Header_MY_Process_CMD */
/**
* @brief Function implementing the myProcessCMD thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_CMD */
void MY_Process_CMD(void *argument)
{
  /* USER CODE BEGIN MY_Process_CMD */
	LIS3DSH_DataScaled myLIS3DSH;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);

    osDelay(1000);
  }
  /* USER CODE END MY_Process_CMD */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3){
		ulHighFrequencyTimerTicks++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
