
2024-IOS-MD02-Rodrigo-Laurinovics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08015b88  08015b88  00016b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080164c0  080164c0  00018218  2**0
                  CONTENTS
  4 .ARM          00000008  080164c0  080164c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164c8  080164c8  00018218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080164c8  080164c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080164cc  080164cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  080164d0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018218  2**0
                  CONTENTS
 10 .bss          0000631c  20000218  20000218  00018218  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006534  20006534  00018218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d5d6  00000000  00000000  00018248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006407  00000000  00000000  0004581e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002480  00000000  00000000  0004bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c50  00000000  00000000  0004e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a25e  00000000  00000000  0004fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d82e  00000000  00000000  00079f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea40a  00000000  00000000  000a7784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00191b8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ae2c  00000000  00000000  00191bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0019ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015b70 	.word	0x08015b70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08015b70 	.word	0x08015b70

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2108      	movs	r1, #8
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LIS3DSH_WriteIO+0x4c>)
 8000f72:	f003 f93f 	bl	80041f4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000f76:	f107 010f 	add.w	r1, r7, #15
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <LIS3DSH_WriteIO+0x50>)
 8000f80:	f007 fa23 	bl	80083ca <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	230a      	movs	r3, #10
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <LIS3DSH_WriteIO+0x50>)
 8000f8e:	f007 fa1c 	bl	80083ca <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f92:	2201      	movs	r2, #1
 8000f94:	2108      	movs	r1, #8
 8000f96:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <LIS3DSH_WriteIO+0x4c>)
 8000f98:	f003 f92c 	bl	80041f4 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	20000234 	.word	0x20000234

08000fac <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2108      	movs	r1, #8
 8000fca:	4818      	ldr	r0, [pc, #96]	@ (800102c <LIS3DSH_ReadIO+0x80>)
 8000fcc:	f003 f912 	bl	80041f4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4815      	ldr	r0, [pc, #84]	@ (8001030 <LIS3DSH_ReadIO+0x84>)
 8000fda:	f007 f9f6 	bl	80083ca <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f107 0108 	add.w	r1, r7, #8
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	4811      	ldr	r0, [pc, #68]	@ (8001030 <LIS3DSH_ReadIO+0x84>)
 8000fea:	f007 fb31 	bl	8008650 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <LIS3DSH_ReadIO+0x80>)
 8000ff4:	f003 f8fe 	bl	80041f4 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e00b      	b.n	8001016 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	440b      	add	r3, r1
 8001006:	3210      	adds	r2, #16
 8001008:	443a      	add	r2, r7
 800100a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800100e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	3301      	adds	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	429a      	cmp	r2, r3
 8001020:	dbed      	blt.n	8000ffe <LIS3DSH_ReadIO+0x52>
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	20000234 	.word	0x20000234

08001034 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001042:	2258      	movs	r2, #88	@ 0x58
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	485b      	ldr	r0, [pc, #364]	@ (80011b4 <LIS3DSH_Init+0x180>)
 8001048:	f012 fa99 	bl	801357e <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	b25a      	sxtb	r2, r3
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b25b      	sxtb	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b25b      	sxtb	r3, r3
 800106a:	f023 030f 	bic.w	r3, r3, #15
 800106e:	b25a      	sxtb	r2, r3
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800107c:	f107 030f 	add.w	r3, r7, #15
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff ff67 	bl	8000f58 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001098:	b25a      	sxtb	r2, r3
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010b0:	b25a      	sxtb	r2, r3
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80010be:	f107 030f 	add.w	r3, r7, #15
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	2024      	movs	r0, #36	@ 0x24
 80010c8:	f7ff ff46 	bl	8000f58 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 80010d4:	2388      	movs	r3, #136	@ 0x88
 80010d6:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 80010d8:	f107 030f 	add.w	r3, r7, #15
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	2023      	movs	r0, #35	@ 0x23
 80010e2:	f7ff ff39 	bl	8000f58 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	d858      	bhi.n	80011a0 <LIS3DSH_Init+0x16c>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <LIS3DSH_Init+0xc0>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	08001179 	.word	0x08001179
 80010f8:	080011a1 	.word	0x080011a1
 80010fc:	080011a1 	.word	0x080011a1
 8001100:	080011a1 	.word	0x080011a1
 8001104:	080011a1 	.word	0x080011a1
 8001108:	080011a1 	.word	0x080011a1
 800110c:	080011a1 	.word	0x080011a1
 8001110:	080011a1 	.word	0x080011a1
 8001114:	08001181 	.word	0x08001181
 8001118:	080011a1 	.word	0x080011a1
 800111c:	080011a1 	.word	0x080011a1
 8001120:	080011a1 	.word	0x080011a1
 8001124:	080011a1 	.word	0x080011a1
 8001128:	080011a1 	.word	0x080011a1
 800112c:	080011a1 	.word	0x080011a1
 8001130:	080011a1 	.word	0x080011a1
 8001134:	08001189 	.word	0x08001189
 8001138:	080011a1 	.word	0x080011a1
 800113c:	080011a1 	.word	0x080011a1
 8001140:	080011a1 	.word	0x080011a1
 8001144:	080011a1 	.word	0x080011a1
 8001148:	080011a1 	.word	0x080011a1
 800114c:	080011a1 	.word	0x080011a1
 8001150:	080011a1 	.word	0x080011a1
 8001154:	08001191 	.word	0x08001191
 8001158:	080011a1 	.word	0x080011a1
 800115c:	080011a1 	.word	0x080011a1
 8001160:	080011a1 	.word	0x080011a1
 8001164:	080011a1 	.word	0x080011a1
 8001168:	080011a1 	.word	0x080011a1
 800116c:	080011a1 	.word	0x080011a1
 8001170:	080011a1 	.word	0x080011a1
 8001174:	08001199 	.word	0x08001199
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <LIS3DSH_Init+0x184>)
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <LIS3DSH_Init+0x188>)
 800117c:	601a      	str	r2, [r3, #0]
			break;
 800117e:	e00f      	b.n	80011a0 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001180:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <LIS3DSH_Init+0x184>)
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <LIS3DSH_Init+0x18c>)
 8001184:	601a      	str	r2, [r3, #0]
			break;
 8001186:	e00b      	b.n	80011a0 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <LIS3DSH_Init+0x184>)
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <LIS3DSH_Init+0x190>)
 800118c:	601a      	str	r2, [r3, #0]
			break;
 800118e:	e007      	b.n	80011a0 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <LIS3DSH_Init+0x184>)
 8001192:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <LIS3DSH_Init+0x194>)
 8001194:	601a      	str	r2, [r3, #0]
			break;
 8001196:	e003      	b.n	80011a0 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <LIS3DSH_Init+0x184>)
 800119a:	4a0c      	ldr	r2, [pc, #48]	@ (80011cc <LIS3DSH_Init+0x198>)
 800119c:	601a      	str	r2, [r3, #0]
			break;
 800119e:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80011a0:	2201      	movs	r2, #1
 80011a2:	2108      	movs	r1, #8
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <LIS3DSH_Init+0x19c>)
 80011a6:	f003 f825 	bl	80041f4 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000234 	.word	0x20000234
 80011b8:	20000000 	.word	0x20000000
 80011bc:	3d75c28f 	.word	0x3d75c28f
 80011c0:	3df5c28f 	.word	0x3df5c28f
 80011c4:	3e3851ec 	.word	0x3e3851ec
 80011c8:	3e75c28f 	.word	0x3e75c28f
 80011cc:	3f3ae148 	.word	0x3f3ae148
 80011d0:	40021000 	.word	0x40021000

080011d4 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2202      	movs	r2, #2
 80011e2:	4619      	mov	r1, r3
 80011e4:	2028      	movs	r0, #40	@ 0x28
 80011e6:	f7ff fee1 	bl	8000fac <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 80011ea:	7d7b      	ldrb	r3, [r7, #21]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	7d3a      	ldrb	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2202      	movs	r2, #2
 8001200:	4619      	mov	r1, r3
 8001202:	202a      	movs	r0, #42	@ 0x2a
 8001204:	f7ff fed2 	bl	8000fac <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001208:	7d7b      	ldrb	r3, [r7, #21]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b29b      	uxth	r3, r3
 800120e:	7d3a      	ldrb	r2, [r7, #20]
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21b      	sxth	r3, r3
 8001216:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2202      	movs	r2, #2
 800121e:	4619      	mov	r1, r3
 8001220:	202c      	movs	r0, #44	@ 0x2c
 8001222:	f7ff fec3 	bl	8000fac <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29b      	uxth	r3, r3
 800122c:	7d3a      	ldrb	r2, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21b      	sxth	r3, r3
 8001234:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	461a      	mov	r2, r3
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	6010      	str	r0, [r2, #0]
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	8093      	strh	r3, [r2, #4]

}
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffb9 	bl	80011d4 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001262:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <LIS3DSH_GetDataScaled+0xcc>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <LIS3DSH_GetDataScaled+0xd0>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001282:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001324 <LIS3DSH_GetDataScaled+0xd4>
 8001286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800128a:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <LIS3DSH_GetDataScaled+0xd8>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001298:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <LIS3DSH_GetDataScaled+0xcc>)
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ae:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <LIS3DSH_GetDataScaled+0xdc>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001324 <LIS3DSH_GetDataScaled+0xd4>
 80012bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <LIS3DSH_GetDataScaled+0xe0>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ca:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80012ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <LIS3DSH_GetDataScaled+0xcc>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <LIS3DSH_GetDataScaled+0xe4>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001324 <LIS3DSH_GetDataScaled+0xd4>
 80012f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <LIS3DSH_GetDataScaled+0xe8>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	edc7 7a05 	vstr	s15, [r7, #20]

	return tempScaledData;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	461d      	mov	r5, r3
 8001308:	f107 040c 	add.w	r4, r7, #12
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	602b      	str	r3, [r5, #0]
}
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bdb0      	pop	{r4, r5, r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004
 8001324:	00000000 	.word	0x00000000
 8001328:	2000028c 	.word	0x2000028c
 800132c:	20000008 	.word	0x20000008
 8001330:	20000290 	.word	0x20000290
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20000294 	.word	0x20000294

0800133c <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001352:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001356:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d013      	beq.n	800138a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001362:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001366:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800136a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001372:	e000      	b.n	8001376 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001374:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001376:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f9      	beq.n	8001374 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001380:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f002 f844 	bl	8003428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f8ce 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f000 fb24 	bl	80019f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a8:	f000 fb02 	bl	80019b0 <MX_DMA_Init>
  MX_I2C1_Init();
 80013ac:	f000 f934 	bl	8001618 <MX_I2C1_Init>
  MX_I2S3_Init();
 80013b0:	f000 f960 	bl	8001674 <MX_I2S3_Init>
  MX_SPI1_Init();
 80013b4:	f000 f9b4 	bl	8001720 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80013b8:	f000 fad0 	bl	800195c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80013bc:	f000 f98a 	bl	80016d4 <MX_RTC_Init>
  MX_TIM3_Init();
 80013c0:	f000 fa32 	bl	8001828 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013c4:	f000 fa7c 	bl	80018c0 <MX_TIM4_Init>
  MX_TIM2_Init();
 80013c8:	f000 f9e0 	bl	800178c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013cc:	4839      	ldr	r0, [pc, #228]	@ (80014b4 <main+0x11c>)
 80013ce:	f007 fd99 	bl	8008f04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80013d2:	4839      	ldr	r0, [pc, #228]	@ (80014b8 <main+0x120>)
 80013d4:	f007 fd96 	bl	8008f04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80013d8:	4838      	ldr	r0, [pc, #224]	@ (80014bc <main+0x124>)
 80013da:	f007 fd93 	bl	8008f04 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_Buf, RXBUFF_SIZE);
 80013de:	220b      	movs	r2, #11
 80013e0:	4937      	ldr	r1, [pc, #220]	@ (80014c0 <main+0x128>)
 80013e2:	4838      	ldr	r0, [pc, #224]	@ (80014c4 <main+0x12c>)
 80013e4:	f008 fa8f 	bl	8009906 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013e8:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <main+0x130>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <main+0x130>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0208 	bic.w	r2, r2, #8
 80013f6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013f8:	f00d f854 	bl	800e4a4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LIS3DSH_DataScaled */
  LIS3DSH_DataScaledHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_DataScaled_attributes);
 80013fc:	4a33      	ldr	r2, [pc, #204]	@ (80014cc <main+0x134>)
 80013fe:	2114      	movs	r1, #20
 8001400:	2003      	movs	r0, #3
 8001402:	f00d fa15 	bl	800e830 <osMessageQueueNew>
 8001406:	4603      	mov	r3, r0
 8001408:	4a31      	ldr	r2, [pc, #196]	@ (80014d0 <main+0x138>)
 800140a:	6013      	str	r3, [r2, #0]

  /* creation of LIS3DSH_ProcessedData */
  LIS3DSH_ProcessedDataHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_ProcessedData_attributes);
 800140c:	4a31      	ldr	r2, [pc, #196]	@ (80014d4 <main+0x13c>)
 800140e:	2114      	movs	r1, #20
 8001410:	2003      	movs	r0, #3
 8001412:	f00d fa0d 	bl	800e830 <osMessageQueueNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <main+0x140>)
 800141a:	6013      	str	r3, [r2, #0]

  /* creation of RTC_Data */
  RTC_DataHandle = osMessageQueueNew (3, sizeof(My_RTC_Data), &RTC_Data_attributes);
 800141c:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <main+0x144>)
 800141e:	2118      	movs	r1, #24
 8001420:	2003      	movs	r0, #3
 8001422:	f00d fa05 	bl	800e830 <osMessageQueueNew>
 8001426:	4603      	mov	r3, r0
 8001428:	4a2d      	ldr	r2, [pc, #180]	@ (80014e0 <main+0x148>)
 800142a:	6013      	str	r3, [r2, #0]

  /* creation of CMD_ProcData */
  CMD_ProcDataHandle = osMessageQueueNew (3, sizeof(Command), &CMD_ProcData_attributes);
 800142c:	4a2d      	ldr	r2, [pc, #180]	@ (80014e4 <main+0x14c>)
 800142e:	2109      	movs	r1, #9
 8001430:	2003      	movs	r0, #3
 8001432:	f00d f9fd 	bl	800e830 <osMessageQueueNew>
 8001436:	4603      	mov	r3, r0
 8001438:	4a2b      	ldr	r2, [pc, #172]	@ (80014e8 <main+0x150>)
 800143a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myUserMsg */
  myUserMsgHandle = osThreadNew(MY_User_Message, NULL, &myUserMsg_attributes);
 800143c:	4a2b      	ldr	r2, [pc, #172]	@ (80014ec <main+0x154>)
 800143e:	2100      	movs	r1, #0
 8001440:	482b      	ldr	r0, [pc, #172]	@ (80014f0 <main+0x158>)
 8001442:	f00d f879 	bl	800e538 <osThreadNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a2a      	ldr	r2, [pc, #168]	@ (80014f4 <main+0x15c>)
 800144a:	6013      	str	r3, [r2, #0]

  /* creation of myRTCTime */
  myRTCTimeHandle = osThreadNew(MY_RTC_Time, NULL, &myRTCTime_attributes);
 800144c:	4a2a      	ldr	r2, [pc, #168]	@ (80014f8 <main+0x160>)
 800144e:	2100      	movs	r1, #0
 8001450:	482a      	ldr	r0, [pc, #168]	@ (80014fc <main+0x164>)
 8001452:	f00d f871 	bl	800e538 <osThreadNew>
 8001456:	4603      	mov	r3, r0
 8001458:	4a29      	ldr	r2, [pc, #164]	@ (8001500 <main+0x168>)
 800145a:	6013      	str	r3, [r2, #0]

  /* creation of myGetAccData */
  myGetAccDataHandle = osThreadNew(MY_Get_Acc_Data, NULL, &myGetAccData_attributes);
 800145c:	4a29      	ldr	r2, [pc, #164]	@ (8001504 <main+0x16c>)
 800145e:	2100      	movs	r1, #0
 8001460:	4829      	ldr	r0, [pc, #164]	@ (8001508 <main+0x170>)
 8001462:	f00d f869 	bl	800e538 <osThreadNew>
 8001466:	4603      	mov	r3, r0
 8001468:	4a28      	ldr	r2, [pc, #160]	@ (800150c <main+0x174>)
 800146a:	6013      	str	r3, [r2, #0]

  /* creation of myIntTask */
  myIntTaskHandle = osThreadNew(my_Int_Task, NULL, &myIntTask_attributes);
 800146c:	4a28      	ldr	r2, [pc, #160]	@ (8001510 <main+0x178>)
 800146e:	2100      	movs	r1, #0
 8001470:	4828      	ldr	r0, [pc, #160]	@ (8001514 <main+0x17c>)
 8001472:	f00d f861 	bl	800e538 <osThreadNew>
 8001476:	4603      	mov	r3, r0
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <main+0x180>)
 800147a:	6013      	str	r3, [r2, #0]

  /* creation of myfreeRTOSManager */
  myfreeRTOSManagerHandle = osThreadNew(MY_freeRTOS_Task_Manager, NULL, &myfreeRTOSManager_attributes);
 800147c:	4a27      	ldr	r2, [pc, #156]	@ (800151c <main+0x184>)
 800147e:	2100      	movs	r1, #0
 8001480:	4827      	ldr	r0, [pc, #156]	@ (8001520 <main+0x188>)
 8001482:	f00d f859 	bl	800e538 <osThreadNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a26      	ldr	r2, [pc, #152]	@ (8001524 <main+0x18c>)
 800148a:	6013      	str	r3, [r2, #0]

  /* creation of myProcessAccData */
  myProcessAccDataHandle = osThreadNew(MY_Process_AccData, NULL, &myProcessAccData_attributes);
 800148c:	4a26      	ldr	r2, [pc, #152]	@ (8001528 <main+0x190>)
 800148e:	2100      	movs	r1, #0
 8001490:	4826      	ldr	r0, [pc, #152]	@ (800152c <main+0x194>)
 8001492:	f00d f851 	bl	800e538 <osThreadNew>
 8001496:	4603      	mov	r3, r0
 8001498:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <main+0x198>)
 800149a:	6013      	str	r3, [r2, #0]

  /* creation of myProcessCMD */
  myProcessCMDHandle = osThreadNew(MY_Process_CMD, NULL, &myProcessCMD_attributes);
 800149c:	4a25      	ldr	r2, [pc, #148]	@ (8001534 <main+0x19c>)
 800149e:	2100      	movs	r1, #0
 80014a0:	4825      	ldr	r0, [pc, #148]	@ (8001538 <main+0x1a0>)
 80014a2:	f00d f849 	bl	800e538 <osThreadNew>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a24      	ldr	r2, [pc, #144]	@ (800153c <main+0x1a4>)
 80014aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014ac:	f00d f81e 	bl	800e4ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <main+0x118>
 80014b4:	200003ac 	.word	0x200003ac
 80014b8:	200003f4 	.word	0x200003f4
 80014bc:	2000043c 	.word	0x2000043c
 80014c0:	20000d88 	.word	0x20000d88
 80014c4:	20000484 	.word	0x20000484
 80014c8:	200004cc 	.word	0x200004cc
 80014cc:	08016060 	.word	0x08016060
 80014d0:	20000548 	.word	0x20000548
 80014d4:	08016078 	.word	0x08016078
 80014d8:	2000054c 	.word	0x2000054c
 80014dc:	08016090 	.word	0x08016090
 80014e0:	20000550 	.word	0x20000550
 80014e4:	080160a8 	.word	0x080160a8
 80014e8:	20000554 	.word	0x20000554
 80014ec:	08015f64 	.word	0x08015f64
 80014f0:	08002059 	.word	0x08002059
 80014f4:	2000052c 	.word	0x2000052c
 80014f8:	08015f88 	.word	0x08015f88
 80014fc:	080027c1 	.word	0x080027c1
 8001500:	20000530 	.word	0x20000530
 8001504:	08015fac 	.word	0x08015fac
 8001508:	080028c5 	.word	0x080028c5
 800150c:	20000534 	.word	0x20000534
 8001510:	08015fd0 	.word	0x08015fd0
 8001514:	08002949 	.word	0x08002949
 8001518:	20000538 	.word	0x20000538
 800151c:	08015ff4 	.word	0x08015ff4
 8001520:	08002959 	.word	0x08002959
 8001524:	2000053c 	.word	0x2000053c
 8001528:	08016018 	.word	0x08016018
 800152c:	08002991 	.word	0x08002991
 8001530:	20000540 	.word	0x20000540
 8001534:	0801603c 	.word	0x0801603c
 8001538:	08002b01 	.word	0x08002b01
 800153c:	20000544 	.word	0x20000544

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	@ 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	@ 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f011 ff27 	bl	80133a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <SystemClock_Config+0xd0>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a28      	ldr	r2, [pc, #160]	@ (8001610 <SystemClock_Config+0xd0>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <SystemClock_Config+0xd0>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <SystemClock_Config+0xd4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <SystemClock_Config+0xd4>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <SystemClock_Config+0xd4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800159c:	2309      	movs	r3, #9
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015a6:	2301      	movs	r3, #1
 80015a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015aa:	2302      	movs	r3, #2
 80015ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015be:	2302      	movs	r3, #2
 80015c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 fd5c 	bl	8007088 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015d6:	f001 fb03 	bl	8002be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2105      	movs	r1, #5
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 ffbd 	bl	8007578 <HAL_RCC_ClockConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001604:	f001 faec 	bl	8002be0 <Error_Handler>
  }
}
 8001608:	bf00      	nop
 800160a:	3750      	adds	r7, #80	@ 0x50
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_I2C1_Init+0x50>)
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <MX_I2C1_Init+0x54>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_I2C1_Init+0x58>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001636:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001656:	f004 ff33 	bl	80064c0 <HAL_I2C_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001660:	f001 fabe 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000298 	.word	0x20000298
 800166c:	40005400 	.word	0x40005400
 8001670:	000186a0 	.word	0x000186a0

08001674 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_I2S3_Init+0x54>)
 800167a:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <MX_I2S3_Init+0x58>)
 800167c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_I2S3_Init+0x54>)
 8001680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001684:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_I2S3_Init+0x54>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_I2S3_Init+0x54>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_I2S3_Init+0x54>)
 8001694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001698:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_I2S3_Init+0x54>)
 800169c:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <MX_I2S3_Init+0x5c>)
 800169e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_I2S3_Init+0x54>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_I2S3_Init+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_I2S3_Init+0x54>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_I2S3_Init+0x54>)
 80016b4:	f005 f848 	bl	8006748 <HAL_I2S_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80016be:	f001 fa8f 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002ec 	.word	0x200002ec
 80016cc:	40003c00 	.word	0x40003c00
 80016d0:	00017700 	.word	0x00017700

080016d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_RTC_Init+0x44>)
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <MX_RTC_Init+0x48>)
 80016dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_RTC_Init+0x44>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_RTC_Init+0x44>)
 80016e6:	227f      	movs	r2, #127	@ 0x7f
 80016e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <MX_RTC_Init+0x44>)
 80016ec:	22ff      	movs	r2, #255	@ 0xff
 80016ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_RTC_Init+0x44>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <MX_RTC_Init+0x44>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_RTC_Init+0x44>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_RTC_Init+0x44>)
 8001704:	f006 facc 	bl	8007ca0 <HAL_RTC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800170e:	f001 fa67 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000334 	.word	0x20000334
 800171c:	40002800 	.word	0x40002800

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <MX_SPI1_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001754:	2228      	movs	r2, #40	@ 0x28
 8001756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_SPI1_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_SPI1_Init+0x64>)
 8001772:	f006 fda1 	bl	80082b8 <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800177c:	f001 fa30 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000354 	.word	0x20000354
 8001788:	40013000 	.word	0x40013000

0800178c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017b2:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80017b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017c0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80017c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d2:	4814      	ldr	r0, [pc, #80]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017d4:	f007 fb46 	bl	8008e64 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017de:	f001 f9ff 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	@ (8001824 <MX_TIM2_Init+0x98>)
 80017f0:	f007 fce8 	bl	80091c4 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017fa:	f001 f9f1 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <MX_TIM2_Init+0x98>)
 800180c:	f007 ff10 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001816:	f001 f9e3 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200003ac 	.word	0x200003ac

08001828 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <MX_TIM3_Init+0x90>)
 8001846:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <MX_TIM3_Init+0x94>)
 8001848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_TIM3_Init+0x90>)
 800184c:	2254      	movs	r2, #84	@ 0x54
 800184e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_TIM3_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_TIM3_Init+0x90>)
 8001858:	2264      	movs	r2, #100	@ 0x64
 800185a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_TIM3_Init+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <MX_TIM3_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001868:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <MX_TIM3_Init+0x90>)
 800186a:	f007 fafb 	bl	8008e64 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001874:	f001 f9b4 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <MX_TIM3_Init+0x90>)
 8001886:	f007 fc9d 	bl	80091c4 <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001890:	f001 f9a6 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM3_Init+0x90>)
 80018a2:	f007 fec5 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80018ac:	f001 f998 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200003f4 	.word	0x200003f4
 80018bc:	40000400 	.word	0x40000400

080018c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MX_TIM4_Init+0x94>)
 80018de:	4a1e      	ldr	r2, [pc, #120]	@ (8001958 <MX_TIM4_Init+0x98>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <MX_TIM4_Init+0x94>)
 80018e4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80018e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_TIM4_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_TIM4_Init+0x94>)
 80018f2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80018f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_TIM4_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <MX_TIM4_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001904:	4813      	ldr	r0, [pc, #76]	@ (8001954 <MX_TIM4_Init+0x94>)
 8001906:	f007 faad 	bl	8008e64 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001910:	f001 f966 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <MX_TIM4_Init+0x94>)
 8001922:	f007 fc4f 	bl	80091c4 <HAL_TIM_ConfigClockSource>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800192c:	f001 f958 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_TIM4_Init+0x94>)
 800193e:	f007 fe77 	bl	8009630 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001948:	f001 f94a 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000043c 	.word	0x2000043c
 8001958:	40000800 	.word	0x40000800

0800195c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001962:	4a12      	ldr	r2, [pc, #72]	@ (80019ac <MX_USART2_UART_Init+0x50>)
 8001964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001968:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800196c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <MX_USART2_UART_Init+0x4c>)
 8001994:	f007 fedc 	bl	8009750 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199e:	f001 f91f 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000484 	.word	0x20000484
 80019ac:	40004400 	.word	0x40004400

080019b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <MX_DMA_Init+0x3c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a0b      	ldr	r2, [pc, #44]	@ (80019ec <MX_DMA_Init+0x3c>)
 80019c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_DMA_Init+0x3c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2105      	movs	r1, #5
 80019d6:	2010      	movs	r0, #16
 80019d8:	f001 fe44 	bl	8003664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019dc:	2010      	movs	r0, #16
 80019de:	f001 fe5d 	bl	800369c <HAL_NVIC_EnableIRQ>

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	4b76      	ldr	r3, [pc, #472]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a75      	ldr	r2, [pc, #468]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b73      	ldr	r3, [pc, #460]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4b6f      	ldr	r3, [pc, #444]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b6c      	ldr	r3, [pc, #432]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b68      	ldr	r3, [pc, #416]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a67      	ldr	r2, [pc, #412]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b65      	ldr	r3, [pc, #404]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b61      	ldr	r3, [pc, #388]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a60      	ldr	r2, [pc, #384]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a59      	ldr	r2, [pc, #356]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b57      	ldr	r3, [pc, #348]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b53      	ldr	r3, [pc, #332]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a52      	ldr	r2, [pc, #328]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b50      	ldr	r3, [pc, #320]	@ (8001be4 <MX_GPIO_Init+0x1f4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2108      	movs	r1, #8
 8001ab2:	484d      	ldr	r0, [pc, #308]	@ (8001be8 <MX_GPIO_Init+0x1f8>)
 8001ab4:	f002 fb9e 	bl	80041f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2101      	movs	r1, #1
 8001abc:	484b      	ldr	r0, [pc, #300]	@ (8001bec <MX_GPIO_Init+0x1fc>)
 8001abe:	f002 fb99 	bl	80041f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001ac8:	4849      	ldr	r0, [pc, #292]	@ (8001bf0 <MX_GPIO_Init+0x200>)
 8001aca:	f002 fb93 	bl	80041f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4840      	ldr	r0, [pc, #256]	@ (8001be8 <MX_GPIO_Init+0x1f8>)
 8001ae6:	f002 f9e9 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	483a      	ldr	r0, [pc, #232]	@ (8001bec <MX_GPIO_Init+0x1fc>)
 8001b02:	f002 f9db 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b06:	2308      	movs	r3, #8
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b16:	2305      	movs	r3, #5
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4832      	ldr	r0, [pc, #200]	@ (8001bec <MX_GPIO_Init+0x1fc>)
 8001b22:	f002 f9cb 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b26:	2304      	movs	r3, #4
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	482e      	ldr	r0, [pc, #184]	@ (8001bf4 <MX_GPIO_Init+0x204>)
 8001b3a:	f002 f9bf 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b50:	2305      	movs	r3, #5
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4826      	ldr	r0, [pc, #152]	@ (8001bf4 <MX_GPIO_Init+0x204>)
 8001b5c:	f002 f9ae 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b60:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001b64:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	481d      	ldr	r0, [pc, #116]	@ (8001bf0 <MX_GPIO_Init+0x200>)
 8001b7a:	f002 f99f 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4817      	ldr	r0, [pc, #92]	@ (8001bf0 <MX_GPIO_Init+0x200>)
 8001b92:	f002 f993 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480f      	ldr	r0, [pc, #60]	@ (8001be8 <MX_GPIO_Init+0x1f8>)
 8001bac:	f002 f986 	bl	8003ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bb4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4808      	ldr	r0, [pc, #32]	@ (8001be8 <MX_GPIO_Init+0x1f8>)
 8001bc6:	f002 f979 	bl	8003ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	2006      	movs	r0, #6
 8001bd0:	f001 fd48 	bl	8003664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bd4:	2006      	movs	r0, #6
 8001bd6:	f001 fd61 	bl	800369c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	@ 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MEMS_INT1_Pin){
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10a      	bne.n	8001c1e <HAL_GPIO_EXTI_Callback+0x26>
		osThreadFlagsSet(myGetAccDataHandle, 0x0001);
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <HAL_GPIO_EXTI_Callback+0x30>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00c fd24 	bl	800e65c <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001c14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <HAL_GPIO_EXTI_Callback+0x34>)
 8001c1a:	f002 fb04 	bl	8004226 <HAL_GPIO_TogglePin>
	}
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000534 	.word	0x20000534
 8001c2c:	40020c00 	.word	0x40020c00

08001c30 <__io_putchar>:

int __io_putchar(int ch) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb85 	bl	800134a <ITM_SendChar>
    return ch;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <HAL_UARTEx_RxEventCallback+0x50>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d117      	bne.n	8001c92 <HAL_UARTEx_RxEventCallback+0x46>
		osThreadFlagsSet(myProcessCMDHandle, 0x0001);
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <HAL_UARTEx_RxEventCallback+0x54>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2101      	movs	r1, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00c fcf7 	bl	800e65c <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001c6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c72:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <HAL_UARTEx_RxEventCallback+0x58>)
 8001c74:	f002 fad7 	bl	8004226 <HAL_GPIO_TogglePin>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) Rx_Buf, RXBUFF_SIZE);
 8001c78:	220b      	movs	r2, #11
 8001c7a:	490b      	ldr	r1, [pc, #44]	@ (8001ca8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001c7c:	480b      	ldr	r0, [pc, #44]	@ (8001cac <HAL_UARTEx_RxEventCallback+0x60>)
 8001c7e:	f007 fe42 	bl	8009906 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_UARTEx_RxEventCallback+0x64>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_UARTEx_RxEventCallback+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0208 	bic.w	r2, r2, #8
 8001c90:	601a      	str	r2, [r3, #0]
	}
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	20000544 	.word	0x20000544
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	20000d88 	.word	0x20000d88
 8001cac:	20000484 	.word	0x20000484
 8001cb0:	200004cc 	.word	0x200004cc
 8001cb4:	00000000 	.word	0x00000000

08001cb8 <calculate_pitch_roll>:
*
* @returns
* This function does not return a value directly, but it updates the values pointed to by 'pitch' and 'roll'
* with the calculated pitch and roll angles, respectively.
*/
void calculate_pitch_roll(float ax, float ay, float az, float *pitch, float *roll) {
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cc2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cc6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cca:	60b8      	str	r0, [r7, #8]
 8001ccc:	6079      	str	r1, [r7, #4]
//	float norm = sqrt(ax*ax + ay*ay + az*az);
//	ax /= norm;
//	ay /= norm;
//	az /= norm;
    *pitch = atan2(ax, sqrt(ay*ay + az*az));
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7fe fc4a 	bl	8000568 <__aeabi_f2d>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	460d      	mov	r5, r1
 8001cd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cdc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	ee17 0a90 	vmov	r0, s15
 8001cf0:	f7fe fc3a 	bl	8000568 <__aeabi_f2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	ec43 2b10 	vmov	d0, r2, r3
 8001cfc:	f013 fbc8 	bl	8015490 <sqrt>
 8001d00:	eeb0 7a40 	vmov.f32	s14, s0
 8001d04:	eef0 7a60 	vmov.f32	s15, s1
 8001d08:	eeb0 1a47 	vmov.f32	s2, s14
 8001d0c:	eef0 1a67 	vmov.f32	s3, s15
 8001d10:	ec45 4b10 	vmov	d0, r4, r5
 8001d14:	f013 fbba 	bl	801548c <atan2>
 8001d18:	ec53 2b10 	vmov	r2, r3, d0
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff52 	bl	8000bc8 <__aeabi_d2f>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	601a      	str	r2, [r3, #0]
    *roll = atan2(-ay, sqrt(ax*ax + az*az));
 8001d2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2e:	eef1 7a67 	vneg.f32	s15, s15
 8001d32:	ee17 3a90 	vmov	r3, s15
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc16 	bl	8000568 <__aeabi_f2d>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	460d      	mov	r5, r1
 8001d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	ee17 0a90 	vmov	r0, s15
 8001d58:	f7fe fc06 	bl	8000568 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b10 	vmov	d0, r2, r3
 8001d64:	f013 fb94 	bl	8015490 <sqrt>
 8001d68:	eeb0 7a40 	vmov.f32	s14, s0
 8001d6c:	eef0 7a60 	vmov.f32	s15, s1
 8001d70:	eeb0 1a47 	vmov.f32	s2, s14
 8001d74:	eef0 1a67 	vmov.f32	s3, s15
 8001d78:	ec45 4b10 	vmov	d0, r4, r5
 8001d7c:	f013 fb86 	bl	801548c <atan2>
 8001d80:	ec53 2b10 	vmov	r2, r3, d0
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe ff1e 	bl	8000bc8 <__aeabi_d2f>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]

    *pitch = *pitch * 180.0 / M_PI;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbe6 	bl	8000568 <__aeabi_f2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <calculate_pitch_roll+0x160>)
 8001da2:	f7fe fc39 	bl	8000618 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	a318      	add	r3, pc, #96	@ (adr r3, 8001e10 <calculate_pitch_roll+0x158>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fd5a 	bl	800086c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe ff02 	bl	8000bc8 <__aeabi_d2f>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	601a      	str	r2, [r3, #0]
    *roll = *roll * 180.0 / M_PI;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fbca 	bl	8000568 <__aeabi_f2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <calculate_pitch_roll+0x160>)
 8001dda:	f7fe fc1d 	bl	8000618 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e10 <calculate_pitch_roll+0x158>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fd3e 	bl	800086c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fee6 	bl	8000bc8 <__aeabi_d2f>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	54442d18 	.word	0x54442d18
 8001e14:	400921fb 	.word	0x400921fb
 8001e18:	40668000 	.word	0x40668000

08001e1c <moving_average_filter>:
* fill: A pointer to a variable indicating the current fill level of the moving average buffer.
*
* @returns
* Returns the filtered accelerometer data scaled to the LIS3DSH_DataScaled structure.
*/
LIS3DSH_DataScaled moving_average_filter(LIS3DSH_DataScaled myLIS3DSH, float mov_avg[3][sampling_rate], uint16_t* fill) {
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e20:	b091      	sub	sp, #68	@ 0x44
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    double avg[3] = {0};
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	615a      	str	r2, [r3, #20]
    LIS3DSH_DataScaled LIS3DSH;

    if (*fill >= sampling_rate)
 8001e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e46:	d902      	bls.n	8001e4e <moving_average_filter+0x32>
        *fill = 0;
 8001e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]

    mov_avg[0][*fill] = myLIS3DSH.x;
 8001e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001e54:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	601a      	str	r2, [r3, #0]
    mov_avg[1][*fill] = myLIS3DSH.y;
 8001e5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e5e:	f503 7148 	add.w	r1, r3, #800	@ 0x320
 8001e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	601a      	str	r2, [r3, #0]
    mov_avg[2][*fill] = myLIS3DSH.z;
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e70:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 8001e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	601a      	str	r2, [r3, #0]

    for (uint16_t i = 0; i < sampling_rate; i++) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001e84:	e036      	b.n	8001ef4 <moving_average_filter+0xd8>
        for (uint8_t j = 0; j < 3; j++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001e8c:	e02b      	b.n	8001ee6 <moving_average_filter+0xca>
            avg[j] += mov_avg[j][i];
 8001e8e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	3340      	adds	r3, #64	@ 0x40
 8001e96:	443b      	add	r3, r7
 8001e98:	3b20      	subs	r3, #32
 8001e9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e9e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001ea2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001eac:	441a      	add	r2, r3
 8001eae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb56 	bl	8000568 <__aeabi_f2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	f897 603d 	ldrb.w	r6, [r7, #61]	@ 0x3d
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe f9f0 	bl	80002ac <__adddf3>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	00f1      	lsls	r1, r6, #3
 8001ed2:	3140      	adds	r1, #64	@ 0x40
 8001ed4:	4439      	add	r1, r7
 8001ed6:	3920      	subs	r1, #32
 8001ed8:	e9c1 2300 	strd	r2, r3, [r1]
        for (uint8_t j = 0; j < 3; j++) {
 8001edc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001ee6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d9cf      	bls.n	8001e8e <moving_average_filter+0x72>
    for (uint16_t i = 0; i < sampling_rate; i++) {
 8001eee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001ef4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001ef6:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ef8:	d9c5      	bls.n	8001e86 <moving_average_filter+0x6a>
        }
    }

    LIS3DSH.x = avg[0] / sampling_rate;
 8001efa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb4 <moving_average_filter+0x198>)
 8001f04:	f7fe fcb2 	bl	800086c <__aeabi_ddiv>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b28      	ldr	r3, [pc, #160]	@ (8001fb8 <moving_average_filter+0x19c>)
 8001f16:	f7fe fca9 	bl	800086c <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe51 	bl	8000bc8 <__aeabi_d2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	60fb      	str	r3, [r7, #12]
	LIS3DSH.y = avg[1] / sampling_rate;
 8001f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <moving_average_filter+0x198>)
 8001f34:	f7fe fc9a 	bl	800086c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <moving_average_filter+0x19c>)
 8001f46:	f7fe fc91 	bl	800086c <__aeabi_ddiv>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe39 	bl	8000bc8 <__aeabi_d2f>
 8001f56:	4603      	mov	r3, r0
 8001f58:	613b      	str	r3, [r7, #16]
	LIS3DSH.z = avg[2] / sampling_rate;
 8001f5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <moving_average_filter+0x198>)
 8001f64:	f7fe fc82 	bl	800086c <__aeabi_ddiv>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <moving_average_filter+0x19c>)
 8001f76:	f7fe fc79 	bl	800086c <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe fe21 	bl	8000bc8 <__aeabi_d2f>
 8001f86:	4603      	mov	r3, r0
 8001f88:	617b      	str	r3, [r7, #20]

    (*fill)++;
 8001f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f94:	801a      	strh	r2, [r3, #0]

    return LIS3DSH;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	461d      	mov	r5, r3
 8001f9a:	f107 040c 	add.w	r4, r7, #12
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	602b      	str	r3, [r5, #0]
}
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	3744      	adds	r7, #68	@ 0x44
 8001faa:	46bd      	mov	sp, r7
 8001fac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001fb0:	b004      	add	sp, #16
 8001fb2:	4770      	bx	lr
 8001fb4:	40990000 	.word	0x40990000
 8001fb8:	40200000 	.word	0x40200000

08001fbc <check_command_from_uart>:
* Returns a Command structure representing the parsed command. If the received command
* meets the expected format, the parsed command is returned with its components filled accordingly.
* Otherwise, a default Command structure with "UN" as cmd_id and "KNOWN" as cmd_data is returned,
* and the rx_buf is cleared.
*/
Command check_command_from_uart(uint8_t *rx_buf){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	Command cmd = {0};
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	721a      	strb	r2, [r3, #8]
	if ((rx_buf[0] == '<') && (rx_buf[9] == '>') && (rx_buf[3] == ' ')) {
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b3c      	cmp	r3, #60	@ 0x3c
 8001fd8:	d118      	bne.n	800200c <check_command_from_uart+0x50>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	3309      	adds	r3, #9
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fe2:	d113      	bne.n	800200c <check_command_from_uart+0x50>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d10e      	bne.n	800200c <check_command_from_uart+0x50>
		memcpy(cmd.cmd_id, &rx_buf[1], 2);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	81bb      	strh	r3, [r7, #12]
		memcpy(cmd.cmd_data, &rx_buf[4], 5);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	1d19      	adds	r1, r3, #4
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	3303      	adds	r3, #3
 8002002:	2205      	movs	r2, #5
 8002004:	4618      	mov	r0, r3
 8002006:	f011 faba 	bl	801357e <memcpy>
 800200a:	e013      	b.n	8002034 <check_command_from_uart+0x78>
	} else {
		memcpy(cmd.cmd_id, "UN", 2);
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2202      	movs	r2, #2
 8002012:	490f      	ldr	r1, [pc, #60]	@ (8002050 <check_command_from_uart+0x94>)
 8002014:	4618      	mov	r0, r3
 8002016:	f011 fab2 	bl	801357e <memcpy>
		memcpy(cmd.cmd_data, "KNOWN", 5);
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	3303      	adds	r3, #3
 8002020:	2205      	movs	r2, #5
 8002022:	490c      	ldr	r1, [pc, #48]	@ (8002054 <check_command_from_uart+0x98>)
 8002024:	4618      	mov	r0, r3
 8002026:	f011 faaa 	bl	801357e <memcpy>
		memset(rx_buf, 0, RXBUFF_SIZE);
 800202a:	220b      	movs	r2, #11
 800202c:	2100      	movs	r1, #0
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f011 f9b7 	bl	80133a2 <memset>
	}
	return cmd;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	cb03      	ldmia	r3!, {r0, r1}
 800203e:	6010      	str	r0, [r2, #0]
 8002040:	6051      	str	r1, [r2, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	7213      	strb	r3, [r2, #8]
}
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	08015c3c 	.word	0x08015c3c
 8002054:	08015c40 	.word	0x08015c40

08002058 <MY_User_Message>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MY_User_Message */
void MY_User_Message(void *argument)
{
 8002058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205c:	b0a5      	sub	sp, #148	@ 0x94
 800205e:	af0a      	add	r7, sp, #40	@ 0x28
 8002060:	60f8      	str	r0, [r7, #12]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002062:	f010 f84d 	bl	8012100 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  LIS3DSH_DataScaled myLIS3DSH;
  My_RTC_Data RTC_data;
  My_RTC_Data RTC_time_to_set;
  Command cmd;
  size_t size = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 800206a:	4bac      	ldr	r3, [pc, #688]	@ (800231c <MY_User_Message+0x2c4>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002076:	2200      	movs	r2, #0
 8002078:	f00c fcae 	bl	800e9d8 <osMessageQueueGet>
	osMessageQueueGet(RTC_DataHandle, &RTC_data, NULL, osWaitForever);
 800207c:	4ba8      	ldr	r3, [pc, #672]	@ (8002320 <MY_User_Message+0x2c8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002088:	2200      	movs	r2, #0
 800208a:	f00c fca5 	bl	800e9d8 <osMessageQueueGet>
	osMessageQueueGet(CMD_ProcDataHandle, &cmd, NULL, osWaitForever);
 800208e:	4ba5      	ldr	r3, [pc, #660]	@ (8002324 <MY_User_Message+0x2cc>)
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	f107 0114 	add.w	r1, r7, #20
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209a:	2200      	movs	r2, #0
 800209c:	f00c fc9c 	bl	800e9d8 <osMessageQueueGet>
	if(strcmp((char *)cmd.cmd_id, "RO") == 0) {
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	49a0      	ldr	r1, [pc, #640]	@ (8002328 <MY_User_Message+0x2d0>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f892 	bl	80001d0 <strcmp>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8171 	bne.w	8002396 <MY_User_Message+0x33e>
		if(strcmp((char *)cmd.cmd_data, "ACCEL") == 0){
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	3303      	adds	r3, #3
 80020ba:	499c      	ldr	r1, [pc, #624]	@ (800232c <MY_User_Message+0x2d4>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe f887 	bl	80001d0 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13d      	bne.n	8002144 <MY_User_Message+0xec>
			size = sprintf ((char *)msg_buffer, "Time: %02d-%02d-%02d %02d:%02d:%02d\nPitch: %f\nRoll: %f\n", RTC_data.sDate.Date, RTC_data.sDate.Month, RTC_data.sDate.Year, RTC_data.sTime.Hours, RTC_data.sTime.Minutes, RTC_data.sTime.Seconds, myLIS3DSH.pitch, myLIS3DSH.roll);
 80020c8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80020cc:	4698      	mov	r8, r3
 80020ce:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80020d2:	4699      	mov	r9, r3
 80020d4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80020d8:	461e      	mov	r6, r3
 80020da:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa3a 	bl	8000568 <__aeabi_f2d>
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa34 	bl	8000568 <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002108:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	9203      	str	r2, [sp, #12]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	9202      	str	r2, [sp, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	9600      	str	r6, [sp, #0]
 800211a:	464b      	mov	r3, r9
 800211c:	4642      	mov	r2, r8
 800211e:	4984      	ldr	r1, [pc, #528]	@ (8002330 <MY_User_Message+0x2d8>)
 8002120:	4884      	ldr	r0, [pc, #528]	@ (8002334 <MY_User_Message+0x2dc>)
 8002122:	f011 f8db 	bl	80132dc <siprintf>
 8002126:	4603      	mov	r3, r0
 8002128:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 800212a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800212c:	b29a      	uxth	r2, r3
 800212e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002132:	4980      	ldr	r1, [pc, #512]	@ (8002334 <MY_User_Message+0x2dc>)
 8002134:	4880      	ldr	r0, [pc, #512]	@ (8002338 <MY_User_Message+0x2e0>)
 8002136:	f007 fb5b 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 800213a:	497e      	ldr	r1, [pc, #504]	@ (8002334 <MY_User_Message+0x2dc>)
 800213c:	487f      	ldr	r0, [pc, #508]	@ (800233c <MY_User_Message+0x2e4>)
 800213e:	f011 f8bb 	bl	80132b8 <iprintf>
 8002142:	e792      	b.n	800206a <MY_User_Message+0x12>
		} else if(strcmp((char *)cmd.cmd_data, "RAWAC") == 0) {
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	3303      	adds	r3, #3
 800214a:	497d      	ldr	r1, [pc, #500]	@ (8002340 <MY_User_Message+0x2e8>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f83f 	bl	80001d0 <strcmp>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d145      	bne.n	80021e4 <MY_User_Message+0x18c>
			size = sprintf ((char *)msg_buffer, "Time: %02d-%02d-%02d %02d:%02d:%02d\nRaw x: %f\nRaw y: %f\nRaw z: %f\n", RTC_data.sDate.Date, RTC_data.sDate.Month, RTC_data.sDate.Year, RTC_data.sTime.Hours, RTC_data.sTime.Minutes, RTC_data.sTime.Seconds, myLIS3DSH.x, myLIS3DSH.y, myLIS3DSH.z);
 8002158:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800215c:	469a      	mov	sl, r3
 800215e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002162:	469b      	mov	fp, r3
 8002164:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002168:	461e      	mov	r6, r3
 800216a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9f2 	bl	8000568 <__aeabi_f2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9ec 	bl	8000568 <__aeabi_f2d>
 8002190:	4680      	mov	r8, r0
 8002192:	4689      	mov	r9, r1
 8002194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9e6 	bl	8000568 <__aeabi_f2d>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80021a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80021a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	9203      	str	r2, [sp, #12]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	9202      	str	r2, [sp, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	9600      	str	r6, [sp, #0]
 80021ba:	465b      	mov	r3, fp
 80021bc:	4652      	mov	r2, sl
 80021be:	4961      	ldr	r1, [pc, #388]	@ (8002344 <MY_User_Message+0x2ec>)
 80021c0:	485c      	ldr	r0, [pc, #368]	@ (8002334 <MY_User_Message+0x2dc>)
 80021c2:	f011 f88b 	bl	80132dc <siprintf>
 80021c6:	4603      	mov	r3, r0
 80021c8:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 80021ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80021d2:	4958      	ldr	r1, [pc, #352]	@ (8002334 <MY_User_Message+0x2dc>)
 80021d4:	4858      	ldr	r0, [pc, #352]	@ (8002338 <MY_User_Message+0x2e0>)
 80021d6:	f007 fb0b 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 80021da:	4956      	ldr	r1, [pc, #344]	@ (8002334 <MY_User_Message+0x2dc>)
 80021dc:	4857      	ldr	r0, [pc, #348]	@ (800233c <MY_User_Message+0x2e4>)
 80021de:	f011 f86b 	bl	80132b8 <iprintf>
 80021e2:	e742      	b.n	800206a <MY_User_Message+0x12>
		} else if(strcmp((char *)cmd.cmd_data, "RTCDA") == 0) {
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	3303      	adds	r3, #3
 80021ea:	4957      	ldr	r1, [pc, #348]	@ (8002348 <MY_User_Message+0x2f0>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fd ffef 	bl	80001d0 <strcmp>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d11c      	bne.n	8002232 <MY_User_Message+0x1da>
			size = sprintf ((char *)msg_buffer, "%02d-%02d-20%02d\n", RTC_data.sDate.Date, RTC_data.sDate.Month, RTC_data.sDate.Year);
 80021f8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80021fc:	461a      	mov	r2, r3
 80021fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002202:	4619      	mov	r1, r3
 8002204:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	460b      	mov	r3, r1
 800220c:	494f      	ldr	r1, [pc, #316]	@ (800234c <MY_User_Message+0x2f4>)
 800220e:	4849      	ldr	r0, [pc, #292]	@ (8002334 <MY_User_Message+0x2dc>)
 8002210:	f011 f864 	bl	80132dc <siprintf>
 8002214:	4603      	mov	r3, r0
 8002216:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 8002218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800221a:	b29a      	uxth	r2, r3
 800221c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002220:	4944      	ldr	r1, [pc, #272]	@ (8002334 <MY_User_Message+0x2dc>)
 8002222:	4845      	ldr	r0, [pc, #276]	@ (8002338 <MY_User_Message+0x2e0>)
 8002224:	f007 fae4 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 8002228:	4942      	ldr	r1, [pc, #264]	@ (8002334 <MY_User_Message+0x2dc>)
 800222a:	4844      	ldr	r0, [pc, #272]	@ (800233c <MY_User_Message+0x2e4>)
 800222c:	f011 f844 	bl	80132b8 <iprintf>
 8002230:	e71b      	b.n	800206a <MY_User_Message+0x12>
		} else if(strcmp((char *)cmd.cmd_data, "RTCTI") == 0) {
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	3303      	adds	r3, #3
 8002238:	4945      	ldr	r1, [pc, #276]	@ (8002350 <MY_User_Message+0x2f8>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fd ffc8 	bl	80001d0 <strcmp>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11c      	bne.n	8002280 <MY_User_Message+0x228>
			size = sprintf ((char *)msg_buffer, "%02d:%02d:%02d\n", RTC_data.sTime.Hours, RTC_data.sTime.Minutes, RTC_data.sTime.Seconds);
 8002246:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800224a:	461a      	mov	r2, r3
 800224c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002250:	4619      	mov	r1, r3
 8002252:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	460b      	mov	r3, r1
 800225a:	493e      	ldr	r1, [pc, #248]	@ (8002354 <MY_User_Message+0x2fc>)
 800225c:	4835      	ldr	r0, [pc, #212]	@ (8002334 <MY_User_Message+0x2dc>)
 800225e:	f011 f83d 	bl	80132dc <siprintf>
 8002262:	4603      	mov	r3, r0
 8002264:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 8002266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002268:	b29a      	uxth	r2, r3
 800226a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800226e:	4931      	ldr	r1, [pc, #196]	@ (8002334 <MY_User_Message+0x2dc>)
 8002270:	4831      	ldr	r0, [pc, #196]	@ (8002338 <MY_User_Message+0x2e0>)
 8002272:	f007 fabd 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 8002276:	492f      	ldr	r1, [pc, #188]	@ (8002334 <MY_User_Message+0x2dc>)
 8002278:	4830      	ldr	r0, [pc, #192]	@ (800233c <MY_User_Message+0x2e4>)
 800227a:	f011 f81d 	bl	80132b8 <iprintf>
 800227e:	e6f4      	b.n	800206a <MY_User_Message+0x12>
		} else if(strcmp((char *)cmd.cmd_data, "RTCHO") == 0) {
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	3303      	adds	r3, #3
 8002286:	4934      	ldr	r1, [pc, #208]	@ (8002358 <MY_User_Message+0x300>)
 8002288:	4618      	mov	r0, r3
 800228a:	f7fd ffa1 	bl	80001d0 <strcmp>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d126      	bne.n	80022e2 <MY_User_Message+0x28a>
			size = sprintf ((char *)msg_buffer, "%02d-%02d-20%02d %02d:%02d:%02d\n",RTC_data.sDate.Date, RTC_data.sDate.Month, RTC_data.sDate.Year, RTC_data.sTime.Hours, RTC_data.sTime.Minutes, RTC_data.sTime.Seconds);
 8002294:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002298:	461c      	mov	r4, r3
 800229a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800229e:	461d      	mov	r5, r3
 80022a0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80022a4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80022a8:	f897 103d 	ldrb.w	r1, [r7, #61]	@ 0x3d
 80022ac:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
 80022b0:	9003      	str	r0, [sp, #12]
 80022b2:	9102      	str	r1, [sp, #8]
 80022b4:	9201      	str	r2, [sp, #4]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	462b      	mov	r3, r5
 80022ba:	4622      	mov	r2, r4
 80022bc:	4927      	ldr	r1, [pc, #156]	@ (800235c <MY_User_Message+0x304>)
 80022be:	481d      	ldr	r0, [pc, #116]	@ (8002334 <MY_User_Message+0x2dc>)
 80022c0:	f011 f80c 	bl	80132dc <siprintf>
 80022c4:	4603      	mov	r3, r0
 80022c6:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 80022c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80022d0:	4918      	ldr	r1, [pc, #96]	@ (8002334 <MY_User_Message+0x2dc>)
 80022d2:	4819      	ldr	r0, [pc, #100]	@ (8002338 <MY_User_Message+0x2e0>)
 80022d4:	f007 fa8c 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <MY_User_Message+0x2dc>)
 80022da:	4818      	ldr	r0, [pc, #96]	@ (800233c <MY_User_Message+0x2e4>)
 80022dc:	f010 ffec 	bl	80132b8 <iprintf>
 80022e0:	e6c3      	b.n	800206a <MY_User_Message+0x12>
		} else if(strcmp((char *)cmd.cmd_data, "-HELP") == 0) {
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	3303      	adds	r3, #3
 80022e8:	491d      	ldr	r1, [pc, #116]	@ (8002360 <MY_User_Message+0x308>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fd ff70 	bl	80001d0 <strcmp>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d138      	bne.n	8002368 <MY_User_Message+0x310>
			size = sprintf ((char *)msg_buffer, "Available read commands\nRTCDA - get DD/MM/YY\nRTCTI - get HH/MM/SS\nRTCHO - get both time and date\nACCEL - get boards angles relative to sensors measurement\n");
 80022f6:	491b      	ldr	r1, [pc, #108]	@ (8002364 <MY_User_Message+0x30c>)
 80022f8:	480e      	ldr	r0, [pc, #56]	@ (8002334 <MY_User_Message+0x2dc>)
 80022fa:	f010 ffef 	bl	80132dc <siprintf>
 80022fe:	4603      	mov	r3, r0
 8002300:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 8002302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002304:	b29a      	uxth	r2, r3
 8002306:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <MY_User_Message+0x2dc>)
 800230c:	480a      	ldr	r0, [pc, #40]	@ (8002338 <MY_User_Message+0x2e0>)
 800230e:	f007 fa6f 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <MY_User_Message+0x2dc>)
 8002314:	4809      	ldr	r0, [pc, #36]	@ (800233c <MY_User_Message+0x2e4>)
 8002316:	f010 ffcf 	bl	80132b8 <iprintf>
 800231a:	e6a6      	b.n	800206a <MY_User_Message+0x12>
 800231c:	2000054c 	.word	0x2000054c
 8002320:	20000550 	.word	0x20000550
 8002324:	20000554 	.word	0x20000554
 8002328:	08015c48 	.word	0x08015c48
 800232c:	08015c4c 	.word	0x08015c4c
 8002330:	08015c54 	.word	0x08015c54
 8002334:	20000d94 	.word	0x20000d94
 8002338:	20000484 	.word	0x20000484
 800233c:	08015c8c 	.word	0x08015c8c
 8002340:	08015c90 	.word	0x08015c90
 8002344:	08015c98 	.word	0x08015c98
 8002348:	08015cdc 	.word	0x08015cdc
 800234c:	08015ce4 	.word	0x08015ce4
 8002350:	08015cf8 	.word	0x08015cf8
 8002354:	08015d00 	.word	0x08015d00
 8002358:	08015d10 	.word	0x08015d10
 800235c:	08015d18 	.word	0x08015d18
 8002360:	08015d3c 	.word	0x08015d3c
 8002364:	08015d44 	.word	0x08015d44
		} else {
			size = sprintf ((char *)msg_buffer, "Unknown read command. Available command can view with -HELP \nCMD_DATA: %s\n", (char *) cmd.cmd_data);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	3303      	adds	r3, #3
 800236e:	461a      	mov	r2, r3
 8002370:	4999      	ldr	r1, [pc, #612]	@ (80025d8 <MY_User_Message+0x580>)
 8002372:	489a      	ldr	r0, [pc, #616]	@ (80025dc <MY_User_Message+0x584>)
 8002374:	f010 ffb2 	bl	80132dc <siprintf>
 8002378:	4603      	mov	r3, r0
 800237a:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 800237c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237e:	b29a      	uxth	r2, r3
 8002380:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002384:	4995      	ldr	r1, [pc, #596]	@ (80025dc <MY_User_Message+0x584>)
 8002386:	4896      	ldr	r0, [pc, #600]	@ (80025e0 <MY_User_Message+0x588>)
 8002388:	f007 fa32 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 800238c:	4993      	ldr	r1, [pc, #588]	@ (80025dc <MY_User_Message+0x584>)
 800238e:	4895      	ldr	r0, [pc, #596]	@ (80025e4 <MY_User_Message+0x58c>)
 8002390:	f010 ff92 	bl	80132b8 <iprintf>
 8002394:	e669      	b.n	800206a <MY_User_Message+0x12>
		}
	} else if(strcmp((char *)cmd.cmd_id, "WO") == 0) {
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4993      	ldr	r1, [pc, #588]	@ (80025e8 <MY_User_Message+0x590>)
 800239c:	4618      	mov	r0, r3
 800239e:	f7fd ff17 	bl	80001d0 <strcmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 81de 	bne.w	8002766 <MY_User_Message+0x70e>
		if(cmd.cmd_data[0] == 'T' && cmd.cmd_data[1] == 'S' && cmd.cmd_data[2] == ':'){
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b54      	cmp	r3, #84	@ 0x54
 80023ae:	d133      	bne.n	8002418 <MY_User_Message+0x3c0>
 80023b0:	7e3b      	ldrb	r3, [r7, #24]
 80023b2:	2b53      	cmp	r3, #83	@ 0x53
 80023b4:	d130      	bne.n	8002418 <MY_User_Message+0x3c0>
 80023b6:	7e7b      	ldrb	r3, [r7, #25]
 80023b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80023ba:	d12d      	bne.n	8002418 <MY_User_Message+0x3c0>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 80023bc:	7ebb      	ldrb	r3, [r7, #26]
 80023be:	461a      	mov	r2, r3
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3320      	adds	r3, #32
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 80023ce:	7efa      	ldrb	r2, [r7, #27]
 80023d0:	7ebb      	ldrb	r3, [r7, #26]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b30      	subs	r3, #48	@ 0x30
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 60 && cmd.cmd_data[4] >= 0)
 80023dc:	7efb      	ldrb	r3, [r7, #27]
 80023de:	2b3c      	cmp	r3, #60	@ 0x3c
 80023e0:	f200 81d8 	bhi.w	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sTime.Seconds = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[4] % 10);
 80023e4:	7efb      	ldrb	r3, [r7, #27]
 80023e6:	4a81      	ldr	r2, [pc, #516]	@ (80025ec <MY_User_Message+0x594>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	b258      	sxtb	r0, r3
 80023f4:	7efa      	ldrb	r2, [r7, #27]
 80023f6:	4b7d      	ldr	r3, [pc, #500]	@ (80025ec <MY_User_Message+0x594>)
 80023f8:	fba3 1302 	umull	r1, r3, r3, r2
 80023fc:	08d9      	lsrs	r1, r3, #3
 80023fe:	460b      	mov	r3, r1
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	b25b      	sxtb	r3, r3
 800240c:	4303      	orrs	r3, r0
 800240e:	b25b      	sxtb	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if(cmd.cmd_data[4] <= 60 && cmd.cmd_data[4] >= 0)
 8002416:	e1bd      	b.n	8002794 <MY_User_Message+0x73c>
		} else if(cmd.cmd_data[0] == 'T' && cmd.cmd_data[1] == 'M' && cmd.cmd_data[2] == ':') {
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b54      	cmp	r3, #84	@ 0x54
 800241c:	d133      	bne.n	8002486 <MY_User_Message+0x42e>
 800241e:	7e3b      	ldrb	r3, [r7, #24]
 8002420:	2b4d      	cmp	r3, #77	@ 0x4d
 8002422:	d130      	bne.n	8002486 <MY_User_Message+0x42e>
 8002424:	7e7b      	ldrb	r3, [r7, #25]
 8002426:	2b3a      	cmp	r3, #58	@ 0x3a
 8002428:	d12d      	bne.n	8002486 <MY_User_Message+0x42e>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 800242a:	7ebb      	ldrb	r3, [r7, #26]
 800242c:	461a      	mov	r2, r3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4413      	add	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3320      	adds	r3, #32
 8002438:	b2db      	uxtb	r3, r3
 800243a:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 800243c:	7efa      	ldrb	r2, [r7, #27]
 800243e:	7ebb      	ldrb	r3, [r7, #26]
 8002440:	4413      	add	r3, r2
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3b30      	subs	r3, #48	@ 0x30
 8002446:	b2db      	uxtb	r3, r3
 8002448:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 60 && cmd.cmd_data[4] >= 0)
 800244a:	7efb      	ldrb	r3, [r7, #27]
 800244c:	2b3c      	cmp	r3, #60	@ 0x3c
 800244e:	f200 81a1 	bhi.w	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sTime.Minutes = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[4] % 10);
 8002452:	7efb      	ldrb	r3, [r7, #27]
 8002454:	4a65      	ldr	r2, [pc, #404]	@ (80025ec <MY_User_Message+0x594>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	b258      	sxtb	r0, r3
 8002462:	7efa      	ldrb	r2, [r7, #27]
 8002464:	4b61      	ldr	r3, [pc, #388]	@ (80025ec <MY_User_Message+0x594>)
 8002466:	fba3 1302 	umull	r1, r3, r3, r2
 800246a:	08d9      	lsrs	r1, r3, #3
 800246c:	460b      	mov	r3, r1
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	b25b      	sxtb	r3, r3
 800247a:	4303      	orrs	r3, r0
 800247c:	b25b      	sxtb	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if(cmd.cmd_data[4] <= 60 && cmd.cmd_data[4] >= 0)
 8002484:	e186      	b.n	8002794 <MY_User_Message+0x73c>
		} else if(cmd.cmd_data[0] == 'T' && cmd.cmd_data[1] == 'H' && cmd.cmd_data[2] == ':') {
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b54      	cmp	r3, #84	@ 0x54
 800248a:	d136      	bne.n	80024fa <MY_User_Message+0x4a2>
 800248c:	7e3b      	ldrb	r3, [r7, #24]
 800248e:	2b48      	cmp	r3, #72	@ 0x48
 8002490:	d133      	bne.n	80024fa <MY_User_Message+0x4a2>
 8002492:	7e7b      	ldrb	r3, [r7, #25]
 8002494:	2b3a      	cmp	r3, #58	@ 0x3a
 8002496:	d130      	bne.n	80024fa <MY_User_Message+0x4a2>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 8002498:	7ebb      	ldrb	r3, [r7, #26]
 800249a:	461a      	mov	r2, r3
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3320      	adds	r3, #32
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 80024aa:	7efa      	ldrb	r2, [r7, #27]
 80024ac:	7ebb      	ldrb	r3, [r7, #26]
 80024ae:	4413      	add	r3, r2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3b30      	subs	r3, #48	@ 0x30
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 24 && cmd.cmd_data[4] >= 0)
 80024b8:	7efb      	ldrb	r3, [r7, #27]
 80024ba:	2b18      	cmp	r3, #24
 80024bc:	f200 816a 	bhi.w	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sTime.Hours = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[3] + cmd.cmd_data[4] % 10);
 80024c0:	7efb      	ldrb	r3, [r7, #27]
 80024c2:	4a4a      	ldr	r2, [pc, #296]	@ (80025ec <MY_User_Message+0x594>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	b258      	sxtb	r0, r3
 80024d0:	7ebc      	ldrb	r4, [r7, #26]
 80024d2:	7efa      	ldrb	r2, [r7, #27]
 80024d4:	4b45      	ldr	r3, [pc, #276]	@ (80025ec <MY_User_Message+0x594>)
 80024d6:	fba3 1302 	umull	r1, r3, r3, r2
 80024da:	08d9      	lsrs	r1, r3, #3
 80024dc:	460b      	mov	r3, r1
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4423      	add	r3, r4
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	4303      	orrs	r3, r0
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if(cmd.cmd_data[4] <= 24 && cmd.cmd_data[4] >= 0)
 80024f8:	e14c      	b.n	8002794 <MY_User_Message+0x73c>
		} else if(cmd.cmd_data[0] == 'D' && cmd.cmd_data[1] == 'D' && cmd.cmd_data[2] == ':'){
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
 80024fc:	2b44      	cmp	r3, #68	@ 0x44
 80024fe:	d133      	bne.n	8002568 <MY_User_Message+0x510>
 8002500:	7e3b      	ldrb	r3, [r7, #24]
 8002502:	2b44      	cmp	r3, #68	@ 0x44
 8002504:	d130      	bne.n	8002568 <MY_User_Message+0x510>
 8002506:	7e7b      	ldrb	r3, [r7, #25]
 8002508:	2b3a      	cmp	r3, #58	@ 0x3a
 800250a:	d12d      	bne.n	8002568 <MY_User_Message+0x510>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 800250c:	7ebb      	ldrb	r3, [r7, #26]
 800250e:	461a      	mov	r2, r3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3320      	adds	r3, #32
 800251a:	b2db      	uxtb	r3, r3
 800251c:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 800251e:	7efa      	ldrb	r2, [r7, #27]
 8002520:	7ebb      	ldrb	r3, [r7, #26]
 8002522:	4413      	add	r3, r2
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3b30      	subs	r3, #48	@ 0x30
 8002528:	b2db      	uxtb	r3, r3
 800252a:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 31 && cmd.cmd_data[4] >= 0)
 800252c:	7efb      	ldrb	r3, [r7, #27]
 800252e:	2b1f      	cmp	r3, #31
 8002530:	f200 8130 	bhi.w	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sDate.Date = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[4] % 10);
 8002534:	7efb      	ldrb	r3, [r7, #27]
 8002536:	4a2d      	ldr	r2, [pc, #180]	@ (80025ec <MY_User_Message+0x594>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	b258      	sxtb	r0, r3
 8002544:	7efa      	ldrb	r2, [r7, #27]
 8002546:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <MY_User_Message+0x594>)
 8002548:	fba3 1302 	umull	r1, r3, r3, r2
 800254c:	08d9      	lsrs	r1, r3, #3
 800254e:	460b      	mov	r3, r1
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	b25b      	sxtb	r3, r3
 800255c:	4303      	orrs	r3, r0
 800255e:	b25b      	sxtb	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			if(cmd.cmd_data[4] <= 31 && cmd.cmd_data[4] >= 0)
 8002566:	e115      	b.n	8002794 <MY_User_Message+0x73c>
		} else if(cmd.cmd_data[0] == 'D' && cmd.cmd_data[1] == 'M' && cmd.cmd_data[2] == ':') {
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b44      	cmp	r3, #68	@ 0x44
 800256c:	d140      	bne.n	80025f0 <MY_User_Message+0x598>
 800256e:	7e3b      	ldrb	r3, [r7, #24]
 8002570:	2b4d      	cmp	r3, #77	@ 0x4d
 8002572:	d13d      	bne.n	80025f0 <MY_User_Message+0x598>
 8002574:	7e7b      	ldrb	r3, [r7, #25]
 8002576:	2b3a      	cmp	r3, #58	@ 0x3a
 8002578:	d13a      	bne.n	80025f0 <MY_User_Message+0x598>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 800257a:	7ebb      	ldrb	r3, [r7, #26]
 800257c:	461a      	mov	r2, r3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4413      	add	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3320      	adds	r3, #32
 8002588:	b2db      	uxtb	r3, r3
 800258a:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 800258c:	7efa      	ldrb	r2, [r7, #27]
 800258e:	7ebb      	ldrb	r3, [r7, #26]
 8002590:	4413      	add	r3, r2
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3b30      	subs	r3, #48	@ 0x30
 8002596:	b2db      	uxtb	r3, r3
 8002598:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 12 && cmd.cmd_data[4] >= 0)
 800259a:	7efb      	ldrb	r3, [r7, #27]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	f200 80f9 	bhi.w	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sDate.Month = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[4] % 10);
 80025a2:	7efb      	ldrb	r3, [r7, #27]
 80025a4:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <MY_User_Message+0x594>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	b258      	sxtb	r0, r3
 80025b2:	7efa      	ldrb	r2, [r7, #27]
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <MY_User_Message+0x594>)
 80025b6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ba:	08d9      	lsrs	r1, r3, #3
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	4303      	orrs	r3, r0
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			if(cmd.cmd_data[4] <= 12 && cmd.cmd_data[4] >= 0)
 80025d4:	e0de      	b.n	8002794 <MY_User_Message+0x73c>
 80025d6:	bf00      	nop
 80025d8:	08015de0 	.word	0x08015de0
 80025dc:	20000d94 	.word	0x20000d94
 80025e0:	20000484 	.word	0x20000484
 80025e4:	08015c8c 	.word	0x08015c8c
 80025e8:	08015e2c 	.word	0x08015e2c
 80025ec:	cccccccd 	.word	0xcccccccd
		} else if(cmd.cmd_data[0] == 'D' && cmd.cmd_data[1] == 'W' && cmd.cmd_data[2] == ':') {
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b44      	cmp	r3, #68	@ 0x44
 80025f4:	d133      	bne.n	800265e <MY_User_Message+0x606>
 80025f6:	7e3b      	ldrb	r3, [r7, #24]
 80025f8:	2b57      	cmp	r3, #87	@ 0x57
 80025fa:	d130      	bne.n	800265e <MY_User_Message+0x606>
 80025fc:	7e7b      	ldrb	r3, [r7, #25]
 80025fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8002600:	d12d      	bne.n	800265e <MY_User_Message+0x606>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 8002602:	7ebb      	ldrb	r3, [r7, #26]
 8002604:	461a      	mov	r2, r3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3320      	adds	r3, #32
 8002610:	b2db      	uxtb	r3, r3
 8002612:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 8002614:	7efa      	ldrb	r2, [r7, #27]
 8002616:	7ebb      	ldrb	r3, [r7, #26]
 8002618:	4413      	add	r3, r2
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3b30      	subs	r3, #48	@ 0x30
 800261e:	b2db      	uxtb	r3, r3
 8002620:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 7 && cmd.cmd_data[4] >= 0)
 8002622:	7efb      	ldrb	r3, [r7, #27]
 8002624:	2b07      	cmp	r3, #7
 8002626:	f200 80b5 	bhi.w	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sDate.WeekDay = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[4] % 10);
 800262a:	7efb      	ldrb	r3, [r7, #27]
 800262c:	4a5a      	ldr	r2, [pc, #360]	@ (8002798 <MY_User_Message+0x740>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	b258      	sxtb	r0, r3
 800263a:	7efa      	ldrb	r2, [r7, #27]
 800263c:	4b56      	ldr	r3, [pc, #344]	@ (8002798 <MY_User_Message+0x740>)
 800263e:	fba3 1302 	umull	r1, r3, r3, r2
 8002642:	08d9      	lsrs	r1, r3, #3
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	b25b      	sxtb	r3, r3
 8002652:	4303      	orrs	r3, r0
 8002654:	b25b      	sxtb	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f887 3020 	strb.w	r3, [r7, #32]
			if(cmd.cmd_data[4] <= 7 && cmd.cmd_data[4] >= 0)
 800265c:	e09a      	b.n	8002794 <MY_User_Message+0x73c>
		}else if(cmd.cmd_data[0] == 'D' && cmd.cmd_data[1] == 'Y' && cmd.cmd_data[2] == ':') {
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b44      	cmp	r3, #68	@ 0x44
 8002662:	d132      	bne.n	80026ca <MY_User_Message+0x672>
 8002664:	7e3b      	ldrb	r3, [r7, #24]
 8002666:	2b59      	cmp	r3, #89	@ 0x59
 8002668:	d12f      	bne.n	80026ca <MY_User_Message+0x672>
 800266a:	7e7b      	ldrb	r3, [r7, #25]
 800266c:	2b3a      	cmp	r3, #58	@ 0x3a
 800266e:	d12c      	bne.n	80026ca <MY_User_Message+0x672>
			cmd.cmd_data[3] = (cmd.cmd_data[3] - '0') * 10;
 8002670:	7ebb      	ldrb	r3, [r7, #26]
 8002672:	461a      	mov	r2, r3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4413      	add	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3320      	adds	r3, #32
 800267e:	b2db      	uxtb	r3, r3
 8002680:	76bb      	strb	r3, [r7, #26]
			cmd.cmd_data[4] = cmd.cmd_data[4] - '0' + cmd.cmd_data[3];
 8002682:	7efa      	ldrb	r2, [r7, #27]
 8002684:	7ebb      	ldrb	r3, [r7, #26]
 8002686:	4413      	add	r3, r2
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3b30      	subs	r3, #48	@ 0x30
 800268c:	b2db      	uxtb	r3, r3
 800268e:	76fb      	strb	r3, [r7, #27]
			if(cmd.cmd_data[4] <= 100 && cmd.cmd_data[4] >= 0)
 8002690:	7efb      	ldrb	r3, [r7, #27]
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d87e      	bhi.n	8002794 <MY_User_Message+0x73c>
				RTC_time_to_set.sDate.Year = ((cmd.cmd_data[4] / 10) << 4) | (cmd.cmd_data[4] % 10);
 8002696:	7efb      	ldrb	r3, [r7, #27]
 8002698:	4a3f      	ldr	r2, [pc, #252]	@ (8002798 <MY_User_Message+0x740>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	b258      	sxtb	r0, r3
 80026a6:	7efa      	ldrb	r2, [r7, #27]
 80026a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <MY_User_Message+0x740>)
 80026aa:	fba3 1302 	umull	r1, r3, r3, r2
 80026ae:	08d9      	lsrs	r1, r3, #3
 80026b0:	460b      	mov	r3, r1
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	4303      	orrs	r3, r0
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if(cmd.cmd_data[4] <= 100 && cmd.cmd_data[4] >= 0)
 80026c8:	e064      	b.n	8002794 <MY_User_Message+0x73c>
		} else if(strcmp((char *)cmd.cmd_data, "TCONF") == 0) {
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	3303      	adds	r3, #3
 80026d0:	4932      	ldr	r1, [pc, #200]	@ (800279c <MY_User_Message+0x744>)
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fd7c 	bl	80001d0 <strcmp>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <MY_User_Message+0x6a6>
			HAL_RTC_SetDate(&hrtc, &RTC_time_to_set.sDate, RTC_FORMAT_BCD);
 80026de:	f107 0320 	add.w	r3, r7, #32
 80026e2:	2201      	movs	r2, #1
 80026e4:	4619      	mov	r1, r3
 80026e6:	482e      	ldr	r0, [pc, #184]	@ (80027a0 <MY_User_Message+0x748>)
 80026e8:	f005 fc55 	bl	8007f96 <HAL_RTC_SetDate>
			HAL_RTC_SetTime(&hrtc, &RTC_time_to_set.sTime, RTC_FORMAT_BCD);
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	3304      	adds	r3, #4
 80026f2:	2201      	movs	r2, #1
 80026f4:	4619      	mov	r1, r3
 80026f6:	482a      	ldr	r0, [pc, #168]	@ (80027a0 <MY_User_Message+0x748>)
 80026f8:	f005 fb55 	bl	8007da6 <HAL_RTC_SetTime>
 80026fc:	e4b5      	b.n	800206a <MY_User_Message+0x12>
		} else if(strcmp((char *)cmd.cmd_data, "-HELP") == 0) {
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	3303      	adds	r3, #3
 8002704:	4927      	ldr	r1, [pc, #156]	@ (80027a4 <MY_User_Message+0x74c>)
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd62 	bl	80001d0 <strcmp>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d112      	bne.n	8002738 <MY_User_Message+0x6e0>
			size = sprintf ((char *)msg_buffer, "Available write commands\nSETDA - set DD/MM/YY\nSETTI - set HH/MM/SS\nSETHO - set both time and date\n");
 8002712:	4925      	ldr	r1, [pc, #148]	@ (80027a8 <MY_User_Message+0x750>)
 8002714:	4825      	ldr	r0, [pc, #148]	@ (80027ac <MY_User_Message+0x754>)
 8002716:	f010 fde1 	bl	80132dc <siprintf>
 800271a:	4603      	mov	r3, r0
 800271c:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 800271e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002720:	b29a      	uxth	r2, r3
 8002722:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002726:	4921      	ldr	r1, [pc, #132]	@ (80027ac <MY_User_Message+0x754>)
 8002728:	4821      	ldr	r0, [pc, #132]	@ (80027b0 <MY_User_Message+0x758>)
 800272a:	f007 f861 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 800272e:	491f      	ldr	r1, [pc, #124]	@ (80027ac <MY_User_Message+0x754>)
 8002730:	4820      	ldr	r0, [pc, #128]	@ (80027b4 <MY_User_Message+0x75c>)
 8002732:	f010 fdc1 	bl	80132b8 <iprintf>
 8002736:	e498      	b.n	800206a <MY_User_Message+0x12>
		} else {
			size = sprintf ((char *)msg_buffer, "Unknown write command. Available command can view with -HELP \nCMD_DATA: %s\n", (char *) cmd.cmd_data);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	3303      	adds	r3, #3
 800273e:	461a      	mov	r2, r3
 8002740:	491d      	ldr	r1, [pc, #116]	@ (80027b8 <MY_User_Message+0x760>)
 8002742:	481a      	ldr	r0, [pc, #104]	@ (80027ac <MY_User_Message+0x754>)
 8002744:	f010 fdca 	bl	80132dc <siprintf>
 8002748:	4603      	mov	r3, r0
 800274a:	667b      	str	r3, [r7, #100]	@ 0x64
			HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 800274c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800274e:	b29a      	uxth	r2, r3
 8002750:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002754:	4915      	ldr	r1, [pc, #84]	@ (80027ac <MY_User_Message+0x754>)
 8002756:	4816      	ldr	r0, [pc, #88]	@ (80027b0 <MY_User_Message+0x758>)
 8002758:	f007 f84a 	bl	80097f0 <HAL_UART_Transmit>
			printf("%s", msg_buffer);
 800275c:	4913      	ldr	r1, [pc, #76]	@ (80027ac <MY_User_Message+0x754>)
 800275e:	4815      	ldr	r0, [pc, #84]	@ (80027b4 <MY_User_Message+0x75c>)
 8002760:	f010 fdaa 	bl	80132b8 <iprintf>
 8002764:	e481      	b.n	800206a <MY_User_Message+0x12>
		}
	} else {
		size = sprintf ((char *)msg_buffer, "Unknown command.\nCMD ID: %s\nCMD_DATA: %s\n", (char *)cmd.cmd_id, (char *) cmd.cmd_data);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	3303      	adds	r3, #3
 800276c:	f107 0214 	add.w	r2, r7, #20
 8002770:	4912      	ldr	r1, [pc, #72]	@ (80027bc <MY_User_Message+0x764>)
 8002772:	480e      	ldr	r0, [pc, #56]	@ (80027ac <MY_User_Message+0x754>)
 8002774:	f010 fdb2 	bl	80132dc <siprintf>
 8002778:	4603      	mov	r3, r0
 800277a:	667b      	str	r3, [r7, #100]	@ 0x64
		HAL_UART_Transmit(&huart2, msg_buffer, size, 2000);
 800277c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800277e:	b29a      	uxth	r2, r3
 8002780:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002784:	4909      	ldr	r1, [pc, #36]	@ (80027ac <MY_User_Message+0x754>)
 8002786:	480a      	ldr	r0, [pc, #40]	@ (80027b0 <MY_User_Message+0x758>)
 8002788:	f007 f832 	bl	80097f0 <HAL_UART_Transmit>
		printf("%s", msg_buffer);
 800278c:	4907      	ldr	r1, [pc, #28]	@ (80027ac <MY_User_Message+0x754>)
 800278e:	4809      	ldr	r0, [pc, #36]	@ (80027b4 <MY_User_Message+0x75c>)
 8002790:	f010 fd92 	bl	80132b8 <iprintf>
    osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 8002794:	e469      	b.n	800206a <MY_User_Message+0x12>
 8002796:	bf00      	nop
 8002798:	cccccccd 	.word	0xcccccccd
 800279c:	08015e30 	.word	0x08015e30
 80027a0:	20000334 	.word	0x20000334
 80027a4:	08015d3c 	.word	0x08015d3c
 80027a8:	08015e38 	.word	0x08015e38
 80027ac:	20000d94 	.word	0x20000d94
 80027b0:	20000484 	.word	0x20000484
 80027b4:	08015c8c 	.word	0x08015c8c
 80027b8:	08015e9c 	.word	0x08015e9c
 80027bc:	08015ee8 	.word	0x08015ee8

080027c0 <MY_RTC_Time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_RTC_Time */
void MY_RTC_Time(void *argument)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_RTC_Time */
  My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027cc:	2101      	movs	r1, #1
 80027ce:	2001      	movs	r0, #1
 80027d0:	f00b ff92 	bl	800e6f8 <osThreadFlagsWait>
	HAL_RTC_GetTime(&hrtc, &RTC_data.sTime, RTC_FORMAT_BCD);
 80027d4:	f107 0308 	add.w	r3, r7, #8
 80027d8:	3304      	adds	r3, #4
 80027da:	2201      	movs	r2, #1
 80027dc:	4619      	mov	r1, r3
 80027de:	4837      	ldr	r0, [pc, #220]	@ (80028bc <MY_RTC_Time+0xfc>)
 80027e0:	f005 fb7b 	bl	8007eda <HAL_RTC_GetTime>
	RTC_data.sTime.Hours = ((RTC_data.sTime.Hours & 0xF0) >> 4) * 10 + (RTC_data.sTime.Hours & 0x0F);
 80027e4:	7b3b      	ldrb	r3, [r7, #12]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	7b3b      	ldrb	r3, [r7, #12]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	733b      	strb	r3, [r7, #12]
	RTC_data.sTime.Minutes = ((RTC_data.sTime.Minutes & 0xF0) >> 4) * 10 + (RTC_data.sTime.Minutes & 0x0F);
 8002802:	7b7b      	ldrb	r3, [r7, #13]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4413      	add	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	b2da      	uxtb	r2, r3
 8002812:	7b7b      	ldrb	r3, [r7, #13]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	b2db      	uxtb	r3, r3
 800281a:	4413      	add	r3, r2
 800281c:	b2db      	uxtb	r3, r3
 800281e:	737b      	strb	r3, [r7, #13]
	RTC_data.sTime.Seconds = ((RTC_data.sTime.Seconds & 0xF0) >> 4) * 10 + (RTC_data.sTime.Seconds & 0x0F);
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	0092      	lsls	r2, r2, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4413      	add	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	73bb      	strb	r3, [r7, #14]
	HAL_RTC_GetDate(&hrtc, &RTC_data.sDate, RTC_FORMAT_BCD);
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	2201      	movs	r2, #1
 8002844:	4619      	mov	r1, r3
 8002846:	481d      	ldr	r0, [pc, #116]	@ (80028bc <MY_RTC_Time+0xfc>)
 8002848:	f005 fc29 	bl	800809e <HAL_RTC_GetDate>
	RTC_data.sDate.Year = ((RTC_data.sDate.Year & 0xF0) >> 4) * 10 + (RTC_data.sDate.Year & 0x0F);
 800284c:	7afb      	ldrb	r3, [r7, #11]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	7afb      	ldrb	r3, [r7, #11]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4413      	add	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	72fb      	strb	r3, [r7, #11]
	RTC_data.sDate.Month = ((RTC_data.sDate.Month & 0xF0) >> 4) * 10 + (RTC_data.sDate.Month & 0x0F);
 800286a:	7a7b      	ldrb	r3, [r7, #9]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	7a7b      	ldrb	r3, [r7, #9]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4413      	add	r3, r2
 8002884:	b2db      	uxtb	r3, r3
 8002886:	727b      	strb	r3, [r7, #9]
	RTC_data.sDate.Date = ((RTC_data.sDate.Date & 0xF0) >> 4) * 10 + (RTC_data.sDate.Date & 0x0F);
 8002888:	7abb      	ldrb	r3, [r7, #10]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	7abb      	ldrb	r3, [r7, #10]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	72bb      	strb	r3, [r7, #10]
	osMessageQueuePut(RTC_DataHandle, &RTC_data, 10, 1);
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <MY_RTC_Time+0x100>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f107 0108 	add.w	r1, r7, #8
 80028ae:	2301      	movs	r3, #1
 80028b0:	220a      	movs	r2, #10
 80028b2:	f00c f831 	bl	800e918 <osMessageQueuePut>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80028b6:	bf00      	nop
 80028b8:	e786      	b.n	80027c8 <MY_RTC_Time+0x8>
 80028ba:	bf00      	nop
 80028bc:	20000334 	.word	0x20000334
 80028c0:	20000550 	.word	0x20000550

080028c4 <MY_Get_Acc_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Get_Acc_Data */
void MY_Get_Acc_Data(void *argument)
{
 80028c4:	b5b0      	push	{r4, r5, r7, lr}
 80028c6:	b090      	sub	sp, #64	@ 0x40
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN MY_Get_Acc_Data */
	LIS3DSH_InitTypeDef MY_LIS3DSH_Configuration;
	MY_LIS3DSH_Configuration.dataRate = LIS3DSH_DATARATE_1600;
 80028cc:	2390      	movs	r3, #144	@ 0x90
 80028ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	MY_LIS3DSH_Configuration.fullScale = LIS3DSH_FULLSCALE_4;
 80028d2:	2308      	movs	r3, #8
 80028d4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	MY_LIS3DSH_Configuration.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 80028d8:	23c0      	movs	r3, #192	@ 0xc0
 80028da:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	MY_LIS3DSH_Configuration.enableAxes = LIS3DSH_XYZ_ENABLE;
 80028de:	2307      	movs	r3, #7
 80028e0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	MY_LIS3DSH_Configuration.interruptEnable = true;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	LIS3DSH_Init(&hspi1, &MY_LIS3DSH_Configuration);
 80028ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028ee:	4619      	mov	r1, r3
 80028f0:	4812      	ldr	r0, [pc, #72]	@ (800293c <MY_Get_Acc_Data+0x78>)
 80028f2:	f7fe fb9f 	bl	8001034 <LIS3DSH_Init>
	LIS3DSH_DataScaled myLIS3DSH;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80028f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028fa:	2101      	movs	r1, #1
 80028fc:	2001      	movs	r0, #1
 80028fe:	f00b fefb 	bl	800e6f8 <osThreadFlagsWait>
	  myLIS3DSH = LIS3DSH_GetDataScaled();
 8002902:	463b      	mov	r3, r7
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fca3 	bl	8001250 <LIS3DSH_GetDataScaled>
 800290a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800290e:	463d      	mov	r5, r7
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	6023      	str	r3, [r4, #0]
	  g_myLIS3DSH = myLIS3DSH;
 8002918:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <MY_Get_Acc_Data+0x7c>)
 800291a:	461d      	mov	r5, r3
 800291c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	602b      	str	r3, [r5, #0]
	  osMessageQueuePut(LIS3DSH_DataScaledHandle, &myLIS3DSH, 10, 1);
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <MY_Get_Acc_Data+0x80>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002930:	2301      	movs	r3, #1
 8002932:	220a      	movs	r2, #10
 8002934:	f00b fff0 	bl	800e918 <osMessageQueuePut>
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8002938:	bf00      	nop
 800293a:	e7dc      	b.n	80028f6 <MY_Get_Acc_Data+0x32>
 800293c:	20000354 	.word	0x20000354
 8002940:	20000d60 	.word	0x20000d60
 8002944:	20000548 	.word	0x20000548

08002948 <my_Int_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_my_Int_Task */
void my_Int_Task(void *argument)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN my_Int_Task */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8002950:	2000      	movs	r0, #0
 8002952:	f00d f99d 	bl	800fc90 <vTaskSuspend>
 8002956:	e7fb      	b.n	8002950 <my_Int_Task+0x8>

08002958 <MY_freeRTOS_Task_Manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_freeRTOS_Task_Manager */
void MY_freeRTOS_Task_Manager(void *argument)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_freeRTOS_Task_Manager */
  /* Infinite loop */
  for(;;)
  {
	  task_manager.freemem = xPortGetFreeHeapSize();
 8002960:	f00f fb06 	bl	8011f70 <xPortGetFreeHeapSize>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <MY_freeRTOS_Task_Manager+0x2c>)
 800296a:	601a      	str	r2, [r3, #0]
	  vTaskList(task_manager.taskListBuffer);
 800296c:	4806      	ldr	r0, [pc, #24]	@ (8002988 <MY_freeRTOS_Task_Manager+0x30>)
 800296e:	f00e f8a7 	bl	8010ac0 <vTaskList>
	  vTaskGetRunTimeStats(task_manager.taskTimingBuffer);
 8002972:	4806      	ldr	r0, [pc, #24]	@ (800298c <MY_freeRTOS_Task_Manager+0x34>)
 8002974:	f00e f93a 	bl	8010bec <vTaskGetRunTimeStats>
	  osDelay(1000);
 8002978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800297c:	f00b ff3d 	bl	800e7fa <osDelay>
	  task_manager.freemem = xPortGetFreeHeapSize();
 8002980:	bf00      	nop
 8002982:	e7ed      	b.n	8002960 <MY_freeRTOS_Task_Manager+0x8>
 8002984:	2000055c 	.word	0x2000055c
 8002988:	20000560 	.word	0x20000560
 800298c:	20000960 	.word	0x20000960

08002990 <MY_Process_AccData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_AccData */
void MY_Process_AccData(void *argument)
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	f5ad 6d1c 	sub.w	sp, sp, #2496	@ 0x9c0
 8002996:	af04      	add	r7, sp, #16
 8002998:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800299c:	f6a3 1394 	subw	r3, r3, #2452	@ 0x994
 80029a0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN MY_Process_AccData */
	LIS3DSH_DataScaled myLIS3DSH;
	LIS3DSH_DataScaled myLIS3DSH_after_filter;
	uint16_t fill = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8a7 3982 	strh.w	r3, [r7, #2434]	@ 0x982
	uint8_t fill_buff = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 39af 	strb.w	r3, [r7, #2479]	@ 0x9af
	float moving_avg[3][sampling_rate] = {{0}};
 80029ae:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80029b2:	f5a3 6319 	sub.w	r3, r3, #2448	@ 0x990
 80029b6:	4618      	mov	r0, r3
 80029b8:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 80029bc:	461a      	mov	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	f010 fcef 	bl	80133a2 <memset>
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 80029c4:	4b4b      	ldr	r3, [pc, #300]	@ (8002af4 <MY_Process_AccData+0x164>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f607 1198 	addw	r1, r7, #2456	@ 0x998
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029d0:	2200      	movs	r2, #0
 80029d2:	f00c f801 	bl	800e9d8 <osMessageQueueGet>
	if(fill < sampling_rate && fill_buff == 0){
 80029d6:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	@ 0x982
 80029da:	2bc7      	cmp	r3, #199	@ 0xc7
 80029dc:	d83c      	bhi.n	8002a58 <MY_Process_AccData+0xc8>
 80029de:	f897 39af 	ldrb.w	r3, [r7, #2479]	@ 0x9af
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d138      	bne.n	8002a58 <MY_Process_AccData+0xc8>
		moving_avg[0][fill] = myLIS3DSH.x;
 80029e6:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	@ 0x982
 80029ea:	4618      	mov	r0, r3
 80029ec:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80029f6:	f5a3 6119 	sub.w	r1, r3, #2448	@ 0x990
 80029fa:	0083      	lsls	r3, r0, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	601a      	str	r2, [r3, #0]
		moving_avg[1][fill] = myLIS3DSH.y;
 8002a00:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	@ 0x982
 8002a04:	4618      	mov	r0, r3
 8002a06:	f607 139c 	addw	r3, r7, #2460	@ 0x99c
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8002a10:	f5a3 6119 	sub.w	r1, r3, #2448	@ 0x990
 8002a14:	f100 03c8 	add.w	r3, r0, #200	@ 0xc8
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	601a      	str	r2, [r3, #0]
		moving_avg[2][fill] = myLIS3DSH.z;
 8002a1e:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	@ 0x982
 8002a22:	4618      	mov	r0, r3
 8002a24:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8002a2e:	f5a3 6119 	sub.w	r1, r3, #2448	@ 0x990
 8002a32:	f500 73c8 	add.w	r3, r0, #400	@ 0x190
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	601a      	str	r2, [r3, #0]
		fill++;
 8002a3c:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	@ 0x982
 8002a40:	3301      	adds	r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f8a7 3982 	strh.w	r3, [r7, #2434]	@ 0x982
		if(fill == sampling_rate)
 8002a48:	f8b7 3982 	ldrh.w	r3, [r7, #2434]	@ 0x982
 8002a4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8002a4e:	d14f      	bne.n	8002af0 <MY_Process_AccData+0x160>
			fill_buff = 1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 39af 	strb.w	r3, [r7, #2479]	@ 0x9af
		if(fill == sampling_rate)
 8002a56:	e04b      	b.n	8002af0 <MY_Process_AccData+0x160>
	} else {
		myLIS3DSH_after_filter = moving_average_filter(myLIS3DSH, moving_avg, &fill);
 8002a58:	463c      	mov	r4, r7
 8002a5a:	f607 1382 	addw	r3, r7, #2434	@ 0x982
 8002a5e:	9303      	str	r3, [sp, #12]
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	466a      	mov	r2, sp
 8002a68:	f607 13a4 	addw	r3, r7, #2468	@ 0x9a4
 8002a6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a70:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a74:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8002a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff f9ce 	bl	8001e1c <moving_average_filter>
 8002a80:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8002a84:	f5a3 631b 	sub.w	r3, r3, #2480	@ 0x9b0
 8002a88:	f607 1484 	addw	r4, r7, #2436	@ 0x984
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a92:	682b      	ldr	r3, [r5, #0]
 8002a94:	6023      	str	r3, [r4, #0]
		sg_myLIS3DSH = myLIS3DSH_after_filter;
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <MY_Process_AccData+0x168>)
 8002a98:	461d      	mov	r5, r3
 8002a9a:	f607 1484 	addw	r4, r7, #2436	@ 0x984
 8002a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	602b      	str	r3, [r5, #0]
		calculate_pitch_roll(myLIS3DSH_after_filter.x, myLIS3DSH_after_filter.y , myLIS3DSH_after_filter.z, &myLIS3DSH_after_filter.pitch, &myLIS3DSH_after_filter.roll);
 8002aa6:	f607 1384 	addw	r3, r7, #2436	@ 0x984
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8002ab2:	ed93 7a00 	vldr	s14, [r3]
 8002ab6:	f607 138c 	addw	r3, r7, #2444	@ 0x98c
 8002aba:	edd3 6a00 	vldr	s13, [r3]
 8002abe:	f607 1384 	addw	r3, r7, #2436	@ 0x984
 8002ac2:	f103 0210 	add.w	r2, r3, #16
 8002ac6:	f607 1384 	addw	r3, r7, #2436	@ 0x984
 8002aca:	330c      	adds	r3, #12
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	eeb0 1a66 	vmov.f32	s2, s13
 8002ad4:	eef0 0a47 	vmov.f32	s1, s14
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	f7ff f8ec 	bl	8001cb8 <calculate_pitch_roll>
		osMessageQueuePut(LIS3DSH_ProcessedDataHandle, &myLIS3DSH_after_filter, 10, 1);
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <MY_Process_AccData+0x16c>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	f607 1184 	addw	r1, r7, #2436	@ 0x984
 8002ae8:	2301      	movs	r3, #1
 8002aea:	220a      	movs	r2, #10
 8002aec:	f00b ff14 	bl	800e918 <osMessageQueuePut>
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 8002af0:	e768      	b.n	80029c4 <MY_Process_AccData+0x34>
 8002af2:	bf00      	nop
 8002af4:	20000548 	.word	0x20000548
 8002af8:	20000d74 	.word	0x20000d74
 8002afc:	2000054c 	.word	0x2000054c

08002b00 <MY_Process_CMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_CMD */
void MY_Process_CMD(void *argument)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN MY_Process_CMD */
	Command cmd;
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f00b fdf2 	bl	800e6f8 <osThreadFlagsWait>
	cmd = check_command_from_uart(Rx_Buf);
 8002b14:	463b      	mov	r3, r7
 8002b16:	4914      	ldr	r1, [pc, #80]	@ (8002b68 <MY_Process_CMD+0x68>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fa4f 	bl	8001fbc <check_command_from_uart>
 8002b1e:	f107 031c 	add.w	r3, r7, #28
 8002b22:	463a      	mov	r2, r7
 8002b24:	6810      	ldr	r0, [r2, #0]
 8002b26:	6851      	ldr	r1, [r2, #4]
 8002b28:	c303      	stmia	r3!, {r0, r1}
 8002b2a:	7a12      	ldrb	r2, [r2, #8]
 8002b2c:	701a      	strb	r2, [r3, #0]
	if (strcmp((char *)cmd.cmd_id, "UN") != 0 && strcmp((char *)cmd.cmd_data, "KNOWN") != 0) {
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	490e      	ldr	r1, [pc, #56]	@ (8002b6c <MY_Process_CMD+0x6c>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fb4b 	bl	80001d0 <strcmp>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0e3      	beq.n	8002b08 <MY_Process_CMD+0x8>
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	3303      	adds	r3, #3
 8002b46:	490a      	ldr	r1, [pc, #40]	@ (8002b70 <MY_Process_CMD+0x70>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fb41 	bl	80001d0 <strcmp>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0d9      	beq.n	8002b08 <MY_Process_CMD+0x8>
		osMessageQueuePut(CMD_ProcDataHandle, &cmd, 10, 1);
 8002b54:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <MY_Process_CMD+0x74>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	f107 011c 	add.w	r1, r7, #28
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	220a      	movs	r2, #10
 8002b60:	f00b feda 	bl	800e918 <osMessageQueuePut>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8002b64:	e7d0      	b.n	8002b08 <MY_Process_CMD+0x8>
 8002b66:	bf00      	nop
 8002b68:	20000d88 	.word	0x20000d88
 8002b6c:	08015c3c 	.word	0x08015c3c
 8002b70:	08015c40 	.word	0x08015c40
 8002b74:	20000554 	.word	0x20000554

08002b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d104      	bne.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x1c>
		ulHighFrequencyTimerTicks++;
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b92:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM2){
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		osThreadFlagsSet(myRTCTimeHandle, 0x0001);
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00b fd59 	bl	800e65c <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002baa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bae:	480a      	ldr	r0, [pc, #40]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002bb0:	f001 fb39 	bl	8004226 <HAL_GPIO_TogglePin>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a08      	ldr	r2, [pc, #32]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 8002bbe:	f000 fc55 	bl	800346c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	20000558 	.word	0x20000558
 8002bd4:	20000530 	.word	0x20000530
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40001000 	.word	0x40001000

08002be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be4:	b672      	cpsid	i
}
 8002be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <Error_Handler+0x8>

08002bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_MspInit+0x54>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	4a11      	ldr	r2, [pc, #68]	@ (8002c40 <HAL_MspInit+0x54>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c02:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <HAL_MspInit+0x54>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_MspInit+0x54>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <HAL_MspInit+0x54>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <HAL_MspInit+0x54>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	210f      	movs	r1, #15
 8002c2e:	f06f 0001 	mvn.w	r0, #1
 8002c32:	f000 fd17 	bl	8003664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	@ 0x28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a19      	ldr	r2, [pc, #100]	@ (8002cc8 <HAL_I2C_MspInit+0x84>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12c      	bne.n	8002cc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <HAL_I2C_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <HAL_I2C_MspInit+0x88>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_I2C_MspInit+0x88>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002c82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c88:	2312      	movs	r3, #18
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c94:	2304      	movs	r3, #4
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <HAL_I2C_MspInit+0x8c>)
 8002ca0:	f001 f90c 	bl	8003ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_I2C_MspInit+0x88>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_I2C_MspInit+0x88>)
 8002cae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_I2C_MspInit+0x88>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3728      	adds	r7, #40	@ 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020400 	.word	0x40020400

08002cd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	@ 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a31      	ldr	r2, [pc, #196]	@ (8002dc4 <HAL_I2S_MspInit+0xf0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d15a      	bne.n	8002dba <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002d04:	2301      	movs	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002d08:	23c0      	movs	r3, #192	@ 0xc0
 8002d0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fe81 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002d20:	f7ff ff5e 	bl	8002be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d34:	4b24      	ldr	r3, [pc, #144]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d50:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <HAL_I2S_MspInit+0xf4>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002d78:	2310      	movs	r3, #16
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d88:	2306      	movs	r3, #6
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d90:	4619      	mov	r1, r3
 8002d92:	480e      	ldr	r0, [pc, #56]	@ (8002dcc <HAL_I2S_MspInit+0xf8>)
 8002d94:	f001 f892 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002d98:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002daa:	2306      	movs	r3, #6
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	4806      	ldr	r0, [pc, #24]	@ (8002dd0 <HAL_I2S_MspInit+0xfc>)
 8002db6:	f001 f881 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002dba:	bf00      	nop
 8002dbc:	3738      	adds	r7, #56	@ 0x38
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40003c00 	.word	0x40003c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020800 	.word	0x40020800

08002dd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ddc:	f107 0308 	add.w	r3, r7, #8
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <HAL_RTC_MspInit+0x4c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002df4:	2302      	movs	r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dfc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 fe0a 	bl	8007a1c <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002e0e:	f7ff fee7 	bl	8002be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e12:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <HAL_RTC_MspInit+0x50>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40002800 	.word	0x40002800
 8002e24:	42470e3c 	.word	0x42470e3c

08002e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <HAL_SPI_MspInit+0x84>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12b      	bne.n	8002ea2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_SPI_MspInit+0x88>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_SPI_MspInit+0x88>)
 8002e54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_SPI_MspInit+0x88>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <HAL_SPI_MspInit+0x88>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a10      	ldr	r2, [pc, #64]	@ (8002eb0 <HAL_SPI_MspInit+0x88>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <HAL_SPI_MspInit+0x88>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002e82:	23e0      	movs	r3, #224	@ 0xe0
 8002e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e92:	2305      	movs	r3, #5
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <HAL_SPI_MspInit+0x8c>)
 8002e9e:	f001 f80d 	bl	8003ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	@ 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40013000 	.word	0x40013000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec8:	d116      	bne.n	8002ef8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	4a23      	ldr	r2, [pc, #140]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eda:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2105      	movs	r1, #5
 8002eea:	201c      	movs	r0, #28
 8002eec:	f000 fbba 	bl	8003664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ef0:	201c      	movs	r0, #28
 8002ef2:	f000 fbd3 	bl	800369c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ef6:	e02e      	b.n	8002f56 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <HAL_TIM_Base_MspInit+0xac>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d116      	bne.n	8002f30 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b16      	ldr	r3, [pc, #88]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a15      	ldr	r2, [pc, #84]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2105      	movs	r1, #5
 8002f22:	201d      	movs	r0, #29
 8002f24:	f000 fb9e 	bl	8003664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f28:	201d      	movs	r0, #29
 8002f2a:	f000 fbb7 	bl	800369c <HAL_NVIC_EnableIRQ>
}
 8002f2e:	e012      	b.n	8002f56 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0c      	ldr	r2, [pc, #48]	@ (8002f68 <HAL_TIM_Base_MspInit+0xb0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10d      	bne.n	8002f56 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002f44:	f043 0304 	orr.w	r3, r3, #4
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_TIM_Base_MspInit+0xa8>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800

08002f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a34      	ldr	r2, [pc, #208]	@ (800305c <HAL_UART_MspInit+0xf0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d161      	bne.n	8003052 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	4b33      	ldr	r3, [pc, #204]	@ (8003060 <HAL_UART_MspInit+0xf4>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <HAL_UART_MspInit+0xf4>)
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9e:	4b30      	ldr	r3, [pc, #192]	@ (8003060 <HAL_UART_MspInit+0xf4>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <HAL_UART_MspInit+0xf4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8003060 <HAL_UART_MspInit+0xf4>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fba:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <HAL_UART_MspInit+0xf4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fc6:	230c      	movs	r3, #12
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4820      	ldr	r0, [pc, #128]	@ (8003064 <HAL_UART_MspInit+0xf8>)
 8002fe2:	f000 ff6b 	bl	8003ebc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8002fe8:	4a20      	ldr	r2, [pc, #128]	@ (800306c <HAL_UART_MspInit+0x100>)
 8002fea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002fec:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8002fee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ff2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8003002:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003006:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003008:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 800300a:	2200      	movs	r2, #0
 800300c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300e:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8003016:	2200      	movs	r2, #0
 8003018:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800301a:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003026:	4810      	ldr	r0, [pc, #64]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 8003028:	f000 fb46 	bl	80036b8 <HAL_DMA_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003032:	f7ff fdd5 	bl	8002be0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a0b      	ldr	r2, [pc, #44]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 800303a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800303c:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_UART_MspInit+0xfc>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2105      	movs	r1, #5
 8003046:	2026      	movs	r0, #38	@ 0x26
 8003048:	f000 fb0c 	bl	8003664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800304c:	2026      	movs	r0, #38	@ 0x26
 800304e:	f000 fb25 	bl	800369c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	@ 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40004400 	.word	0x40004400
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000
 8003068:	200004cc 	.word	0x200004cc
 800306c:	40026088 	.word	0x40026088

08003070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	@ 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	4b33      	ldr	r3, [pc, #204]	@ (8003154 <HAL_InitTick+0xe4>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	4a32      	ldr	r2, [pc, #200]	@ (8003154 <HAL_InitTick+0xe4>)
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003090:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <HAL_InitTick+0xe4>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800309c:	f107 0210 	add.w	r2, r7, #16
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f004 fc86 	bl	80079b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030b6:	f004 fc57 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 80030ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80030bc:	e004      	b.n	80030c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030be:	f004 fc53 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 80030c2:	4603      	mov	r3, r0
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ca:	4a23      	ldr	r2, [pc, #140]	@ (8003158 <HAL_InitTick+0xe8>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	0c9b      	lsrs	r3, r3, #18
 80030d2:	3b01      	subs	r3, #1
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030d6:	4b21      	ldr	r3, [pc, #132]	@ (800315c <HAL_InitTick+0xec>)
 80030d8:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_InitTick+0xf0>)
 80030da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030dc:	4b1f      	ldr	r3, [pc, #124]	@ (800315c <HAL_InitTick+0xec>)
 80030de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030e4:	4a1d      	ldr	r2, [pc, #116]	@ (800315c <HAL_InitTick+0xec>)
 80030e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <HAL_InitTick+0xec>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <HAL_InitTick+0xec>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030f6:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_InitTick+0xec>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80030fc:	4817      	ldr	r0, [pc, #92]	@ (800315c <HAL_InitTick+0xec>)
 80030fe:	f005 feb1 	bl	8008e64 <HAL_TIM_Base_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003108:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11b      	bne.n	8003148 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003110:	4812      	ldr	r0, [pc, #72]	@ (800315c <HAL_InitTick+0xec>)
 8003112:	f005 fef7 	bl	8008f04 <HAL_TIM_Base_Start_IT>
 8003116:	4603      	mov	r3, r0
 8003118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800311c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003120:	2b00      	cmp	r3, #0
 8003122:	d111      	bne.n	8003148 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003124:	2036      	movs	r0, #54	@ 0x36
 8003126:	f000 fab9 	bl	800369c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d808      	bhi.n	8003142 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	2036      	movs	r0, #54	@ 0x36
 8003136:	f000 fa95 	bl	8003664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <HAL_InitTick+0xf4>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e002      	b.n	8003148 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003148:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800314c:	4618      	mov	r0, r3
 800314e:	3738      	adds	r7, #56	@ 0x38
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	431bde83 	.word	0x431bde83
 800315c:	20001194 	.word	0x20001194
 8003160:	40001000 	.word	0x40001000
 8003164:	20000014 	.word	0x20000014

08003168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <NMI_Handler+0x4>

08003170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <HardFault_Handler+0x4>

08003178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <MemManage_Handler+0x4>

08003180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <UsageFault_Handler+0x4>

08003190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MEMS_INT1_Pin);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f001 f85a 	bl	800425c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031b0:	4802      	ldr	r0, [pc, #8]	@ (80031bc <DMA1_Stream5_IRQHandler+0x10>)
 80031b2:	f000 fc19 	bl	80039e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200004cc 	.word	0x200004cc

080031c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031c4:	4802      	ldr	r0, [pc, #8]	@ (80031d0 <TIM2_IRQHandler+0x10>)
 80031c6:	f005 ff0d 	bl	8008fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200003ac 	.word	0x200003ac

080031d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031d8:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <TIM3_IRQHandler+0x10>)
 80031da:	f005 ff03 	bl	8008fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200003f4 	.word	0x200003f4

080031e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <USART2_IRQHandler+0x10>)
 80031ee:	f006 fbe7 	bl	80099c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000484 	.word	0x20000484

080031fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003200:	4802      	ldr	r0, [pc, #8]	@ (800320c <TIM6_DAC_IRQHandler+0x10>)
 8003202:	f005 feef 	bl	8008fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20001194 	.word	0x20001194

08003210 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003214:	4802      	ldr	r0, [pc, #8]	@ (8003220 <OTG_FS_IRQHandler+0x10>)
 8003216:	f001 fb19 	bl	800484c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20006008 	.word	0x20006008

08003224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return 1;
 8003228:	2301      	movs	r3, #1
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_kill>:

int _kill(int pid, int sig)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800323e:	f010 f969 	bl	8013514 <__errno>
 8003242:	4603      	mov	r3, r0
 8003244:	2216      	movs	r2, #22
 8003246:	601a      	str	r2, [r3, #0]
  return -1;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_exit>:

void _exit (int status)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800325c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ffe7 	bl	8003234 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <_exit+0x12>

0800326a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e00a      	b.n	8003292 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800327c:	f3af 8000 	nop.w
 8003280:	4601      	mov	r1, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	60ba      	str	r2, [r7, #8]
 8003288:	b2ca      	uxtb	r2, r1
 800328a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3301      	adds	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	dbf0      	blt.n	800327c <_read+0x12>
  }

  return len;
 800329a:	687b      	ldr	r3, [r7, #4]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	e009      	b.n	80032ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	60ba      	str	r2, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fcb6 	bl	8001c30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3301      	adds	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dbf1      	blt.n	80032b6 <_write+0x12>
  }
  return len;
 80032d2:	687b      	ldr	r3, [r7, #4]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_close>:

int _close(int file)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003304:	605a      	str	r2, [r3, #4]
  return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_isatty>:

int _isatty(int file)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800331c:	2301      	movs	r3, #1
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800334c:	4a14      	ldr	r2, [pc, #80]	@ (80033a0 <_sbrk+0x5c>)
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <_sbrk+0x60>)
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003358:	4b13      	ldr	r3, [pc, #76]	@ (80033a8 <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003360:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <_sbrk+0x64>)
 8003362:	4a12      	ldr	r2, [pc, #72]	@ (80033ac <_sbrk+0x68>)
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003366:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d207      	bcs.n	8003384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003374:	f010 f8ce 	bl	8013514 <__errno>
 8003378:	4603      	mov	r3, r0
 800337a:	220c      	movs	r2, #12
 800337c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003382:	e009      	b.n	8003398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003384:	4b08      	ldr	r3, [pc, #32]	@ (80033a8 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <_sbrk+0x64>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	4a05      	ldr	r2, [pc, #20]	@ (80033a8 <_sbrk+0x64>)
 8003394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20020000 	.word	0x20020000
 80033a4:	00000400 	.word	0x00000400
 80033a8:	200011dc 	.word	0x200011dc
 80033ac:	20006538 	.word	0x20006538

080033b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <SystemInit+0x20>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ba:	4a05      	ldr	r2, [pc, #20]	@ (80033d0 <SystemInit+0x20>)
 80033bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800340c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80033d8:	f7ff ffea 	bl	80033b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033de:	490d      	ldr	r1, [pc, #52]	@ (8003414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e4:	e002      	b.n	80033ec <LoopCopyDataInit>

080033e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ea:	3304      	adds	r3, #4

080033ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f0:	d3f9      	bcc.n	80033e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f8:	e001      	b.n	80033fe <LoopFillZerobss>

080033fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033fc:	3204      	adds	r2, #4

080033fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003400:	d3fb      	bcc.n	80033fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003402:	f010 f88d 	bl	8013520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003406:	f7fd ffc7 	bl	8001398 <main>
  bx  lr    
 800340a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800340c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003414:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003418:	080164d0 	.word	0x080164d0
  ldr r2, =_sbss
 800341c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003420:	20006534 	.word	0x20006534

08003424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003424:	e7fe      	b.n	8003424 <ADC_IRQHandler>
	...

08003428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800342c:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <HAL_Init+0x40>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <HAL_Init+0x40>)
 8003432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_Init+0x40>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <HAL_Init+0x40>)
 800343e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003444:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_Init+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <HAL_Init+0x40>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003450:	2003      	movs	r0, #3
 8003452:	f000 f8fc 	bl	800364e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003456:	200f      	movs	r0, #15
 8003458:	f7ff fe0a 	bl	8003070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800345c:	f7ff fbc6 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00

0800346c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_IncTick+0x20>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_IncTick+0x24>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4413      	add	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <HAL_IncTick+0x24>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000018 	.word	0x20000018
 8003490:	200011e0 	.word	0x200011e0

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <HAL_GetTick+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	200011e0 	.word	0x200011e0

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034c4:	d005      	beq.n	80034d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c6:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_Delay+0x44>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034d2:	bf00      	nop
 80034d4:	f7ff ffde 	bl	8003494 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8f7      	bhi.n	80034d4 <HAL_Delay+0x28>
  {
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000018 	.word	0x20000018

080034f4 <__NVIC_SetPriorityGrouping>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800351c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003526:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	60d3      	str	r3, [r2, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_GetPriorityGrouping>:
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003540:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <__NVIC_GetPriorityGrouping+0x18>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0307 	and.w	r3, r3, #7
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_EnableIRQ>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4907      	ldr	r1, [pc, #28]	@ (8003590 <__NVIC_EnableIRQ+0x38>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	@ (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	@ (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <NVIC_EncodePriority>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	@ 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf28      	it	cs
 8003606:	2304      	movcs	r3, #4
 8003608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3304      	adds	r3, #4
 800360e:	2b06      	cmp	r3, #6
 8003610:	d902      	bls.n	8003618 <NVIC_EncodePriority+0x30>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3b03      	subs	r3, #3
 8003616:	e000      	b.n	800361a <NVIC_EncodePriority+0x32>
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003630:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43d9      	mvns	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	4313      	orrs	r3, r2
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff4c 	bl	80034f4 <__NVIC_SetPriorityGrouping>
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003676:	f7ff ff61 	bl	800353c <__NVIC_GetPriorityGrouping>
 800367a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f7ff ffb1 	bl	80035e8 <NVIC_EncodePriority>
 8003686:	4602      	mov	r2, r0
 8003688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff80 	bl	8003594 <__NVIC_SetPriority>
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ff54 	bl	8003558 <__NVIC_EnableIRQ>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036c4:	f7ff fee6 	bl	8003494 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e099      	b.n	8003808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f4:	e00f      	b.n	8003716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f6:	f7ff fecd 	bl	8003494 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b05      	cmp	r3, #5
 8003702:	d908      	bls.n	8003716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e078      	b.n	8003808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e8      	bne.n	80036f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4b38      	ldr	r3, [pc, #224]	@ (8003810 <HAL_DMA_Init+0x158>)
 8003730:	4013      	ands	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	2b04      	cmp	r3, #4
 800376e:	d107      	bne.n	8003780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	4313      	orrs	r3, r2
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0307 	bic.w	r3, r3, #7
 8003796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d117      	bne.n	80037da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fb01 	bl	8003dc4 <DMA_CheckFifoParam>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2240      	movs	r2, #64	@ 0x40
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037d6:	2301      	movs	r3, #1
 80037d8:	e016      	b.n	8003808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fab8 	bl	8003d58 <DMA_CalcBaseAndBitshift>
 80037e8:	4603      	mov	r3, r0
 80037ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	223f      	movs	r2, #63	@ 0x3f
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	f010803f 	.word	0xf010803f

08003814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_DMA_Start_IT+0x26>
 8003836:	2302      	movs	r3, #2
 8003838:	e040      	b.n	80038bc <HAL_DMA_Start_IT+0xa8>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d12f      	bne.n	80038ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2202      	movs	r2, #2
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa4a 	bl	8003cfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	223f      	movs	r2, #63	@ 0x3f
 800386e:	409a      	lsls	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0216 	orr.w	r2, r2, #22
 8003882:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e005      	b.n	80038ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038d2:	f7ff fddf 	bl	8003494 <HAL_GetTick>
 80038d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d008      	beq.n	80038f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2280      	movs	r2, #128	@ 0x80
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e052      	b.n	800399c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0216 	bic.w	r2, r2, #22
 8003904:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003914:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_DMA_Abort+0x62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0208 	bic.w	r2, r2, #8
 8003934:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003946:	e013      	b.n	8003970 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003948:	f7ff fda4 	bl	8003494 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b05      	cmp	r3, #5
 8003954:	d90c      	bls.n	8003970 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e015      	b.n	800399c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e4      	bne.n	8003948 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003982:	223f      	movs	r2, #63	@ 0x3f
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2280      	movs	r2, #128	@ 0x80
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00c      	b.n	80039dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2205      	movs	r2, #5
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003c30 <HAL_DMA_IRQHandler+0x248>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003c34 <HAL_DMA_IRQHandler+0x24c>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0a9b      	lsrs	r3, r3, #10
 8003a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	2208      	movs	r2, #8
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01a      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0204 	bic.w	r2, r2, #4
 8003a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	2208      	movs	r2, #8
 8003a42:	409a      	lsls	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	2201      	movs	r2, #1
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	2201      	movs	r2, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	2204      	movs	r2, #4
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d012      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	2204      	movs	r2, #4
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f043 0204 	orr.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d043      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03c      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d018      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e01f      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e016      	b.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0208 	bic.w	r2, r2, #8
 8003b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 808f 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8087 	beq.w	8003c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	2220      	movs	r2, #32
 8003b80:	409a      	lsls	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d136      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0216 	bic.w	r2, r2, #22
 8003ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x1da>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0208 	bic.w	r2, r2, #8
 8003bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	223f      	movs	r2, #63	@ 0x3f
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d07e      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
        }
        return;
 8003bfe:	e079      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e02c      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
 8003c2e:	bf00      	nop
 8003c30:	20000010 	.word	0x20000010
 8003c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
 8003c48:	e01e      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0210 	bic.w	r2, r2, #16
 8003c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d032      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2205      	movs	r2, #5
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d307      	bcc.n	8003cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f2      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x2cc>
 8003cce:	e000      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cf4:	bf00      	nop
    }
  }
}
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d108      	bne.n	8003d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d3a:	e007      	b.n	8003d4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3b10      	subs	r3, #16
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <DMA_CalcBaseAndBitshift+0x64>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d72:	4a13      	ldr	r2, [pc, #76]	@ (8003dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d909      	bls.n	8003d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d98:	e007      	b.n	8003daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	aaaaaaab 	.word	0xaaaaaaab
 8003dc0:	080160d8 	.word	0x080160d8

08003dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11f      	bne.n	8003e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d856      	bhi.n	8003e92 <DMA_CheckFifoParam+0xce>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <DMA_CheckFifoParam+0x28>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e0f 	.word	0x08003e0f
 8003df4:	08003dfd 	.word	0x08003dfd
 8003df8:	08003e93 	.word	0x08003e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d046      	beq.n	8003e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0c:	e043      	b.n	8003e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e16:	d140      	bne.n	8003e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1c:	e03d      	b.n	8003e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e26:	d121      	bne.n	8003e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d837      	bhi.n	8003e9e <DMA_CheckFifoParam+0xda>
 8003e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <DMA_CheckFifoParam+0x70>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e4b 	.word	0x08003e4b
 8003e3c:	08003e45 	.word	0x08003e45
 8003e40:	08003e5d 	.word	0x08003e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      break;
 8003e48:	e030      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d025      	beq.n	8003ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5a:	e022      	b.n	8003ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e64:	d11f      	bne.n	8003ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e6a:	e01c      	b.n	8003ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d903      	bls.n	8003e7a <DMA_CheckFifoParam+0xb6>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d003      	beq.n	8003e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e78:	e018      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7e:	e015      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00e      	beq.n	8003eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e90:	e00b      	b.n	8003eaa <DMA_CheckFifoParam+0xe6>
      break;
 8003e92:	bf00      	nop
 8003e94:	e00a      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e008      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e006      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;   
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <DMA_CheckFifoParam+0xe8>
      break;
 8003eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	@ 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e16b      	b.n	80041b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	f040 815a 	bne.w	80041aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d005      	beq.n	8003f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d130      	bne.n	8003f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f44:	2201      	movs	r2, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 0201 	and.w	r2, r3, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d017      	beq.n	8003fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d123      	bne.n	8004000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	220f      	movs	r2, #15
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	08da      	lsrs	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80b4 	beq.w	80041aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b60      	ldr	r3, [pc, #384]	@ (80041c8 <HAL_GPIO_Init+0x30c>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	4a5f      	ldr	r2, [pc, #380]	@ (80041c8 <HAL_GPIO_Init+0x30c>)
 800404c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004050:	6453      	str	r3, [r2, #68]	@ 0x44
 8004052:	4b5d      	ldr	r3, [pc, #372]	@ (80041c8 <HAL_GPIO_Init+0x30c>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800405e:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <HAL_GPIO_Init+0x310>)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a52      	ldr	r2, [pc, #328]	@ (80041d0 <HAL_GPIO_Init+0x314>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02b      	beq.n	80040e2 <HAL_GPIO_Init+0x226>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a51      	ldr	r2, [pc, #324]	@ (80041d4 <HAL_GPIO_Init+0x318>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d025      	beq.n	80040de <HAL_GPIO_Init+0x222>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a50      	ldr	r2, [pc, #320]	@ (80041d8 <HAL_GPIO_Init+0x31c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01f      	beq.n	80040da <HAL_GPIO_Init+0x21e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4f      	ldr	r2, [pc, #316]	@ (80041dc <HAL_GPIO_Init+0x320>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d019      	beq.n	80040d6 <HAL_GPIO_Init+0x21a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4e      	ldr	r2, [pc, #312]	@ (80041e0 <HAL_GPIO_Init+0x324>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_GPIO_Init+0x216>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4d      	ldr	r2, [pc, #308]	@ (80041e4 <HAL_GPIO_Init+0x328>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00d      	beq.n	80040ce <HAL_GPIO_Init+0x212>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4c      	ldr	r2, [pc, #304]	@ (80041e8 <HAL_GPIO_Init+0x32c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <HAL_GPIO_Init+0x20e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4b      	ldr	r2, [pc, #300]	@ (80041ec <HAL_GPIO_Init+0x330>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_GPIO_Init+0x20a>
 80040c2:	2307      	movs	r3, #7
 80040c4:	e00e      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040c6:	2308      	movs	r3, #8
 80040c8:	e00c      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040ca:	2306      	movs	r3, #6
 80040cc:	e00a      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040ce:	2305      	movs	r3, #5
 80040d0:	e008      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040d2:	2304      	movs	r3, #4
 80040d4:	e006      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040d6:	2303      	movs	r3, #3
 80040d8:	e004      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040da:	2302      	movs	r3, #2
 80040dc:	e002      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_GPIO_Init+0x228>
 80040e2:	2300      	movs	r3, #0
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f002 0203 	and.w	r2, r2, #3
 80040ea:	0092      	lsls	r2, r2, #2
 80040ec:	4093      	lsls	r3, r2
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f4:	4935      	ldr	r1, [pc, #212]	@ (80041cc <HAL_GPIO_Init+0x310>)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004102:	4b3b      	ldr	r3, [pc, #236]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004126:	4a32      	ldr	r2, [pc, #200]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800412c:	4b30      	ldr	r3, [pc, #192]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004150:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004156:	4b26      	ldr	r3, [pc, #152]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800417a:	4a1d      	ldr	r2, [pc, #116]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041a4:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <HAL_GPIO_Init+0x334>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	f67f ae90 	bls.w	8003ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3724      	adds	r7, #36	@ 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40020000 	.word	0x40020000
 80041d4:	40020400 	.word	0x40020400
 80041d8:	40020800 	.word	0x40020800
 80041dc:	40020c00 	.word	0x40020c00
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40021400 	.word	0x40021400
 80041e8:	40021800 	.word	0x40021800
 80041ec:	40021c00 	.word	0x40021c00
 80041f0:	40013c00 	.word	0x40013c00

080041f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
 8004200:	4613      	mov	r3, r2
 8004202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004204:	787b      	ldrb	r3, [r7, #1]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004210:	e003      	b.n	800421a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	041a      	lsls	r2, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	619a      	str	r2, [r3, #24]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004238:	887a      	ldrh	r2, [r7, #2]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	041a      	lsls	r2, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	43d9      	mvns	r1, r3
 8004244:	887b      	ldrh	r3, [r7, #2]
 8004246:	400b      	ands	r3, r1
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004266:	4b08      	ldr	r3, [pc, #32]	@ (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004272:	4a05      	ldr	r2, [pc, #20]	@ (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fcbc 	bl	8001bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40013c00 	.word	0x40013c00

0800428c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e059      	b.n	8004352 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f00d ff75 	bl	80121a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2203      	movs	r2, #3
 80042c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042cc:	d102      	bne.n	80042d4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f006 fccc 	bl	800ac76 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7c1a      	ldrb	r2, [r3, #16]
 80042e6:	f88d 2000 	strb.w	r2, [sp]
 80042ea:	3304      	adds	r3, #4
 80042ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ee:	f006 fc4d 	bl	800ab8c <USB_CoreInit>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e026      	b.n	8004352 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f006 fcc4 	bl	800ac98 <USB_SetCurrentMode>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e017      	b.n	8004352 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	7c1a      	ldrb	r2, [r3, #16]
 800432a:	f88d 2000 	strb.w	r2, [sp]
 800432e:	3304      	adds	r3, #4
 8004330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004332:	f006 fe67 	bl	800b004 <USB_HostInit>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e004      	b.n	8004352 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800435a:	b590      	push	{r4, r7, lr}
 800435c:	b08b      	sub	sp, #44	@ 0x2c
 800435e:	af04      	add	r7, sp, #16
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	461a      	mov	r2, r3
 8004368:	4603      	mov	r3, r0
 800436a:	70fb      	strb	r3, [r7, #3]
 800436c:	460b      	mov	r3, r1
 800436e:	70bb      	strb	r3, [r7, #2]
 8004370:	4613      	mov	r3, r2
 8004372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004374:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004376:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_HCD_HC_Init+0x2c>
 8004382:	2302      	movs	r3, #2
 8004384:	e09d      	b.n	80044c2 <HAL_HCD_HC_Init+0x168>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3319      	adds	r3, #25
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3314      	adds	r3, #20
 80043b2:	787a      	ldrb	r2, [r7, #1]
 80043b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3315      	adds	r3, #21
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3326      	adds	r3, #38	@ 0x26
 80043da:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80043de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	78bb      	ldrb	r3, [r7, #2]
 80043e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e8:	b2d8      	uxtb	r0, r3
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3316      	adds	r3, #22
 80043f8:	4602      	mov	r2, r0
 80043fa:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fbc7 	bl	8004b94 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800440a:	2b00      	cmp	r3, #0
 800440c:	da0a      	bge.n	8004424 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3317      	adds	r3, #23
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e009      	b.n	8004438 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3317      	adds	r3, #23
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f006 ff45 	bl	800b2cc <USB_GetHostSpeed>
 8004442:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004444:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10b      	bne.n	8004464 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800444c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004450:	2b01      	cmp	r3, #1
 8004452:	d107      	bne.n	8004464 <HAL_HCD_HC_Init+0x10a>
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2bbc      	cmp	r3, #188	@ 0xbc
 800445e:	d901      	bls.n	8004464 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004460:	23bc      	movs	r3, #188	@ 0xbc
 8004462:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3318      	adds	r3, #24
 8004474:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004478:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	b298      	uxth	r0, r3
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3328      	adds	r3, #40	@ 0x28
 800448e:	4602      	mov	r2, r0
 8004490:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	b29b      	uxth	r3, r3
 800449a:	787c      	ldrb	r4, [r7, #1]
 800449c:	78ba      	ldrb	r2, [r7, #2]
 800449e:	78f9      	ldrb	r1, [r7, #3]
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	4623      	mov	r3, r4
 80044b0:	f006 ff34 	bl	800b31c <USB_HC_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}

080044ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_HCD_HC_Halt+0x1e>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e00f      	b.n	8004508 <HAL_HCD_HC_Halt+0x3e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f007 fac6 	bl	800ba8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4603      	mov	r3, r0
 8004520:	70fb      	strb	r3, [r7, #3]
 8004522:	460b      	mov	r3, r1
 8004524:	70bb      	strb	r3, [r7, #2]
 8004526:	4613      	mov	r3, r2
 8004528:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	3317      	adds	r3, #23
 800453a:	78ba      	ldrb	r2, [r7, #2]
 800453c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3326      	adds	r3, #38	@ 0x26
 800454e:	787a      	ldrb	r2, [r7, #1]
 8004550:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004552:	7c3b      	ldrb	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d114      	bne.n	8004582 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	332a      	adds	r3, #42	@ 0x2a
 8004568:	2203      	movs	r2, #3
 800456a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3319      	adds	r3, #25
 800457c:	7f3a      	ldrb	r2, [r7, #28]
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e009      	b.n	8004596 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	332a      	adds	r3, #42	@ 0x2a
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004596:	787b      	ldrb	r3, [r7, #1]
 8004598:	2b03      	cmp	r3, #3
 800459a:	f200 8102 	bhi.w	80047a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800459e:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	0800478d 	.word	0x0800478d
 80045ac:	08004679 	.word	0x08004679
 80045b0:	08004703 	.word	0x08004703
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80045b4:	7c3b      	ldrb	r3, [r7, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	f040 80f5 	bne.w	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80045bc:	78bb      	ldrb	r3, [r7, #2]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d12d      	bne.n	800461e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80045c2:	8b3b      	ldrh	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	333d      	adds	r3, #61	@ 0x3d
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	333d      	adds	r3, #61	@ 0x3d
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	332a      	adds	r3, #42	@ 0x2a
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004606:	e0ce      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	332a      	adds	r3, #42	@ 0x2a
 8004618:	2202      	movs	r2, #2
 800461a:	701a      	strb	r2, [r3, #0]
      break;
 800461c:	e0c3      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	331a      	adds	r3, #26
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 80b8 	bne.w	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	333c      	adds	r3, #60	@ 0x3c
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	332a      	adds	r3, #42	@ 0x2a
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
      break;
 8004660:	e0a1      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	332a      	adds	r3, #42	@ 0x2a
 8004672:	2202      	movs	r2, #2
 8004674:	701a      	strb	r2, [r3, #0]
      break;
 8004676:	e096      	b.n	80047a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004678:	78bb      	ldrb	r3, [r7, #2]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d120      	bne.n	80046c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	333d      	adds	r3, #61	@ 0x3d
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	332a      	adds	r3, #42	@ 0x2a
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80046a8:	e07e      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	332a      	adds	r3, #42	@ 0x2a
 80046ba:	2202      	movs	r2, #2
 80046bc:	701a      	strb	r2, [r3, #0]
      break;
 80046be:	e073      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	333c      	adds	r3, #60	@ 0x3c
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	332a      	adds	r3, #42	@ 0x2a
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
      break;
 80046ea:	e05d      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	332a      	adds	r3, #42	@ 0x2a
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]
      break;
 8004700:	e052      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004702:	78bb      	ldrb	r3, [r7, #2]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d120      	bne.n	800474a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	333d      	adds	r3, #61	@ 0x3d
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	332a      	adds	r3, #42	@ 0x2a
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004732:	e039      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	332a      	adds	r3, #42	@ 0x2a
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]
      break;
 8004748:	e02e      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	333c      	adds	r3, #60	@ 0x3c
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	332a      	adds	r3, #42	@ 0x2a
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
      break;
 8004774:	e018      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	332a      	adds	r3, #42	@ 0x2a
 8004786:	2202      	movs	r2, #2
 8004788:	701a      	strb	r2, [r3, #0]
      break;
 800478a:	e00d      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	332a      	adds	r3, #42	@ 0x2a
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80047a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	332c      	adds	r3, #44	@ 0x2c
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	8b39      	ldrh	r1, [r7, #24]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4403      	add	r3, r0
 80047cc:	3334      	adds	r3, #52	@ 0x34
 80047ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	334c      	adds	r3, #76	@ 0x4c
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	3338      	adds	r3, #56	@ 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3315      	adds	r3, #21
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	@ 0x4d
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3310      	adds	r3, #16
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	1d19      	adds	r1, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	799b      	ldrb	r3, [r3, #6]
 800483a:	461a      	mov	r2, r3
 800483c:	f006 fe9a 	bl	800b574 <USB_HC_StartXfer>
 8004840:	4603      	mov	r3, r0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop

0800484c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f006 fb8e 	bl	800af84 <USB_GetMode>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 80fb 	bne.w	8004a66 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f006 fb51 	bl	800af1c <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80f1 	beq.w	8004a64 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f006 fb48 	bl	800af1c <USB_ReadInterrupts>
 800488c:	4603      	mov	r3, r0
 800488e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004896:	d104      	bne.n	80048a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80048a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f006 fb38 	bl	800af1c <USB_ReadInterrupts>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048b6:	d104      	bne.n	80048c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f006 fb28 	bl	800af1c <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048d6:	d104      	bne.n	80048e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80048e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f006 fb18 	bl	800af1c <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2202      	movs	r2, #2
 80048fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f006 fb0a 	bl	800af1c <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800490e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004912:	d120      	bne.n	8004956 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800491c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800492e:	2110      	movs	r1, #16
 8004930:	6938      	ldr	r0, [r7, #16]
 8004932:	f006 f9fd 	bl	800ad30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f006 fa2c 	bl	800ad94 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	7a5b      	ldrb	r3, [r3, #9]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d105      	bne.n	8004950 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f006 fc1e 	bl	800b18c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f00d fca7 	bl	80122a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f006 fade 	bl	800af1c <USB_ReadInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800496a:	d102      	bne.n	8004972 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 fd33 	bl	80063d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f006 fad0 	bl	800af1c <USB_ReadInterrupts>
 800497c:	4603      	mov	r3, r0
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b08      	cmp	r3, #8
 8004984:	d106      	bne.n	8004994 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f00d fc70 	bl	801226c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2208      	movs	r2, #8
 8004992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f006 fabf 	bl	800af1c <USB_ReadInterrupts>
 800499e:	4603      	mov	r3, r0
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a8:	d139      	bne.n	8004a1e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f007 f85a 	bl	800ba68 <USB_HC_ReadInterrupt>
 80049b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e025      	b.n	8004a08 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d018      	beq.n	8004a02 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e6:	d106      	bne.n	80049f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f905 	bl	8004bfe <HCD_HC_IN_IRQHandler>
 80049f4:	e005      	b.n	8004a02 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 ff67 	bl	80058d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3301      	adds	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	795b      	ldrb	r3, [r3, #5]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d3d3      	bcc.n	80049bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f006 fa7a 	bl	800af1c <USB_ReadInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d101      	bne.n	8004a36 <HAL_HCD_IRQHandler+0x1ea>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_HCD_IRQHandler+0x1ec>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d014      	beq.n	8004a66 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0210 	bic.w	r2, r2, #16
 8004a4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fbe4 	bl	800621a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0210 	orr.w	r2, r2, #16
 8004a60:	619a      	str	r2, [r3, #24]
 8004a62:	e000      	b.n	8004a66 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004a64:	bf00      	nop
    }
  }
}
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_HCD_Start+0x16>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e013      	b.n	8004aaa <HAL_HCD_Start+0x3e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f006 fbe2 	bl	800b25a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f006 f8da 	bl	800ac54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_HCD_Stop+0x16>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e00d      	b.n	8004ae4 <HAL_HCD_Stop+0x32>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f007 f935 	bl	800bd44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f006 fb84 	bl	800b206 <USB_ResetPort>
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334c      	adds	r3, #76	@ 0x4c
 8004b24:	781b      	ldrb	r3, [r3, #0]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3338      	adds	r3, #56	@ 0x38
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f006 fbc6 	bl	800b2fa <USB_GetCurrentFrame>
 8004b6e:	4603      	mov	r3, r0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f006 fba1 	bl	800b2cc <USB_GetHostSpeed>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	331a      	adds	r3, #26
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	331b      	adds	r3, #27
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3325      	adds	r3, #37	@ 0x25
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3324      	adds	r3, #36	@ 0x24
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f006 f990 	bl	800af42 <USB_ReadChInterrupts>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11a      	bne.n	8004c62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	334d      	adds	r3, #77	@ 0x4d
 8004c4e:	2207      	movs	r2, #7
 8004c50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f006 ff15 	bl	800ba8a <USB_HC_Halt>
 8004c60:	e09e      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f006 f969 	bl	800af42 <USB_ReadChInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c7a:	d11b      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	334d      	adds	r3, #77	@ 0x4d
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f006 feec 	bl	800ba8a <USB_HC_Halt>
 8004cb2:	e075      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f006 f940 	bl	800af42 <USB_ReadChInterrupts>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d11a      	bne.n	8004d02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2308      	movs	r3, #8
 8004cdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	334d      	adds	r3, #77	@ 0x4d
 8004cee:	2206      	movs	r2, #6
 8004cf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f006 fec5 	bl	800ba8a <USB_HC_Halt>
 8004d00:	e04e      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f006 f919 	bl	800af42 <USB_ReadChInterrupts>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1a:	d11b      	bne.n	8004d54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	334d      	adds	r3, #77	@ 0x4d
 8004d40:	2209      	movs	r2, #9
 8004d42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f006 fe9c 	bl	800ba8a <USB_HC_Halt>
 8004d52:	e025      	b.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f006 f8f0 	bl	800af42 <USB_ReadChInterrupts>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d68:	2b80      	cmp	r3, #128	@ 0x80
 8004d6a:	d119      	bne.n	8004da0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	334d      	adds	r3, #77	@ 0x4d
 8004d8e:	2207      	movs	r2, #7
 8004d90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f006 fe75 	bl	800ba8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f006 f8ca 	bl	800af42 <USB_ReadChInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db8:	d112      	bne.n	8004de0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f006 fe61 	bl	800ba8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	f000 bd75 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f006 f8aa 	bl	800af42 <USB_ReadChInterrupts>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	f040 8128 	bne.w	800504a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	2320      	movs	r3, #32
 8004e0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	331b      	adds	r3, #27
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d119      	bne.n	8004e56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	331b      	adds	r3, #27
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	799b      	ldrb	r3, [r3, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01b      	beq.n	8004e96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3330      	adds	r3, #48	@ 0x30
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e82:	78fa      	ldrb	r2, [r7, #3]
 8004e84:	1ac9      	subs	r1, r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4403      	add	r3, r0
 8004e92:	3338      	adds	r3, #56	@ 0x38
 8004e94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	334d      	adds	r3, #77	@ 0x4d
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3344      	adds	r3, #68	@ 0x44
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	3326      	adds	r3, #38	@ 0x26
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3326      	adds	r3, #38	@ 0x26
 8004ef6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d110      	bne.n	8004f1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f006 fdc0 	bl	800ba8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f16:	461a      	mov	r2, r3
 8004f18:	2310      	movs	r3, #16
 8004f1a:	6093      	str	r3, [r2, #8]
 8004f1c:	e03d      	b.n	8004f9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3326      	adds	r3, #38	@ 0x26
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d00a      	beq.n	8004f4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3326      	adds	r3, #38	@ 0x26
 8004f44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d127      	bne.n	8004f9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	334c      	adds	r3, #76	@ 0x4c
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	334c      	adds	r3, #76	@ 0x4c
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f00d f993 	bl	80122c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	799b      	ldrb	r3, [r3, #6]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d13b      	bne.n	800501a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3338      	adds	r3, #56	@ 0x38
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4403      	add	r3, r0
 8004fc2:	3328      	adds	r3, #40	@ 0x28
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	440b      	add	r3, r1
 8004fc8:	1e59      	subs	r1, r3, #1
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4403      	add	r3, r0
 8004fd8:	3328      	adds	r3, #40	@ 0x28
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8470 	beq.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	333c      	adds	r3, #60	@ 0x3c
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	f083 0301 	eor.w	r3, r3, #1
 8005002:	b2d8      	uxtb	r0, r3
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	333c      	adds	r3, #60	@ 0x3c
 8005012:	4602      	mov	r2, r0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	f000 bc58 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	333c      	adds	r3, #60	@ 0x3c
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	f083 0301 	eor.w	r3, r3, #1
 8005032:	b2d8      	uxtb	r0, r3
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	333c      	adds	r3, #60	@ 0x3c
 8005042:	4602      	mov	r2, r0
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	f000 bc40 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f005 ff75 	bl	800af42 <USB_ReadChInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d131      	bne.n	80050c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506e:	461a      	mov	r2, r3
 8005070:	2320      	movs	r3, #32
 8005072:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	331a      	adds	r3, #26
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b01      	cmp	r3, #1
 8005088:	f040 841f 	bne.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	331b      	adds	r3, #27
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	334d      	adds	r3, #77	@ 0x4d
 80050b0:	2203      	movs	r2, #3
 80050b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f006 fce4 	bl	800ba8a <USB_HC_Halt>
 80050c2:	f000 bc02 	b.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f005 ff37 	bl	800af42 <USB_ReadChInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	f040 8305 	bne.w	80056ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ec:	461a      	mov	r2, r3
 80050ee:	2302      	movs	r3, #2
 80050f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	334d      	adds	r3, #77	@ 0x4d
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d114      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	334d      	adds	r3, #77	@ 0x4d
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	334c      	adds	r3, #76	@ 0x4c
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e2cc      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	334d      	adds	r3, #77	@ 0x4d
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d114      	bne.n	8005172 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	334d      	adds	r3, #77	@ 0x4d
 8005158:	2202      	movs	r2, #2
 800515a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	334c      	adds	r3, #76	@ 0x4c
 800516c:	2205      	movs	r2, #5
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e2ac      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	334d      	adds	r3, #77	@ 0x4d
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b07      	cmp	r3, #7
 8005186:	d00b      	beq.n	80051a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	334d      	adds	r3, #77	@ 0x4d
 8005198:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800519a:	2b09      	cmp	r3, #9
 800519c:	f040 80a6 	bne.w	80052ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	334d      	adds	r3, #77	@ 0x4d
 80051b0:	2202      	movs	r2, #2
 80051b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3344      	adds	r3, #68	@ 0x44
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4403      	add	r3, r0
 80051d4:	3344      	adds	r3, #68	@ 0x44
 80051d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3344      	adds	r3, #68	@ 0x44
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d943      	bls.n	8005276 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3344      	adds	r3, #68	@ 0x44
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	331a      	adds	r3, #26
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d123      	bne.n	8005260 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	331b      	adds	r3, #27
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	331c      	adds	r3, #28
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	440a      	add	r2, r1
 8005256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800525e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	334c      	adds	r3, #76	@ 0x4c
 8005270:	2204      	movs	r2, #4
 8005272:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005274:	e229      	b.n	80056ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	334c      	adds	r3, #76	@ 0x4c
 8005286:	2202      	movs	r2, #2
 8005288:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3326      	adds	r3, #38	@ 0x26
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	3326      	adds	r3, #38	@ 0x26
 80052b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	f040 8209 	bne.w	80056ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	461a      	mov	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052ea:	e1ee      	b.n	80056ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	334d      	adds	r3, #77	@ 0x4d
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b05      	cmp	r3, #5
 8005300:	f040 80c8 	bne.w	8005494 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	334d      	adds	r3, #77	@ 0x4d
 8005314:	2202      	movs	r2, #2
 8005316:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	331b      	adds	r3, #27
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b01      	cmp	r3, #1
 800532c:	f040 81ce 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	3326      	adds	r3, #38	@ 0x26
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d16b      	bne.n	800541e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	3348      	adds	r3, #72	@ 0x48
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4403      	add	r3, r0
 8005366:	3348      	adds	r3, #72	@ 0x48
 8005368:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3348      	adds	r3, #72	@ 0x48
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d943      	bls.n	8005408 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3348      	adds	r3, #72	@ 0x48
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	331b      	adds	r3, #27
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3344      	adds	r3, #68	@ 0x44
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d809      	bhi.n	80053d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	331c      	adds	r3, #28
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	334c      	adds	r3, #76	@ 0x4c
 8005402:	2204      	movs	r2, #4
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e014      	b.n	8005432 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	334c      	adds	r3, #76	@ 0x4c
 8005418:	2202      	movs	r2, #2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e009      	b.n	8005432 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	334c      	adds	r3, #76	@ 0x4c
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3326      	adds	r3, #38	@ 0x26
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3326      	adds	r3, #38	@ 0x26
 8005458:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800545a:	2b02      	cmp	r3, #2
 800545c:	f040 8136 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005476:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800547e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548c:	461a      	mov	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	e11b      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	334d      	adds	r3, #77	@ 0x4d
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	f040 8081 	bne.w	80055ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	334d      	adds	r3, #77	@ 0x4d
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	331b      	adds	r3, #27
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	f040 80fa 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054d8:	78fa      	ldrb	r2, [r7, #3]
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	334c      	adds	r3, #76	@ 0x4c
 80054e8:	2202      	movs	r2, #2
 80054ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	440a      	add	r2, r1
 8005502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	440a      	add	r2, r1
 8005542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005546:	f023 0320 	bic.w	r3, r3, #32
 800554a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3326      	adds	r3, #38	@ 0x26
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3326      	adds	r3, #38	@ 0x26
 8005572:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005574:	2b02      	cmp	r3, #2
 8005576:	f040 80a9 	bne.w	80056cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005590:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005598:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a6:	461a      	mov	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e08e      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	334d      	adds	r3, #77	@ 0x4d
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d143      	bne.n	800564c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	334d      	adds	r3, #77	@ 0x4d
 80055d4:	2202      	movs	r2, #2
 80055d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334c      	adds	r3, #76	@ 0x4c
 80055e8:	2202      	movs	r2, #2
 80055ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	3326      	adds	r3, #38	@ 0x26
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3326      	adds	r3, #38	@ 0x26
 8005612:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005614:	2b02      	cmp	r3, #2
 8005616:	d159      	bne.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800562e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e03f      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	334d      	adds	r3, #77	@ 0x4d
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b08      	cmp	r3, #8
 8005660:	d126      	bne.n	80056b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	334d      	adds	r3, #77	@ 0x4d
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	3344      	adds	r3, #68	@ 0x44
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1c59      	adds	r1, r3, #1
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4403      	add	r3, r0
 8005696:	3344      	adds	r3, #68	@ 0x44
 8005698:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334c      	adds	r3, #76	@ 0x4c
 80056aa:	2204      	movs	r2, #4
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e00d      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334d      	adds	r3, #77	@ 0x4d
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	f000 8100 	beq.w	80058c8 <HCD_HC_IN_IRQHandler+0xcca>
 80056c8:	e000      	b.n	80056cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	334c      	adds	r3, #76	@ 0x4c
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f00c fdec 	bl	80122c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056e8:	e0ef      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f005 fc25 	bl	800af42 <USB_ReadChInterrupts>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d12f      	bne.n	8005762 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	2340      	movs	r3, #64	@ 0x40
 8005712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	334d      	adds	r3, #77	@ 0x4d
 8005724:	2205      	movs	r2, #5
 8005726:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	331a      	adds	r3, #26
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	3344      	adds	r3, #68	@ 0x44
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f006 f995 	bl	800ba8a <USB_HC_Halt>
 8005760:	e0b3      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f005 fbe9 	bl	800af42 <USB_ReadChInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b10      	cmp	r3, #16
 8005778:	f040 80a7 	bne.w	80058ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3326      	adds	r3, #38	@ 0x26
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d11b      	bne.n	80057ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3344      	adds	r3, #68	@ 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	334d      	adds	r3, #77	@ 0x4d
 80057b6:	2204      	movs	r2, #4
 80057b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f006 f961 	bl	800ba8a <USB_HC_Halt>
 80057c8:	e03f      	b.n	800584a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3326      	adds	r3, #38	@ 0x26
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3326      	adds	r3, #38	@ 0x26
 80057f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d129      	bne.n	800584a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3344      	adds	r3, #68	@ 0x44
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	799b      	ldrb	r3, [r3, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HCD_HC_IN_IRQHandler+0xc2a>
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	331b      	adds	r3, #27
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d110      	bne.n	800584a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	334d      	adds	r3, #77	@ 0x4d
 8005838:	2204      	movs	r2, #4
 800583a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	4611      	mov	r1, r2
 8005844:	4618      	mov	r0, r3
 8005846:	f006 f920 	bl	800ba8a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	331b      	adds	r3, #27
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d129      	bne.n	80058b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	331b      	adds	r3, #27
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	78fa      	ldrb	r2, [r7, #3]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	440a      	add	r2, r1
 800588a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800588e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005892:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ae:	f043 0320 	orr.w	r3, r3, #32
 80058b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c0:	461a      	mov	r2, r3
 80058c2:	2310      	movs	r3, #16
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	e000      	b.n	80058ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80058c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f005 fb27 	bl	800af42 <USB_ReadChInterrupts>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d11b      	bne.n	8005936 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590a:	461a      	mov	r2, r3
 800590c:	2304      	movs	r3, #4
 800590e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	334d      	adds	r3, #77	@ 0x4d
 8005920:	2207      	movs	r2, #7
 8005922:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f006 f8ac 	bl	800ba8a <USB_HC_Halt>
 8005932:	f000 bc6f 	b.w	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f005 faff 	bl	800af42 <USB_ReadChInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	f040 8082 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800595c:	461a      	mov	r2, r3
 800595e:	2320      	movs	r3, #32
 8005960:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3319      	adds	r3, #25
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d124      	bne.n	80059c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	4613      	mov	r3, r2
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	3319      	adds	r3, #25
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	334c      	adds	r3, #76	@ 0x4c
 800599c:	2202      	movs	r2, #2
 800599e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	334d      	adds	r3, #77	@ 0x4d
 80059b0:	2203      	movs	r2, #3
 80059b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	4611      	mov	r1, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f006 f864 	bl	800ba8a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	331a      	adds	r3, #26
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	f040 841d 	bne.w	8006214 <HCD_HC_OUT_IRQHandler+0x944>
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	331b      	adds	r3, #27
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 8411 	bne.w	8006214 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3326      	adds	r3, #38	@ 0x26
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d009      	beq.n	8005a1c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	331b      	adds	r3, #27
 8005a18:	2201      	movs	r2, #1
 8005a1a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	334d      	adds	r3, #77	@ 0x4d
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f006 f826 	bl	800ba8a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3344      	adds	r3, #68	@ 0x44
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e3df      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f005 fa70 	bl	800af42 <USB_ReadChInterrupts>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a6c:	d111      	bne.n	8005a92 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f005 fffd 	bl	800ba8a <USB_HC_Halt>
 8005a90:	e3c0      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	78fa      	ldrb	r2, [r7, #3]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f005 fa51 	bl	800af42 <USB_ReadChInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d168      	bne.n	8005b7c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3344      	adds	r3, #68	@ 0x44
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f005 fa3b 	bl	800af42 <USB_ReadChInterrupts>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	d112      	bne.n	8005afc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005ad6:	78fa      	ldrb	r2, [r7, #3]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3319      	adds	r3, #25
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af6:	461a      	mov	r2, r3
 8005af8:	2340      	movs	r3, #64	@ 0x40
 8005afa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005afc:	78fa      	ldrb	r2, [r7, #3]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	331b      	adds	r3, #27
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d019      	beq.n	8005b46 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	331b      	adds	r3, #27
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b44:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b52:	461a      	mov	r2, r3
 8005b54:	2301      	movs	r3, #1
 8005b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005b58:	78fa      	ldrb	r2, [r7, #3]
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	334d      	adds	r3, #77	@ 0x4d
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f005 ff88 	bl	800ba8a <USB_HC_Halt>
 8005b7a:	e34b      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f005 f9dc 	bl	800af42 <USB_ReadChInterrupts>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d139      	bne.n	8005c08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	334d      	adds	r3, #77	@ 0x4d
 8005ba4:	2205      	movs	r2, #5
 8005ba6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	331a      	adds	r3, #26
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	3319      	adds	r3, #25
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3344      	adds	r3, #68	@ 0x44
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 ff4b 	bl	800ba8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c00:	461a      	mov	r2, r3
 8005c02:	2340      	movs	r3, #64	@ 0x40
 8005c04:	6093      	str	r3, [r2, #8]
 8005c06:	e305      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f005 f996 	bl	800af42 <USB_ReadChInterrupts>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d11a      	bne.n	8005c56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2308      	movs	r3, #8
 8005c30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	334d      	adds	r3, #77	@ 0x4d
 8005c42:	2206      	movs	r2, #6
 8005c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f005 ff1b 	bl	800ba8a <USB_HC_Halt>
 8005c54:	e2de      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f005 f96f 	bl	800af42 <USB_ReadChInterrupts>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d144      	bne.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3344      	adds	r3, #68	@ 0x44
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	334d      	adds	r3, #77	@ 0x4d
 8005c92:	2204      	movs	r2, #4
 8005c94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3319      	adds	r3, #25
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d114      	bne.n	8005cd6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	3318      	adds	r3, #24
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3319      	adds	r3, #25
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f005 fed3 	bl	800ba8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2310      	movs	r3, #16
 8005cf4:	6093      	str	r3, [r2, #8]
 8005cf6:	e28d      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f005 f91e 	bl	800af42 <USB_ReadChInterrupts>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0c:	2b80      	cmp	r3, #128	@ 0x80
 8005d0e:	d169      	bne.n	8005de4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	799b      	ldrb	r3, [r3, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d111      	bne.n	8005d3c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	334d      	adds	r3, #77	@ 0x4d
 8005d28:	2207      	movs	r2, #7
 8005d2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	4611      	mov	r1, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f005 fea8 	bl	800ba8a <USB_HC_Halt>
 8005d3a:	e049      	b.n	8005dd0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3344      	adds	r3, #68	@ 0x44
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4403      	add	r3, r0
 8005d5c:	3344      	adds	r3, #68	@ 0x44
 8005d5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3344      	adds	r3, #68	@ 0x44
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d922      	bls.n	8005dbc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3344      	adds	r3, #68	@ 0x44
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	334c      	adds	r3, #76	@ 0x4c
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	334c      	adds	r3, #76	@ 0x4c
 8005dae:	781a      	ldrb	r2, [r3, #0]
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f00c fa83 	bl	80122c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005dba:	e009      	b.n	8005dd0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	334c      	adds	r3, #76	@ 0x4c
 8005dcc:	2202      	movs	r2, #2
 8005dce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2380      	movs	r3, #128	@ 0x80
 8005de0:	6093      	str	r3, [r2, #8]
 8005de2:	e217      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	4611      	mov	r1, r2
 8005dec:	4618      	mov	r0, r3
 8005dee:	f005 f8a8 	bl	800af42 <USB_ReadChInterrupts>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dfc:	d11b      	bne.n	8005e36 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	334d      	adds	r3, #77	@ 0x4d
 8005e0e:	2209      	movs	r2, #9
 8005e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f005 fe35 	bl	800ba8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e32:	6093      	str	r3, [r2, #8]
 8005e34:	e1ee      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f005 f87f 	bl	800af42 <USB_ReadChInterrupts>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	f040 81df 	bne.w	800620e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2302      	movs	r3, #2
 8005e60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	334d      	adds	r3, #77	@ 0x4d
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	f040 8093 	bne.w	8005fa0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	334d      	adds	r3, #77	@ 0x4d
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	334c      	adds	r3, #76	@ 0x4c
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3326      	adds	r3, #38	@ 0x26
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d00b      	beq.n	8005ed0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3326      	adds	r3, #38	@ 0x26
 8005ec8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	f040 8190 	bne.w	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	799b      	ldrb	r3, [r3, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d115      	bne.n	8005f04 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	333d      	adds	r3, #61	@ 0x3d
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	f083 0301 	eor.w	r3, r3, #1
 8005ef0:	b2d8      	uxtb	r0, r3
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	333d      	adds	r3, #61	@ 0x3d
 8005f00:	4602      	mov	r2, r0
 8005f02:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	799b      	ldrb	r3, [r3, #6]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f040 8171 	bne.w	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3334      	adds	r3, #52	@ 0x34
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8165 	beq.w	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f26:	78fa      	ldrb	r2, [r7, #3]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	3334      	adds	r3, #52	@ 0x34
 8005f36:	6819      	ldr	r1, [r3, #0]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4403      	add	r3, r0
 8005f46:	3328      	adds	r3, #40	@ 0x28
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	440b      	add	r3, r1
 8005f4c:	1e59      	subs	r1, r3, #1
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4403      	add	r3, r0
 8005f5c:	3328      	adds	r3, #40	@ 0x28
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f64:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 813f 	beq.w	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005f72:	78fa      	ldrb	r2, [r7, #3]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	333d      	adds	r3, #61	@ 0x3d
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	f083 0301 	eor.w	r3, r3, #1
 8005f8a:	b2d8      	uxtb	r0, r3
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	333d      	adds	r3, #61	@ 0x3d
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e127      	b.n	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	1a9b      	subs	r3, r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	334d      	adds	r3, #77	@ 0x4d
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d120      	bne.n	8005ff8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	334d      	adds	r3, #77	@ 0x4d
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	331b      	adds	r3, #27
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f040 8107 	bne.w	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	334c      	adds	r3, #76	@ 0x4c
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e0fb      	b.n	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	334d      	adds	r3, #77	@ 0x4d
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d13a      	bne.n	8006084 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	4613      	mov	r3, r2
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	334d      	adds	r3, #77	@ 0x4d
 800601e:	2202      	movs	r2, #2
 8006020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	334c      	adds	r3, #76	@ 0x4c
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	331b      	adds	r3, #27
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 80d1 	bne.w	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	331b      	adds	r3, #27
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	440a      	add	r2, r1
 8006078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800607c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006080:	6053      	str	r3, [r2, #4]
 8006082:	e0b5      	b.n	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	334d      	adds	r3, #77	@ 0x4d
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d114      	bne.n	80060c4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	334d      	adds	r3, #77	@ 0x4d
 80060aa:	2202      	movs	r2, #2
 80060ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	334c      	adds	r3, #76	@ 0x4c
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e095      	b.n	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	334d      	adds	r3, #77	@ 0x4d
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d114      	bne.n	8006104 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	334d      	adds	r3, #77	@ 0x4d
 80060ea:	2202      	movs	r2, #2
 80060ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	334c      	adds	r3, #76	@ 0x4c
 80060fe:	2205      	movs	r2, #5
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e075      	b.n	80061f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006104:	78fa      	ldrb	r2, [r7, #3]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	334d      	adds	r3, #77	@ 0x4d
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b07      	cmp	r3, #7
 8006118:	d00a      	beq.n	8006130 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	334d      	adds	r3, #77	@ 0x4d
 800612a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800612c:	2b09      	cmp	r3, #9
 800612e:	d170      	bne.n	8006212 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	334d      	adds	r3, #77	@ 0x4d
 8006140:	2202      	movs	r2, #2
 8006142:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	3344      	adds	r3, #68	@ 0x44
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	1c59      	adds	r1, r3, #1
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4403      	add	r3, r0
 8006164:	3344      	adds	r3, #68	@ 0x44
 8006166:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3344      	adds	r3, #68	@ 0x44
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d914      	bls.n	80061a8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3344      	adds	r3, #68	@ 0x44
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	334c      	adds	r3, #76	@ 0x4c
 80061a2:	2204      	movs	r2, #4
 80061a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061a6:	e022      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	334c      	adds	r3, #76	@ 0x4c
 80061b8:	2202      	movs	r2, #2
 80061ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e8:	461a      	mov	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	4613      	mov	r3, r2
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	334c      	adds	r3, #76	@ 0x4c
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f00c f85a 	bl	80122c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800620c:	e002      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006212:	bf00      	nop
  }
}
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b08a      	sub	sp, #40	@ 0x28
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	0c5b      	lsrs	r3, r3, #17
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800624e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d004      	beq.n	8006260 <HCD_RXQLVL_IRQHandler+0x46>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b05      	cmp	r3, #5
 800625a:	f000 80b6 	beq.w	80063ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800625e:	e0b7      	b.n	80063d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80b3 	beq.w	80063ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4613      	mov	r3, r2
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	332c      	adds	r3, #44	@ 0x2c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 80a7 	beq.w	80063ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4613      	mov	r3, r2
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3338      	adds	r3, #56	@ 0x38
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	18d1      	adds	r1, r2, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4613      	mov	r3, r2
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4403      	add	r3, r0
 80062a4:	3334      	adds	r3, #52	@ 0x34
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4299      	cmp	r1, r3
 80062aa:	f200 8083 	bhi.w	80063b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	332c      	adds	r3, #44	@ 0x2c
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	b292      	uxth	r2, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	f004 fdcf 	bl	800ae6c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	4613      	mov	r3, r2
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	332c      	adds	r3, #44	@ 0x2c
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	18d1      	adds	r1, r2, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4613      	mov	r3, r2
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4403      	add	r3, r0
 80062f2:	332c      	adds	r3, #44	@ 0x2c
 80062f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4613      	mov	r3, r2
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3338      	adds	r3, #56	@ 0x38
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	18d1      	adds	r1, r2, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4613      	mov	r3, r2
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4403      	add	r3, r0
 800631a:	3338      	adds	r3, #56	@ 0x38
 800631c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	0cdb      	lsrs	r3, r3, #19
 800632e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006332:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4613      	mov	r3, r2
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	3328      	adds	r3, #40	@ 0x28
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4293      	cmp	r3, r2
 800634c:	d13f      	bne.n	80063ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d03c      	beq.n	80063ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800636a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006372:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4613      	mov	r3, r2
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	333c      	adds	r3, #60	@ 0x3c
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f083 0301 	eor.w	r3, r3, #1
 800639c:	b2d8      	uxtb	r0, r3
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	4613      	mov	r3, r2
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	333c      	adds	r3, #60	@ 0x3c
 80063ae:	4602      	mov	r2, r0
 80063b0:	701a      	strb	r2, [r3, #0]
      break;
 80063b2:	e00c      	b.n	80063ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	334c      	adds	r3, #76	@ 0x4c
 80063c4:	2204      	movs	r2, #4
 80063c6:	701a      	strb	r2, [r3, #0]
      break;
 80063c8:	e001      	b.n	80063ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80063ce:	bf00      	nop
  }
}
 80063d0:	bf00      	nop
 80063d2:	3728      	adds	r7, #40	@ 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006404:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b02      	cmp	r3, #2
 800640e:	d10b      	bne.n	8006428 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d102      	bne.n	8006420 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f00b ff34 	bl	8012288 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b08      	cmp	r3, #8
 8006430:	d132      	bne.n	8006498 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f043 0308 	orr.w	r3, r3, #8
 8006438:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d126      	bne.n	8006492 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7a5b      	ldrb	r3, [r3, #9]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d113      	bne.n	8006474 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006456:	d106      	bne.n	8006466 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2102      	movs	r1, #2
 800645e:	4618      	mov	r0, r3
 8006460:	f004 fe94 	bl	800b18c <USB_InitFSLSPClkSel>
 8006464:	e011      	b.n	800648a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2101      	movs	r1, #1
 800646c:	4618      	mov	r0, r3
 800646e:	f004 fe8d 	bl	800b18c <USB_InitFSLSPClkSel>
 8006472:	e00a      	b.n	800648a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	79db      	ldrb	r3, [r3, #7]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d106      	bne.n	800648a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006482:	461a      	mov	r2, r3
 8006484:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006488:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f00b ff2a 	bl	80122e4 <HAL_HCD_PortEnabled_Callback>
 8006490:	e002      	b.n	8006498 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f00b ff34 	bl	8012300 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d103      	bne.n	80064aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f043 0320 	orr.w	r3, r3, #32
 80064a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064b0:	461a      	mov	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6013      	str	r3, [r2, #0]
}
 80064b6:	bf00      	nop
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e12b      	b.n	800672a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fc fbac 	bl	8002c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	@ 0x24
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006524:	f001 fa20 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8006528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4a81      	ldr	r2, [pc, #516]	@ (8006734 <HAL_I2C_Init+0x274>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d807      	bhi.n	8006544 <HAL_I2C_Init+0x84>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a80      	ldr	r2, [pc, #512]	@ (8006738 <HAL_I2C_Init+0x278>)
 8006538:	4293      	cmp	r3, r2
 800653a:	bf94      	ite	ls
 800653c:	2301      	movls	r3, #1
 800653e:	2300      	movhi	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e006      	b.n	8006552 <HAL_I2C_Init+0x92>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a7d      	ldr	r2, [pc, #500]	@ (800673c <HAL_I2C_Init+0x27c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	bf94      	ite	ls
 800654c:	2301      	movls	r3, #1
 800654e:	2300      	movhi	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e0e7      	b.n	800672a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a78      	ldr	r2, [pc, #480]	@ (8006740 <HAL_I2C_Init+0x280>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	0c9b      	lsrs	r3, r3, #18
 8006564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a6a      	ldr	r2, [pc, #424]	@ (8006734 <HAL_I2C_Init+0x274>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d802      	bhi.n	8006594 <HAL_I2C_Init+0xd4>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	3301      	adds	r3, #1
 8006592:	e009      	b.n	80065a8 <HAL_I2C_Init+0xe8>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	4a69      	ldr	r2, [pc, #420]	@ (8006744 <HAL_I2C_Init+0x284>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	099b      	lsrs	r3, r3, #6
 80065a6:	3301      	adds	r3, #1
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80065ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	495c      	ldr	r1, [pc, #368]	@ (8006734 <HAL_I2C_Init+0x274>)
 80065c4:	428b      	cmp	r3, r1
 80065c6:	d819      	bhi.n	80065fc <HAL_I2C_Init+0x13c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1e59      	subs	r1, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065dc:	400b      	ands	r3, r1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_I2C_Init+0x138>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1e59      	subs	r1, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f6:	e051      	b.n	800669c <HAL_I2C_Init+0x1dc>
 80065f8:	2304      	movs	r3, #4
 80065fa:	e04f      	b.n	800669c <HAL_I2C_Init+0x1dc>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d111      	bne.n	8006628 <HAL_I2C_Init+0x168>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1e58      	subs	r0, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	440b      	add	r3, r1
 8006612:	fbb0 f3f3 	udiv	r3, r0, r3
 8006616:	3301      	adds	r3, #1
 8006618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e012      	b.n	800664e <HAL_I2C_Init+0x18e>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1e58      	subs	r0, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6859      	ldr	r1, [r3, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	0099      	lsls	r1, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	fbb0 f3f3 	udiv	r3, r0, r3
 800663e:	3301      	adds	r3, #1
 8006640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Init+0x196>
 8006652:	2301      	movs	r3, #1
 8006654:	e022      	b.n	800669c <HAL_I2C_Init+0x1dc>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <HAL_I2C_Init+0x1bc>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1e58      	subs	r0, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6859      	ldr	r1, [r3, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	440b      	add	r3, r1
 800666c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006670:	3301      	adds	r3, #1
 8006672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800667a:	e00f      	b.n	800669c <HAL_I2C_Init+0x1dc>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1e58      	subs	r0, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	0099      	lsls	r1, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006692:	3301      	adds	r3, #1
 8006694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	6809      	ldr	r1, [r1, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80066ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6911      	ldr	r1, [r2, #16]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68d2      	ldr	r2, [r2, #12]
 80066d6:	4311      	orrs	r1, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	430b      	orrs	r3, r1
 80066de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	000186a0 	.word	0x000186a0
 8006738:	001e847f 	.word	0x001e847f
 800673c:	003d08ff 	.word	0x003d08ff
 8006740:	431bde83 	.word	0x431bde83
 8006744:	10624dd3 	.word	0x10624dd3

08006748 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e128      	b.n	80069ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a90      	ldr	r2, [pc, #576]	@ (80069b4 <HAL_I2S_Init+0x26c>)
 8006772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fc faad 	bl	8002cd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006790:	f023 030f 	bic.w	r3, r3, #15
 8006794:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2202      	movs	r2, #2
 800679c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d060      	beq.n	8006868 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80067ae:	2310      	movs	r3, #16
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e001      	b.n	80067b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80067b4:	2320      	movs	r3, #32
 80067b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d802      	bhi.n	80067c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80067c6:	2001      	movs	r0, #1
 80067c8:	f001 fa0a 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
 80067cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d6:	d125      	bne.n	8006824 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	3305      	adds	r3, #5
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	e01f      	b.n	8006842 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	fbb2 f2f3 	udiv	r2, r2, r3
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	3305      	adds	r3, #5
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e00e      	b.n	8006842 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	fbb2 f2f3 	udiv	r2, r2, r3
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	3305      	adds	r3, #5
 8006840:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4a5c      	ldr	r2, [pc, #368]	@ (80069b8 <HAL_I2S_Init+0x270>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	08db      	lsrs	r3, r3, #3
 800684c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e003      	b.n	8006870 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006868:	2302      	movs	r3, #2
 800686a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d902      	bls.n	800687c <HAL_I2S_Init+0x134>
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	2bff      	cmp	r3, #255	@ 0xff
 800687a:	d907      	bls.n	800688c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	f043 0210 	orr.w	r2, r3, #16
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e08f      	b.n	80069ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	ea42 0103 	orr.w	r1, r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	430a      	orrs	r2, r1
 800689e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80068aa:	f023 030f 	bic.w	r3, r3, #15
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6851      	ldr	r1, [r2, #4]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6892      	ldr	r2, [r2, #8]
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	68d2      	ldr	r2, [r2, #12]
 80068bc:	4311      	orrs	r1, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6992      	ldr	r2, [r2, #24]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d161      	bne.n	800699c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a38      	ldr	r2, [pc, #224]	@ (80069bc <HAL_I2S_Init+0x274>)
 80068dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a37      	ldr	r2, [pc, #220]	@ (80069c0 <HAL_I2S_Init+0x278>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d101      	bne.n	80068ec <HAL_I2S_Init+0x1a4>
 80068e8:	4b36      	ldr	r3, [pc, #216]	@ (80069c4 <HAL_I2S_Init+0x27c>)
 80068ea:	e001      	b.n	80068f0 <HAL_I2S_Init+0x1a8>
 80068ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	4932      	ldr	r1, [pc, #200]	@ (80069c0 <HAL_I2S_Init+0x278>)
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d101      	bne.n	8006900 <HAL_I2S_Init+0x1b8>
 80068fc:	4a31      	ldr	r2, [pc, #196]	@ (80069c4 <HAL_I2S_Init+0x27c>)
 80068fe:	e001      	b.n	8006904 <HAL_I2S_Init+0x1bc>
 8006900:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006904:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006908:	f023 030f 	bic.w	r3, r3, #15
 800690c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2b      	ldr	r2, [pc, #172]	@ (80069c0 <HAL_I2S_Init+0x278>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d101      	bne.n	800691c <HAL_I2S_Init+0x1d4>
 8006918:	4b2a      	ldr	r3, [pc, #168]	@ (80069c4 <HAL_I2S_Init+0x27c>)
 800691a:	e001      	b.n	8006920 <HAL_I2S_Init+0x1d8>
 800691c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006920:	2202      	movs	r2, #2
 8006922:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a25      	ldr	r2, [pc, #148]	@ (80069c0 <HAL_I2S_Init+0x278>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d101      	bne.n	8006932 <HAL_I2S_Init+0x1ea>
 800692e:	4b25      	ldr	r3, [pc, #148]	@ (80069c4 <HAL_I2S_Init+0x27c>)
 8006930:	e001      	b.n	8006936 <HAL_I2S_Init+0x1ee>
 8006932:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006942:	d003      	beq.n	800694c <HAL_I2S_Init+0x204>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800694c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	e001      	b.n	8006958 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006962:	4313      	orrs	r3, r2
 8006964:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800696c:	4313      	orrs	r3, r2
 800696e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006976:	4313      	orrs	r3, r2
 8006978:	b29a      	uxth	r2, r3
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	4313      	orrs	r3, r2
 800697e:	b29b      	uxth	r3, r3
 8006980:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006984:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a0d      	ldr	r2, [pc, #52]	@ (80069c0 <HAL_I2S_Init+0x278>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d101      	bne.n	8006994 <HAL_I2S_Init+0x24c>
 8006990:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <HAL_I2S_Init+0x27c>)
 8006992:	e001      	b.n	8006998 <HAL_I2S_Init+0x250>
 8006994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006998:	897a      	ldrh	r2, [r7, #10]
 800699a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3720      	adds	r7, #32
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	08006abf 	.word	0x08006abf
 80069b8:	cccccccd 	.word	0xcccccccd
 80069bc:	08006bd5 	.word	0x08006bd5
 80069c0:	40003800 	.word	0x40003800
 80069c4:	40003400 	.word	0x40003400

080069c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10e      	bne.n	8006a58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff ffb8 	bl	80069c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	b292      	uxth	r2, r2
 8006a74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	1c9a      	adds	r2, r3, #2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10e      	bne.n	8006ab6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006aa6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ff93 	bl	80069dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d13a      	bne.n	8006b50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d109      	bne.n	8006af8 <I2S_IRQHandler+0x3a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aee:	2b40      	cmp	r3, #64	@ 0x40
 8006af0:	d102      	bne.n	8006af8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ffb4 	bl	8006a60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b40      	cmp	r3, #64	@ 0x40
 8006b00:	d126      	bne.n	8006b50 <I2S_IRQHandler+0x92>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d11f      	bne.n	8006b50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	f043 0202 	orr.w	r2, r3, #2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff ff50 	bl	80069f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d136      	bne.n	8006bca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d109      	bne.n	8006b7a <I2S_IRQHandler+0xbc>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b70:	2b80      	cmp	r3, #128	@ 0x80
 8006b72:	d102      	bne.n	8006b7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ff45 	bl	8006a04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d122      	bne.n	8006bca <I2S_IRQHandler+0x10c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d11b      	bne.n	8006bca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ba0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bbc:	f043 0204 	orr.w	r2, r3, #4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff ff13 	bl	80069f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a92      	ldr	r2, [pc, #584]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d101      	bne.n	8006bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006bee:	4b92      	ldr	r3, [pc, #584]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006bf0:	e001      	b.n	8006bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006bf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a8b      	ldr	r2, [pc, #556]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c0c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c0e:	e001      	b.n	8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c20:	d004      	beq.n	8006c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 8099 	bne.w	8006d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d107      	bne.n	8006c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f925 	bl	8006e90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d107      	bne.n	8006c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9c8 	bl	8006ff0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c66:	2b40      	cmp	r3, #64	@ 0x40
 8006c68:	d13a      	bne.n	8006ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d035      	beq.n	8006ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a6e      	ldr	r2, [pc, #440]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c80:	e001      	b.n	8006c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006c82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4969      	ldr	r1, [pc, #420]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	d101      	bne.n	8006c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006c92:	4b69      	ldr	r3, [pc, #420]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c94:	e001      	b.n	8006c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006c96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	f043 0202 	orr.w	r2, r3, #2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fe88 	bl	80069f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	f040 80c3 	bne.w	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80bd 	beq.w	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a49      	ldr	r2, [pc, #292]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d12:	4b49      	ldr	r3, [pc, #292]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d14:	e001      	b.n	8006d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4944      	ldr	r1, [pc, #272]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d22:	428b      	cmp	r3, r1
 8006d24:	d101      	bne.n	8006d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d26:	4b44      	ldr	r3, [pc, #272]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d28:	e001      	b.n	8006d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d34:	2300      	movs	r3, #0
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	f043 0204 	orr.w	r2, r3, #4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fe4a 	bl	80069f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d5c:	e089      	b.n	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d107      	bne.n	8006d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f8be 	bl	8006ef4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d107      	bne.n	8006d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8fd 	bl	8006f8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b40      	cmp	r3, #64	@ 0x40
 8006d9a:	d12f      	bne.n	8006dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02a      	beq.n	8006dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006db4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1e      	ldr	r2, [pc, #120]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d101      	bne.n	8006dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dc2:	e001      	b.n	8006dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4919      	ldr	r1, [pc, #100]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006dd4:	4b18      	ldr	r3, [pc, #96]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dd6:	e001      	b.n	8006ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ddc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006de0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	f043 0202 	orr.w	r2, r3, #2
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fdfa 	bl	80069f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d136      	bne.n	8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d031      	beq.n	8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a07      	ldr	r2, [pc, #28]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e1c:	e001      	b.n	8006e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4902      	ldr	r1, [pc, #8]	@ (8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e2a:	428b      	cmp	r3, r1
 8006e2c:	d106      	bne.n	8006e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e2e:	4b02      	ldr	r3, [pc, #8]	@ (8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e30:	e006      	b.n	8006e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e32:	bf00      	nop
 8006e34:	40003800 	.word	0x40003800
 8006e38:	40003400 	.word	0x40003400
 8006e3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e44:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f043 0204 	orr.w	r2, r3, #4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fdc0 	bl	80069f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e70:	e000      	b.n	8006e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e72:	bf00      	nop
}
 8006e74:	bf00      	nop
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	1c99      	adds	r1, r3, #2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6251      	str	r1, [r2, #36]	@ 0x24
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d113      	bne.n	8006eea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff ffc9 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	1c99      	adds	r1, r3, #2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f06:	8819      	ldrh	r1, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <I2SEx_TxISR_I2SExt+0x90>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d101      	bne.n	8006f16 <I2SEx_TxISR_I2SExt+0x22>
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <I2SEx_TxISR_I2SExt+0x94>)
 8006f14:	e001      	b.n	8006f1a <I2SEx_TxISR_I2SExt+0x26>
 8006f16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d121      	bne.n	8006f7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a12      	ldr	r2, [pc, #72]	@ (8006f84 <I2SEx_TxISR_I2SExt+0x90>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <I2SEx_TxISR_I2SExt+0x50>
 8006f40:	4b11      	ldr	r3, [pc, #68]	@ (8006f88 <I2SEx_TxISR_I2SExt+0x94>)
 8006f42:	e001      	b.n	8006f48 <I2SEx_TxISR_I2SExt+0x54>
 8006f44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	490d      	ldr	r1, [pc, #52]	@ (8006f84 <I2SEx_TxISR_I2SExt+0x90>)
 8006f50:	428b      	cmp	r3, r1
 8006f52:	d101      	bne.n	8006f58 <I2SEx_TxISR_I2SExt+0x64>
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <I2SEx_TxISR_I2SExt+0x94>)
 8006f56:	e001      	b.n	8006f5c <I2SEx_TxISR_I2SExt+0x68>
 8006f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff81 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40003800 	.word	0x40003800
 8006f88:	40003400 	.word	0x40003400

08006f8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68d8      	ldr	r0, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	1c99      	adds	r1, r3, #2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006fa4:	b282      	uxth	r2, r0
 8006fa6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d113      	bne.n	8006fe8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006fce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ff4a 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a20      	ldr	r2, [pc, #128]	@ (8007080 <I2SEx_RxISR_I2SExt+0x90>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <I2SEx_RxISR_I2SExt+0x16>
 8007002:	4b20      	ldr	r3, [pc, #128]	@ (8007084 <I2SEx_RxISR_I2SExt+0x94>)
 8007004:	e001      	b.n	800700a <I2SEx_RxISR_I2SExt+0x1a>
 8007006:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800700a:	68d8      	ldr	r0, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	1c99      	adds	r1, r3, #2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007016:	b282      	uxth	r2, r0
 8007018:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d121      	bne.n	8007076 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a12      	ldr	r2, [pc, #72]	@ (8007080 <I2SEx_RxISR_I2SExt+0x90>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <I2SEx_RxISR_I2SExt+0x50>
 800703c:	4b11      	ldr	r3, [pc, #68]	@ (8007084 <I2SEx_RxISR_I2SExt+0x94>)
 800703e:	e001      	b.n	8007044 <I2SEx_RxISR_I2SExt+0x54>
 8007040:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	490d      	ldr	r1, [pc, #52]	@ (8007080 <I2SEx_RxISR_I2SExt+0x90>)
 800704c:	428b      	cmp	r3, r1
 800704e:	d101      	bne.n	8007054 <I2SEx_RxISR_I2SExt+0x64>
 8007050:	4b0c      	ldr	r3, [pc, #48]	@ (8007084 <I2SEx_RxISR_I2SExt+0x94>)
 8007052:	e001      	b.n	8007058 <I2SEx_RxISR_I2SExt+0x68>
 8007054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007058:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800705c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff ff03 	bl	8006e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40003800 	.word	0x40003800
 8007084:	40003400 	.word	0x40003400

08007088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e267      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d075      	beq.n	8007192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070a6:	4b88      	ldr	r3, [pc, #544]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00c      	beq.n	80070cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070b2:	4b85      	ldr	r3, [pc, #532]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d112      	bne.n	80070e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070be:	4b82      	ldr	r3, [pc, #520]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ca:	d10b      	bne.n	80070e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070cc:	4b7e      	ldr	r3, [pc, #504]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d05b      	beq.n	8007190 <HAL_RCC_OscConfig+0x108>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d157      	bne.n	8007190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e242      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ec:	d106      	bne.n	80070fc <HAL_RCC_OscConfig+0x74>
 80070ee:	4b76      	ldr	r3, [pc, #472]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a75      	ldr	r2, [pc, #468]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e01d      	b.n	8007138 <HAL_RCC_OscConfig+0xb0>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007104:	d10c      	bne.n	8007120 <HAL_RCC_OscConfig+0x98>
 8007106:	4b70      	ldr	r3, [pc, #448]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a6f      	ldr	r2, [pc, #444]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800710c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	4b6d      	ldr	r3, [pc, #436]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6c      	ldr	r2, [pc, #432]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e00b      	b.n	8007138 <HAL_RCC_OscConfig+0xb0>
 8007120:	4b69      	ldr	r3, [pc, #420]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a68      	ldr	r2, [pc, #416]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	4b66      	ldr	r3, [pc, #408]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a65      	ldr	r2, [pc, #404]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007140:	f7fc f9a8 	bl	8003494 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007148:	f7fc f9a4 	bl	8003494 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b64      	cmp	r3, #100	@ 0x64
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e207      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	4b5b      	ldr	r3, [pc, #364]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f0      	beq.n	8007148 <HAL_RCC_OscConfig+0xc0>
 8007166:	e014      	b.n	8007192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fc f994 	bl	8003494 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007170:	f7fc f990 	bl	8003494 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	@ 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e1f3      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007182:	4b51      	ldr	r3, [pc, #324]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0xe8>
 800718e:	e000      	b.n	8007192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d063      	beq.n	8007266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800719e:	4b4a      	ldr	r3, [pc, #296]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071aa:	4b47      	ldr	r3, [pc, #284]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d11c      	bne.n	80071f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071b6:	4b44      	ldr	r3, [pc, #272]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d116      	bne.n	80071f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c2:	4b41      	ldr	r3, [pc, #260]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_RCC_OscConfig+0x152>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d001      	beq.n	80071da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e1c7      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071da:	4b3b      	ldr	r3, [pc, #236]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4937      	ldr	r1, [pc, #220]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ee:	e03a      	b.n	8007266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071f8:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <HAL_RCC_OscConfig+0x244>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fe:	f7fc f949 	bl	8003494 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007206:	f7fc f945 	bl	8003494 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e1a8      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007218:	4b2b      	ldr	r3, [pc, #172]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0f0      	beq.n	8007206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4925      	ldr	r1, [pc, #148]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]
 8007238:	e015      	b.n	8007266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800723a:	4b24      	ldr	r3, [pc, #144]	@ (80072cc <HAL_RCC_OscConfig+0x244>)
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fc f928 	bl	8003494 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007248:	f7fc f924 	bl	8003494 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e187      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725a:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d036      	beq.n	80072e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800727a:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <HAL_RCC_OscConfig+0x248>)
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007280:	f7fc f908 	bl	8003494 <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007288:	f7fc f904 	bl	8003494 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e167      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800729a:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <HAL_RCC_OscConfig+0x240>)
 800729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0f0      	beq.n	8007288 <HAL_RCC_OscConfig+0x200>
 80072a6:	e01b      	b.n	80072e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072a8:	4b09      	ldr	r3, [pc, #36]	@ (80072d0 <HAL_RCC_OscConfig+0x248>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ae:	f7fc f8f1 	bl	8003494 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b4:	e00e      	b.n	80072d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072b6:	f7fc f8ed 	bl	8003494 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d907      	bls.n	80072d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e150      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
 80072c8:	40023800 	.word	0x40023800
 80072cc:	42470000 	.word	0x42470000
 80072d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d4:	4b88      	ldr	r3, [pc, #544]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80072d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1ea      	bne.n	80072b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8097 	beq.w	800741c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072f2:	4b81      	ldr	r3, [pc, #516]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	4b7d      	ldr	r3, [pc, #500]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	4a7c      	ldr	r2, [pc, #496]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800730c:	6413      	str	r3, [r2, #64]	@ 0x40
 800730e:	4b7a      	ldr	r3, [pc, #488]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800731e:	4b77      	ldr	r3, [pc, #476]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d118      	bne.n	800735c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800732a:	4b74      	ldr	r3, [pc, #464]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a73      	ldr	r2, [pc, #460]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007336:	f7fc f8ad 	bl	8003494 <HAL_GetTick>
 800733a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800733c:	e008      	b.n	8007350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800733e:	f7fc f8a9 	bl	8003494 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e10c      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007350:	4b6a      	ldr	r3, [pc, #424]	@ (80074fc <HAL_RCC_OscConfig+0x474>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0f0      	beq.n	800733e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d106      	bne.n	8007372 <HAL_RCC_OscConfig+0x2ea>
 8007364:	4b64      	ldr	r3, [pc, #400]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007368:	4a63      	ldr	r2, [pc, #396]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007370:	e01c      	b.n	80073ac <HAL_RCC_OscConfig+0x324>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b05      	cmp	r3, #5
 8007378:	d10c      	bne.n	8007394 <HAL_RCC_OscConfig+0x30c>
 800737a:	4b5f      	ldr	r3, [pc, #380]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737e:	4a5e      	ldr	r2, [pc, #376]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	6713      	str	r3, [r2, #112]	@ 0x70
 8007386:	4b5c      	ldr	r3, [pc, #368]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	4a5b      	ldr	r2, [pc, #364]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6713      	str	r3, [r2, #112]	@ 0x70
 8007392:	e00b      	b.n	80073ac <HAL_RCC_OscConfig+0x324>
 8007394:	4b58      	ldr	r3, [pc, #352]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007398:	4a57      	ldr	r2, [pc, #348]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a0:	4b55      	ldr	r3, [pc, #340]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a4:	4a54      	ldr	r2, [pc, #336]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80073a6:	f023 0304 	bic.w	r3, r3, #4
 80073aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d015      	beq.n	80073e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b4:	f7fc f86e 	bl	8003494 <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ba:	e00a      	b.n	80073d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073bc:	f7fc f86a 	bl	8003494 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e0cb      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d2:	4b49      	ldr	r3, [pc, #292]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0ee      	beq.n	80073bc <HAL_RCC_OscConfig+0x334>
 80073de:	e014      	b.n	800740a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073e0:	f7fc f858 	bl	8003494 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e6:	e00a      	b.n	80073fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073e8:	f7fc f854 	bl	8003494 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e0b5      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073fe:	4b3e      	ldr	r3, [pc, #248]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1ee      	bne.n	80073e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d105      	bne.n	800741c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007410:	4b39      	ldr	r3, [pc, #228]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	4a38      	ldr	r2, [pc, #224]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800741a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80a1 	beq.w	8007568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007426:	4b34      	ldr	r3, [pc, #208]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 030c 	and.w	r3, r3, #12
 800742e:	2b08      	cmp	r3, #8
 8007430:	d05c      	beq.n	80074ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d141      	bne.n	80074be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743a:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <HAL_RCC_OscConfig+0x478>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007440:	f7fc f828 	bl	8003494 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007448:	f7fc f824 	bl	8003494 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e087      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745a:	4b27      	ldr	r3, [pc, #156]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69da      	ldr	r2, [r3, #28]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007474:	019b      	lsls	r3, r3, #6
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	3b01      	subs	r3, #1
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	061b      	lsls	r3, r3, #24
 800748a:	491b      	ldr	r1, [pc, #108]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 800748c:	4313      	orrs	r3, r2
 800748e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007490:	4b1b      	ldr	r3, [pc, #108]	@ (8007500 <HAL_RCC_OscConfig+0x478>)
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007496:	f7fb fffd 	bl	8003494 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800749e:	f7fb fff9 	bl	8003494 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e05c      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b0:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0f0      	beq.n	800749e <HAL_RCC_OscConfig+0x416>
 80074bc:	e054      	b.n	8007568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074be:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <HAL_RCC_OscConfig+0x478>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c4:	f7fb ffe6 	bl	8003494 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074cc:	f7fb ffe2 	bl	8003494 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e045      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <HAL_RCC_OscConfig+0x470>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x444>
 80074ea:	e03d      	b.n	8007568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d107      	bne.n	8007504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e038      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
 80074f8:	40023800 	.word	0x40023800
 80074fc:	40007000 	.word	0x40007000
 8007500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007504:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <HAL_RCC_OscConfig+0x4ec>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d028      	beq.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800751c:	429a      	cmp	r2, r3
 800751e:	d121      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d11a      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007534:	4013      	ands	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800753a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800753c:	4293      	cmp	r3, r2
 800753e:	d111      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	3b01      	subs	r3, #1
 800754e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d107      	bne.n	8007564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800

08007578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0cc      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800758c:	4b68      	ldr	r3, [pc, #416]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d90c      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759a:	4b65      	ldr	r3, [pc, #404]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a2:	4b63      	ldr	r3, [pc, #396]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e0b8      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d020      	beq.n	8007602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075cc:	4b59      	ldr	r3, [pc, #356]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4a58      	ldr	r2, [pc, #352]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075e4:	4b53      	ldr	r3, [pc, #332]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4a52      	ldr	r2, [pc, #328]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075f0:	4b50      	ldr	r3, [pc, #320]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	494d      	ldr	r1, [pc, #308]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d044      	beq.n	8007698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d107      	bne.n	8007626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	4b47      	ldr	r3, [pc, #284]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d119      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e07f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d003      	beq.n	8007636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007632:	2b03      	cmp	r3, #3
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007636:	4b3f      	ldr	r3, [pc, #252]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e06f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007646:	4b3b      	ldr	r3, [pc, #236]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e067      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007656:	4b37      	ldr	r3, [pc, #220]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4934      	ldr	r1, [pc, #208]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007668:	f7fb ff14 	bl	8003494 <HAL_GetTick>
 800766c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766e:	e00a      	b.n	8007686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007670:	f7fb ff10 	bl	8003494 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800767e:	4293      	cmp	r3, r2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e04f      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	4b2b      	ldr	r3, [pc, #172]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 020c 	and.w	r2, r3, #12
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	429a      	cmp	r2, r3
 8007696:	d1eb      	bne.n	8007670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007698:	4b25      	ldr	r3, [pc, #148]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d20c      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a6:	4b22      	ldr	r3, [pc, #136]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ae:	4b20      	ldr	r3, [pc, #128]	@ (8007730 <HAL_RCC_ClockConfig+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e032      	b.n	8007726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076cc:	4b19      	ldr	r3, [pc, #100]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4916      	ldr	r1, [pc, #88]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ea:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	490e      	ldr	r1, [pc, #56]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076fe:	f000 f821 	bl	8007744 <HAL_RCC_GetSysClockFreq>
 8007702:	4602      	mov	r2, r0
 8007704:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	091b      	lsrs	r3, r3, #4
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	490a      	ldr	r1, [pc, #40]	@ (8007738 <HAL_RCC_ClockConfig+0x1c0>)
 8007710:	5ccb      	ldrb	r3, [r1, r3]
 8007712:	fa22 f303 	lsr.w	r3, r2, r3
 8007716:	4a09      	ldr	r2, [pc, #36]	@ (800773c <HAL_RCC_ClockConfig+0x1c4>)
 8007718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800771a:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7fb fca6 	bl	8003070 <HAL_InitTick>

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023c00 	.word	0x40023c00
 8007734:	40023800 	.word	0x40023800
 8007738:	080160c0 	.word	0x080160c0
 800773c:	20000010 	.word	0x20000010
 8007740:	20000014 	.word	0x20000014

08007744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007748:	b094      	sub	sp, #80	@ 0x50
 800774a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007750:	2300      	movs	r3, #0
 8007752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007754:	2300      	movs	r3, #0
 8007756:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800775c:	4b79      	ldr	r3, [pc, #484]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 030c 	and.w	r3, r3, #12
 8007764:	2b08      	cmp	r3, #8
 8007766:	d00d      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x40>
 8007768:	2b08      	cmp	r3, #8
 800776a:	f200 80e1 	bhi.w	8007930 <HAL_RCC_GetSysClockFreq+0x1ec>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x34>
 8007772:	2b04      	cmp	r3, #4
 8007774:	d003      	beq.n	800777e <HAL_RCC_GetSysClockFreq+0x3a>
 8007776:	e0db      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007778:	4b73      	ldr	r3, [pc, #460]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x204>)
 800777a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800777c:	e0db      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800777e:	4b73      	ldr	r3, [pc, #460]	@ (800794c <HAL_RCC_GetSysClockFreq+0x208>)
 8007780:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007782:	e0d8      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007784:	4b6f      	ldr	r3, [pc, #444]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800778e:	4b6d      	ldr	r3, [pc, #436]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d063      	beq.n	8007862 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779a:	4b6a      	ldr	r3, [pc, #424]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	2200      	movs	r2, #0
 80077a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077b6:	4622      	mov	r2, r4
 80077b8:	462b      	mov	r3, r5
 80077ba:	f04f 0000 	mov.w	r0, #0
 80077be:	f04f 0100 	mov.w	r1, #0
 80077c2:	0159      	lsls	r1, r3, #5
 80077c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c8:	0150      	lsls	r0, r2, #5
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4621      	mov	r1, r4
 80077d0:	1a51      	subs	r1, r2, r1
 80077d2:	6139      	str	r1, [r7, #16]
 80077d4:	4629      	mov	r1, r5
 80077d6:	eb63 0301 	sbc.w	r3, r3, r1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077e8:	4659      	mov	r1, fp
 80077ea:	018b      	lsls	r3, r1, #6
 80077ec:	4651      	mov	r1, sl
 80077ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077f2:	4651      	mov	r1, sl
 80077f4:	018a      	lsls	r2, r1, #6
 80077f6:	4651      	mov	r1, sl
 80077f8:	ebb2 0801 	subs.w	r8, r2, r1
 80077fc:	4659      	mov	r1, fp
 80077fe:	eb63 0901 	sbc.w	r9, r3, r1
 8007802:	f04f 0200 	mov.w	r2, #0
 8007806:	f04f 0300 	mov.w	r3, #0
 800780a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800780e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007816:	4690      	mov	r8, r2
 8007818:	4699      	mov	r9, r3
 800781a:	4623      	mov	r3, r4
 800781c:	eb18 0303 	adds.w	r3, r8, r3
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	462b      	mov	r3, r5
 8007824:	eb49 0303 	adc.w	r3, r9, r3
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007836:	4629      	mov	r1, r5
 8007838:	024b      	lsls	r3, r1, #9
 800783a:	4621      	mov	r1, r4
 800783c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007840:	4621      	mov	r1, r4
 8007842:	024a      	lsls	r2, r1, #9
 8007844:	4610      	mov	r0, r2
 8007846:	4619      	mov	r1, r3
 8007848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800784a:	2200      	movs	r2, #0
 800784c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800784e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007854:	f7f9 fa08 	bl	8000c68 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4613      	mov	r3, r2
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	e058      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007862:	4b38      	ldr	r3, [pc, #224]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	099b      	lsrs	r3, r3, #6
 8007868:	2200      	movs	r2, #0
 800786a:	4618      	mov	r0, r3
 800786c:	4611      	mov	r1, r2
 800786e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007872:	623b      	str	r3, [r7, #32]
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
 8007878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	f04f 0000 	mov.w	r0, #0
 8007884:	f04f 0100 	mov.w	r1, #0
 8007888:	0159      	lsls	r1, r3, #5
 800788a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800788e:	0150      	lsls	r0, r2, #5
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4641      	mov	r1, r8
 8007896:	ebb2 0a01 	subs.w	sl, r2, r1
 800789a:	4649      	mov	r1, r9
 800789c:	eb63 0b01 	sbc.w	fp, r3, r1
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078b4:	ebb2 040a 	subs.w	r4, r2, sl
 80078b8:	eb63 050b 	sbc.w	r5, r3, fp
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	00eb      	lsls	r3, r5, #3
 80078c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ca:	00e2      	lsls	r2, r4, #3
 80078cc:	4614      	mov	r4, r2
 80078ce:	461d      	mov	r5, r3
 80078d0:	4643      	mov	r3, r8
 80078d2:	18e3      	adds	r3, r4, r3
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	464b      	mov	r3, r9
 80078d8:	eb45 0303 	adc.w	r3, r5, r3
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ea:	4629      	mov	r1, r5
 80078ec:	028b      	lsls	r3, r1, #10
 80078ee:	4621      	mov	r1, r4
 80078f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078f4:	4621      	mov	r1, r4
 80078f6:	028a      	lsls	r2, r1, #10
 80078f8:	4610      	mov	r0, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078fe:	2200      	movs	r2, #0
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	61fa      	str	r2, [r7, #28]
 8007904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007908:	f7f9 f9ae 	bl	8000c68 <__aeabi_uldivmod>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4613      	mov	r3, r2
 8007912:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007914:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <HAL_RCC_GetSysClockFreq+0x200>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	3301      	adds	r3, #1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800792e:	e002      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <HAL_RCC_GetSysClockFreq+0x204>)
 8007932:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007938:	4618      	mov	r0, r3
 800793a:	3750      	adds	r7, #80	@ 0x50
 800793c:	46bd      	mov	sp, r7
 800793e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800
 8007948:	00f42400 	.word	0x00f42400
 800794c:	007a1200 	.word	0x007a1200

08007950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <HAL_RCC_GetHCLKFreq+0x14>)
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000010 	.word	0x20000010

08007968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800796c:	f7ff fff0 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007970:	4602      	mov	r2, r0
 8007972:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0a9b      	lsrs	r3, r3, #10
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	4903      	ldr	r1, [pc, #12]	@ (800798c <HAL_RCC_GetPCLK1Freq+0x24>)
 800797e:	5ccb      	ldrb	r3, [r1, r3]
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40023800 	.word	0x40023800
 800798c:	080160d0 	.word	0x080160d0

08007990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007994:	f7ff ffdc 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b05      	ldr	r3, [pc, #20]	@ (80079b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0b5b      	lsrs	r3, r3, #13
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4903      	ldr	r1, [pc, #12]	@ (80079b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40023800 	.word	0x40023800
 80079b4:	080160d0 	.word	0x080160d0

080079b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	220f      	movs	r2, #15
 80079c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079c8:	4b12      	ldr	r3, [pc, #72]	@ (8007a14 <HAL_RCC_GetClockConfig+0x5c>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0203 	and.w	r2, r3, #3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <HAL_RCC_GetClockConfig+0x5c>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <HAL_RCC_GetClockConfig+0x5c>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079ec:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <HAL_RCC_GetClockConfig+0x5c>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079fa:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <HAL_RCC_GetClockConfig+0x60>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0207 	and.w	r2, r3, #7
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	601a      	str	r2, [r3, #0]
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	40023c00 	.word	0x40023c00

08007a1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d105      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d035      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a44:	4b62      	ldr	r3, [pc, #392]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a4a:	f7fb fd23 	bl	8003494 <HAL_GetTick>
 8007a4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a50:	e008      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a52:	f7fb fd1f 	bl	8003494 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d901      	bls.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e0b0      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a64:	4b5b      	ldr	r3, [pc, #364]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f0      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	019a      	lsls	r2, r3, #6
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	071b      	lsls	r3, r3, #28
 8007a7c:	4955      	ldr	r1, [pc, #340]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a84:	4b52      	ldr	r3, [pc, #328]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a8a:	f7fb fd03 	bl	8003494 <HAL_GetTick>
 8007a8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a92:	f7fb fcff 	bl	8003494 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e090      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 8083 	beq.w	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	4b44      	ldr	r3, [pc, #272]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac6:	4a43      	ldr	r2, [pc, #268]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ace:	4b41      	ldr	r3, [pc, #260]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ada:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ae6:	f7fb fcd5 	bl	8003494 <HAL_GetTick>
 8007aea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007aec:	e008      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007aee:	f7fb fcd1 	bl	8003494 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e062      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b00:	4b35      	ldr	r3, [pc, #212]	@ (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0f0      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b0c:	4b31      	ldr	r3, [pc, #196]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d02f      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d028      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b34:	4b29      	ldr	r3, [pc, #164]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b3a:	4b28      	ldr	r3, [pc, #160]	@ (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b40:	4a24      	ldr	r2, [pc, #144]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b46:	4b23      	ldr	r3, [pc, #140]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d114      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b52:	f7fb fc9f 	bl	8003494 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b58:	e00a      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b5a:	f7fb fc9b 	bl	8003494 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d901      	bls.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e02a      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b70:	4b18      	ldr	r3, [pc, #96]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0ee      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b88:	d10d      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b8a:	4b12      	ldr	r3, [pc, #72]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b9e:	490d      	ldr	r1, [pc, #52]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	608b      	str	r3, [r1, #8]
 8007ba4:	e005      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007bb0:	6093      	str	r3, [r2, #8]
 8007bb2:	4b08      	ldr	r3, [pc, #32]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bbe:	4905      	ldr	r1, [pc, #20]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	42470068 	.word	0x42470068
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	42470e40 	.word	0x42470e40

08007be0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d13f      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007bfe:	4b24      	ldr	r3, [pc, #144]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d006      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c14:	d12f      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c16:	4b1f      	ldr	r3, [pc, #124]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c18:	617b      	str	r3, [r7, #20]
          break;
 8007c1a:	e02f      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c28:	d108      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c2a:	4b19      	ldr	r3, [pc, #100]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c32:	4a19      	ldr	r2, [pc, #100]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	e007      	b.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c3c:	4b14      	ldr	r3, [pc, #80]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c44:	4a15      	ldr	r2, [pc, #84]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007c4c:	4b10      	ldr	r3, [pc, #64]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c52:	099b      	lsrs	r3, r3, #6
 8007c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007c60:	4b0b      	ldr	r3, [pc, #44]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c66:	0f1b      	lsrs	r3, r3, #28
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	617b      	str	r3, [r7, #20]
          break;
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
          break;
 8007c7a:	bf00      	nop
        }
      }
      break;
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8007c7e:	bf00      	nop
    }
  }
  return frequency;
 8007c80:	697b      	ldr	r3, [r7, #20]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40023800 	.word	0x40023800
 8007c94:	00bb8000 	.word	0x00bb8000
 8007c98:	007a1200 	.word	0x007a1200
 8007c9c:	00f42400 	.word	0x00f42400

08007ca0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e073      	b.n	8007d9e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7f5b      	ldrb	r3, [r3, #29]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fb f884 	bl	8002dd4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d055      	beq.n	8007d8c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	22ca      	movs	r2, #202	@ 0xca
 8007ce6:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2253      	movs	r2, #83	@ 0x53
 8007cee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa49 	bl	8008188 <RTC_EnterInitMode>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d12c      	bne.n	8007d5a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d12:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6899      	ldr	r1, [r3, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68d2      	ldr	r2, [r2, #12]
 8007d3a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6919      	ldr	r1, [r3, #16]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	041a      	lsls	r2, r3, #16
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fa50 	bl	80081f6 <RTC_ExitInitMode>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d110      	bne.n	8007d82 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007d6e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	22ff      	movs	r2, #255	@ 0xff
 8007d88:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d8a:	e001      	b.n	8007d90 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007da6:	b590      	push	{r4, r7, lr}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	7f1b      	ldrb	r3, [r3, #28]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_RTC_SetTime+0x1c>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e087      	b.n	8007ed2 <HAL_RTC_SetTime+0x12c>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d126      	bne.n	8007e22 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d102      	bne.n	8007de8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fa27 	bl	8008240 <RTC_ByteToBcd2>
 8007df2:	4603      	mov	r3, r0
 8007df4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fa20 	bl	8008240 <RTC_ByteToBcd2>
 8007e00:	4603      	mov	r3, r0
 8007e02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e04:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	789b      	ldrb	r3, [r3, #2]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fa18 	bl	8008240 <RTC_ByteToBcd2>
 8007e10:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e018      	b.n	8007e54 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007e42:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007e48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	78db      	ldrb	r3, [r3, #3]
 8007e4e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	22ca      	movs	r2, #202	@ 0xca
 8007e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2253      	movs	r2, #83	@ 0x53
 8007e62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f98f 	bl	8008188 <RTC_EnterInitMode>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007e6e:	7cfb      	ldrb	r3, [r7, #19]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d120      	bne.n	8007eb6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007e7e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007e82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007e92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6899      	ldr	r1, [r3, #8]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f9a2 	bl	80081f6 <RTC_ExitInitMode>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007eb6:	7cfb      	ldrb	r3, [r7, #19]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	22ff      	movs	r2, #255	@ 0xff
 8007ec8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	771a      	strb	r2, [r3, #28]

  return status;
 8007ed0:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd90      	pop	{r4, r7, pc}

08007eda <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007f0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007f10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	0c1b      	lsrs	r3, r3, #16
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	0d9b      	lsrs	r3, r3, #22
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d11a      	bne.n	8007f8c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f98e 	bl	800827c <RTC_Bcd2ToByte>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f985 	bl	800827c <RTC_Bcd2ToByte>
 8007f72:	4603      	mov	r3, r0
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	789b      	ldrb	r3, [r3, #2]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f97c 	bl	800827c <RTC_Bcd2ToByte>
 8007f84:	4603      	mov	r3, r0
 8007f86:	461a      	mov	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f96:	b590      	push	{r4, r7, lr}
 8007f98:	b087      	sub	sp, #28
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	7f1b      	ldrb	r3, [r3, #28]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_RTC_SetDate+0x1c>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e071      	b.n	8008096 <HAL_RTC_SetDate+0x100>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10e      	bne.n	8007fe2 <HAL_RTC_SetDate+0x4c>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d008      	beq.n	8007fe2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	f023 0310 	bic.w	r3, r3, #16
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	330a      	adds	r3, #10
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11c      	bne.n	8008022 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	78db      	ldrb	r3, [r3, #3]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f927 	bl	8008240 <RTC_ByteToBcd2>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f920 	bl	8008240 <RTC_ByteToBcd2>
 8008000:	4603      	mov	r3, r0
 8008002:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008004:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	789b      	ldrb	r3, [r3, #2]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f918 	bl	8008240 <RTC_ByteToBcd2>
 8008010:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008012:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e00e      	b.n	8008040 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	78db      	ldrb	r3, [r3, #3]
 8008026:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800802e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008034:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	22ca      	movs	r2, #202	@ 0xca
 8008046:	625a      	str	r2, [r3, #36]	@ 0x24
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2253      	movs	r2, #83	@ 0x53
 800804e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f899 	bl	8008188 <RTC_EnterInitMode>
 8008056:	4603      	mov	r3, r0
 8008058:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800805a:	7cfb      	ldrb	r3, [r7, #19]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10c      	bne.n	800807a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800806a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800806e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 f8c0 	bl	80081f6 <RTC_ExitInitMode>
 8008076:	4603      	mov	r3, r0
 8008078:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800807a:	7cfb      	ldrb	r3, [r7, #19]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	22ff      	movs	r2, #255	@ 0xff
 800808c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]

  return status;
 8008094:	7cfb      	ldrb	r3, [r7, #19]
}
 8008096:	4618      	mov	r0, r3
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd90      	pop	{r4, r7, pc}

0800809e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b086      	sub	sp, #24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80080b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80080bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	0c1b      	lsrs	r3, r3, #16
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 031f 	and.w	r3, r3, #31
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	0b5b      	lsrs	r3, r3, #13
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11a      	bne.n	8008132 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	78db      	ldrb	r3, [r3, #3]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f8bb 	bl	800827c <RTC_Bcd2ToByte>
 8008106:	4603      	mov	r3, r0
 8008108:	461a      	mov	r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f8b2 	bl	800827c <RTC_Bcd2ToByte>
 8008118:	4603      	mov	r3, r0
 800811a:	461a      	mov	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	789b      	ldrb	r3, [r3, #2]
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f8a9 	bl	800827c <RTC_Bcd2ToByte>
 800812a:	4603      	mov	r3, r0
 800812c:	461a      	mov	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a0d      	ldr	r2, [pc, #52]	@ (8008184 <HAL_RTC_WaitForSynchro+0x48>)
 800814e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008150:	f7fb f9a0 	bl	8003494 <HAL_GetTick>
 8008154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008156:	e009      	b.n	800816c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008158:	f7fb f99c 	bl	8003494 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008166:	d901      	bls.n	800816c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e007      	b.n	800817c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ee      	beq.n	8008158 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	00017f5f 	.word	0x00017f5f

08008188 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d122      	bne.n	80081ec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80081b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081b6:	f7fb f96d 	bl	8003494 <HAL_GetTick>
 80081ba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80081bc:	e00c      	b.n	80081d8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081be:	f7fb f969 	bl	8003494 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081cc:	d904      	bls.n	80081d8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2204      	movs	r2, #4
 80081d2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <RTC_EnterInitMode+0x64>
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d1e8      	bne.n	80081be <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008210:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff ff8b 	bl	800813c <HAL_RTC_WaitForSynchro>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2204      	movs	r2, #4
 8008230:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800824e:	e005      	b.n	800825c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3301      	adds	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	3b0a      	subs	r3, #10
 800825a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b09      	cmp	r3, #9
 8008260:	d8f6      	bhi.n	8008250 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	b2da      	uxtb	r2, r3
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	4313      	orrs	r3, r2
 800826e:	b2db      	uxtb	r3, r3
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	091b      	lsrs	r3, r3, #4
 800828e:	b2db      	uxtb	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	4413      	add	r3, r2
 80082aa:	b2db      	uxtb	r3, r3
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e07b      	b.n	80083c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082da:	d009      	beq.n	80082f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	61da      	str	r2, [r3, #28]
 80082e2:	e005      	b.n	80082f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fa fd8c 	bl	8002e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008374:	ea42 0103 	orr.w	r1, r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	0c1b      	lsrs	r3, r3, #16
 800838e:	f003 0104 	and.w	r1, r3, #4
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008396:	f003 0210 	and.w	r2, r3, #16
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b088      	sub	sp, #32
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_SPI_Transmit+0x22>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e12d      	b.n	8008648 <HAL_SPI_Transmit+0x27e>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083f4:	f7fb f84e 	bl	8003494 <HAL_GetTick>
 80083f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b01      	cmp	r3, #1
 8008408:	d002      	beq.n	8008410 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800840a:	2302      	movs	r3, #2
 800840c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800840e:	e116      	b.n	800863e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_SPI_Transmit+0x52>
 8008416:	88fb      	ldrh	r3, [r7, #6]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008420:	e10d      	b.n	800863e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2203      	movs	r2, #3
 8008426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	88fa      	ldrh	r2, [r7, #6]
 8008440:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008468:	d10f      	bne.n	800848a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008478:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008488:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008494:	2b40      	cmp	r3, #64	@ 0x40
 8008496:	d007      	beq.n	80084a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b0:	d14f      	bne.n	8008552 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <HAL_SPI_Transmit+0xf6>
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d142      	bne.n	8008546 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c4:	881a      	ldrh	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d0:	1c9a      	adds	r2, r3, #2
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084e4:	e02f      	b.n	8008546 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d112      	bne.n	800851a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f8:	881a      	ldrh	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008504:	1c9a      	adds	r2, r3, #2
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800850e:	b29b      	uxth	r3, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	b29a      	uxth	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008518:	e015      	b.n	8008546 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800851a:	f7fa ffbb 	bl	8003494 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d803      	bhi.n	8008532 <HAL_SPI_Transmit+0x168>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008530:	d102      	bne.n	8008538 <HAL_SPI_Transmit+0x16e>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008544:	e07b      	b.n	800863e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1ca      	bne.n	80084e6 <HAL_SPI_Transmit+0x11c>
 8008550:	e050      	b.n	80085f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_SPI_Transmit+0x196>
 800855a:	8afb      	ldrh	r3, [r7, #22]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d144      	bne.n	80085ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	7812      	ldrb	r2, [r2, #0]
 800856c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008586:	e030      	b.n	80085ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b02      	cmp	r3, #2
 8008594:	d113      	bne.n	80085be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	330c      	adds	r3, #12
 80085a0:	7812      	ldrb	r2, [r2, #0]
 80085a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80085bc:	e015      	b.n	80085ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085be:	f7fa ff69 	bl	8003494 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d803      	bhi.n	80085d6 <HAL_SPI_Transmit+0x20c>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085d4:	d102      	bne.n	80085dc <HAL_SPI_Transmit+0x212>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80085e8:	e029      	b.n	800863e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1c9      	bne.n	8008588 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fbdf 	bl	8008dbc <SPI_EndRxTxTransaction>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10a      	bne.n	8008628 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	77fb      	strb	r3, [r7, #31]
 8008634:	e003      	b.n	800863e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008646:	7ffb      	ldrb	r3, [r7, #31]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af02      	add	r7, sp, #8
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	4613      	mov	r3, r2
 800865e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b01      	cmp	r3, #1
 800866e:	d002      	beq.n	8008676 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008670:	2302      	movs	r3, #2
 8008672:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008674:	e0fb      	b.n	800886e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800867e:	d112      	bne.n	80086a6 <HAL_SPI_Receive+0x56>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10e      	bne.n	80086a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2204      	movs	r2, #4
 800868c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008690:	88fa      	ldrh	r2, [r7, #6]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4613      	mov	r3, r2
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 f8ef 	bl	8008880 <HAL_SPI_TransmitReceive>
 80086a2:	4603      	mov	r3, r0
 80086a4:	e0e8      	b.n	8008878 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_SPI_Receive+0x64>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e0e1      	b.n	8008878 <HAL_SPI_Receive+0x228>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086bc:	f7fa feea 	bl	8003494 <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <HAL_SPI_Receive+0x7e>
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086d2:	e0cc      	b.n	800886e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2204      	movs	r2, #4
 80086d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	88fa      	ldrh	r2, [r7, #6]
 80086f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800871a:	d10f      	bne.n	800873c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800872a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800873a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008746:	2b40      	cmp	r3, #64	@ 0x40
 8008748:	d007      	beq.n	800875a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008758:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d16a      	bne.n	8008838 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008762:	e032      	b.n	80087ca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b01      	cmp	r3, #1
 8008770:	d115      	bne.n	800879e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f103 020c 	add.w	r2, r3, #12
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	7812      	ldrb	r2, [r2, #0]
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800879c:	e015      	b.n	80087ca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800879e:	f7fa fe79 	bl	8003494 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d803      	bhi.n	80087b6 <HAL_SPI_Receive+0x166>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087b4:	d102      	bne.n	80087bc <HAL_SPI_Receive+0x16c>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80087c8:	e051      	b.n	800886e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1c7      	bne.n	8008764 <HAL_SPI_Receive+0x114>
 80087d4:	e035      	b.n	8008842 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d113      	bne.n	800880c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ee:	b292      	uxth	r2, r2
 80087f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f6:	1c9a      	adds	r2, r3, #2
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800880a:	e015      	b.n	8008838 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880c:	f7fa fe42 	bl	8003494 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	429a      	cmp	r2, r3
 800881a:	d803      	bhi.n	8008824 <HAL_SPI_Receive+0x1d4>
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008822:	d102      	bne.n	800882a <HAL_SPI_Receive+0x1da>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008836:	e01a      	b.n	800886e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1c9      	bne.n	80087d6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fa52 	bl	8008cf0 <SPI_EndRxTransaction>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2220      	movs	r2, #32
 8008856:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	75fb      	strb	r3, [r7, #23]
 8008864:	e003      	b.n	800886e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08c      	sub	sp, #48	@ 0x30
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800888e:	2301      	movs	r3, #1
 8008890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x26>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e198      	b.n	8008bd8 <HAL_SPI_TransmitReceive+0x358>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088ae:	f7fa fdf1 	bl	8003494 <HAL_GetTick>
 80088b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80088c4:	887b      	ldrh	r3, [r7, #2]
 80088c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d00f      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x70>
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088d6:	d107      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x68>
 80088e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d003      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80088e8:	2302      	movs	r3, #2
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80088ee:	e16d      	b.n	8008bcc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x82>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x82>
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008908:	e160      	b.n	8008bcc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b04      	cmp	r3, #4
 8008914:	d003      	beq.n	800891e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2205      	movs	r2, #5
 800891a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	887a      	ldrh	r2, [r7, #2]
 800892e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	887a      	ldrh	r2, [r7, #2]
 8008934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	887a      	ldrh	r2, [r7, #2]
 8008940:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	887a      	ldrh	r2, [r7, #2]
 8008946:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800895e:	2b40      	cmp	r3, #64	@ 0x40
 8008960:	d007      	beq.n	8008972 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800897a:	d17c      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <HAL_SPI_TransmitReceive+0x10a>
 8008984:	8b7b      	ldrh	r3, [r7, #26]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d16a      	bne.n	8008a60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898e:	881a      	ldrh	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899a:	1c9a      	adds	r2, r3, #2
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ae:	e057      	b.n	8008a60 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d11b      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x176>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d016      	beq.n	80089f6 <HAL_SPI_TransmitReceive+0x176>
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d113      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d2:	881a      	ldrh	r2, [r3, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d119      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x1b8>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d014      	beq.n	8008a38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a18:	b292      	uxth	r2, r2
 8008a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	1c9a      	adds	r2, r3, #2
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a34:	2301      	movs	r3, #1
 8008a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a38:	f7fa fd2c 	bl	8003494 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d80b      	bhi.n	8008a60 <HAL_SPI_TransmitReceive+0x1e0>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a4e:	d007      	beq.n	8008a60 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008a5e:	e0b5      	b.n	8008bcc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1a2      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x130>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d19d      	bne.n	80089b0 <HAL_SPI_TransmitReceive+0x130>
 8008a74:	e080      	b.n	8008b78 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <HAL_SPI_TransmitReceive+0x204>
 8008a7e:	8b7b      	ldrh	r3, [r7, #26]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d16f      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aaa:	e05b      	b.n	8008b64 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d11c      	bne.n	8008af4 <HAL_SPI_TransmitReceive+0x274>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d017      	beq.n	8008af4 <HAL_SPI_TransmitReceive+0x274>
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d114      	bne.n	8008af4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	330c      	adds	r3, #12
 8008ad4:	7812      	ldrb	r2, [r2, #0]
 8008ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d119      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x2b6>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d014      	beq.n	8008b36 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b32:	2301      	movs	r3, #1
 8008b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b36:	f7fa fcad 	bl	8003494 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d803      	bhi.n	8008b4e <HAL_SPI_TransmitReceive+0x2ce>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b4c:	d102      	bne.n	8008b54 <HAL_SPI_TransmitReceive+0x2d4>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008b62:	e033      	b.n	8008bcc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d19e      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x22c>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d199      	bne.n	8008aac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f91d 	bl	8008dbc <SPI_EndRxTxTransaction>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d006      	beq.n	8008b96 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008b94:	e01a      	b.n	8008bcc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10a      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc2:	e003      	b.n	8008bcc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3730      	adds	r7, #48	@ 0x30
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	4613      	mov	r3, r2
 8008bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008bf0:	f7fa fc50 	bl	8003494 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c00:	f7fa fc48 	bl	8003494 <HAL_GetTick>
 8008c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c06:	4b39      	ldr	r3, [pc, #228]	@ (8008cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	015b      	lsls	r3, r3, #5
 8008c0c:	0d1b      	lsrs	r3, r3, #20
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	fb02 f303 	mul.w	r3, r2, r3
 8008c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c16:	e054      	b.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c1e:	d050      	beq.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c20:	f7fa fc38 	bl	8003494 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d902      	bls.n	8008c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d13d      	bne.n	8008cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c4e:	d111      	bne.n	8008c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c58:	d004      	beq.n	8008c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c62:	d107      	bne.n	8008c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c7c:	d10f      	bne.n	8008c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e017      	b.n	8008ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d19b      	bne.n	8008c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3720      	adds	r7, #32
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000010 	.word	0x20000010

08008cf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d04:	d111      	bne.n	8008d2a <SPI_EndRxTransaction+0x3a>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d0e:	d004      	beq.n	8008d1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d18:	d107      	bne.n	8008d2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d32:	d12a      	bne.n	8008d8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3c:	d012      	beq.n	8008d64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	2180      	movs	r1, #128	@ 0x80
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff ff49 	bl	8008be0 <SPI_WaitFlagStateUntilTimeout>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d02d      	beq.n	8008db0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d58:	f043 0220 	orr.w	r2, r3, #32
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e026      	b.n	8008db2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff36 	bl	8008be0 <SPI_WaitFlagStateUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01a      	beq.n	8008db0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7e:	f043 0220 	orr.w	r2, r3, #32
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e013      	b.n	8008db2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	2101      	movs	r1, #1
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f7ff ff23 	bl	8008be0 <SPI_WaitFlagStateUntilTimeout>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d007      	beq.n	8008db0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da4:	f043 0220 	orr.w	r2, r3, #32
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e000      	b.n	8008db2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	2102      	movs	r1, #2
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff ff04 	bl	8008be0 <SPI_WaitFlagStateUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d007      	beq.n	8008dee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de2:	f043 0220 	orr.w	r2, r3, #32
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e032      	b.n	8008e54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008dee:	4b1b      	ldr	r3, [pc, #108]	@ (8008e5c <SPI_EndRxTxTransaction+0xa0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e60 <SPI_EndRxTxTransaction+0xa4>)
 8008df4:	fba2 2303 	umull	r2, r3, r2, r3
 8008df8:	0d5b      	lsrs	r3, r3, #21
 8008dfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e0c:	d112      	bne.n	8008e34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	2180      	movs	r1, #128	@ 0x80
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fee1 	bl	8008be0 <SPI_WaitFlagStateUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d016      	beq.n	8008e52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e28:	f043 0220 	orr.w	r2, r3, #32
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e00f      	b.n	8008e54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e4a:	2b80      	cmp	r3, #128	@ 0x80
 8008e4c:	d0f2      	beq.n	8008e34 <SPI_EndRxTxTransaction+0x78>
 8008e4e:	e000      	b.n	8008e52 <SPI_EndRxTxTransaction+0x96>
        break;
 8008e50:	bf00      	nop
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000010 	.word	0x20000010
 8008e60:	165e9f81 	.word	0x165e9f81

08008e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e041      	b.n	8008efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d106      	bne.n	8008e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fa f814 	bl	8002eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	f000 fa7e 	bl	80093a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d001      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e04e      	b.n	8008fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a23      	ldr	r2, [pc, #140]	@ (8008fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d022      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f46:	d01d      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8008fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d018      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a1e      	ldr	r2, [pc, #120]	@ (8008fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d013      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00e      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d009      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a19      	ldr	r2, [pc, #100]	@ (8008fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d004      	beq.n	8008f84 <HAL_TIM_Base_Start_IT+0x80>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a18      	ldr	r2, [pc, #96]	@ (8008fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d111      	bne.n	8008fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b06      	cmp	r3, #6
 8008f94:	d010      	beq.n	8008fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0201 	orr.w	r2, r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fa6:	e007      	b.n	8008fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0201 	orr.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40010000 	.word	0x40010000
 8008fcc:	40000400 	.word	0x40000400
 8008fd0:	40000800 	.word	0x40000800
 8008fd4:	40000c00 	.word	0x40000c00
 8008fd8:	40010400 	.word	0x40010400
 8008fdc:	40014000 	.word	0x40014000
 8008fe0:	40001800 	.word	0x40001800

08008fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d020      	beq.n	8009048 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01b      	beq.n	8009048 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0202 	mvn.w	r2, #2
 8009018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f999 	bl	8009366 <HAL_TIM_IC_CaptureCallback>
 8009034:	e005      	b.n	8009042 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f98b 	bl	8009352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f99c 	bl	800937a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d020      	beq.n	8009094 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01b      	beq.n	8009094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f06f 0204 	mvn.w	r2, #4
 8009064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f973 	bl	8009366 <HAL_TIM_IC_CaptureCallback>
 8009080:	e005      	b.n	800908e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f965 	bl	8009352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f976 	bl	800937a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d020      	beq.n	80090e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d01b      	beq.n	80090e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f06f 0208 	mvn.w	r2, #8
 80090b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2204      	movs	r2, #4
 80090b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	f003 0303 	and.w	r3, r3, #3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f94d 	bl	8009366 <HAL_TIM_IC_CaptureCallback>
 80090cc:	e005      	b.n	80090da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f93f 	bl	8009352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f950 	bl	800937a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d020      	beq.n	800912c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01b      	beq.n	800912c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0210 	mvn.w	r2, #16
 80090fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2208      	movs	r2, #8
 8009102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f927 	bl	8009366 <HAL_TIM_IC_CaptureCallback>
 8009118:	e005      	b.n	8009126 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f919 	bl	8009352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f92a 	bl	800937a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00c      	beq.n	8009150 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0201 	mvn.w	r2, #1
 8009148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7f9 fd14 	bl	8002b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800916c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fae4 	bl	800973c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00c      	beq.n	8009198 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d007      	beq.n	8009198 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f8fb 	bl	800938e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00c      	beq.n	80091bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d007      	beq.n	80091bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0220 	mvn.w	r2, #32
 80091b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fab6 	bl	8009728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c>
 80091dc:	2302      	movs	r3, #2
 80091de:	e0b4      	b.n	800934a <HAL_TIM_ConfigClockSource+0x186>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80091fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009218:	d03e      	beq.n	8009298 <HAL_TIM_ConfigClockSource+0xd4>
 800921a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800921e:	f200 8087 	bhi.w	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009226:	f000 8086 	beq.w	8009336 <HAL_TIM_ConfigClockSource+0x172>
 800922a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800922e:	d87f      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009230:	2b70      	cmp	r3, #112	@ 0x70
 8009232:	d01a      	beq.n	800926a <HAL_TIM_ConfigClockSource+0xa6>
 8009234:	2b70      	cmp	r3, #112	@ 0x70
 8009236:	d87b      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009238:	2b60      	cmp	r3, #96	@ 0x60
 800923a:	d050      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x11a>
 800923c:	2b60      	cmp	r3, #96	@ 0x60
 800923e:	d877      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009240:	2b50      	cmp	r3, #80	@ 0x50
 8009242:	d03c      	beq.n	80092be <HAL_TIM_ConfigClockSource+0xfa>
 8009244:	2b50      	cmp	r3, #80	@ 0x50
 8009246:	d873      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009248:	2b40      	cmp	r3, #64	@ 0x40
 800924a:	d058      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x13a>
 800924c:	2b40      	cmp	r3, #64	@ 0x40
 800924e:	d86f      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009250:	2b30      	cmp	r3, #48	@ 0x30
 8009252:	d064      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x15a>
 8009254:	2b30      	cmp	r3, #48	@ 0x30
 8009256:	d86b      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009258:	2b20      	cmp	r3, #32
 800925a:	d060      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x15a>
 800925c:	2b20      	cmp	r3, #32
 800925e:	d867      	bhi.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
 8009260:	2b00      	cmp	r3, #0
 8009262:	d05c      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x15a>
 8009264:	2b10      	cmp	r3, #16
 8009266:	d05a      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x15a>
 8009268:	e062      	b.n	8009330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800927a:	f000 f9b9 	bl	80095f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800928c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	609a      	str	r2, [r3, #8]
      break;
 8009296:	e04f      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092a8:	f000 f9a2 	bl	80095f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092ba:	609a      	str	r2, [r3, #8]
      break;
 80092bc:	e03c      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ca:	461a      	mov	r2, r3
 80092cc:	f000 f916 	bl	80094fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2150      	movs	r1, #80	@ 0x50
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 f96f 	bl	80095ba <TIM_ITRx_SetConfig>
      break;
 80092dc:	e02c      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092ea:	461a      	mov	r2, r3
 80092ec:	f000 f935 	bl	800955a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2160      	movs	r1, #96	@ 0x60
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f95f 	bl	80095ba <TIM_ITRx_SetConfig>
      break;
 80092fc:	e01c      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800930a:	461a      	mov	r2, r3
 800930c:	f000 f8f6 	bl	80094fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2140      	movs	r1, #64	@ 0x40
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f94f 	bl	80095ba <TIM_ITRx_SetConfig>
      break;
 800931c:	e00c      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4619      	mov	r1, r3
 8009328:	4610      	mov	r0, r2
 800932a:	f000 f946 	bl	80095ba <TIM_ITRx_SetConfig>
      break;
 800932e:	e003      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	73fb      	strb	r3, [r7, #15]
      break;
 8009334:	e000      	b.n	8009338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800936e:	bf00      	nop
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009382:	bf00      	nop
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a46      	ldr	r2, [pc, #280]	@ (80094d0 <TIM_Base_SetConfig+0x12c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d013      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c2:	d00f      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a43      	ldr	r2, [pc, #268]	@ (80094d4 <TIM_Base_SetConfig+0x130>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00b      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a42      	ldr	r2, [pc, #264]	@ (80094d8 <TIM_Base_SetConfig+0x134>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d007      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a41      	ldr	r2, [pc, #260]	@ (80094dc <TIM_Base_SetConfig+0x138>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d003      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a40      	ldr	r2, [pc, #256]	@ (80094e0 <TIM_Base_SetConfig+0x13c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d108      	bne.n	80093f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a35      	ldr	r2, [pc, #212]	@ (80094d0 <TIM_Base_SetConfig+0x12c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d02b      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009404:	d027      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a32      	ldr	r2, [pc, #200]	@ (80094d4 <TIM_Base_SetConfig+0x130>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d023      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a31      	ldr	r2, [pc, #196]	@ (80094d8 <TIM_Base_SetConfig+0x134>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d01f      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a30      	ldr	r2, [pc, #192]	@ (80094dc <TIM_Base_SetConfig+0x138>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01b      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2f      	ldr	r2, [pc, #188]	@ (80094e0 <TIM_Base_SetConfig+0x13c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d017      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a2e      	ldr	r2, [pc, #184]	@ (80094e4 <TIM_Base_SetConfig+0x140>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d013      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a2d      	ldr	r2, [pc, #180]	@ (80094e8 <TIM_Base_SetConfig+0x144>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a2c      	ldr	r2, [pc, #176]	@ (80094ec <TIM_Base_SetConfig+0x148>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00b      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a2b      	ldr	r2, [pc, #172]	@ (80094f0 <TIM_Base_SetConfig+0x14c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d007      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a2a      	ldr	r2, [pc, #168]	@ (80094f4 <TIM_Base_SetConfig+0x150>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_Base_SetConfig+0xb2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a29      	ldr	r2, [pc, #164]	@ (80094f8 <TIM_Base_SetConfig+0x154>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d108      	bne.n	8009468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800945c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a10      	ldr	r2, [pc, #64]	@ (80094d0 <TIM_Base_SetConfig+0x12c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_Base_SetConfig+0xf8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a12      	ldr	r2, [pc, #72]	@ (80094e0 <TIM_Base_SetConfig+0x13c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d103      	bne.n	80094a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d105      	bne.n	80094c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	611a      	str	r2, [r3, #16]
  }
}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40010000 	.word	0x40010000
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00
 80094e0:	40010400 	.word	0x40010400
 80094e4:	40014000 	.word	0x40014000
 80094e8:	40014400 	.word	0x40014400
 80094ec:	40014800 	.word	0x40014800
 80094f0:	40001800 	.word	0x40001800
 80094f4:	40001c00 	.word	0x40001c00
 80094f8:	40002000 	.word	0x40002000

080094fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f023 0201 	bic.w	r2, r3, #1
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	011b      	lsls	r3, r3, #4
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	4313      	orrs	r3, r2
 8009530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f023 030a 	bic.w	r3, r3, #10
 8009538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	4313      	orrs	r3, r2
 8009540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	621a      	str	r2, [r3, #32]
}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800955a:	b480      	push	{r7}
 800955c:	b087      	sub	sp, #28
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	f023 0210 	bic.w	r2, r3, #16
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	031b      	lsls	r3, r3, #12
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4313      	orrs	r3, r2
 800958e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009596:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	621a      	str	r2, [r3, #32]
}
 80095ae:	bf00      	nop
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f043 0307 	orr.w	r3, r3, #7
 80095dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	609a      	str	r2, [r3, #8]
}
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800960a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	021a      	lsls	r2, r3, #8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	431a      	orrs	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	609a      	str	r2, [r3, #8]
}
 8009624:	bf00      	nop
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009644:	2302      	movs	r3, #2
 8009646:	e05a      	b.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a21      	ldr	r2, [pc, #132]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d022      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009694:	d01d      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a1d      	ldr	r2, [pc, #116]	@ (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d018      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d013      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00e      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a18      	ldr	r2, [pc, #96]	@ (800971c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d009      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a17      	ldr	r2, [pc, #92]	@ (8009720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d004      	beq.n	80096d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a15      	ldr	r2, [pc, #84]	@ (8009724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d10c      	bne.n	80096ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	40010000 	.word	0x40010000
 8009710:	40000400 	.word	0x40000400
 8009714:	40000800 	.word	0x40000800
 8009718:	40000c00 	.word	0x40000c00
 800971c:	40010400 	.word	0x40010400
 8009720:	40014000 	.word	0x40014000
 8009724:	40001800 	.word	0x40001800

08009728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e042      	b.n	80097e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f9 fbf8 	bl	8002f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2224      	movs	r2, #36	@ 0x24
 8009780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 ff85 	bl	800a6a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695a      	ldr	r2, [r3, #20]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	@ 0x28
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800980a:	b2db      	uxtb	r3, r3
 800980c:	2b20      	cmp	r3, #32
 800980e:	d175      	bne.n	80098fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <HAL_UART_Transmit+0x2c>
 8009816:	88fb      	ldrh	r3, [r7, #6]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e06e      	b.n	80098fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2221      	movs	r2, #33	@ 0x21
 800982a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800982e:	f7f9 fe31 	bl	8003494 <HAL_GetTick>
 8009832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	88fa      	ldrh	r2, [r7, #6]
 8009838:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	88fa      	ldrh	r2, [r7, #6]
 800983e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009848:	d108      	bne.n	800985c <HAL_UART_Transmit+0x6c>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d104      	bne.n	800985c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	e003      	b.n	8009864 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009864:	e02e      	b.n	80098c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2200      	movs	r2, #0
 800986e:	2180      	movs	r1, #128	@ 0x80
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 fc5d 	bl	800a130 <UART_WaitOnFlagUntilTimeout>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e03a      	b.n	80098fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800989c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	3302      	adds	r3, #2
 80098a2:	61bb      	str	r3, [r7, #24]
 80098a4:	e007      	b.n	80098b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	781a      	ldrb	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	3301      	adds	r3, #1
 80098b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	3b01      	subs	r3, #1
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1cb      	bne.n	8009866 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2200      	movs	r2, #0
 80098d6:	2140      	movs	r1, #64	@ 0x40
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fc29 	bl	800a130 <UART_WaitOnFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e006      	b.n	80098fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e000      	b.n	80098fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80098fc:	2302      	movs	r3, #2
  }
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b08c      	sub	sp, #48	@ 0x30
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	4613      	mov	r3, r2
 8009912:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b20      	cmp	r3, #32
 800991e:	d14a      	bne.n	80099b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009926:	88fb      	ldrh	r3, [r7, #6]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e043      	b.n	80099b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2201      	movs	r2, #1
 8009934:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	461a      	mov	r2, r3
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 fc4e 	bl	800a1e4 <UART_Start_Receive_DMA>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800994e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009952:	2b00      	cmp	r3, #0
 8009954:	d12c      	bne.n	80099b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995a:	2b01      	cmp	r3, #1
 800995c:	d125      	bne.n	80099aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	330c      	adds	r3, #12
 800997a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	617b      	str	r3, [r7, #20]
   return(result);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f043 0310 	orr.w	r3, r3, #16
 800998a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	330c      	adds	r3, #12
 8009992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009994:	627a      	str	r2, [r7, #36]	@ 0x24
 8009996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6a39      	ldr	r1, [r7, #32]
 800999a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e5      	bne.n	8009974 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80099a8:	e002      	b.n	80099b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80099b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099b4:	e000      	b.n	80099b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80099b6:	2302      	movs	r3, #2
  }
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3730      	adds	r7, #48	@ 0x30
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b0ba      	sub	sp, #232	@ 0xe8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f6:	f003 030f 	and.w	r3, r3, #15
 80099fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80099fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10f      	bne.n	8009a26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <HAL_UART_IRQHandler+0x66>
 8009a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fd81 	bl	800a526 <UART_Receive_IT>
      return;
 8009a24:	e25b      	b.n	8009ede <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80de 	beq.w	8009bec <HAL_UART_IRQHandler+0x22c>
 8009a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80d1 	beq.w	8009bec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <HAL_UART_IRQHandler+0xae>
 8009a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a66:	f043 0201 	orr.w	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00b      	beq.n	8009a92 <HAL_UART_IRQHandler+0xd2>
 8009a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a8a:	f043 0202 	orr.w	r2, r3, #2
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <HAL_UART_IRQHandler+0xf6>
 8009a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d005      	beq.n	8009ab6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aae:	f043 0204 	orr.w	r2, r3, #4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d011      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x126>
 8009ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ade:	f043 0208 	orr.w	r2, r3, #8
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 81f2 	beq.w	8009ed4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d008      	beq.n	8009b0e <HAL_UART_IRQHandler+0x14e>
 8009afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fd0c 	bl	800a526 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b18:	2b40      	cmp	r3, #64	@ 0x40
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2301      	moveq	r3, #1
 8009b1e:	2300      	movne	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b2a:	f003 0308 	and.w	r3, r3, #8
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <HAL_UART_IRQHandler+0x17a>
 8009b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d04f      	beq.n	8009bda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc14 	bl	800a368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d141      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3314      	adds	r3, #20
 8009b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b5c:	e853 3f00 	ldrex	r3, [r3]
 8009b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3314      	adds	r3, #20
 8009b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1d9      	bne.n	8009b4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d013      	beq.n	8009bca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8009da0 <HAL_UART_IRQHandler+0x3e0>)
 8009ba8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f9 fef8 	bl	80039a4 <HAL_DMA_Abort_IT>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d016      	beq.n	8009be8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc8:	e00e      	b.n	8009be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9a8 	bl	8009f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd0:	e00a      	b.n	8009be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9a4 	bl	8009f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	e006      	b.n	8009be8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f9a0 	bl	8009f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009be6:	e175      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be8:	bf00      	nop
    return;
 8009bea:	e173      	b.n	8009ed4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	f040 814f 	bne.w	8009e94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8148 	beq.w	8009e94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 8141 	beq.w	8009e94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c12:	2300      	movs	r3, #0
 8009c14:	60bb      	str	r3, [r7, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	60bb      	str	r3, [r7, #8]
 8009c26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c32:	2b40      	cmp	r3, #64	@ 0x40
 8009c34:	f040 80b6 	bne.w	8009da4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 8145 	beq.w	8009ed8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c56:	429a      	cmp	r2, r3
 8009c58:	f080 813e 	bcs.w	8009ed8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c6e:	f000 8088 	beq.w	8009d82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	330c      	adds	r3, #12
 8009c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	330c      	adds	r3, #12
 8009c9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009c9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1d9      	bne.n	8009c72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3314      	adds	r3, #20
 8009cc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cd0:	f023 0301 	bic.w	r3, r3, #1
 8009cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ce2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e1      	bne.n	8009cbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3314      	adds	r3, #20
 8009d00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3314      	adds	r3, #20
 8009d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e3      	bne.n	8009cfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2220      	movs	r2, #32
 8009d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	330c      	adds	r3, #12
 8009d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d4a:	e853 3f00 	ldrex	r3, [r3]
 8009d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d52:	f023 0310 	bic.w	r3, r3, #16
 8009d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009d64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009d66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e3      	bne.n	8009d40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f9 fda1 	bl	80038c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2202      	movs	r2, #2
 8009d86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7f7 ff57 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d9e:	e09b      	b.n	8009ed8 <HAL_UART_IRQHandler+0x518>
 8009da0:	0800a42f 	.word	0x0800a42f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 808e 	beq.w	8009edc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8089 	beq.w	8009edc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	330c      	adds	r3, #12
 8009dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009de0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	330c      	adds	r3, #12
 8009dea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009dee:	647a      	str	r2, [r7, #68]	@ 0x44
 8009df0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e3      	bne.n	8009dca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3314      	adds	r3, #20
 8009e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	623b      	str	r3, [r7, #32]
   return(result);
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3314      	adds	r3, #20
 8009e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e26:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e3      	bne.n	8009e02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 0310 	bic.w	r3, r3, #16
 8009e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	330c      	adds	r3, #12
 8009e68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009e6c:	61fa      	str	r2, [r7, #28]
 8009e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	69b9      	ldr	r1, [r7, #24]
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	617b      	str	r3, [r7, #20]
   return(result);
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e3      	bne.n	8009e48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2202      	movs	r2, #2
 8009e84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7f7 fedd 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e92:	e023      	b.n	8009edc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x4f4>
 8009ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fad2 	bl	800a456 <UART_Transmit_IT>
    return;
 8009eb2:	e014      	b.n	8009ede <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00e      	beq.n	8009ede <HAL_UART_IRQHandler+0x51e>
 8009ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d008      	beq.n	8009ede <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fb12 	bl	800a4f6 <UART_EndTransmit_IT>
    return;
 8009ed2:	e004      	b.n	8009ede <HAL_UART_IRQHandler+0x51e>
    return;
 8009ed4:	bf00      	nop
 8009ed6:	e002      	b.n	8009ede <HAL_UART_IRQHandler+0x51e>
      return;
 8009ed8:	bf00      	nop
 8009eda:	e000      	b.n	8009ede <HAL_UART_IRQHandler+0x51e>
      return;
 8009edc:	bf00      	nop
  }
}
 8009ede:	37e8      	adds	r7, #232	@ 0xe8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b09c      	sub	sp, #112	@ 0x70
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f40:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d172      	bne.n	800a036 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f52:	2200      	movs	r2, #0
 8009f54:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f76:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f78:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e5      	bne.n	8009f56 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3314      	adds	r3, #20
 8009f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f9c:	f023 0301 	bic.w	r3, r3, #1
 8009fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3314      	adds	r3, #20
 8009fa8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009faa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e5      	bne.n	8009f8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3314      	adds	r3, #20
 8009fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3314      	adds	r3, #20
 8009fdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fde:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e5      	bne.n	8009fbe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d119      	bne.n	800a036 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	330c      	adds	r3, #12
 800a008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	60fb      	str	r3, [r7, #12]
   return(result);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 0310 	bic.w	r3, r3, #16
 800a018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a01a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	330c      	adds	r3, #12
 800a020:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a022:	61fa      	str	r2, [r7, #28]
 800a024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	69b9      	ldr	r1, [r7, #24]
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	617b      	str	r3, [r7, #20]
   return(result);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e5      	bne.n	800a002 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a038:	2200      	movs	r2, #0
 800a03a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a03c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a040:	2b01      	cmp	r3, #1
 800a042:	d106      	bne.n	800a052 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a046:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a048:	4619      	mov	r1, r3
 800a04a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a04c:	f7f7 fdfe 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a050:	e002      	b.n	800a058 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a052:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a054:	f7ff ff50 	bl	8009ef8 <HAL_UART_RxCpltCallback>
}
 800a058:	bf00      	nop
 800a05a:	3770      	adds	r7, #112	@ 0x70
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d108      	bne.n	800a08e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	b29b      	uxth	r3, r3
 800a084:	4619      	mov	r1, r3
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f7f7 fde0 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a08c:	e002      	b.n	800a094 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff ff3c 	bl	8009f0c <HAL_UART_RxHalfCpltCallback>
}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0b8:	2b80      	cmp	r3, #128	@ 0x80
 800a0ba:	bf0c      	ite	eq
 800a0bc:	2301      	moveq	r3, #1
 800a0be:	2300      	movne	r3, #0
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b21      	cmp	r3, #33	@ 0x21
 800a0ce:	d108      	bne.n	800a0e2 <UART_DMAError+0x46>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a0dc:	68b8      	ldr	r0, [r7, #8]
 800a0de:	f000 f91b 	bl	800a318 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ec:	2b40      	cmp	r3, #64	@ 0x40
 800a0ee:	bf0c      	ite	eq
 800a0f0:	2301      	moveq	r3, #1
 800a0f2:	2300      	movne	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b22      	cmp	r3, #34	@ 0x22
 800a102:	d108      	bne.n	800a116 <UART_DMAError+0x7a>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2200      	movs	r2, #0
 800a10e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a110:	68b8      	ldr	r0, [r7, #8]
 800a112:	f000 f929 	bl	800a368 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a11a:	f043 0210 	orr.w	r2, r3, #16
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a122:	68b8      	ldr	r0, [r7, #8]
 800a124:	f7ff fefc 	bl	8009f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a128:	bf00      	nop
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a140:	e03b      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a148:	d037      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14a:	f7f9 f9a3 	bl	8003494 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	429a      	cmp	r2, r3
 800a158:	d302      	bcc.n	800a160 <UART_WaitOnFlagUntilTimeout+0x30>
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e03a      	b.n	800a1da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d023      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x8a>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b80      	cmp	r3, #128	@ 0x80
 800a176:	d020      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x8a>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b40      	cmp	r3, #64	@ 0x40
 800a17c:	d01d      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0308 	and.w	r3, r3, #8
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d116      	bne.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 f8e0 	bl	800a368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e00f      	b.n	800a1da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	bf0c      	ite	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d0b4      	beq.n	800a142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b098      	sub	sp, #96	@ 0x60
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	88fa      	ldrh	r2, [r7, #6]
 800a1fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2222      	movs	r2, #34	@ 0x22
 800a208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a210:	4a3e      	ldr	r2, [pc, #248]	@ (800a30c <UART_Start_Receive_DMA+0x128>)
 800a212:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a218:	4a3d      	ldr	r2, [pc, #244]	@ (800a310 <UART_Start_Receive_DMA+0x12c>)
 800a21a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a220:	4a3c      	ldr	r2, [pc, #240]	@ (800a314 <UART_Start_Receive_DMA+0x130>)
 800a222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a228:	2200      	movs	r2, #0
 800a22a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a22c:	f107 0308 	add.w	r3, r7, #8
 800a230:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3304      	adds	r3, #4
 800a23c:	4619      	mov	r1, r3
 800a23e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	f7f9 fae6 	bl	8003814 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a248:	2300      	movs	r3, #0
 800a24a:	613b      	str	r3, [r7, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	613b      	str	r3, [r7, #16]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d019      	beq.n	800a29a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	330c      	adds	r3, #12
 800a26c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a27c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	330c      	adds	r3, #12
 800a284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a286:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a288:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a28c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e5      	bne.n	800a266 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3314      	adds	r3, #20
 800a2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ac:	f043 0301 	orr.w	r3, r3, #1
 800a2b0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3314      	adds	r3, #20
 800a2b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a2bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a2c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e5      	bne.n	800a29a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3314      	adds	r3, #20
 800a2d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3314      	adds	r3, #20
 800a2ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800a2f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	6a39      	ldr	r1, [r7, #32]
 800a2f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1e5      	bne.n	800a2ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3760      	adds	r7, #96	@ 0x60
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	08009f35 	.word	0x08009f35
 800a310:	0800a061 	.word	0x0800a061
 800a314:	0800a09d 	.word	0x0800a09d

0800a318 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a318:	b480      	push	{r7}
 800a31a:	b089      	sub	sp, #36	@ 0x24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	69fa      	ldr	r2, [r7, #28]
 800a340:	61ba      	str	r2, [r7, #24]
 800a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	613b      	str	r3, [r7, #16]
   return(result);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e5      	bne.n	800a320 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a35c:	bf00      	nop
 800a35e:	3724      	adds	r7, #36	@ 0x24
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a368:	b480      	push	{r7}
 800a36a:	b095      	sub	sp, #84	@ 0x54
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	330c      	adds	r3, #12
 800a38e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a390:	643a      	str	r2, [r7, #64]	@ 0x40
 800a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a396:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e5      	bne.n	800a370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3314      	adds	r3, #20
 800a3aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d119      	bne.n	800a414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f023 0310 	bic.w	r3, r3, #16
 800a3f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	330c      	adds	r3, #12
 800a3fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a400:	61ba      	str	r2, [r7, #24]
 800a402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	6979      	ldr	r1, [r7, #20]
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	613b      	str	r3, [r7, #16]
   return(result);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e5      	bne.n	800a3e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a422:	bf00      	nop
 800a424:	3754      	adds	r7, #84	@ 0x54
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b084      	sub	sp, #16
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f7ff fd69 	bl	8009f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a456:	b480      	push	{r7}
 800a458:	b085      	sub	sp, #20
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b21      	cmp	r3, #33	@ 0x21
 800a468:	d13e      	bne.n	800a4e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a472:	d114      	bne.n	800a49e <UART_Transmit_IT+0x48>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d110      	bne.n	800a49e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a490:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	1c9a      	adds	r2, r3, #2
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	621a      	str	r2, [r3, #32]
 800a49c:	e008      	b.n	800a4b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	1c59      	adds	r1, r3, #1
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	6211      	str	r1, [r2, #32]
 800a4a8:	781a      	ldrb	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10f      	bne.n	800a4e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68da      	ldr	r2, [r3, #12]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e000      	b.n	800a4ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a4e8:	2302      	movs	r3, #2
  }
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a50c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2220      	movs	r2, #32
 800a512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fce4 	bl	8009ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b08c      	sub	sp, #48	@ 0x30
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b22      	cmp	r3, #34	@ 0x22
 800a538:	f040 80ae 	bne.w	800a698 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a544:	d117      	bne.n	800a576 <UART_Receive_IT+0x50>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d113      	bne.n	800a576 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a556:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a564:	b29a      	uxth	r2, r3
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56e:	1c9a      	adds	r2, r3, #2
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	629a      	str	r2, [r3, #40]	@ 0x28
 800a574:	e026      	b.n	800a5c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a57c:	2300      	movs	r3, #0
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a588:	d007      	beq.n	800a59a <UART_Receive_IT+0x74>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10a      	bne.n	800a5a8 <UART_Receive_IT+0x82>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e008      	b.n	800a5ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d15d      	bne.n	800a694 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0220 	bic.w	r2, r2, #32
 800a5e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a5f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	695a      	ldr	r2, [r3, #20]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f022 0201 	bic.w	r2, r2, #1
 800a606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d135      	bne.n	800a68a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	330c      	adds	r3, #12
 800a62a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	613b      	str	r3, [r7, #16]
   return(result);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f023 0310 	bic.w	r3, r3, #16
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	330c      	adds	r3, #12
 800a642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a644:	623a      	str	r2, [r7, #32]
 800a646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	69f9      	ldr	r1, [r7, #28]
 800a64a:	6a3a      	ldr	r2, [r7, #32]
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	61bb      	str	r3, [r7, #24]
   return(result);
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e5      	bne.n	800a624 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0310 	and.w	r3, r3, #16
 800a662:	2b10      	cmp	r3, #16
 800a664:	d10a      	bne.n	800a67c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7f7 fae2 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
 800a688:	e002      	b.n	800a690 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff fc34 	bl	8009ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	e002      	b.n	800a69a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	e000      	b.n	800a69a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a698:	2302      	movs	r3, #2
  }
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3730      	adds	r7, #48	@ 0x30
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6a8:	b0c0      	sub	sp, #256	@ 0x100
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c0:	68d9      	ldr	r1, [r3, #12]
 800a6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	ea40 0301 	orr.w	r3, r0, r1
 800a6cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a6fc:	f021 010c 	bic.w	r1, r1, #12
 800a700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a70a:	430b      	orrs	r3, r1
 800a70c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a71e:	6999      	ldr	r1, [r3, #24]
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	ea40 0301 	orr.w	r3, r0, r1
 800a72a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b8f      	ldr	r3, [pc, #572]	@ (800a970 <UART_SetConfig+0x2cc>)
 800a734:	429a      	cmp	r2, r3
 800a736:	d005      	beq.n	800a744 <UART_SetConfig+0xa0>
 800a738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	4b8d      	ldr	r3, [pc, #564]	@ (800a974 <UART_SetConfig+0x2d0>)
 800a740:	429a      	cmp	r2, r3
 800a742:	d104      	bne.n	800a74e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a744:	f7fd f924 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 800a748:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a74c:	e003      	b.n	800a756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a74e:	f7fd f90b 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 800a752:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a760:	f040 810c 	bne.w	800a97c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a76e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a776:	4622      	mov	r2, r4
 800a778:	462b      	mov	r3, r5
 800a77a:	1891      	adds	r1, r2, r2
 800a77c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a77e:	415b      	adcs	r3, r3
 800a780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a786:	4621      	mov	r1, r4
 800a788:	eb12 0801 	adds.w	r8, r2, r1
 800a78c:	4629      	mov	r1, r5
 800a78e:	eb43 0901 	adc.w	r9, r3, r1
 800a792:	f04f 0200 	mov.w	r2, #0
 800a796:	f04f 0300 	mov.w	r3, #0
 800a79a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a79e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a7a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a7a6:	4690      	mov	r8, r2
 800a7a8:	4699      	mov	r9, r3
 800a7aa:	4623      	mov	r3, r4
 800a7ac:	eb18 0303 	adds.w	r3, r8, r3
 800a7b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	eb49 0303 	adc.w	r3, r9, r3
 800a7ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a7ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	18db      	adds	r3, r3, r3
 800a7d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7d8:	4613      	mov	r3, r2
 800a7da:	eb42 0303 	adc.w	r3, r2, r3
 800a7de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a7e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a7e8:	f7f6 fa3e 	bl	8000c68 <__aeabi_uldivmod>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4b61      	ldr	r3, [pc, #388]	@ (800a978 <UART_SetConfig+0x2d4>)
 800a7f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a7f6:	095b      	lsrs	r3, r3, #5
 800a7f8:	011c      	lsls	r4, r3, #4
 800a7fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a804:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a80c:	4642      	mov	r2, r8
 800a80e:	464b      	mov	r3, r9
 800a810:	1891      	adds	r1, r2, r2
 800a812:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a814:	415b      	adcs	r3, r3
 800a816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a81c:	4641      	mov	r1, r8
 800a81e:	eb12 0a01 	adds.w	sl, r2, r1
 800a822:	4649      	mov	r1, r9
 800a824:	eb43 0b01 	adc.w	fp, r3, r1
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	f04f 0300 	mov.w	r3, #0
 800a830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a83c:	4692      	mov	sl, r2
 800a83e:	469b      	mov	fp, r3
 800a840:	4643      	mov	r3, r8
 800a842:	eb1a 0303 	adds.w	r3, sl, r3
 800a846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a84a:	464b      	mov	r3, r9
 800a84c:	eb4b 0303 	adc.w	r3, fp, r3
 800a850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a860:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a868:	460b      	mov	r3, r1
 800a86a:	18db      	adds	r3, r3, r3
 800a86c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a86e:	4613      	mov	r3, r2
 800a870:	eb42 0303 	adc.w	r3, r2, r3
 800a874:	647b      	str	r3, [r7, #68]	@ 0x44
 800a876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a87a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a87e:	f7f6 f9f3 	bl	8000c68 <__aeabi_uldivmod>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	4611      	mov	r1, r2
 800a888:	4b3b      	ldr	r3, [pc, #236]	@ (800a978 <UART_SetConfig+0x2d4>)
 800a88a:	fba3 2301 	umull	r2, r3, r3, r1
 800a88e:	095b      	lsrs	r3, r3, #5
 800a890:	2264      	movs	r2, #100	@ 0x64
 800a892:	fb02 f303 	mul.w	r3, r2, r3
 800a896:	1acb      	subs	r3, r1, r3
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a89e:	4b36      	ldr	r3, [pc, #216]	@ (800a978 <UART_SetConfig+0x2d4>)
 800a8a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a8a4:	095b      	lsrs	r3, r3, #5
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a8ac:	441c      	add	r4, r3
 800a8ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a8bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	1891      	adds	r1, r2, r2
 800a8c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a8c8:	415b      	adcs	r3, r3
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a8d0:	4641      	mov	r1, r8
 800a8d2:	1851      	adds	r1, r2, r1
 800a8d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	414b      	adcs	r3, r1
 800a8da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a8e8:	4659      	mov	r1, fp
 800a8ea:	00cb      	lsls	r3, r1, #3
 800a8ec:	4651      	mov	r1, sl
 800a8ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8f2:	4651      	mov	r1, sl
 800a8f4:	00ca      	lsls	r2, r1, #3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	189b      	adds	r3, r3, r2
 800a900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a904:	464b      	mov	r3, r9
 800a906:	460a      	mov	r2, r1
 800a908:	eb42 0303 	adc.w	r3, r2, r3
 800a90c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a91c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a924:	460b      	mov	r3, r1
 800a926:	18db      	adds	r3, r3, r3
 800a928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a92a:	4613      	mov	r3, r2
 800a92c:	eb42 0303 	adc.w	r3, r2, r3
 800a930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a93a:	f7f6 f995 	bl	8000c68 <__aeabi_uldivmod>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4b0d      	ldr	r3, [pc, #52]	@ (800a978 <UART_SetConfig+0x2d4>)
 800a944:	fba3 1302 	umull	r1, r3, r3, r2
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	2164      	movs	r1, #100	@ 0x64
 800a94c:	fb01 f303 	mul.w	r3, r1, r3
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	3332      	adds	r3, #50	@ 0x32
 800a956:	4a08      	ldr	r2, [pc, #32]	@ (800a978 <UART_SetConfig+0x2d4>)
 800a958:	fba2 2303 	umull	r2, r3, r2, r3
 800a95c:	095b      	lsrs	r3, r3, #5
 800a95e:	f003 0207 	and.w	r2, r3, #7
 800a962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4422      	add	r2, r4
 800a96a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a96c:	e106      	b.n	800ab7c <UART_SetConfig+0x4d8>
 800a96e:	bf00      	nop
 800a970:	40011000 	.word	0x40011000
 800a974:	40011400 	.word	0x40011400
 800a978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a97c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a980:	2200      	movs	r2, #0
 800a982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a986:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a98a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	1891      	adds	r1, r2, r2
 800a994:	6239      	str	r1, [r7, #32]
 800a996:	415b      	adcs	r3, r3
 800a998:	627b      	str	r3, [r7, #36]	@ 0x24
 800a99a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a99e:	4641      	mov	r1, r8
 800a9a0:	1854      	adds	r4, r2, r1
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	eb43 0501 	adc.w	r5, r3, r1
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	00eb      	lsls	r3, r5, #3
 800a9b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9b6:	00e2      	lsls	r2, r4, #3
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	461d      	mov	r5, r3
 800a9bc:	4643      	mov	r3, r8
 800a9be:	18e3      	adds	r3, r4, r3
 800a9c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a9c4:	464b      	mov	r3, r9
 800a9c6:	eb45 0303 	adc.w	r3, r5, r3
 800a9ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	008b      	lsls	r3, r1, #2
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	008a      	lsls	r2, r1, #2
 800a9f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a9fc:	f7f6 f934 	bl	8000c68 <__aeabi_uldivmod>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4b60      	ldr	r3, [pc, #384]	@ (800ab88 <UART_SetConfig+0x4e4>)
 800aa06:	fba3 2302 	umull	r2, r3, r3, r2
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	011c      	lsls	r4, r3, #4
 800aa0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aa1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aa20:	4642      	mov	r2, r8
 800aa22:	464b      	mov	r3, r9
 800aa24:	1891      	adds	r1, r2, r2
 800aa26:	61b9      	str	r1, [r7, #24]
 800aa28:	415b      	adcs	r3, r3
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa30:	4641      	mov	r1, r8
 800aa32:	1851      	adds	r1, r2, r1
 800aa34:	6139      	str	r1, [r7, #16]
 800aa36:	4649      	mov	r1, r9
 800aa38:	414b      	adcs	r3, r1
 800aa3a:	617b      	str	r3, [r7, #20]
 800aa3c:	f04f 0200 	mov.w	r2, #0
 800aa40:	f04f 0300 	mov.w	r3, #0
 800aa44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa48:	4659      	mov	r1, fp
 800aa4a:	00cb      	lsls	r3, r1, #3
 800aa4c:	4651      	mov	r1, sl
 800aa4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa52:	4651      	mov	r1, sl
 800aa54:	00ca      	lsls	r2, r1, #3
 800aa56:	4610      	mov	r0, r2
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	4642      	mov	r2, r8
 800aa5e:	189b      	adds	r3, r3, r2
 800aa60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa64:	464b      	mov	r3, r9
 800aa66:	460a      	mov	r2, r1
 800aa68:	eb42 0303 	adc.w	r3, r2, r3
 800aa6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aa7c:	f04f 0200 	mov.w	r2, #0
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aa88:	4649      	mov	r1, r9
 800aa8a:	008b      	lsls	r3, r1, #2
 800aa8c:	4641      	mov	r1, r8
 800aa8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa92:	4641      	mov	r1, r8
 800aa94:	008a      	lsls	r2, r1, #2
 800aa96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aa9a:	f7f6 f8e5 	bl	8000c68 <__aeabi_uldivmod>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4b38      	ldr	r3, [pc, #224]	@ (800ab88 <UART_SetConfig+0x4e4>)
 800aaa6:	fba3 2301 	umull	r2, r3, r3, r1
 800aaaa:	095b      	lsrs	r3, r3, #5
 800aaac:	2264      	movs	r2, #100	@ 0x64
 800aaae:	fb02 f303 	mul.w	r3, r2, r3
 800aab2:	1acb      	subs	r3, r1, r3
 800aab4:	011b      	lsls	r3, r3, #4
 800aab6:	3332      	adds	r3, #50	@ 0x32
 800aab8:	4a33      	ldr	r2, [pc, #204]	@ (800ab88 <UART_SetConfig+0x4e4>)
 800aaba:	fba2 2303 	umull	r2, r3, r2, r3
 800aabe:	095b      	lsrs	r3, r3, #5
 800aac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aac4:	441c      	add	r4, r3
 800aac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aaca:	2200      	movs	r2, #0
 800aacc:	673b      	str	r3, [r7, #112]	@ 0x70
 800aace:	677a      	str	r2, [r7, #116]	@ 0x74
 800aad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aad4:	4642      	mov	r2, r8
 800aad6:	464b      	mov	r3, r9
 800aad8:	1891      	adds	r1, r2, r2
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	415b      	adcs	r3, r3
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aae4:	4641      	mov	r1, r8
 800aae6:	1851      	adds	r1, r2, r1
 800aae8:	6039      	str	r1, [r7, #0]
 800aaea:	4649      	mov	r1, r9
 800aaec:	414b      	adcs	r3, r1
 800aaee:	607b      	str	r3, [r7, #4]
 800aaf0:	f04f 0200 	mov.w	r2, #0
 800aaf4:	f04f 0300 	mov.w	r3, #0
 800aaf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aafc:	4659      	mov	r1, fp
 800aafe:	00cb      	lsls	r3, r1, #3
 800ab00:	4651      	mov	r1, sl
 800ab02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab06:	4651      	mov	r1, sl
 800ab08:	00ca      	lsls	r2, r1, #3
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	4642      	mov	r2, r8
 800ab12:	189b      	adds	r3, r3, r2
 800ab14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab16:	464b      	mov	r3, r9
 800ab18:	460a      	mov	r2, r1
 800ab1a:	eb42 0303 	adc.w	r3, r2, r3
 800ab1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab2a:	667a      	str	r2, [r7, #100]	@ 0x64
 800ab2c:	f04f 0200 	mov.w	r2, #0
 800ab30:	f04f 0300 	mov.w	r3, #0
 800ab34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ab38:	4649      	mov	r1, r9
 800ab3a:	008b      	lsls	r3, r1, #2
 800ab3c:	4641      	mov	r1, r8
 800ab3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab42:	4641      	mov	r1, r8
 800ab44:	008a      	lsls	r2, r1, #2
 800ab46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab4a:	f7f6 f88d 	bl	8000c68 <__aeabi_uldivmod>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	4b0d      	ldr	r3, [pc, #52]	@ (800ab88 <UART_SetConfig+0x4e4>)
 800ab54:	fba3 1302 	umull	r1, r3, r3, r2
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	2164      	movs	r1, #100	@ 0x64
 800ab5c:	fb01 f303 	mul.w	r3, r1, r3
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	3332      	adds	r3, #50	@ 0x32
 800ab66:	4a08      	ldr	r2, [pc, #32]	@ (800ab88 <UART_SetConfig+0x4e4>)
 800ab68:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6c:	095b      	lsrs	r3, r3, #5
 800ab6e:	f003 020f 	and.w	r2, r3, #15
 800ab72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4422      	add	r2, r4
 800ab7a:	609a      	str	r2, [r3, #8]
}
 800ab7c:	bf00      	nop
 800ab7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ab82:	46bd      	mov	sp, r7
 800ab84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab88:	51eb851f 	.word	0x51eb851f

0800ab8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	f107 001c 	add.w	r0, r7, #28
 800ab9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d123      	bne.n	800abee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800abba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800abce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d105      	bne.n	800abe2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f9dc 	bl	800afa0 <USB_CoreReset>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e01b      	b.n	800ac26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f9d0 	bl	800afa0 <USB_CoreReset>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ac04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac18:	e005      	b.n	800ac26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac26:	7fbb      	ldrb	r3, [r7, #30]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d10b      	bne.n	800ac44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f043 0206 	orr.w	r2, r3, #6
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	f043 0220 	orr.w	r2, r3, #32
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac50:	b004      	add	sp, #16
 800ac52:	4770      	bx	lr

0800ac54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f043 0201 	orr.w	r2, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f023 0201 	bic.w	r2, r3, #1
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d115      	bne.n	800ace6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800acc6:	200a      	movs	r0, #10
 800acc8:	f7f8 fbf0 	bl	80034ac <HAL_Delay>
      ms += 10U;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	330a      	adds	r3, #10
 800acd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f956 	bl	800af84 <USB_GetMode>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d01e      	beq.n	800ad1c <USB_SetCurrentMode+0x84>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2bc7      	cmp	r3, #199	@ 0xc7
 800ace2:	d9f0      	bls.n	800acc6 <USB_SetCurrentMode+0x2e>
 800ace4:	e01a      	b.n	800ad1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d115      	bne.n	800ad18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800acf8:	200a      	movs	r0, #10
 800acfa:	f7f8 fbd7 	bl	80034ac <HAL_Delay>
      ms += 10U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	330a      	adds	r3, #10
 800ad02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f93d 	bl	800af84 <USB_GetMode>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <USB_SetCurrentMode+0x84>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2bc7      	cmp	r3, #199	@ 0xc7
 800ad14:	d9f0      	bls.n	800acf8 <USB_SetCurrentMode+0x60>
 800ad16:	e001      	b.n	800ad1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e005      	b.n	800ad28 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2bc8      	cmp	r3, #200	@ 0xc8
 800ad20:	d101      	bne.n	800ad26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3301      	adds	r3, #1
 800ad42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad4a:	d901      	bls.n	800ad50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e01b      	b.n	800ad88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	daf2      	bge.n	800ad3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	019b      	lsls	r3, r3, #6
 800ad60:	f043 0220 	orr.w	r2, r3, #32
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad74:	d901      	bls.n	800ad7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e006      	b.n	800ad88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	f003 0320 	and.w	r3, r3, #32
 800ad82:	2b20      	cmp	r3, #32
 800ad84:	d0f0      	beq.n	800ad68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adac:	d901      	bls.n	800adb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e018      	b.n	800ade4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	daf2      	bge.n	800ada0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2210      	movs	r2, #16
 800adc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	3301      	adds	r3, #1
 800adc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800add0:	d901      	bls.n	800add6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e006      	b.n	800ade4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	f003 0310 	and.w	r3, r3, #16
 800adde:	2b10      	cmp	r3, #16
 800ade0:	d0f0      	beq.n	800adc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b089      	sub	sp, #36	@ 0x24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4611      	mov	r1, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	460b      	mov	r3, r1
 800ae00:	71fb      	strb	r3, [r7, #7]
 800ae02:	4613      	mov	r3, r2
 800ae04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ae0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d123      	bne.n	800ae5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae16:	88bb      	ldrh	r3, [r7, #4]
 800ae18:	3303      	adds	r3, #3
 800ae1a:	089b      	lsrs	r3, r3, #2
 800ae1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61bb      	str	r3, [r7, #24]
 800ae22:	e018      	b.n	800ae56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	031a      	lsls	r2, r3, #12
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae30:	461a      	mov	r2, r3
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	3301      	adds	r3, #1
 800ae42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	3301      	adds	r3, #1
 800ae48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	3301      	adds	r3, #1
 800ae54:	61bb      	str	r3, [r7, #24]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d3e2      	bcc.n	800ae24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3724      	adds	r7, #36	@ 0x24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b08b      	sub	sp, #44	@ 0x2c
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	4613      	mov	r3, r2
 800ae78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ae82:	88fb      	ldrh	r3, [r7, #6]
 800ae84:	089b      	lsrs	r3, r3, #2
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ae8a:	88fb      	ldrh	r3, [r7, #6]
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ae92:	2300      	movs	r3, #0
 800ae94:	623b      	str	r3, [r7, #32]
 800ae96:	e014      	b.n	800aec2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	601a      	str	r2, [r3, #0]
    pDest++;
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	3301      	adds	r3, #1
 800aea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	3301      	adds	r3, #1
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb8:	3301      	adds	r3, #1
 800aeba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	3301      	adds	r3, #1
 800aec0:	623b      	str	r3, [r7, #32]
 800aec2:	6a3a      	ldr	r2, [r7, #32]
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d3e6      	bcc.n	800ae98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aeca:	8bfb      	ldrh	r3, [r7, #30]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01e      	beq.n	800af0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeda:	461a      	mov	r2, r3
 800aedc:	f107 0310 	add.w	r3, r7, #16
 800aee0:	6812      	ldr	r2, [r2, #0]
 800aee2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	fa22 f303 	lsr.w	r3, r2, r3
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef4:	701a      	strb	r2, [r3, #0]
      i++;
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	3301      	adds	r3, #1
 800aefa:	623b      	str	r3, [r7, #32]
      pDest++;
 800aefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefe:	3301      	adds	r3, #1
 800af00:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800af02:	8bfb      	ldrh	r3, [r7, #30]
 800af04:	3b01      	subs	r3, #1
 800af06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800af08:	8bfb      	ldrh	r3, [r7, #30]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1ea      	bne.n	800aee4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af10:	4618      	mov	r0, r3
 800af12:	372c      	adds	r7, #44	@ 0x2c
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	4013      	ands	r3, r2
 800af32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800af34:	68fb      	ldr	r3, [r7, #12]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800af42:	b480      	push	{r7}
 800af44:	b085      	sub	sp, #20
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800af52:	78fb      	ldrb	r3, [r7, #3]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	015a      	lsls	r2, r3, #5
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	4413      	add	r3, r2
 800af6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	4013      	ands	r3, r2
 800af74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af76:	68bb      	ldr	r3, [r7, #8]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	f003 0301 	and.w	r3, r3, #1
}
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afb8:	d901      	bls.n	800afbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e01b      	b.n	800aff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	daf2      	bge.n	800afac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f043 0201 	orr.w	r2, r3, #1
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afe2:	d901      	bls.n	800afe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e006      	b.n	800aff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d0f0      	beq.n	800afd6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
	...

0800b004 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b004:	b084      	sub	sp, #16
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b024:	461a      	mov	r2, r3
 800b026:	2300      	movs	r3, #0
 800b028:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b046:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b056:	2b00      	cmp	r3, #0
 800b058:	d119      	bne.n	800b08e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b05a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d10a      	bne.n	800b078 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b070:	f043 0304 	orr.w	r3, r3, #4
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	e014      	b.n	800b0a2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b086:	f023 0304 	bic.w	r3, r3, #4
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	e009      	b.n	800b0a2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b09c:	f023 0304 	bic.w	r3, r3, #4
 800b0a0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0a2:	2110      	movs	r1, #16
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7ff fe43 	bl	800ad30 <USB_FlushTxFifo>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff fe6d 	bl	800ad94 <USB_FlushRxFifo>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	e015      	b.n	800b0f6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0dc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	015a      	lsls	r2, r3, #5
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	613b      	str	r3, [r7, #16]
 800b0f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d3e3      	bcc.n	800b0ca <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b10e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a18      	ldr	r2, [pc, #96]	@ (800b174 <USB_HostInit+0x170>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d10b      	bne.n	800b130 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b11e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a15      	ldr	r2, [pc, #84]	@ (800b178 <USB_HostInit+0x174>)
 800b124:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a14      	ldr	r2, [pc, #80]	@ (800b17c <USB_HostInit+0x178>)
 800b12a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b12e:	e009      	b.n	800b144 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2280      	movs	r2, #128	@ 0x80
 800b134:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a11      	ldr	r2, [pc, #68]	@ (800b180 <USB_HostInit+0x17c>)
 800b13a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a11      	ldr	r2, [pc, #68]	@ (800b184 <USB_HostInit+0x180>)
 800b140:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b144:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d105      	bne.n	800b158 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	f043 0210 	orr.w	r2, r3, #16
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	699a      	ldr	r2, [r3, #24]
 800b15c:	4b0a      	ldr	r3, [pc, #40]	@ (800b188 <USB_HostInit+0x184>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b164:	7dfb      	ldrb	r3, [r7, #23]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b170:	b004      	add	sp, #16
 800b172:	4770      	bx	lr
 800b174:	40040000 	.word	0x40040000
 800b178:	01000200 	.word	0x01000200
 800b17c:	00e00300 	.word	0x00e00300
 800b180:	00600080 	.word	0x00600080
 800b184:	004000e0 	.word	0x004000e0
 800b188:	a3200008 	.word	0xa3200008

0800b18c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1aa:	f023 0303 	bic.w	r3, r3, #3
 800b1ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	f003 0303 	and.w	r3, r3, #3
 800b1be:	68f9      	ldr	r1, [r7, #12]
 800b1c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b1c8:	78fb      	ldrb	r3, [r7, #3]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d107      	bne.n	800b1de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b1da:	6053      	str	r3, [r2, #4]
 800b1dc:	e00c      	b.n	800b1f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d107      	bne.n	800b1f4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b1f0:	6053      	str	r3, [r2, #4]
 800b1f2:	e001      	b.n	800b1f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e000      	b.n	800b1fa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b226:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b234:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b236:	2064      	movs	r0, #100	@ 0x64
 800b238:	f7f8 f938 	bl	80034ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b248:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b24a:	200a      	movs	r0, #10
 800b24c:	f7f8 f92e 	bl	80034ac <HAL_Delay>

  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b25a:	b480      	push	{r7}
 800b25c:	b085      	sub	sp, #20
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	460b      	mov	r3, r1
 800b264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b27e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <USB_DriveVbus+0x44>
 800b28a:	78fb      	ldrb	r3, [r7, #3]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d106      	bne.n	800b29e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b29c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b2a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2a8:	d109      	bne.n	800b2be <USB_DriveVbus+0x64>
 800b2aa:	78fb      	ldrb	r3, [r7, #3]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b2b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2bc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	0c5b      	lsrs	r3, r3, #17
 800b2ea:	f003 0303 	and.w	r3, r3, #3
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	b29b      	uxth	r3, r3
}
 800b310:	4618      	mov	r0, r3
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	4608      	mov	r0, r1
 800b326:	4611      	mov	r1, r2
 800b328:	461a      	mov	r2, r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	70fb      	strb	r3, [r7, #3]
 800b32e:	460b      	mov	r3, r1
 800b330:	70bb      	strb	r3, [r7, #2]
 800b332:	4613      	mov	r3, r2
 800b334:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b33e:	78fb      	ldrb	r3, [r7, #3]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	4413      	add	r3, r2
 800b346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b34a:	461a      	mov	r2, r3
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b350:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b352:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b356:	2b03      	cmp	r3, #3
 800b358:	d87c      	bhi.n	800b454 <USB_HC_Init+0x138>
 800b35a:	a201      	add	r2, pc, #4	@ (adr r2, 800b360 <USB_HC_Init+0x44>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b371 	.word	0x0800b371
 800b364:	0800b417 	.word	0x0800b417
 800b368:	0800b371 	.word	0x0800b371
 800b36c:	0800b3d9 	.word	0x0800b3d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	4413      	add	r3, r2
 800b378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b37c:	461a      	mov	r2, r3
 800b37e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b382:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b384:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da10      	bge.n	800b3ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	4413      	add	r3, r2
 800b394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	78fa      	ldrb	r2, [r7, #3]
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3aa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b3ac:	e055      	b.n	800b45a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a6f      	ldr	r2, [pc, #444]	@ (800b570 <USB_HC_Init+0x254>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d151      	bne.n	800b45a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b3b6:	78fb      	ldrb	r3, [r7, #3]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	78fa      	ldrb	r2, [r7, #3]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b3d4:	60d3      	str	r3, [r2, #12]
      break;
 800b3d6:	e040      	b.n	800b45a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b3d8:	78fb      	ldrb	r3, [r7, #3]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b3ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b3ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	da34      	bge.n	800b45e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b3f4:	78fb      	ldrb	r3, [r7, #3]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	78fa      	ldrb	r2, [r7, #3]
 800b404:	0151      	lsls	r1, r2, #5
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	440a      	add	r2, r1
 800b40a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b40e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b412:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b414:	e023      	b.n	800b45e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b422:	461a      	mov	r2, r3
 800b424:	f240 2325 	movw	r3, #549	@ 0x225
 800b428:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b42a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da17      	bge.n	800b462 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	78fa      	ldrb	r2, [r7, #3]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	440a      	add	r2, r1
 800b448:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b44c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b450:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b452:	e006      	b.n	800b462 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	77fb      	strb	r3, [r7, #31]
      break;
 800b458:	e004      	b.n	800b464 <USB_HC_Init+0x148>
      break;
 800b45a:	bf00      	nop
 800b45c:	e002      	b.n	800b464 <USB_HC_Init+0x148>
      break;
 800b45e:	bf00      	nop
 800b460:	e000      	b.n	800b464 <USB_HC_Init+0x148>
      break;
 800b462:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b470:	461a      	mov	r2, r3
 800b472:	2300      	movs	r3, #0
 800b474:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b476:	78fb      	ldrb	r3, [r7, #3]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	78fa      	ldrb	r2, [r7, #3]
 800b486:	0151      	lsls	r1, r2, #5
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	440a      	add	r2, r1
 800b48c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b490:	f043 0302 	orr.w	r3, r3, #2
 800b494:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b49c:	699a      	ldr	r2, [r3, #24]
 800b49e:	78fb      	ldrb	r3, [r7, #3]
 800b4a0:	f003 030f 	and.w	r3, r3, #15
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4aa:	6939      	ldr	r1, [r7, #16]
 800b4ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b4c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da03      	bge.n	800b4d0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b4c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	e001      	b.n	800b4d4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff fef9 	bl	800b2cc <USB_GetHostSpeed>
 800b4da:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b4dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d106      	bne.n	800b4f2 <USB_HC_Init+0x1d6>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d003      	beq.n	800b4f2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b4ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	e001      	b.n	800b4f6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b4f6:	787b      	ldrb	r3, [r7, #1]
 800b4f8:	059b      	lsls	r3, r3, #22
 800b4fa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b4fe:	78bb      	ldrb	r3, [r7, #2]
 800b500:	02db      	lsls	r3, r3, #11
 800b502:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b506:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b508:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b50c:	049b      	lsls	r3, r3, #18
 800b50e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b512:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b514:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b516:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b51a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	431a      	orrs	r2, r3
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b524:	78fa      	ldrb	r2, [r7, #3]
 800b526:	0151      	lsls	r1, r2, #5
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	440a      	add	r2, r1
 800b52c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b534:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b536:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d003      	beq.n	800b546 <USB_HC_Init+0x22a>
 800b53e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b542:	2b01      	cmp	r3, #1
 800b544:	d10f      	bne.n	800b566 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b546:	78fb      	ldrb	r3, [r7, #3]
 800b548:	015a      	lsls	r2, r3, #5
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	4413      	add	r3, r2
 800b54e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	78fa      	ldrb	r2, [r7, #3]
 800b556:	0151      	lsls	r1, r2, #5
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	440a      	add	r2, r1
 800b55c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b560:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b564:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b566:	7ffb      	ldrb	r3, [r7, #31]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3720      	adds	r7, #32
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	40040000 	.word	0x40040000

0800b574 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08c      	sub	sp, #48	@ 0x30
 800b578:	af02      	add	r7, sp, #8
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4613      	mov	r3, r2
 800b580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b58c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b590:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	4a5d      	ldr	r2, [pc, #372]	@ (800b70c <USB_HC_StartXfer+0x198>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d12f      	bne.n	800b5fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b59a:	79fb      	ldrb	r3, [r7, #7]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d11c      	bne.n	800b5da <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	7c9b      	ldrb	r3, [r3, #18]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <USB_HC_StartXfer+0x3c>
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	7c9b      	ldrb	r3, [r3, #18]
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d124      	bne.n	800b5fa <USB_HC_StartXfer+0x86>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	799b      	ldrb	r3, [r3, #6]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d120      	bne.n	800b5fa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	69fa      	ldr	r2, [r7, #28]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	6a3a      	ldr	r2, [r7, #32]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5d6:	60d3      	str	r3, [r2, #12]
 800b5d8:	e00f      	b.n	800b5fa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	791b      	ldrb	r3, [r3, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <USB_HC_StartXfer+0x86>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	795b      	ldrb	r3, [r3, #5]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d107      	bne.n	800b5fa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 fb6b 	bl	800bccc <USB_DoPing>
        return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e232      	b.n	800ba60 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	799b      	ldrb	r3, [r3, #6]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d158      	bne.n	800b6b4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b602:	2301      	movs	r3, #1
 800b604:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	78db      	ldrb	r3, [r3, #3]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d007      	beq.n	800b61e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b60e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	8a92      	ldrh	r2, [r2, #20]
 800b614:	fb03 f202 	mul.w	r2, r3, r2
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	61da      	str	r2, [r3, #28]
 800b61c:	e07c      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	7c9b      	ldrb	r3, [r3, #18]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d130      	bne.n	800b688 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	2bbc      	cmp	r3, #188	@ 0xbc
 800b62c:	d918      	bls.n	800b660 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	8a9b      	ldrh	r3, [r3, #20]
 800b632:	461a      	mov	r2, r3
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	69da      	ldr	r2, [r3, #28]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d003      	beq.n	800b650 <USB_HC_StartXfer+0xdc>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d103      	bne.n	800b658 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2202      	movs	r2, #2
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e05f      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2201      	movs	r2, #1
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	e05b      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	6a1a      	ldr	r2, [r3, #32]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d007      	beq.n	800b680 <USB_HC_StartXfer+0x10c>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	2b02      	cmp	r3, #2
 800b676:	d003      	beq.n	800b680 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2204      	movs	r2, #4
 800b67c:	60da      	str	r2, [r3, #12]
 800b67e:	e04b      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2203      	movs	r2, #3
 800b684:	60da      	str	r2, [r3, #12]
 800b686:	e047      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d10d      	bne.n	800b6aa <USB_HC_StartXfer+0x136>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	8a92      	ldrh	r2, [r2, #20]
 800b696:	4293      	cmp	r3, r2
 800b698:	d907      	bls.n	800b6aa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b69a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	8a92      	ldrh	r2, [r2, #20]
 800b6a0:	fb03 f202 	mul.w	r2, r3, r2
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	61da      	str	r2, [r3, #28]
 800b6a8:	e036      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	6a1a      	ldr	r2, [r3, #32]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	61da      	str	r2, [r3, #28]
 800b6b2:	e031      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d018      	beq.n	800b6ee <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	8a92      	ldrh	r2, [r2, #20]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	8a92      	ldrh	r2, [r2, #20]
 800b6cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b6d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b6d4:	8b7b      	ldrh	r3, [r7, #26]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d90b      	bls.n	800b6f2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b6da:	8b7b      	ldrh	r3, [r7, #26]
 800b6dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b6de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	8a92      	ldrh	r2, [r2, #20]
 800b6e4:	fb03 f202 	mul.w	r2, r3, r2
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	61da      	str	r2, [r3, #28]
 800b6ec:	e001      	b.n	800b6f2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	78db      	ldrb	r3, [r3, #3]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b6fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	8a92      	ldrh	r2, [r2, #20]
 800b700:	fb03 f202 	mul.w	r2, r3, r2
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	61da      	str	r2, [r3, #28]
 800b708:	e006      	b.n	800b718 <USB_HC_StartXfer+0x1a4>
 800b70a:	bf00      	nop
 800b70c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6a1a      	ldr	r2, [r3, #32]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b720:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b722:	04d9      	lsls	r1, r3, #19
 800b724:	4ba3      	ldr	r3, [pc, #652]	@ (800b9b4 <USB_HC_StartXfer+0x440>)
 800b726:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b728:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	7d9b      	ldrb	r3, [r3, #22]
 800b72e:	075b      	lsls	r3, r3, #29
 800b730:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b734:	69f9      	ldr	r1, [r7, #28]
 800b736:	0148      	lsls	r0, r1, #5
 800b738:	6a39      	ldr	r1, [r7, #32]
 800b73a:	4401      	add	r1, r0
 800b73c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b740:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b742:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b744:	79fb      	ldrb	r3, [r7, #7]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	6999      	ldr	r1, [r3, #24]
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	4413      	add	r3, r2
 800b756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b75a:	460a      	mov	r2, r1
 800b75c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	bf0c      	ite	eq
 800b76e:	2301      	moveq	r3, #1
 800b770:	2300      	movne	r3, #0
 800b772:	b2db      	uxtb	r3, r3
 800b774:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	69fa      	ldr	r2, [r7, #28]
 800b786:	0151      	lsls	r1, r2, #5
 800b788:	6a3a      	ldr	r2, [r7, #32]
 800b78a:	440a      	add	r2, r1
 800b78c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b790:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b794:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	015a      	lsls	r2, r3, #5
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	4413      	add	r3, r2
 800b79e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	7e7b      	ldrb	r3, [r7, #25]
 800b7a6:	075b      	lsls	r3, r3, #29
 800b7a8:	69f9      	ldr	r1, [r7, #28]
 800b7aa:	0148      	lsls	r0, r1, #5
 800b7ac:	6a39      	ldr	r1, [r7, #32]
 800b7ae:	4401      	add	r1, r0
 800b7b0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	799b      	ldrb	r3, [r3, #6]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	f040 80c3 	bne.w	800b948 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	7c5b      	ldrb	r3, [r3, #17]
 800b7c6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	0151      	lsls	r1, r2, #5
 800b7d2:	6a3a      	ldr	r2, [r7, #32]
 800b7d4:	440a      	add	r2, r1
 800b7d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b7da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b7de:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	69fa      	ldr	r2, [r7, #28]
 800b7f0:	0151      	lsls	r1, r2, #5
 800b7f2:	6a3a      	ldr	r2, [r7, #32]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b7fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	79db      	ldrb	r3, [r3, #7]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d123      	bne.n	800b850 <USB_HC_StartXfer+0x2dc>
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	78db      	ldrb	r3, [r3, #3]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d11f      	bne.n	800b850 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	015a      	lsls	r2, r3, #5
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	4413      	add	r3, r2
 800b818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	69fa      	ldr	r2, [r7, #28]
 800b820:	0151      	lsls	r1, r2, #5
 800b822:	6a3a      	ldr	r2, [r7, #32]
 800b824:	440a      	add	r2, r1
 800b826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b82a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b82e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	4413      	add	r3, r2
 800b838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	0151      	lsls	r1, r2, #5
 800b842:	6a3a      	ldr	r2, [r7, #32]
 800b844:	440a      	add	r2, r1
 800b846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b84e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	7c9b      	ldrb	r3, [r3, #18]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d003      	beq.n	800b860 <USB_HC_StartXfer+0x2ec>
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	7c9b      	ldrb	r3, [r3, #18]
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d117      	bne.n	800b890 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b864:	2b01      	cmp	r3, #1
 800b866:	d113      	bne.n	800b890 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	78db      	ldrb	r3, [r3, #3]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d10f      	bne.n	800b890 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	4413      	add	r3, r2
 800b878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	0151      	lsls	r1, r2, #5
 800b882:	6a3a      	ldr	r2, [r7, #32]
 800b884:	440a      	add	r2, r1
 800b886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b88a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b88e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	7c9b      	ldrb	r3, [r3, #18]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d162      	bne.n	800b95e <USB_HC_StartXfer+0x3ea>
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	78db      	ldrb	r3, [r3, #3]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d15e      	bne.n	800b95e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d858      	bhi.n	800b95c <USB_HC_StartXfer+0x3e8>
 800b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <USB_HC_StartXfer+0x33c>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b8c1 	.word	0x0800b8c1
 800b8b4:	0800b8e3 	.word	0x0800b8e3
 800b8b8:	0800b905 	.word	0x0800b905
 800b8bc:	0800b927 	.word	0x0800b927
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	6a3a      	ldr	r2, [r7, #32]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8de:	6053      	str	r3, [r2, #4]
          break;
 800b8e0:	e03d      	b.n	800b95e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	69fa      	ldr	r2, [r7, #28]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	6a3a      	ldr	r2, [r7, #32]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8fc:	f043 030e 	orr.w	r3, r3, #14
 800b900:	6053      	str	r3, [r2, #4]
          break;
 800b902:	e02c      	b.n	800b95e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	0151      	lsls	r1, r2, #5
 800b916:	6a3a      	ldr	r2, [r7, #32]
 800b918:	440a      	add	r2, r1
 800b91a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b91e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b922:	6053      	str	r3, [r2, #4]
          break;
 800b924:	e01b      	b.n	800b95e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	4413      	add	r3, r2
 800b92e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	0151      	lsls	r1, r2, #5
 800b938:	6a3a      	ldr	r2, [r7, #32]
 800b93a:	440a      	add	r2, r1
 800b93c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b944:	6053      	str	r3, [r2, #4]
          break;
 800b946:	e00a      	b.n	800b95e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b954:	461a      	mov	r2, r3
 800b956:	2300      	movs	r3, #0
 800b958:	6053      	str	r3, [r2, #4]
 800b95a:	e000      	b.n	800b95e <USB_HC_StartXfer+0x3ea>
          break;
 800b95c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	015a      	lsls	r2, r3, #5
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	4413      	add	r3, r2
 800b966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b974:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	78db      	ldrb	r3, [r3, #3]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d004      	beq.n	800b988 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b984:	613b      	str	r3, [r7, #16]
 800b986:	e003      	b.n	800b990 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b98e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b996:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e055      	b.n	800ba60 <USB_HC_StartXfer+0x4ec>
 800b9b4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	78db      	ldrb	r3, [r3, #3]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d14e      	bne.n	800ba5e <USB_HC_StartXfer+0x4ea>
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d04a      	beq.n	800ba5e <USB_HC_StartXfer+0x4ea>
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	79db      	ldrb	r3, [r3, #7]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d146      	bne.n	800ba5e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	7c9b      	ldrb	r3, [r3, #18]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d831      	bhi.n	800ba3c <USB_HC_StartXfer+0x4c8>
 800b9d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e0 <USB_HC_StartXfer+0x46c>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800b9f1 	.word	0x0800b9f1
 800b9e4:	0800ba15 	.word	0x0800ba15
 800b9e8:	0800b9f1 	.word	0x0800b9f1
 800b9ec:	0800ba15 	.word	0x0800ba15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	3303      	adds	r3, #3
 800b9f6:	089b      	lsrs	r3, r3, #2
 800b9f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b9fa:	8afa      	ldrh	r2, [r7, #22]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d91c      	bls.n	800ba40 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	f043 0220 	orr.w	r2, r3, #32
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	619a      	str	r2, [r3, #24]
        }
        break;
 800ba12:	e015      	b.n	800ba40 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	3303      	adds	r3, #3
 800ba1a:	089b      	lsrs	r3, r3, #2
 800ba1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ba1e:	8afa      	ldrh	r2, [r7, #22]
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d90a      	bls.n	800ba44 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	619a      	str	r2, [r3, #24]
        }
        break;
 800ba3a:	e003      	b.n	800ba44 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ba3c:	bf00      	nop
 800ba3e:	e002      	b.n	800ba46 <USB_HC_StartXfer+0x4d2>
        break;
 800ba40:	bf00      	nop
 800ba42:	e000      	b.n	800ba46 <USB_HC_StartXfer+0x4d2>
        break;
 800ba44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6999      	ldr	r1, [r3, #24]
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	785a      	ldrb	r2, [r3, #1]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6a1b      	ldr	r3, [r3, #32]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	2000      	movs	r0, #0
 800ba56:	9000      	str	r0, [sp, #0]
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff f9c9 	bl	800adf0 <USB_WritePacket>
  }

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3728      	adds	r7, #40	@ 0x28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	b29b      	uxth	r3, r3
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b089      	sub	sp, #36	@ 0x24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ba9a:	78fb      	ldrb	r3, [r7, #3]
 800ba9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	015a      	lsls	r2, r3, #5
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	4413      	add	r3, r2
 800baaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	0c9b      	lsrs	r3, r3, #18
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	0fdb      	lsrs	r3, r3, #31
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	0fdb      	lsrs	r3, r3, #31
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f003 0320 	and.w	r3, r3, #32
 800baec:	2b20      	cmp	r3, #32
 800baee:	d10d      	bne.n	800bb0c <USB_HC_Halt+0x82>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <USB_HC_Halt+0x82>
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d005      	beq.n	800bb08 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d002      	beq.n	800bb08 <USB_HC_Halt+0x7e>
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d101      	bne.n	800bb0c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e0d8      	b.n	800bcbe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <USB_HC_Halt+0x8e>
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d173      	bne.n	800bc00 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	015a      	lsls	r2, r3, #5
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69ba      	ldr	r2, [r7, #24]
 800bb28:	0151      	lsls	r1, r2, #5
 800bb2a:	69fa      	ldr	r2, [r7, #28]
 800bb2c:	440a      	add	r2, r1
 800bb2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb36:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d14a      	bne.n	800bbda <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d133      	bne.n	800bbb8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	0151      	lsls	r1, r2, #5
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	440a      	add	r2, r1
 800bb66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb6e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	015a      	lsls	r2, r3, #5
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	0151      	lsls	r1, r2, #5
 800bb82:	69fa      	ldr	r2, [r7, #28]
 800bb84:	440a      	add	r2, r1
 800bb86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb8e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	3301      	adds	r3, #1
 800bb94:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb9c:	d82e      	bhi.n	800bbfc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	015a      	lsls	r2, r3, #5
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbb4:	d0ec      	beq.n	800bb90 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bbb6:	e081      	b.n	800bcbc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	0151      	lsls	r1, r2, #5
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	440a      	add	r2, r1
 800bbce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bbd6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bbd8:	e070      	b.n	800bcbc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	0151      	lsls	r1, r2, #5
 800bbec:	69fa      	ldr	r2, [r7, #28]
 800bbee:	440a      	add	r2, r1
 800bbf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bbf8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bbfa:	e05f      	b.n	800bcbc <USB_HC_Halt+0x232>
            break;
 800bbfc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bbfe:	e05d      	b.n	800bcbc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	015a      	lsls	r2, r3, #5
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	4413      	add	r3, r2
 800bc08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	69ba      	ldr	r2, [r7, #24]
 800bc10:	0151      	lsls	r1, r2, #5
 800bc12:	69fa      	ldr	r2, [r7, #28]
 800bc14:	440a      	add	r2, r1
 800bc16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc1e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d133      	bne.n	800bc98 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	0151      	lsls	r1, r2, #5
 800bc42:	69fa      	ldr	r2, [r7, #28]
 800bc44:	440a      	add	r2, r1
 800bc46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	69ba      	ldr	r2, [r7, #24]
 800bc60:	0151      	lsls	r1, r2, #5
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	440a      	add	r2, r1
 800bc66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc6e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	3301      	adds	r3, #1
 800bc74:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc7c:	d81d      	bhi.n	800bcba <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	015a      	lsls	r2, r3, #5
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	4413      	add	r3, r2
 800bc86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc94:	d0ec      	beq.n	800bc70 <USB_HC_Halt+0x1e6>
 800bc96:	e011      	b.n	800bcbc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	0151      	lsls	r1, r2, #5
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	440a      	add	r2, r1
 800bcae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	e000      	b.n	800bcbc <USB_HC_Halt+0x232>
          break;
 800bcba:	bf00      	nop
    }
  }

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3724      	adds	r7, #36	@ 0x24
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
	...

0800bccc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bcdc:	78fb      	ldrb	r3, [r7, #3]
 800bcde:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bce0:	2301      	movs	r3, #1
 800bce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	04da      	lsls	r2, r3, #19
 800bce8:	4b15      	ldr	r3, [pc, #84]	@ (800bd40 <USB_DoPing+0x74>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	0151      	lsls	r1, r2, #5
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	440a      	add	r2, r1
 800bcf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bcfc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd14:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd1c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	371c      	adds	r7, #28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	1ff80000 	.word	0x1ff80000

0800bd44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7fe ff8c 	bl	800ac76 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd5e:	2110      	movs	r1, #16
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7fe ffe5 	bl	800ad30 <USB_FlushTxFifo>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7ff f80f 	bl	800ad94 <USB_FlushRxFifo>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bd80:	2300      	movs	r3, #0
 800bd82:	61bb      	str	r3, [r7, #24]
 800bd84:	e01f      	b.n	800bdc6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bda4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bdac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdba:	461a      	mov	r2, r3
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2b0f      	cmp	r3, #15
 800bdca:	d9dc      	bls.n	800bd86 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	61bb      	str	r3, [r7, #24]
 800bdd0:	e034      	b.n	800be3c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	015a      	lsls	r2, r3, #5
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	4413      	add	r3, r2
 800bdda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bde8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bdf0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bdf8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	4413      	add	r3, r2
 800be02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be06:	461a      	mov	r2, r3
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	3301      	adds	r3, #1
 800be10:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be18:	d80c      	bhi.n	800be34 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	4413      	add	r3, r2
 800be22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be30:	d0ec      	beq.n	800be0c <USB_StopHost+0xc8>
 800be32:	e000      	b.n	800be36 <USB_StopHost+0xf2>
        break;
 800be34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	3301      	adds	r3, #1
 800be3a:	61bb      	str	r3, [r7, #24]
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	2b0f      	cmp	r3, #15
 800be40:	d9c7      	bls.n	800bdd2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be48:	461a      	mov	r2, r3
 800be4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7fe fefb 	bl	800ac54 <USB_EnableGlobalInt>

  return ret;
 800be5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800be68:	b590      	push	{r4, r7, lr}
 800be6a:	b089      	sub	sp, #36	@ 0x24
 800be6c:	af04      	add	r7, sp, #16
 800be6e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800be70:	2301      	movs	r3, #1
 800be72:	2202      	movs	r2, #2
 800be74:	2102      	movs	r1, #2
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fcd1 	bl	800c81e <USBH_FindInterface>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	2bff      	cmp	r3, #255	@ 0xff
 800be84:	d002      	beq.n	800be8c <USBH_CDC_InterfaceInit+0x24>
 800be86:	7bfb      	ldrb	r3, [r7, #15]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d901      	bls.n	800be90 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800be8c:	2302      	movs	r3, #2
 800be8e:	e13d      	b.n	800c10c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	4619      	mov	r1, r3
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fca6 	bl	800c7e6 <USBH_SelectInterface>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bea4:	2302      	movs	r3, #2
 800bea6:	e131      	b.n	800c10c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800beae:	2050      	movs	r0, #80	@ 0x50
 800beb0:	f006 fc2a 	bl	8012708 <malloc>
 800beb4:	4603      	mov	r3, r0
 800beb6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bec8:	2302      	movs	r3, #2
 800beca:	e11f      	b.n	800c10c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800becc:	2250      	movs	r2, #80	@ 0x50
 800bece:	2100      	movs	r1, #0
 800bed0:	68b8      	ldr	r0, [r7, #8]
 800bed2:	f007 fa66 	bl	80133a2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	211a      	movs	r1, #26
 800bedc:	fb01 f303 	mul.w	r3, r1, r3
 800bee0:	4413      	add	r3, r2
 800bee2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	da15      	bge.n	800bf1a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	211a      	movs	r1, #26
 800bef4:	fb01 f303 	mul.w	r3, r1, r3
 800bef8:	4413      	add	r3, r2
 800befa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800befe:	781a      	ldrb	r2, [r3, #0]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	211a      	movs	r1, #26
 800bf0a:	fb01 f303 	mul.w	r3, r1, r3
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bf14:	881a      	ldrh	r2, [r3, #0]
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	785b      	ldrb	r3, [r3, #1]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f002 fa18 	bl	800e356 <USBH_AllocPipe>
 800bf26:	4603      	mov	r3, r0
 800bf28:	461a      	mov	r2, r3
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	7819      	ldrb	r1, [r3, #0]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	7858      	ldrb	r0, [r3, #1]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	8952      	ldrh	r2, [r2, #10]
 800bf46:	9202      	str	r2, [sp, #8]
 800bf48:	2203      	movs	r2, #3
 800bf4a:	9201      	str	r2, [sp, #4]
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	4623      	mov	r3, r4
 800bf50:	4602      	mov	r2, r0
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f002 f9d0 	bl	800e2f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f006 fb4b 	bl	80125fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bf66:	2300      	movs	r3, #0
 800bf68:	2200      	movs	r2, #0
 800bf6a:	210a      	movs	r1, #10
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fc56 	bl	800c81e <USBH_FindInterface>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	2bff      	cmp	r3, #255	@ 0xff
 800bf7a:	d002      	beq.n	800bf82 <USBH_CDC_InterfaceInit+0x11a>
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d901      	bls.n	800bf86 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bf82:	2302      	movs	r3, #2
 800bf84:	e0c2      	b.n	800c10c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	211a      	movs	r1, #26
 800bf8c:	fb01 f303 	mul.w	r3, r1, r3
 800bf90:	4413      	add	r3, r2
 800bf92:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	b25b      	sxtb	r3, r3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	da16      	bge.n	800bfcc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	211a      	movs	r1, #26
 800bfa4:	fb01 f303 	mul.w	r3, r1, r3
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bfae:	781a      	ldrb	r2, [r3, #0]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	211a      	movs	r1, #26
 800bfba:	fb01 f303 	mul.w	r3, r1, r3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bfc4:	881a      	ldrh	r2, [r3, #0]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	835a      	strh	r2, [r3, #26]
 800bfca:	e015      	b.n	800bff8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	211a      	movs	r1, #26
 800bfd2:	fb01 f303 	mul.w	r3, r1, r3
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bfdc:	781a      	ldrb	r2, [r3, #0]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	211a      	movs	r1, #26
 800bfe8:	fb01 f303 	mul.w	r3, r1, r3
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bff2:	881a      	ldrh	r2, [r3, #0]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	211a      	movs	r1, #26
 800bffe:	fb01 f303 	mul.w	r3, r1, r3
 800c002:	4413      	add	r3, r2
 800c004:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	b25b      	sxtb	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da16      	bge.n	800c03e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	211a      	movs	r1, #26
 800c016:	fb01 f303 	mul.w	r3, r1, r3
 800c01a:	4413      	add	r3, r2
 800c01c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c020:	781a      	ldrb	r2, [r3, #0]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	211a      	movs	r1, #26
 800c02c:	fb01 f303 	mul.w	r3, r1, r3
 800c030:	4413      	add	r3, r2
 800c032:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c036:	881a      	ldrh	r2, [r3, #0]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	835a      	strh	r2, [r3, #26]
 800c03c:	e015      	b.n	800c06a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	211a      	movs	r1, #26
 800c044:	fb01 f303 	mul.w	r3, r1, r3
 800c048:	4413      	add	r3, r2
 800c04a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	211a      	movs	r1, #26
 800c05a:	fb01 f303 	mul.w	r3, r1, r3
 800c05e:	4413      	add	r3, r2
 800c060:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c064:	881a      	ldrh	r2, [r3, #0]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	7b9b      	ldrb	r3, [r3, #14]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f002 f970 	bl	800e356 <USBH_AllocPipe>
 800c076:	4603      	mov	r3, r0
 800c078:	461a      	mov	r2, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	7bdb      	ldrb	r3, [r3, #15]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f002 f966 	bl	800e356 <USBH_AllocPipe>
 800c08a:	4603      	mov	r3, r0
 800c08c:	461a      	mov	r2, r3
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	7b59      	ldrb	r1, [r3, #13]
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	7b98      	ldrb	r0, [r3, #14]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	8b12      	ldrh	r2, [r2, #24]
 800c0aa:	9202      	str	r2, [sp, #8]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	9201      	str	r2, [sp, #4]
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	4623      	mov	r3, r4
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f002 f91e 	bl	800e2f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	7b19      	ldrb	r1, [r3, #12]
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	7bd8      	ldrb	r0, [r3, #15]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	8b52      	ldrh	r2, [r2, #26]
 800c0d4:	9202      	str	r2, [sp, #8]
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	9201      	str	r2, [sp, #4]
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	4623      	mov	r3, r4
 800c0de:	4602      	mov	r2, r0
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f002 f909 	bl	800e2f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	7b5b      	ldrb	r3, [r3, #13]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f006 fa80 	bl	80125fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	7b1b      	ldrb	r3, [r3, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f006 fa79 	bl	80125fc <USBH_LL_SetToggle>

  return USBH_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	bd90      	pop	{r4, r7, pc}

0800c114 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00e      	beq.n	800c14c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f002 f8fe 	bl	800e336 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f002 f929 	bl	800e398 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	7b1b      	ldrb	r3, [r3, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00e      	beq.n	800c172 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	7b1b      	ldrb	r3, [r3, #12]
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f002 f8eb 	bl	800e336 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	7b1b      	ldrb	r3, [r3, #12]
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f002 f916 	bl	800e398 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	7b5b      	ldrb	r3, [r3, #13]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00e      	beq.n	800c198 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	7b5b      	ldrb	r3, [r3, #13]
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f002 f8d8 	bl	800e336 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	7b5b      	ldrb	r3, [r3, #13]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f002 f903 	bl	800e398 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00b      	beq.n	800c1bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f006 fab3 	bl	8012718 <free>
    phost->pActiveClass->pData = 0U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b084      	sub	sp, #16
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	3340      	adds	r3, #64	@ 0x40
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f8b1 	bl	800c346 <GetLineCoding>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c1e8:	7afb      	ldrb	r3, [r7, #11]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d105      	bne.n	800c1fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c1f4:	2102      	movs	r1, #2
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c1fa:	7afb      	ldrb	r3, [r7, #11]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c20c:	2301      	movs	r3, #1
 800c20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c21a:	69db      	ldr	r3, [r3, #28]
 800c21c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c224:	2b04      	cmp	r3, #4
 800c226:	d877      	bhi.n	800c318 <USBH_CDC_Process+0x114>
 800c228:	a201      	add	r2, pc, #4	@ (adr r2, 800c230 <USBH_CDC_Process+0x2c>)
 800c22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22e:	bf00      	nop
 800c230:	0800c245 	.word	0x0800c245
 800c234:	0800c24b 	.word	0x0800c24b
 800c238:	0800c27b 	.word	0x0800c27b
 800c23c:	0800c2ef 	.word	0x0800c2ef
 800c240:	0800c2fd 	.word	0x0800c2fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
      break;
 800c248:	e06d      	b.n	800c326 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f897 	bl	800c384 <SetLineCoding>
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2202      	movs	r2, #2
 800c264:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c268:	e058      	b.n	800c31c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d055      	beq.n	800c31c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2204      	movs	r2, #4
 800c274:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c278:	e050      	b.n	800c31c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	3340      	adds	r3, #64	@ 0x40
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 f860 	bl	800c346 <GetLineCoding>
 800c286:	4603      	mov	r3, r0
 800c288:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d126      	bne.n	800c2de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2a2:	791b      	ldrb	r3, [r3, #4]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d13b      	bne.n	800c320 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d133      	bne.n	800c320 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d12b      	bne.n	800c320 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d124      	bne.n	800c320 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f982 	bl	800c5e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c2dc:	e020      	b.n	800c320 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d01d      	beq.n	800c320 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2204      	movs	r2, #4
 800c2e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c2ec:	e018      	b.n	800c320 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f867 	bl	800c3c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f8f6 	bl	800c4e6 <CDC_ProcessReception>
      break;
 800c2fa:	e014      	b.n	800c326 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 f984 	bl	800d60c <USBH_ClrFeature>
 800c304:	4603      	mov	r3, r0
 800c306:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c308:	7bbb      	ldrb	r3, [r7, #14]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10a      	bne.n	800c324 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c316:	e005      	b.n	800c324 <USBH_CDC_Process+0x120>

    default:
      break;
 800c318:	bf00      	nop
 800c31a:	e004      	b.n	800c326 <USBH_CDC_Process+0x122>
      break;
 800c31c:	bf00      	nop
 800c31e:	e002      	b.n	800c326 <USBH_CDC_Process+0x122>
      break;
 800c320:	bf00      	nop
 800c322:	e000      	b.n	800c326 <USBH_CDC_Process+0x122>
      break;
 800c324:	bf00      	nop

  }

  return status;
 800c326:	7bfb      	ldrb	r3, [r7, #15]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	22a1      	movs	r2, #161	@ 0xa1
 800c354:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2221      	movs	r2, #33	@ 0x21
 800c35a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2207      	movs	r2, #7
 800c36c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2207      	movs	r2, #7
 800c372:	4619      	mov	r1, r3
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f001 fc7e 	bl	800dc76 <USBH_CtlReq>
 800c37a:	4603      	mov	r3, r0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2221      	movs	r2, #33	@ 0x21
 800c392:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2207      	movs	r2, #7
 800c3aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2207      	movs	r2, #7
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f001 fc5f 	bl	800dc76 <USBH_CtlReq>
 800c3b8:	4603      	mov	r3, r0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b086      	sub	sp, #24
 800c3c6:	af02      	add	r7, sp, #8
 800c3c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d002      	beq.n	800c3e8 <CDC_ProcessTransmission+0x26>
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d023      	beq.n	800c42e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c3e6:	e07a      	b.n	800c4de <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	8b12      	ldrh	r2, [r2, #24]
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d90b      	bls.n	800c40c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	69d9      	ldr	r1, [r3, #28]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	8b1a      	ldrh	r2, [r3, #24]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	7b5b      	ldrb	r3, [r3, #13]
 800c400:	2001      	movs	r0, #1
 800c402:	9000      	str	r0, [sp, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f001 ff34 	bl	800e272 <USBH_BulkSendData>
 800c40a:	e00b      	b.n	800c424 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c414:	b29a      	uxth	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	7b5b      	ldrb	r3, [r3, #13]
 800c41a:	2001      	movs	r0, #1
 800c41c:	9000      	str	r0, [sp, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 ff27 	bl	800e272 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c42c:	e057      	b.n	800c4de <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	7b5b      	ldrb	r3, [r3, #13]
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f006 f8b7 	bl	80125a8 <USBH_LL_GetURBState>
 800c43a:	4603      	mov	r3, r0
 800c43c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d136      	bne.n	800c4b2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	8b12      	ldrh	r2, [r2, #24]
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d90e      	bls.n	800c46e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	8b12      	ldrh	r2, [r2, #24]
 800c458:	1a9a      	subs	r2, r3, r2
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	8b12      	ldrh	r2, [r2, #24]
 800c466:	441a      	add	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	61da      	str	r2, [r3, #28]
 800c46c:	e002      	b.n	800c474 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800c484:	e006      	b.n	800c494 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f892 	bl	800c5b8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2204      	movs	r2, #4
 800c498:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f002 fa34 	bl	800e918 <osMessageQueuePut>
      break;
 800c4b0:	e014      	b.n	800c4dc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c4b2:	7afb      	ldrb	r3, [r7, #11]
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d111      	bne.n	800c4dc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f002 fa1e 	bl	800e918 <osMessageQueuePut>
      break;
 800c4dc:	bf00      	nop
  }
}
 800c4de:	bf00      	nop
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c502:	2b03      	cmp	r3, #3
 800c504:	d002      	beq.n	800c50c <CDC_ProcessReception+0x26>
 800c506:	2b04      	cmp	r3, #4
 800c508:	d00e      	beq.n	800c528 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c50a:	e051      	b.n	800c5b0 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	6a19      	ldr	r1, [r3, #32]
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	8b5a      	ldrh	r2, [r3, #26]
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	7b1b      	ldrb	r3, [r3, #12]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f001 fecf 	bl	800e2bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2204      	movs	r2, #4
 800c522:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c526:	e043      	b.n	800c5b0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	7b1b      	ldrb	r3, [r3, #12]
 800c52c:	4619      	mov	r1, r3
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f006 f83a 	bl	80125a8 <USBH_LL_GetURBState>
 800c534:	4603      	mov	r3, r0
 800c536:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c538:	7cfb      	ldrb	r3, [r7, #19]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d137      	bne.n	800c5ae <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	7b1b      	ldrb	r3, [r3, #12]
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f005 ff9d 	bl	8012484 <USBH_LL_GetLastXferSize>
 800c54a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	429a      	cmp	r2, r3
 800c554:	d016      	beq.n	800c584 <CDC_ProcessReception+0x9e>
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	8b5b      	ldrh	r3, [r3, #26]
 800c55a:	461a      	mov	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4293      	cmp	r3, r2
 800c560:	d910      	bls.n	800c584 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	1ad2      	subs	r2, r2, r3
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	6a1a      	ldr	r2, [r3, #32]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	441a      	add	r2, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2203      	movs	r2, #3
 800c57e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800c582:	e006      	b.n	800c592 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f81d 	bl	800c5cc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2204      	movs	r2, #4
 800c596:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f002 f9b5 	bl	800e918 <osMessageQueuePut>
      break;
 800c5ae:	bf00      	nop
  }
}
 800c5b0:	bf00      	nop
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	4613      	mov	r3, r2
 800c600:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c608:	2302      	movs	r3, #2
 800c60a:	e044      	b.n	800c696 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	79fa      	ldrb	r2, [r7, #7]
 800c610:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 f841 	bl	800c6ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d003      	beq.n	800c658 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	68ba      	ldr	r2, [r7, #8]
 800c654:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c658:	2200      	movs	r2, #0
 800c65a:	2104      	movs	r1, #4
 800c65c:	2010      	movs	r0, #16
 800c65e:	f002 f8e7 	bl	800e830 <osMessageQueueNew>
 800c662:	4602      	mov	r2, r0
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c66a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a0 <USBH_Init+0xac>)
 800c66c:	4a0d      	ldr	r2, [pc, #52]	@ (800c6a4 <USBH_Init+0xb0>)
 800c66e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c670:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a0 <USBH_Init+0xac>)
 800c672:	2280      	movs	r2, #128	@ 0x80
 800c674:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c676:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a0 <USBH_Init+0xac>)
 800c678:	2218      	movs	r2, #24
 800c67a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c67c:	4a08      	ldr	r2, [pc, #32]	@ (800c6a0 <USBH_Init+0xac>)
 800c67e:	68f9      	ldr	r1, [r7, #12]
 800c680:	4809      	ldr	r0, [pc, #36]	@ (800c6a8 <USBH_Init+0xb4>)
 800c682:	f001 ff59 	bl	800e538 <osThreadNew>
 800c686:	4602      	mov	r2, r0
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f005 fe44 	bl	801231c <USBH_LL_Init>

  return USBH_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200011e4 	.word	0x200011e4
 800c6a4:	08015f18 	.word	0x08015f18
 800c6a8:	0800d35d 	.word	0x0800d35d

0800c6ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	60fb      	str	r3, [r7, #12]
 800c6bc:	e009      	b.n	800c6d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	33e0      	adds	r3, #224	@ 0xe0
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b0f      	cmp	r3, #15
 800c6d6:	d9f2      	bls.n	800c6be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	e009      	b.n	800c6f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	60fb      	str	r3, [r7, #12]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6f8:	d3f1      	bcc.n	800c6de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2201      	movs	r2, #1
 800c70a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2240      	movs	r2, #64	@ 0x40
 800c71e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	331c      	adds	r3, #28
 800c74a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c74e:	2100      	movs	r1, #0
 800c750:	4618      	mov	r0, r3
 800c752:	f006 fe26 	bl	80133a2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c75c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c760:	2100      	movs	r1, #0
 800c762:	4618      	mov	r0, r3
 800c764:	f006 fe1d 	bl	80133a2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c76e:	2212      	movs	r2, #18
 800c770:	2100      	movs	r1, #0
 800c772:	4618      	mov	r0, r3
 800c774:	f006 fe15 	bl	80133a2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c77e:	223e      	movs	r2, #62	@ 0x3e
 800c780:	2100      	movs	r1, #0
 800c782:	4618      	mov	r0, r3
 800c784:	f006 fe0d 	bl	80133a2 <memset>

  return USBH_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c792:	b480      	push	{r7}
 800c794:	b085      	sub	sp, #20
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d016      	beq.n	800c7d4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10e      	bne.n	800c7ce <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c7b6:	1c59      	adds	r1, r3, #1
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	33de      	adds	r3, #222	@ 0xde
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73fb      	strb	r3, [r7, #15]
 800c7cc:	e004      	b.n	800c7d8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	73fb      	strb	r3, [r7, #15]
 800c7d2:	e001      	b.n	800c7d8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b085      	sub	sp, #20
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c7fc:	78fa      	ldrb	r2, [r7, #3]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d204      	bcs.n	800c80c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	78fa      	ldrb	r2, [r7, #3]
 800c806:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c80a:	e001      	b.n	800c810 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c80c:	2302      	movs	r3, #2
 800c80e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c810:	7bfb      	ldrb	r3, [r7, #15]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c81e:	b480      	push	{r7}
 800c820:	b087      	sub	sp, #28
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	4608      	mov	r0, r1
 800c828:	4611      	mov	r1, r2
 800c82a:	461a      	mov	r2, r3
 800c82c:	4603      	mov	r3, r0
 800c82e:	70fb      	strb	r3, [r7, #3]
 800c830:	460b      	mov	r3, r1
 800c832:	70bb      	strb	r3, [r7, #2]
 800c834:	4613      	mov	r3, r2
 800c836:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c838:	2300      	movs	r3, #0
 800c83a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c83c:	2300      	movs	r3, #0
 800c83e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c846:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c848:	e025      	b.n	800c896 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	221a      	movs	r2, #26
 800c84e:	fb02 f303 	mul.w	r3, r2, r3
 800c852:	3308      	adds	r3, #8
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	4413      	add	r3, r2
 800c858:	3302      	adds	r3, #2
 800c85a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	795b      	ldrb	r3, [r3, #5]
 800c860:	78fa      	ldrb	r2, [r7, #3]
 800c862:	429a      	cmp	r2, r3
 800c864:	d002      	beq.n	800c86c <USBH_FindInterface+0x4e>
 800c866:	78fb      	ldrb	r3, [r7, #3]
 800c868:	2bff      	cmp	r3, #255	@ 0xff
 800c86a:	d111      	bne.n	800c890 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c870:	78ba      	ldrb	r2, [r7, #2]
 800c872:	429a      	cmp	r2, r3
 800c874:	d002      	beq.n	800c87c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c876:	78bb      	ldrb	r3, [r7, #2]
 800c878:	2bff      	cmp	r3, #255	@ 0xff
 800c87a:	d109      	bne.n	800c890 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c880:	787a      	ldrb	r2, [r7, #1]
 800c882:	429a      	cmp	r2, r3
 800c884:	d002      	beq.n	800c88c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c886:	787b      	ldrb	r3, [r7, #1]
 800c888:	2bff      	cmp	r3, #255	@ 0xff
 800c88a:	d101      	bne.n	800c890 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	e006      	b.n	800c89e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	3301      	adds	r3, #1
 800c894:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d9d6      	bls.n	800c84a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c89c:	23ff      	movs	r3, #255	@ 0xff
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b082      	sub	sp, #8
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f005 fd6e 	bl	8012394 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f005 fe87 	bl	80125ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
	...

0800c8cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d102      	bne.n	800c8ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b0b      	cmp	r3, #11
 800c8f6:	f200 8244 	bhi.w	800cd82 <USBH_Process+0x4b6>
 800c8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c900 <USBH_Process+0x34>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c931 	.word	0x0800c931
 800c904:	0800c97f 	.word	0x0800c97f
 800c908:	0800ca03 	.word	0x0800ca03
 800c90c:	0800cd01 	.word	0x0800cd01
 800c910:	0800cd83 	.word	0x0800cd83
 800c914:	0800cabf 	.word	0x0800cabf
 800c918:	0800cc8b 	.word	0x0800cc8b
 800c91c:	0800cb11 	.word	0x0800cb11
 800c920:	0800cb4d 	.word	0x0800cb4d
 800c924:	0800cb85 	.word	0x0800cb85
 800c928:	0800cbe3 	.word	0x0800cbe3
 800c92c:	0800cce9 	.word	0x0800cce9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 8224 	beq.w	800cd86 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c944:	20c8      	movs	r0, #200	@ 0xc8
 800c946:	f005 fe8c 	bl	8012662 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f005 fd7f 	bl	801244e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c974:	2300      	movs	r3, #0
 800c976:	2200      	movs	r2, #0
 800c978:	f001 ffce 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c97c:	e203      	b.n	800cd86 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c984:	2b01      	cmp	r3, #1
 800c986:	d107      	bne.n	800c998 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2202      	movs	r2, #2
 800c994:	701a      	strb	r2, [r3, #0]
 800c996:	e025      	b.n	800c9e4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c99e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9a2:	d914      	bls.n	800c9ce <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d903      	bls.n	800c9c6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	220d      	movs	r2, #13
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	e00e      	b.n	800c9e4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	e00a      	b.n	800c9e4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c9d4:	f103 020a 	add.w	r2, r3, #10
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c9de:	200a      	movs	r0, #10
 800c9e0:	f005 fe3f 	bl	8012662 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f001 ff8c 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800ca00:	e1c8      	b.n	800cd94 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d005      	beq.n	800ca18 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca12:	2104      	movs	r1, #4
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca18:	2064      	movs	r0, #100	@ 0x64
 800ca1a:	f005 fe22 	bl	8012662 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f005 fcee 	bl	8012400 <USBH_LL_GetSpeed>
 800ca24:	4603      	mov	r3, r0
 800ca26:	461a      	mov	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2205      	movs	r2, #5
 800ca32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ca34:	2100      	movs	r1, #0
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f001 fc8d 	bl	800e356 <USBH_AllocPipe>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	461a      	mov	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ca44:	2180      	movs	r1, #128	@ 0x80
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f001 fc85 	bl	800e356 <USBH_AllocPipe>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	461a      	mov	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	7919      	ldrb	r1, [r3, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca68:	9202      	str	r2, [sp, #8]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	9201      	str	r2, [sp, #4]
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	4603      	mov	r3, r0
 800ca72:	2280      	movs	r2, #128	@ 0x80
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f001 fc3f 	bl	800e2f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	7959      	ldrb	r1, [r3, #5]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca8e:	9202      	str	r2, [sp, #8]
 800ca90:	2200      	movs	r2, #0
 800ca92:	9201      	str	r2, [sp, #4]
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	4603      	mov	r3, r0
 800ca98:	2200      	movs	r2, #0
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 fc2c 	bl	800e2f8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cab4:	2300      	movs	r3, #0
 800cab6:	2200      	movs	r2, #0
 800cab8:	f001 ff2e 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800cabc:	e16a      	b.n	800cd94 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f96e 	bl	800cda0 <USBH_HandleEnum>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f040 815c 	bne.w	800cd8a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d103      	bne.n	800caec <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2208      	movs	r2, #8
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	e002      	b.n	800caf2 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2207      	movs	r2, #7
 800caf0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2205      	movs	r2, #5
 800caf6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cb06:	2300      	movs	r3, #0
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f001 ff05 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cb0e:	e13c      	b.n	800cd8a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8139 	beq.w	800cd8e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cb22:	2101      	movs	r1, #1
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2208      	movs	r2, #8
 800cb2c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2205      	movs	r2, #5
 800cb32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cb42:	2300      	movs	r3, #0
 800cb44:	2200      	movs	r2, #0
 800cb46:	f001 fee7 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800cb4a:	e120      	b.n	800cd8e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fd12 	bl	800d57e <USBH_SetCfg>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2209      	movs	r2, #9
 800cb64:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f001 fecb 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800cb82:	e107      	b.n	800cd94 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cb8a:	f003 0320 	and.w	r3, r3, #32
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d015      	beq.n	800cbbe <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cb92:	2101      	movs	r1, #1
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fd15 	bl	800d5c4 <USBH_SetFeature>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d103      	bne.n	800cbae <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	220a      	movs	r2, #10
 800cbaa:	701a      	strb	r2, [r3, #0]
 800cbac:	e00a      	b.n	800cbc4 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800cbae:	7bbb      	ldrb	r3, [r7, #14]
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d106      	bne.n	800cbc4 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	220a      	movs	r2, #10
 800cbba:	701a      	strb	r2, [r3, #0]
 800cbbc:	e002      	b.n	800cbc4 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cbd8:	2300      	movs	r3, #0
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f001 fe9c 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800cbe0:	e0d8      	b.n	800cd94 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d03f      	beq.n	800cc6c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
 800cbf8:	e016      	b.n	800cc28 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cbfa:	7bfa      	ldrb	r2, [r7, #15]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	32de      	adds	r2, #222	@ 0xde
 800cc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc04:	791a      	ldrb	r2, [r3, #4]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d108      	bne.n	800cc22 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cc10:	7bfa      	ldrb	r2, [r7, #15]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	32de      	adds	r2, #222	@ 0xde
 800cc16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800cc20:	e005      	b.n	800cc2e <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	3301      	adds	r3, #1
 800cc26:	73fb      	strb	r3, [r7, #15]
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0e5      	beq.n	800cbfa <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d016      	beq.n	800cc66 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	4798      	blx	r3
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d109      	bne.n	800cc5e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2206      	movs	r2, #6
 800cc4e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cc56:	2103      	movs	r1, #3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	4798      	blx	r3
 800cc5c:	e006      	b.n	800cc6c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	220d      	movs	r2, #13
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	e002      	b.n	800cc6c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	220d      	movs	r2, #13
 800cc6a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2205      	movs	r2, #5
 800cc70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cc80:	2300      	movs	r3, #0
 800cc82:	2200      	movs	r2, #0
 800cc84:	f001 fe48 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800cc88:	e084      	b.n	800cd94 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d017      	beq.n	800ccc4 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
 800cca0:	4603      	mov	r3, r0
 800cca2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d103      	bne.n	800ccb4 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	220b      	movs	r2, #11
 800ccb0:	701a      	strb	r2, [r3, #0]
 800ccb2:	e00a      	b.n	800ccca <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d106      	bne.n	800ccca <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	220d      	movs	r2, #13
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	e002      	b.n	800ccca <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	220d      	movs	r2, #13
 800ccc8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2205      	movs	r2, #5
 800ccce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ccde:	2300      	movs	r3, #0
 800cce0:	2200      	movs	r2, #0
 800cce2:	f001 fe19 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800cce6:	e055      	b.n	800cd94 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d04f      	beq.n	800cd92 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	4798      	blx	r3
      }
      break;
 800ccfe:	e048      	b.n	800cd92 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff fccf 	bl	800c6ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d009      	beq.n	800cd2c <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d005      	beq.n	800cd42 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cd3c:	2105      	movs	r1, #5
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d107      	bne.n	800cd5e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff fda7 	bl	800c8aa <USBH_Start>
 800cd5c:	e002      	b.n	800cd64 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f005 fb18 	bl	8012394 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f001 fdcc 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      break;
 800cd80:	e008      	b.n	800cd94 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800cd82:	bf00      	nop
 800cd84:	e006      	b.n	800cd94 <USBH_Process+0x4c8>
      break;
 800cd86:	bf00      	nop
 800cd88:	e004      	b.n	800cd94 <USBH_Process+0x4c8>
      break;
 800cd8a:	bf00      	nop
 800cd8c:	e002      	b.n	800cd94 <USBH_Process+0x4c8>
    break;
 800cd8e:	bf00      	nop
 800cd90:	e000      	b.n	800cd94 <USBH_Process+0x4c8>
      break;
 800cd92:	bf00      	nop
  }
  return USBH_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop

0800cda0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af04      	add	r7, sp, #16
 800cda6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cdac:	2301      	movs	r3, #1
 800cdae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	785b      	ldrb	r3, [r3, #1]
 800cdb4:	2b07      	cmp	r3, #7
 800cdb6:	f200 8204 	bhi.w	800d1c2 <USBH_HandleEnum+0x422>
 800cdba:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc0 <USBH_HandleEnum+0x20>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800ce9b 	.word	0x0800ce9b
 800cdc8:	0800cf05 	.word	0x0800cf05
 800cdcc:	0800cf8f 	.word	0x0800cf8f
 800cdd0:	0800cff9 	.word	0x0800cff9
 800cdd4:	0800d069 	.word	0x0800d069
 800cdd8:	0800d105 	.word	0x0800d105
 800cddc:	0800d183 	.word	0x0800d183
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cde0:	2108      	movs	r1, #8
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fae8 	bl	800d3b8 <USBH_Get_DevDesc>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cdec:	7bbb      	ldrb	r3, [r7, #14]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d12e      	bne.n	800ce50 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	7919      	ldrb	r1, [r3, #4]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ce16:	9202      	str	r2, [sp, #8]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	9201      	str	r2, [sp, #4]
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2280      	movs	r2, #128	@ 0x80
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f001 fa68 	bl	800e2f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7959      	ldrb	r1, [r3, #5]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce3c:	9202      	str	r2, [sp, #8]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	9201      	str	r2, [sp, #4]
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4603      	mov	r3, r0
 800ce46:	2200      	movs	r2, #0
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f001 fa55 	bl	800e2f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ce4e:	e1ba      	b.n	800d1c6 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	2b03      	cmp	r3, #3
 800ce54:	f040 81b7 	bne.w	800d1c6 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce5e:	3301      	adds	r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d903      	bls.n	800ce7a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	220d      	movs	r2, #13
 800ce76:	701a      	strb	r2, [r3, #0]
      break;
 800ce78:	e1a5      	b.n	800d1c6 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	795b      	ldrb	r3, [r3, #5]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f001 fa89 	bl	800e398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	791b      	ldrb	r3, [r3, #4]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 fa83 	bl	800e398 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	701a      	strb	r2, [r3, #0]
      break;
 800ce98:	e195      	b.n	800d1c6 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ce9a:	2112      	movs	r1, #18
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fa8b 	bl	800d3b8 <USBH_Get_DevDesc>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ceb2:	e18a      	b.n	800d1ca <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ceb4:	7bbb      	ldrb	r3, [r7, #14]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	f040 8187 	bne.w	800d1ca <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cec2:	3301      	adds	r3, #1
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	d903      	bls.n	800cede <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	220d      	movs	r2, #13
 800ceda:	701a      	strb	r2, [r3, #0]
      break;
 800cedc:	e175      	b.n	800d1ca <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	795b      	ldrb	r3, [r3, #5]
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f001 fa57 	bl	800e398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	791b      	ldrb	r3, [r3, #4]
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f001 fa51 	bl	800e398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	701a      	strb	r2, [r3, #0]
      break;
 800cf02:	e162      	b.n	800d1ca <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cf04:	2101      	movs	r1, #1
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fb15 	bl	800d536 <USBH_SetAddress>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d130      	bne.n	800cf78 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800cf16:	2002      	movs	r0, #2
 800cf18:	f005 fba3 	bl	8012662 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2203      	movs	r2, #3
 800cf28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	7919      	ldrb	r1, [r3, #4]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cf3e:	9202      	str	r2, [sp, #8]
 800cf40:	2200      	movs	r2, #0
 800cf42:	9201      	str	r2, [sp, #4]
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	4603      	mov	r3, r0
 800cf48:	2280      	movs	r2, #128	@ 0x80
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f001 f9d4 	bl	800e2f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	7959      	ldrb	r1, [r3, #5]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf64:	9202      	str	r2, [sp, #8]
 800cf66:	2200      	movs	r2, #0
 800cf68:	9201      	str	r2, [sp, #4]
 800cf6a:	9300      	str	r3, [sp, #0]
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2200      	movs	r2, #0
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f001 f9c1 	bl	800e2f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf76:	e12a      	b.n	800d1ce <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	f040 8127 	bne.w	800d1ce <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	220d      	movs	r2, #13
 800cf84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	705a      	strb	r2, [r3, #1]
      break;
 800cf8c:	e11f      	b.n	800d1ce <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cf8e:	2109      	movs	r1, #9
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fa3d 	bl	800d410 <USBH_Get_CfgDesc>
 800cf96:	4603      	mov	r3, r0
 800cf98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf9a:	7bbb      	ldrb	r3, [r7, #14]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2204      	movs	r2, #4
 800cfa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfa6:	e114      	b.n	800d1d2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	f040 8111 	bne.w	800d1d2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cfc6:	2b03      	cmp	r3, #3
 800cfc8:	d903      	bls.n	800cfd2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	220d      	movs	r2, #13
 800cfce:	701a      	strb	r2, [r3, #0]
      break;
 800cfd0:	e0ff      	b.n	800d1d2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	795b      	ldrb	r3, [r3, #5]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f001 f9dd 	bl	800e398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	791b      	ldrb	r3, [r3, #4]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f001 f9d7 	bl	800e398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	701a      	strb	r2, [r3, #0]
      break;
 800cff6:	e0ec      	b.n	800d1d2 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800cffe:	4619      	mov	r1, r3
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fa05 	bl	800d410 <USBH_Get_CfgDesc>
 800d006:	4603      	mov	r3, r0
 800d008:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d103      	bne.n	800d018 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2205      	movs	r2, #5
 800d014:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d016:	e0de      	b.n	800d1d6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d018:	7bbb      	ldrb	r3, [r7, #14]
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	f040 80db 	bne.w	800d1d6 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d026:	3301      	adds	r3, #1
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d036:	2b03      	cmp	r3, #3
 800d038:	d903      	bls.n	800d042 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	220d      	movs	r2, #13
 800d03e:	701a      	strb	r2, [r3, #0]
      break;
 800d040:	e0c9      	b.n	800d1d6 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	795b      	ldrb	r3, [r3, #5]
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f001 f9a5 	bl	800e398 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	791b      	ldrb	r3, [r3, #4]
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f001 f99f 	bl	800e398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
      break;
 800d066:	e0b6      	b.n	800d1d6 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d036      	beq.n	800d0e0 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d07e:	23ff      	movs	r3, #255	@ 0xff
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f9ef 	bl	800d464 <USBH_Get_StringDesc>
 800d086:	4603      	mov	r3, r0
 800d088:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d08a:	7bbb      	ldrb	r3, [r7, #14]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d111      	bne.n	800d0b4 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2206      	movs	r2, #6
 800d094:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2205      	movs	r2, #5
 800d09a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f001 fc33 	bl	800e918 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d0b2:	e092      	b.n	800d1da <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
 800d0b6:	2b03      	cmp	r3, #3
 800d0b8:	f040 808f 	bne.w	800d1da <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2206      	movs	r2, #6
 800d0c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2205      	movs	r2, #5
 800d0c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f001 fc1d 	bl	800e918 <osMessageQueuePut>
      break;
 800d0de:	e07c      	b.n	800d1da <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2206      	movs	r2, #6
 800d0e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2205      	movs	r2, #5
 800d0ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f001 fc0b 	bl	800e918 <osMessageQueuePut>
      break;
 800d102:	e06a      	b.n	800d1da <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d027      	beq.n	800d15e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d11a:	23ff      	movs	r3, #255	@ 0xff
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f9a1 	bl	800d464 <USBH_Get_StringDesc>
 800d122:	4603      	mov	r3, r0
 800d124:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d126:	7bbb      	ldrb	r3, [r7, #14]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d103      	bne.n	800d134 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2207      	movs	r2, #7
 800d130:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d132:	e054      	b.n	800d1de <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	2b03      	cmp	r3, #3
 800d138:	d151      	bne.n	800d1de <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2207      	movs	r2, #7
 800d13e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2205      	movs	r2, #5
 800d144:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d154:	2300      	movs	r3, #0
 800d156:	2200      	movs	r2, #0
 800d158:	f001 fbde 	bl	800e918 <osMessageQueuePut>
      break;
 800d15c:	e03f      	b.n	800d1de <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2207      	movs	r2, #7
 800d162:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2205      	movs	r2, #5
 800d168:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d178:	2300      	movs	r3, #0
 800d17a:	2200      	movs	r2, #0
 800d17c:	f001 fbcc 	bl	800e918 <osMessageQueuePut>
      break;
 800d180:	e02d      	b.n	800d1de <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d017      	beq.n	800d1bc <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d198:	23ff      	movs	r3, #255	@ 0xff
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f962 	bl	800d464 <USBH_Get_StringDesc>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d102      	bne.n	800d1b0 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d1ae:	e018      	b.n	800d1e2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1b0:	7bbb      	ldrb	r3, [r7, #14]
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d115      	bne.n	800d1e2 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ba:	e012      	b.n	800d1e2 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]
      break;
 800d1c0:	e00f      	b.n	800d1e2 <USBH_HandleEnum+0x442>

    default:
      break;
 800d1c2:	bf00      	nop
 800d1c4:	e00e      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1c6:	bf00      	nop
 800d1c8:	e00c      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1ca:	bf00      	nop
 800d1cc:	e00a      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1ce:	bf00      	nop
 800d1d0:	e008      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1d2:	bf00      	nop
 800d1d4:	e006      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1d6:	bf00      	nop
 800d1d8:	e004      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1da:	bf00      	nop
 800d1dc:	e002      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1de:	bf00      	nop
 800d1e0:	e000      	b.n	800d1e4 <USBH_HandleEnum+0x444>
      break;
 800d1e2:	bf00      	nop
  }
  return Status;
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop

0800d1f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d202:	bf00      	nop
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b082      	sub	sp, #8
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 f804 	bl	800d232 <USBH_HandleSof>
}
 800d22a:	bf00      	nop
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b0b      	cmp	r3, #11
 800d242:	d10a      	bne.n	800d25a <USBH_HandleSof+0x28>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d005      	beq.n	800d25a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	4798      	blx	r3
  }
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d286:	2300      	movs	r3, #0
 800d288:	2200      	movs	r2, #0
 800d28a:	f001 fb45 	bl	800e918 <osMessageQueuePut>
#endif
#endif

  return;
 800d28e:	bf00      	nop
}
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d2a6:	bf00      	nop
}
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f001 fb15 	bl	800e918 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f005 f856 	bl	80123ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	791b      	ldrb	r3, [r3, #4]
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f001 f837 	bl	800e398 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	795b      	ldrb	r3, [r3, #5]
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f001 f831 	bl	800e398 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d34a:	2300      	movs	r3, #0
 800d34c:	2200      	movs	r2, #0
 800d34e:	f001 fae3 	bl	800e918 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d374:	2200      	movs	r2, #0
 800d376:	f001 fb2f 	bl	800e9d8 <osMessageQueueGet>
 800d37a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1f0      	bne.n	800d364 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7ff faa2 	bl	800c8cc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d388:	e7ec      	b.n	800d364 <USBH_Process_OS+0x8>

0800d38a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f001 fab5 	bl	800e918 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d3c4:	887b      	ldrh	r3, [r7, #2]
 800d3c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3ca:	d901      	bls.n	800d3d0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d3cc:	2303      	movs	r3, #3
 800d3ce:	e01b      	b.n	800d408 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d3d6:	887b      	ldrh	r3, [r7, #2]
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f872 	bl	800d4cc <USBH_GetDescriptor>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d109      	bne.n	800d406 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d3f8:	887a      	ldrh	r2, [r7, #2]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f929 	bl	800d654 <USBH_ParseDevDesc>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d406:	7bfb      	ldrb	r3, [r7, #15]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af02      	add	r7, sp, #8
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	331c      	adds	r3, #28
 800d420:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d422:	887b      	ldrh	r3, [r7, #2]
 800d424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d428:	d901      	bls.n	800d42e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d42a:	2303      	movs	r3, #3
 800d42c:	e016      	b.n	800d45c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d42e:	887b      	ldrh	r3, [r7, #2]
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d438:	2100      	movs	r1, #0
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f846 	bl	800d4cc <USBH_GetDescriptor>
 800d440:	4603      	mov	r3, r0
 800d442:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d444:	7bfb      	ldrb	r3, [r7, #15]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d107      	bne.n	800d45a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d44a:	887b      	ldrh	r3, [r7, #2]
 800d44c:	461a      	mov	r2, r3
 800d44e:	68b9      	ldr	r1, [r7, #8]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f9af 	bl	800d7b4 <USBH_ParseCfgDesc>
 800d456:	4603      	mov	r3, r0
 800d458:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af02      	add	r7, sp, #8
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	607a      	str	r2, [r7, #4]
 800d46e:	461a      	mov	r2, r3
 800d470:	460b      	mov	r3, r1
 800d472:	72fb      	strb	r3, [r7, #11]
 800d474:	4613      	mov	r3, r2
 800d476:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d478:	893b      	ldrh	r3, [r7, #8]
 800d47a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d47e:	d802      	bhi.n	800d486 <USBH_Get_StringDesc+0x22>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d486:	2303      	movs	r3, #3
 800d488:	e01c      	b.n	800d4c4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d48a:	7afb      	ldrb	r3, [r7, #11]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d492:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d49a:	893b      	ldrh	r3, [r7, #8]
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 f812 	bl	800d4cc <USBH_GetDescriptor>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d107      	bne.n	800d4c2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d4b8:	893a      	ldrh	r2, [r7, #8]
 800d4ba:	6879      	ldr	r1, [r7, #4]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f000 fb8d 	bl	800dbdc <USBH_ParseStringDesc>
  }

  return status;
 800d4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	607b      	str	r3, [r7, #4]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	72fb      	strb	r3, [r7, #11]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	789b      	ldrb	r3, [r3, #2]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d11c      	bne.n	800d520 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d4e6:	7afb      	ldrb	r3, [r7, #11]
 800d4e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4ec:	b2da      	uxtb	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2206      	movs	r2, #6
 800d4f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	893a      	ldrh	r2, [r7, #8]
 800d4fc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d4fe:	893b      	ldrh	r3, [r7, #8]
 800d500:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d504:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d508:	d104      	bne.n	800d514 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f240 4209 	movw	r2, #1033	@ 0x409
 800d510:	829a      	strh	r2, [r3, #20]
 800d512:	e002      	b.n	800d51a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	8b3a      	ldrh	r2, [r7, #24]
 800d51e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d520:	8b3b      	ldrh	r3, [r7, #24]
 800d522:	461a      	mov	r2, r3
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 fba5 	bl	800dc76 <USBH_CtlReq>
 800d52c:	4603      	mov	r3, r0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b082      	sub	sp, #8
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	460b      	mov	r3, r1
 800d540:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	789b      	ldrb	r3, [r3, #2]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d10f      	bne.n	800d56a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2205      	movs	r2, #5
 800d554:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d556:	78fb      	ldrb	r3, [r7, #3]
 800d558:	b29a      	uxth	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d56a:	2200      	movs	r2, #0
 800d56c:	2100      	movs	r1, #0
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fb81 	bl	800dc76 <USBH_CtlReq>
 800d574:	4603      	mov	r3, r0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b082      	sub	sp, #8
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	460b      	mov	r3, r1
 800d588:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	789b      	ldrb	r3, [r3, #2]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d10e      	bne.n	800d5b0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2209      	movs	r2, #9
 800d59c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	887a      	ldrh	r2, [r7, #2]
 800d5a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fb5e 	bl	800dc76 <USBH_CtlReq>
 800d5ba:	4603      	mov	r3, r0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	789b      	ldrb	r3, [r3, #2]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d10f      	bne.n	800d5f8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2203      	movs	r2, #3
 800d5e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d5e4:	78fb      	ldrb	r3, [r7, #3]
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fb3a 	bl	800dc76 <USBH_CtlReq>
 800d602:	4603      	mov	r3, r0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	460b      	mov	r3, r1
 800d616:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	789b      	ldrb	r3, [r3, #2]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d10f      	bne.n	800d640 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2202      	movs	r2, #2
 800d624:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d640:	2200      	movs	r2, #0
 800d642:	2100      	movs	r1, #0
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fb16 	bl	800dc76 <USBH_CtlReq>
 800d64a:	4603      	mov	r3, r0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	4613      	mov	r3, r2
 800d660:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d668:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d101      	bne.n	800d678 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d674:	2302      	movs	r3, #2
 800d676:	e094      	b.n	800d7a2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	781a      	ldrb	r2, [r3, #0]
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	785a      	ldrb	r2, [r3, #1]
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	3302      	adds	r3, #2
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	3303      	adds	r3, #3
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	021b      	lsls	r3, r3, #8
 800d698:	b29b      	uxth	r3, r3
 800d69a:	4313      	orrs	r3, r2
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	791a      	ldrb	r2, [r3, #4]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	795a      	ldrb	r2, [r3, #5]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	799a      	ldrb	r2, [r3, #6]
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	79da      	ldrb	r2, [r3, #7]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d004      	beq.n	800d6d6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d11b      	bne.n	800d70e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	79db      	ldrb	r3, [r3, #7]
 800d6da:	2b20      	cmp	r3, #32
 800d6dc:	dc0f      	bgt.n	800d6fe <USBH_ParseDevDesc+0xaa>
 800d6de:	2b08      	cmp	r3, #8
 800d6e0:	db0f      	blt.n	800d702 <USBH_ParseDevDesc+0xae>
 800d6e2:	3b08      	subs	r3, #8
 800d6e4:	4a32      	ldr	r2, [pc, #200]	@ (800d7b0 <USBH_ParseDevDesc+0x15c>)
 800d6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	bf14      	ite	ne
 800d6f2:	2301      	movne	r3, #1
 800d6f4:	2300      	moveq	r3, #0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d106      	bne.n	800d70a <USBH_ParseDevDesc+0xb6>
 800d6fc:	e001      	b.n	800d702 <USBH_ParseDevDesc+0xae>
 800d6fe:	2b40      	cmp	r3, #64	@ 0x40
 800d700:	d003      	beq.n	800d70a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	2208      	movs	r2, #8
 800d706:	71da      	strb	r2, [r3, #7]
        break;
 800d708:	e000      	b.n	800d70c <USBH_ParseDevDesc+0xb8>
        break;
 800d70a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d70c:	e00e      	b.n	800d72c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d714:	2b02      	cmp	r3, #2
 800d716:	d107      	bne.n	800d728 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	79db      	ldrb	r3, [r3, #7]
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d005      	beq.n	800d72c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	2208      	movs	r2, #8
 800d724:	71da      	strb	r2, [r3, #7]
 800d726:	e001      	b.n	800d72c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d728:	2303      	movs	r3, #3
 800d72a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	2b08      	cmp	r3, #8
 800d730:	d936      	bls.n	800d7a0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	3308      	adds	r3, #8
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	461a      	mov	r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	3309      	adds	r3, #9
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	021b      	lsls	r3, r3, #8
 800d742:	b29b      	uxth	r3, r3
 800d744:	4313      	orrs	r3, r2
 800d746:	b29a      	uxth	r2, r3
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	330a      	adds	r3, #10
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	330b      	adds	r3, #11
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	021b      	lsls	r3, r3, #8
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4313      	orrs	r3, r2
 800d760:	b29a      	uxth	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	330c      	adds	r3, #12
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	461a      	mov	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	330d      	adds	r3, #13
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	021b      	lsls	r3, r3, #8
 800d776:	b29b      	uxth	r3, r3
 800d778:	4313      	orrs	r3, r2
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	7b9a      	ldrb	r2, [r3, #14]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	7bda      	ldrb	r2, [r3, #15]
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	7c1a      	ldrb	r2, [r3, #16]
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	7c5a      	ldrb	r2, [r3, #17]
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	371c      	adds	r7, #28
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	01000101 	.word	0x01000101

0800d7b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b08c      	sub	sp, #48	@ 0x30
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d7c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d7e2:	2302      	movs	r3, #2
 800d7e4:	e0da      	b.n	800d99c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	781a      	ldrb	r2, [r3, #0]
 800d7ee:	6a3b      	ldr	r3, [r7, #32]
 800d7f0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	785a      	ldrb	r2, [r3, #1]
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	3302      	adds	r3, #2
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	3303      	adds	r3, #3
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	021b      	lsls	r3, r3, #8
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	4313      	orrs	r3, r2
 800d80e:	b29b      	uxth	r3, r3
 800d810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d814:	bf28      	it	cs
 800d816:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	6a3b      	ldr	r3, [r7, #32]
 800d81e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	791a      	ldrb	r2, [r3, #4]
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	795a      	ldrb	r2, [r3, #5]
 800d82c:	6a3b      	ldr	r3, [r7, #32]
 800d82e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	799a      	ldrb	r2, [r3, #6]
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	79da      	ldrb	r2, [r3, #7]
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	7a1a      	ldrb	r2, [r3, #8]
 800d844:	6a3b      	ldr	r3, [r7, #32]
 800d846:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b09      	cmp	r3, #9
 800d84e:	d002      	beq.n	800d856 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	2209      	movs	r2, #9
 800d854:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d856:	88fb      	ldrh	r3, [r7, #6]
 800d858:	2b09      	cmp	r3, #9
 800d85a:	f240 809d 	bls.w	800d998 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d85e:	2309      	movs	r3, #9
 800d860:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d866:	e081      	b.n	800d96c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d868:	f107 0316 	add.w	r3, r7, #22
 800d86c:	4619      	mov	r1, r3
 800d86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d870:	f000 f9e7 	bl	800dc42 <USBH_GetNextDesc>
 800d874:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d878:	785b      	ldrb	r3, [r3, #1]
 800d87a:	2b04      	cmp	r3, #4
 800d87c:	d176      	bne.n	800d96c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	2b09      	cmp	r3, #9
 800d884:	d002      	beq.n	800d88c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d888:	2209      	movs	r2, #9
 800d88a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d88c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d890:	221a      	movs	r2, #26
 800d892:	fb02 f303 	mul.w	r3, r2, r3
 800d896:	3308      	adds	r3, #8
 800d898:	6a3a      	ldr	r2, [r7, #32]
 800d89a:	4413      	add	r3, r2
 800d89c:	3302      	adds	r3, #2
 800d89e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d8a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8a2:	69f8      	ldr	r0, [r7, #28]
 800d8a4:	f000 f87e 	bl	800d9a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d8b2:	e043      	b.n	800d93c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d8b4:	f107 0316 	add.w	r3, r7, #22
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8bc:	f000 f9c1 	bl	800dc42 <USBH_GetNextDesc>
 800d8c0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c4:	785b      	ldrb	r3, [r3, #1]
 800d8c6:	2b05      	cmp	r3, #5
 800d8c8:	d138      	bne.n	800d93c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	795b      	ldrb	r3, [r3, #5]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d113      	bne.n	800d8fa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d003      	beq.n	800d8e2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	799b      	ldrb	r3, [r3, #6]
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d10b      	bne.n	800d8fa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	79db      	ldrb	r3, [r3, #7]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10b      	bne.n	800d902 <USBH_ParseCfgDesc+0x14e>
 800d8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	2b09      	cmp	r3, #9
 800d8f0:	d007      	beq.n	800d902 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f4:	2209      	movs	r2, #9
 800d8f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d8f8:	e003      	b.n	800d902 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fc:	2207      	movs	r2, #7
 800d8fe:	701a      	strb	r2, [r3, #0]
 800d900:	e000      	b.n	800d904 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d902:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d908:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d90c:	3201      	adds	r2, #1
 800d90e:	00d2      	lsls	r2, r2, #3
 800d910:	211a      	movs	r1, #26
 800d912:	fb01 f303 	mul.w	r3, r1, r3
 800d916:	4413      	add	r3, r2
 800d918:	3308      	adds	r3, #8
 800d91a:	6a3a      	ldr	r2, [r7, #32]
 800d91c:	4413      	add	r3, r2
 800d91e:	3304      	adds	r3, #4
 800d920:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d924:	69b9      	ldr	r1, [r7, #24]
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 f870 	bl	800da0c <USBH_ParseEPDesc>
 800d92c:	4603      	mov	r3, r0
 800d92e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d932:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d936:	3301      	adds	r3, #1
 800d938:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	791b      	ldrb	r3, [r3, #4]
 800d940:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d944:	429a      	cmp	r2, r3
 800d946:	d204      	bcs.n	800d952 <USBH_ParseCfgDesc+0x19e>
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	885a      	ldrh	r2, [r3, #2]
 800d94c:	8afb      	ldrh	r3, [r7, #22]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d8b0      	bhi.n	800d8b4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	791b      	ldrb	r3, [r3, #4]
 800d956:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d201      	bcs.n	800d962 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d95e:	2303      	movs	r3, #3
 800d960:	e01c      	b.n	800d99c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d966:	3301      	adds	r3, #1
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d96c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d970:	2b01      	cmp	r3, #1
 800d972:	d805      	bhi.n	800d980 <USBH_ParseCfgDesc+0x1cc>
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	885a      	ldrh	r2, [r3, #2]
 800d978:	8afb      	ldrh	r3, [r7, #22]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	f63f af74 	bhi.w	800d868 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	791b      	ldrb	r3, [r3, #4]
 800d984:	2b02      	cmp	r3, #2
 800d986:	bf28      	it	cs
 800d988:	2302      	movcs	r3, #2
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d990:	429a      	cmp	r2, r3
 800d992:	d201      	bcs.n	800d998 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d994:	2303      	movs	r3, #3
 800d996:	e001      	b.n	800d99c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3730      	adds	r7, #48	@ 0x30
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	781a      	ldrb	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	785a      	ldrb	r2, [r3, #1]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	789a      	ldrb	r2, [r3, #2]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	78da      	ldrb	r2, [r3, #3]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	bf28      	it	cs
 800d9d8:	2302      	movcs	r3, #2
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	795a      	ldrb	r2, [r3, #5]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	799a      	ldrb	r2, [r3, #6]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	79da      	ldrb	r2, [r3, #7]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	7a1a      	ldrb	r2, [r3, #8]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	721a      	strb	r2, [r3, #8]
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800da18:	2300      	movs	r3, #0
 800da1a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	781a      	ldrb	r2, [r3, #0]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	785a      	ldrb	r2, [r3, #1]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	789a      	ldrb	r2, [r3, #2]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	78da      	ldrb	r2, [r3, #3]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3305      	adds	r3, #5
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	021b      	lsls	r3, r3, #8
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	4313      	orrs	r3, r2
 800da50:	b29a      	uxth	r2, r3
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	799a      	ldrb	r2, [r3, #6]
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	889b      	ldrh	r3, [r3, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d009      	beq.n	800da7a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800da6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da6e:	d804      	bhi.n	800da7a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800da74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da78:	d901      	bls.n	800da7e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800da7a:	2303      	movs	r3, #3
 800da7c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800da84:	2b00      	cmp	r3, #0
 800da86:	d136      	bne.n	800daf6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	78db      	ldrb	r3, [r3, #3]
 800da8c:	f003 0303 	and.w	r3, r3, #3
 800da90:	2b02      	cmp	r3, #2
 800da92:	d108      	bne.n	800daa6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	889b      	ldrh	r3, [r3, #4]
 800da98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da9c:	f240 8097 	bls.w	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800daa0:	2303      	movs	r3, #3
 800daa2:	75fb      	strb	r3, [r7, #23]
 800daa4:	e093      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	78db      	ldrb	r3, [r3, #3]
 800daaa:	f003 0303 	and.w	r3, r3, #3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d107      	bne.n	800dac2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	889b      	ldrh	r3, [r3, #4]
 800dab6:	2b40      	cmp	r3, #64	@ 0x40
 800dab8:	f240 8089 	bls.w	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dabc:	2303      	movs	r3, #3
 800dabe:	75fb      	strb	r3, [r7, #23]
 800dac0:	e085      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	78db      	ldrb	r3, [r3, #3]
 800dac6:	f003 0303 	and.w	r3, r3, #3
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d005      	beq.n	800dada <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	78db      	ldrb	r3, [r3, #3]
 800dad2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d10a      	bne.n	800daf0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	799b      	ldrb	r3, [r3, #6]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <USBH_ParseEPDesc+0xde>
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	799b      	ldrb	r3, [r3, #6]
 800dae6:	2b10      	cmp	r3, #16
 800dae8:	d970      	bls.n	800dbcc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800daea:	2303      	movs	r3, #3
 800daec:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800daee:	e06d      	b.n	800dbcc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800daf0:	2303      	movs	r3, #3
 800daf2:	75fb      	strb	r3, [r7, #23]
 800daf4:	e06b      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d13c      	bne.n	800db7a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	78db      	ldrb	r3, [r3, #3]
 800db04:	f003 0303 	and.w	r3, r3, #3
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d005      	beq.n	800db18 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	78db      	ldrb	r3, [r3, #3]
 800db10:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	889b      	ldrh	r3, [r3, #4]
 800db1c:	2b40      	cmp	r3, #64	@ 0x40
 800db1e:	d956      	bls.n	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db20:	2303      	movs	r3, #3
 800db22:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800db24:	e053      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	78db      	ldrb	r3, [r3, #3]
 800db2a:	f003 0303 	and.w	r3, r3, #3
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d10e      	bne.n	800db50 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	799b      	ldrb	r3, [r3, #6]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d007      	beq.n	800db4a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800db3e:	2b10      	cmp	r3, #16
 800db40:	d803      	bhi.n	800db4a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800db46:	2b40      	cmp	r3, #64	@ 0x40
 800db48:	d941      	bls.n	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db4a:	2303      	movs	r3, #3
 800db4c:	75fb      	strb	r3, [r7, #23]
 800db4e:	e03e      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	78db      	ldrb	r3, [r3, #3]
 800db54:	f003 0303 	and.w	r3, r3, #3
 800db58:	2b03      	cmp	r3, #3
 800db5a:	d10b      	bne.n	800db74 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	799b      	ldrb	r3, [r3, #6]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <USBH_ParseEPDesc+0x162>
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	889b      	ldrh	r3, [r3, #4]
 800db68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db6c:	d32f      	bcc.n	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db6e:	2303      	movs	r3, #3
 800db70:	75fb      	strb	r3, [r7, #23]
 800db72:	e02c      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800db74:	2303      	movs	r3, #3
 800db76:	75fb      	strb	r3, [r7, #23]
 800db78:	e029      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800db80:	2b02      	cmp	r3, #2
 800db82:	d120      	bne.n	800dbc6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	78db      	ldrb	r3, [r3, #3]
 800db88:	f003 0303 	and.w	r3, r3, #3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d106      	bne.n	800db9e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	889b      	ldrh	r3, [r3, #4]
 800db94:	2b08      	cmp	r3, #8
 800db96:	d01a      	beq.n	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db98:	2303      	movs	r3, #3
 800db9a:	75fb      	strb	r3, [r7, #23]
 800db9c:	e017      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	78db      	ldrb	r3, [r3, #3]
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	2b03      	cmp	r3, #3
 800dba8:	d10a      	bne.n	800dbc0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	799b      	ldrb	r3, [r3, #6]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <USBH_ParseEPDesc+0x1ae>
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	889b      	ldrh	r3, [r3, #4]
 800dbb6:	2b08      	cmp	r3, #8
 800dbb8:	d909      	bls.n	800dbce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	75fb      	strb	r3, [r7, #23]
 800dbbe:	e006      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	75fb      	strb	r3, [r7, #23]
 800dbc4:	e003      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	75fb      	strb	r3, [r7, #23]
 800dbca:	e000      	b.n	800dbce <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dbcc:	bf00      	nop
  }

  return status;
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	371c      	adds	r7, #28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	3301      	adds	r3, #1
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d120      	bne.n	800dc36 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	1e9a      	subs	r2, r3, #2
 800dbfa:	88fb      	ldrh	r3, [r7, #6]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	bf28      	it	cs
 800dc00:	4613      	movcs	r3, r2
 800dc02:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3302      	adds	r3, #2
 800dc08:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	82fb      	strh	r3, [r7, #22]
 800dc0e:	e00b      	b.n	800dc28 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dc10:	8afb      	ldrh	r3, [r7, #22]
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	4413      	add	r3, r2
 800dc16:	781a      	ldrb	r2, [r3, #0]
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dc22:	8afb      	ldrh	r3, [r7, #22]
 800dc24:	3302      	adds	r3, #2
 800dc26:	82fb      	strh	r3, [r7, #22]
 800dc28:	8afa      	ldrh	r2, [r7, #22]
 800dc2a:	8abb      	ldrh	r3, [r7, #20]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d3ef      	bcc.n	800dc10 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2200      	movs	r2, #0
 800dc34:	701a      	strb	r2, [r3, #0]
  }
}
 800dc36:	bf00      	nop
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b085      	sub	sp, #20
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	7812      	ldrb	r2, [r2, #0]
 800dc54:	4413      	add	r3, r2
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4413      	add	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc68:	68fb      	ldr	r3, [r7, #12]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b086      	sub	sp, #24
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	60f8      	str	r0, [r7, #12]
 800dc7e:	60b9      	str	r1, [r7, #8]
 800dc80:	4613      	mov	r3, r2
 800dc82:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dc84:	2301      	movs	r3, #1
 800dc86:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	789b      	ldrb	r3, [r3, #2]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d002      	beq.n	800dc96 <USBH_CtlReq+0x20>
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d01d      	beq.n	800dcd0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800dc94:	e043      	b.n	800dd1e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	88fa      	ldrh	r2, [r7, #6]
 800dca0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2202      	movs	r2, #2
 800dcac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2203      	movs	r2, #3
 800dcb6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f000 fe25 	bl	800e918 <osMessageQueuePut>
      break;
 800dcce:	e026      	b.n	800dd1e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f000 f829 	bl	800dd28 <USBH_HandleControl>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dcda:	7dfb      	ldrb	r3, [r7, #23]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <USBH_CtlReq+0x70>
 800dce0:	7dfb      	ldrb	r3, [r7, #23]
 800dce2:	2b03      	cmp	r3, #3
 800dce4:	d106      	bne.n	800dcf4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2201      	movs	r2, #1
 800dcea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	761a      	strb	r2, [r3, #24]
 800dcf2:	e005      	b.n	800dd00 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d102      	bne.n	800dd00 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2203      	movs	r2, #3
 800dd04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800dd14:	2300      	movs	r3, #0
 800dd16:	2200      	movs	r2, #0
 800dd18:	f000 fdfe 	bl	800e918 <osMessageQueuePut>
      break;
 800dd1c:	bf00      	nop
  }
  return status;
 800dd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3718      	adds	r7, #24
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dd30:	2301      	movs	r3, #1
 800dd32:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dd34:	2300      	movs	r3, #0
 800dd36:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7e1b      	ldrb	r3, [r3, #24]
 800dd3c:	3b01      	subs	r3, #1
 800dd3e:	2b0a      	cmp	r3, #10
 800dd40:	f200 8229 	bhi.w	800e196 <USBH_HandleControl+0x46e>
 800dd44:	a201      	add	r2, pc, #4	@ (adr r2, 800dd4c <USBH_HandleControl+0x24>)
 800dd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4a:	bf00      	nop
 800dd4c:	0800dd79 	.word	0x0800dd79
 800dd50:	0800dd93 	.word	0x0800dd93
 800dd54:	0800de35 	.word	0x0800de35
 800dd58:	0800de5b 	.word	0x0800de5b
 800dd5c:	0800dee7 	.word	0x0800dee7
 800dd60:	0800df11 	.word	0x0800df11
 800dd64:	0800dfd3 	.word	0x0800dfd3
 800dd68:	0800dff5 	.word	0x0800dff5
 800dd6c:	0800e087 	.word	0x0800e087
 800dd70:	0800e0ad 	.word	0x0800e0ad
 800dd74:	0800e13f 	.word	0x0800e13f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f103 0110 	add.w	r1, r3, #16
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	795b      	ldrb	r3, [r3, #5]
 800dd82:	461a      	mov	r2, r3
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fa17 	bl	800e1b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2202      	movs	r2, #2
 800dd8e:	761a      	strb	r2, [r3, #24]
      break;
 800dd90:	e20c      	b.n	800e1ac <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	795b      	ldrb	r3, [r3, #5]
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f004 fc05 	bl	80125a8 <USBH_LL_GetURBState>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d12c      	bne.n	800de02 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	7c1b      	ldrb	r3, [r3, #16]
 800ddac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ddb0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	8adb      	ldrh	r3, [r3, #22]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00a      	beq.n	800ddd0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ddba:	7b7b      	ldrb	r3, [r7, #13]
 800ddbc:	2b80      	cmp	r3, #128	@ 0x80
 800ddbe:	d103      	bne.n	800ddc8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2203      	movs	r2, #3
 800ddc4:	761a      	strb	r2, [r3, #24]
 800ddc6:	e00d      	b.n	800dde4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2205      	movs	r2, #5
 800ddcc:	761a      	strb	r2, [r3, #24]
 800ddce:	e009      	b.n	800dde4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ddd0:	7b7b      	ldrb	r3, [r7, #13]
 800ddd2:	2b80      	cmp	r3, #128	@ 0x80
 800ddd4:	d103      	bne.n	800ddde <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2209      	movs	r2, #9
 800ddda:	761a      	strb	r2, [r3, #24]
 800dddc:	e002      	b.n	800dde4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2207      	movs	r2, #7
 800dde2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2203      	movs	r2, #3
 800dde8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f000 fd8c 	bl	800e918 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de00:	e1cb      	b.n	800e19a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	2b04      	cmp	r3, #4
 800de06:	d003      	beq.n	800de10 <USBH_HandleControl+0xe8>
 800de08:	7bbb      	ldrb	r3, [r7, #14]
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	f040 81c5 	bne.w	800e19a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	220b      	movs	r2, #11
 800de14:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2203      	movs	r2, #3
 800de1a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800de2a:	2300      	movs	r3, #0
 800de2c:	2200      	movs	r2, #0
 800de2e:	f000 fd73 	bl	800e918 <osMessageQueuePut>
      break;
 800de32:	e1b2      	b.n	800e19a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6899      	ldr	r1, [r3, #8]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	899a      	ldrh	r2, [r3, #12]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	791b      	ldrb	r3, [r3, #4]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f9f2 	bl	800e236 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2204      	movs	r2, #4
 800de56:	761a      	strb	r2, [r3, #24]
      break;
 800de58:	e1a8      	b.n	800e1ac <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	791b      	ldrb	r3, [r3, #4]
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f004 fba1 	bl	80125a8 <USBH_LL_GetURBState>
 800de66:	4603      	mov	r3, r0
 800de68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800de6a:	7bbb      	ldrb	r3, [r7, #14]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d110      	bne.n	800de92 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2209      	movs	r2, #9
 800de74:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2203      	movs	r2, #3
 800de7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800de8a:	2300      	movs	r3, #0
 800de8c:	2200      	movs	r2, #0
 800de8e:	f000 fd43 	bl	800e918 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	2b05      	cmp	r3, #5
 800de96:	d110      	bne.n	800deba <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800de98:	2303      	movs	r3, #3
 800de9a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2203      	movs	r2, #3
 800dea0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800deb0:	2300      	movs	r3, #0
 800deb2:	2200      	movs	r2, #0
 800deb4:	f000 fd30 	bl	800e918 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800deb8:	e171      	b.n	800e19e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800deba:	7bbb      	ldrb	r3, [r7, #14]
 800debc:	2b04      	cmp	r3, #4
 800debe:	f040 816e 	bne.w	800e19e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	220b      	movs	r2, #11
 800dec6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2203      	movs	r2, #3
 800decc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800dedc:	2300      	movs	r3, #0
 800dede:	2200      	movs	r2, #0
 800dee0:	f000 fd1a 	bl	800e918 <osMessageQueuePut>
      break;
 800dee4:	e15b      	b.n	800e19e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6899      	ldr	r1, [r3, #8]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	899a      	ldrh	r2, [r3, #12]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	795b      	ldrb	r3, [r3, #5]
 800def2:	2001      	movs	r0, #1
 800def4:	9000      	str	r0, [sp, #0]
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 f978 	bl	800e1ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800df02:	b29a      	uxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2206      	movs	r2, #6
 800df0c:	761a      	strb	r2, [r3, #24]
      break;
 800df0e:	e14d      	b.n	800e1ac <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	795b      	ldrb	r3, [r3, #5]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f004 fb46 	bl	80125a8 <USBH_LL_GetURBState>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d111      	bne.n	800df4a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2207      	movs	r2, #7
 800df2a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2203      	movs	r2, #3
 800df30:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800df40:	2300      	movs	r3, #0
 800df42:	2200      	movs	r2, #0
 800df44:	f000 fce8 	bl	800e918 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df48:	e12b      	b.n	800e1a2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	d113      	bne.n	800df78 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	220c      	movs	r2, #12
 800df54:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800df56:	2303      	movs	r3, #3
 800df58:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2203      	movs	r2, #3
 800df5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800df6e:	2300      	movs	r3, #0
 800df70:	2200      	movs	r2, #0
 800df72:	f000 fcd1 	bl	800e918 <osMessageQueuePut>
      break;
 800df76:	e114      	b.n	800e1a2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800df78:	7bbb      	ldrb	r3, [r7, #14]
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d111      	bne.n	800dfa2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2205      	movs	r2, #5
 800df82:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2203      	movs	r2, #3
 800df88:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800df98:	2300      	movs	r3, #0
 800df9a:	2200      	movs	r2, #0
 800df9c:	f000 fcbc 	bl	800e918 <osMessageQueuePut>
      break;
 800dfa0:	e0ff      	b.n	800e1a2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	f040 80fc 	bne.w	800e1a2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	220b      	movs	r2, #11
 800dfae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2203      	movs	r2, #3
 800dfb8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800dfc8:	2300      	movs	r3, #0
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f000 fca4 	bl	800e918 <osMessageQueuePut>
      break;
 800dfd0:	e0e7      	b.n	800e1a2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	791b      	ldrb	r3, [r3, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	2100      	movs	r1, #0
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f92b 	bl	800e236 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2208      	movs	r2, #8
 800dff0:	761a      	strb	r2, [r3, #24]

      break;
 800dff2:	e0db      	b.n	800e1ac <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	791b      	ldrb	r3, [r3, #4]
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f004 fad4 	bl	80125a8 <USBH_LL_GetURBState>
 800e000:	4603      	mov	r3, r0
 800e002:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d113      	bne.n	800e032 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	220d      	movs	r2, #13
 800e00e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2203      	movs	r2, #3
 800e018:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e028:	2300      	movs	r3, #0
 800e02a:	2200      	movs	r2, #0
 800e02c:	f000 fc74 	bl	800e918 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e030:	e0b9      	b.n	800e1a6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	2b04      	cmp	r3, #4
 800e036:	d111      	bne.n	800e05c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	220b      	movs	r2, #11
 800e03c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2203      	movs	r2, #3
 800e042:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e052:	2300      	movs	r3, #0
 800e054:	2200      	movs	r2, #0
 800e056:	f000 fc5f 	bl	800e918 <osMessageQueuePut>
      break;
 800e05a:	e0a4      	b.n	800e1a6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e05c:	7bbb      	ldrb	r3, [r7, #14]
 800e05e:	2b05      	cmp	r3, #5
 800e060:	f040 80a1 	bne.w	800e1a6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e064:	2303      	movs	r3, #3
 800e066:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2203      	movs	r2, #3
 800e06c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e07c:	2300      	movs	r3, #0
 800e07e:	2200      	movs	r2, #0
 800e080:	f000 fc4a 	bl	800e918 <osMessageQueuePut>
      break;
 800e084:	e08f      	b.n	800e1a6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	795b      	ldrb	r3, [r3, #5]
 800e08a:	2201      	movs	r2, #1
 800e08c:	9200      	str	r2, [sp, #0]
 800e08e:	2200      	movs	r2, #0
 800e090:	2100      	movs	r1, #0
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f8aa 	bl	800e1ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	220a      	movs	r2, #10
 800e0a8:	761a      	strb	r2, [r3, #24]
      break;
 800e0aa:	e07f      	b.n	800e1ac <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	795b      	ldrb	r3, [r3, #5]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f004 fa78 	bl	80125a8 <USBH_LL_GetURBState>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d113      	bne.n	800e0ea <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	220d      	movs	r2, #13
 800e0ca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2203      	movs	r2, #3
 800e0d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f000 fc18 	bl	800e918 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e0e8:	e05f      	b.n	800e1aa <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e0ea:	7bbb      	ldrb	r3, [r7, #14]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d111      	bne.n	800e114 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2209      	movs	r2, #9
 800e0f4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2203      	movs	r2, #3
 800e0fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e10a:	2300      	movs	r3, #0
 800e10c:	2200      	movs	r2, #0
 800e10e:	f000 fc03 	bl	800e918 <osMessageQueuePut>
      break;
 800e112:	e04a      	b.n	800e1aa <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	2b04      	cmp	r3, #4
 800e118:	d147      	bne.n	800e1aa <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	220b      	movs	r2, #11
 800e11e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2203      	movs	r2, #3
 800e124:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800e134:	2300      	movs	r3, #0
 800e136:	2200      	movs	r2, #0
 800e138:	f000 fbee 	bl	800e918 <osMessageQueuePut>
      break;
 800e13c:	e035      	b.n	800e1aa <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	7e5b      	ldrb	r3, [r3, #25]
 800e142:	3301      	adds	r3, #1
 800e144:	b2da      	uxtb	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	765a      	strb	r2, [r3, #25]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	7e5b      	ldrb	r3, [r3, #25]
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d806      	bhi.n	800e160 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e15e:	e025      	b.n	800e1ac <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e166:	2106      	movs	r1, #6
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	795b      	ldrb	r3, [r3, #5]
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 f90d 	bl	800e398 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	791b      	ldrb	r3, [r3, #4]
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f907 	bl	800e398 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e190:	2302      	movs	r3, #2
 800e192:	73fb      	strb	r3, [r7, #15]
      break;
 800e194:	e00a      	b.n	800e1ac <USBH_HandleControl+0x484>

    default:
      break;
 800e196:	bf00      	nop
 800e198:	e008      	b.n	800e1ac <USBH_HandleControl+0x484>
      break;
 800e19a:	bf00      	nop
 800e19c:	e006      	b.n	800e1ac <USBH_HandleControl+0x484>
      break;
 800e19e:	bf00      	nop
 800e1a0:	e004      	b.n	800e1ac <USBH_HandleControl+0x484>
      break;
 800e1a2:	bf00      	nop
 800e1a4:	e002      	b.n	800e1ac <USBH_HandleControl+0x484>
      break;
 800e1a6:	bf00      	nop
 800e1a8:	e000      	b.n	800e1ac <USBH_HandleControl+0x484>
      break;
 800e1aa:	bf00      	nop
  }

  return status;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop

0800e1b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af04      	add	r7, sp, #16
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1c6:	79f9      	ldrb	r1, [r7, #7]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	2308      	movs	r3, #8
 800e1ce:	9302      	str	r3, [sp, #8]
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	2300      	movs	r3, #0
 800e1da:	2200      	movs	r2, #0
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f004 f9b2 	bl	8012546 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b088      	sub	sp, #32
 800e1f0:	af04      	add	r7, sp, #16
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	80fb      	strh	r3, [r7, #6]
 800e1fe:	4613      	mov	r3, r2
 800e200:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e20c:	2300      	movs	r3, #0
 800e20e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e210:	7979      	ldrb	r1, [r7, #5]
 800e212:	7e3b      	ldrb	r3, [r7, #24]
 800e214:	9303      	str	r3, [sp, #12]
 800e216:	88fb      	ldrh	r3, [r7, #6]
 800e218:	9302      	str	r3, [sp, #8]
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	2301      	movs	r3, #1
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	2300      	movs	r3, #0
 800e224:	2200      	movs	r2, #0
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f004 f98d 	bl	8012546 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b088      	sub	sp, #32
 800e23a:	af04      	add	r7, sp, #16
 800e23c:	60f8      	str	r0, [r7, #12]
 800e23e:	60b9      	str	r1, [r7, #8]
 800e240:	4611      	mov	r1, r2
 800e242:	461a      	mov	r2, r3
 800e244:	460b      	mov	r3, r1
 800e246:	80fb      	strh	r3, [r7, #6]
 800e248:	4613      	mov	r3, r2
 800e24a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e24c:	7979      	ldrb	r1, [r7, #5]
 800e24e:	2300      	movs	r3, #0
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	88fb      	ldrh	r3, [r7, #6]
 800e254:	9302      	str	r3, [sp, #8]
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	2301      	movs	r3, #1
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	2300      	movs	r3, #0
 800e260:	2201      	movs	r2, #1
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f004 f96f 	bl	8012546 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e268:	2300      	movs	r3, #0

}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b088      	sub	sp, #32
 800e276:	af04      	add	r7, sp, #16
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	60b9      	str	r1, [r7, #8]
 800e27c:	4611      	mov	r1, r2
 800e27e:	461a      	mov	r2, r3
 800e280:	460b      	mov	r3, r1
 800e282:	80fb      	strh	r3, [r7, #6]
 800e284:	4613      	mov	r3, r2
 800e286:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e296:	7979      	ldrb	r1, [r7, #5]
 800e298:	7e3b      	ldrb	r3, [r7, #24]
 800e29a:	9303      	str	r3, [sp, #12]
 800e29c:	88fb      	ldrh	r3, [r7, #6]
 800e29e:	9302      	str	r3, [sp, #8]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f004 f94a 	bl	8012546 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af04      	add	r7, sp, #16
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	80fb      	strh	r3, [r7, #6]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2d2:	7979      	ldrb	r1, [r7, #5]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9303      	str	r3, [sp, #12]
 800e2d8:	88fb      	ldrh	r3, [r7, #6]
 800e2da:	9302      	str	r3, [sp, #8]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	9301      	str	r3, [sp, #4]
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f004 f92c 	bl	8012546 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af04      	add	r7, sp, #16
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	4608      	mov	r0, r1
 800e302:	4611      	mov	r1, r2
 800e304:	461a      	mov	r2, r3
 800e306:	4603      	mov	r3, r0
 800e308:	70fb      	strb	r3, [r7, #3]
 800e30a:	460b      	mov	r3, r1
 800e30c:	70bb      	strb	r3, [r7, #2]
 800e30e:	4613      	mov	r3, r2
 800e310:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e312:	7878      	ldrb	r0, [r7, #1]
 800e314:	78ba      	ldrb	r2, [r7, #2]
 800e316:	78f9      	ldrb	r1, [r7, #3]
 800e318:	8b3b      	ldrh	r3, [r7, #24]
 800e31a:	9302      	str	r3, [sp, #8]
 800e31c:	7d3b      	ldrb	r3, [r7, #20]
 800e31e:	9301      	str	r3, [sp, #4]
 800e320:	7c3b      	ldrb	r3, [r7, #16]
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	4603      	mov	r3, r0
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f004 f8bf 	bl	80124aa <USBH_LL_OpenPipe>

  return USBH_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3708      	adds	r7, #8
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b082      	sub	sp, #8
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	460b      	mov	r3, r1
 800e340:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e342:	78fb      	ldrb	r3, [r7, #3]
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f004 f8de 	bl	8012508 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	460b      	mov	r3, r1
 800e360:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f836 	bl	800e3d4 <USBH_GetFreePipe>
 800e368:	4603      	mov	r3, r0
 800e36a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e36c:	89fb      	ldrh	r3, [r7, #14]
 800e36e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e372:	4293      	cmp	r3, r2
 800e374:	d00a      	beq.n	800e38c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e376:	78fa      	ldrb	r2, [r7, #3]
 800e378:	89fb      	ldrh	r3, [r7, #14]
 800e37a:	f003 030f 	and.w	r3, r3, #15
 800e37e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	33e0      	adds	r3, #224	@ 0xe0
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	440b      	add	r3, r1
 800e38a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e38c:	89fb      	ldrh	r3, [r7, #14]
 800e38e:	b2db      	uxtb	r3, r3
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e3a4:	78fb      	ldrb	r3, [r7, #3]
 800e3a6:	2b0f      	cmp	r3, #15
 800e3a8:	d80d      	bhi.n	800e3c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e3aa:	78fb      	ldrb	r3, [r7, #3]
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	33e0      	adds	r3, #224	@ 0xe0
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	4413      	add	r3, r2
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	78fb      	ldrb	r3, [r7, #3]
 800e3b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e3bc:	6879      	ldr	r1, [r7, #4]
 800e3be:	33e0      	adds	r3, #224	@ 0xe0
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	440b      	add	r3, r1
 800e3c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
 800e3e4:	e00f      	b.n	800e406 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	33e0      	adds	r3, #224	@ 0xe0
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	e007      	b.n	800e410 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	3301      	adds	r3, #1
 800e404:	73fb      	strb	r3, [r7, #15]
 800e406:	7bfb      	ldrb	r3, [r7, #15]
 800e408:	2b0f      	cmp	r3, #15
 800e40a:	d9ec      	bls.n	800e3e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e40c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e410:	4618      	mov	r0, r3
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <__NVIC_SetPriority>:
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	6039      	str	r1, [r7, #0]
 800e426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	db0a      	blt.n	800e446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	b2da      	uxtb	r2, r3
 800e434:	490c      	ldr	r1, [pc, #48]	@ (800e468 <__NVIC_SetPriority+0x4c>)
 800e436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e43a:	0112      	lsls	r2, r2, #4
 800e43c:	b2d2      	uxtb	r2, r2
 800e43e:	440b      	add	r3, r1
 800e440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e444:	e00a      	b.n	800e45c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	4908      	ldr	r1, [pc, #32]	@ (800e46c <__NVIC_SetPriority+0x50>)
 800e44c:	79fb      	ldrb	r3, [r7, #7]
 800e44e:	f003 030f 	and.w	r3, r3, #15
 800e452:	3b04      	subs	r3, #4
 800e454:	0112      	lsls	r2, r2, #4
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	440b      	add	r3, r1
 800e45a:	761a      	strb	r2, [r3, #24]
}
 800e45c:	bf00      	nop
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	e000e100 	.word	0xe000e100
 800e46c:	e000ed00 	.word	0xe000ed00

0800e470 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e470:	b580      	push	{r7, lr}
 800e472:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e474:	4b05      	ldr	r3, [pc, #20]	@ (800e48c <SysTick_Handler+0x1c>)
 800e476:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e478:	f002 fa6e 	bl	8010958 <xTaskGetSchedulerState>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d001      	beq.n	800e486 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e482:	f003 fbb1 	bl	8011be8 <xPortSysTickHandler>
  }
}
 800e486:	bf00      	nop
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	e000e010 	.word	0xe000e010

0800e490 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e494:	2100      	movs	r1, #0
 800e496:	f06f 0004 	mvn.w	r0, #4
 800e49a:	f7ff ffbf 	bl	800e41c <__NVIC_SetPriority>
#endif
}
 800e49e:	bf00      	nop
 800e4a0:	bd80      	pop	{r7, pc}
	...

0800e4a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4aa:	f3ef 8305 	mrs	r3, IPSR
 800e4ae:	603b      	str	r3, [r7, #0]
  return(result);
 800e4b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e4b6:	f06f 0305 	mvn.w	r3, #5
 800e4ba:	607b      	str	r3, [r7, #4]
 800e4bc:	e00c      	b.n	800e4d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e4be:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e8 <osKernelInitialize+0x44>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d105      	bne.n	800e4d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e4c6:	4b08      	ldr	r3, [pc, #32]	@ (800e4e8 <osKernelInitialize+0x44>)
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	607b      	str	r3, [r7, #4]
 800e4d0:	e002      	b.n	800e4d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e4d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e4d8:	687b      	ldr	r3, [r7, #4]
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
 800e4e6:	bf00      	nop
 800e4e8:	20001208 	.word	0x20001208

0800e4ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4f2:	f3ef 8305 	mrs	r3, IPSR
 800e4f6:	603b      	str	r3, [r7, #0]
  return(result);
 800e4f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d003      	beq.n	800e506 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e4fe:	f06f 0305 	mvn.w	r3, #5
 800e502:	607b      	str	r3, [r7, #4]
 800e504:	e010      	b.n	800e528 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e506:	4b0b      	ldr	r3, [pc, #44]	@ (800e534 <osKernelStart+0x48>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d109      	bne.n	800e522 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e50e:	f7ff ffbf 	bl	800e490 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e512:	4b08      	ldr	r3, [pc, #32]	@ (800e534 <osKernelStart+0x48>)
 800e514:	2202      	movs	r2, #2
 800e516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e518:	f001 fc30 	bl	800fd7c <vTaskStartScheduler>
      stat = osOK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	607b      	str	r3, [r7, #4]
 800e520:	e002      	b.n	800e528 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e528:	687b      	ldr	r3, [r7, #4]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	20001208 	.word	0x20001208

0800e538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e538:	b580      	push	{r7, lr}
 800e53a:	b08e      	sub	sp, #56	@ 0x38
 800e53c:	af04      	add	r7, sp, #16
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e544:	2300      	movs	r3, #0
 800e546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e548:	f3ef 8305 	mrs	r3, IPSR
 800e54c:	617b      	str	r3, [r7, #20]
  return(result);
 800e54e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e550:	2b00      	cmp	r3, #0
 800e552:	d17e      	bne.n	800e652 <osThreadNew+0x11a>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d07b      	beq.n	800e652 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e55a:	2380      	movs	r3, #128	@ 0x80
 800e55c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e55e:	2318      	movs	r3, #24
 800e560:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e56a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d045      	beq.n	800e5fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d002      	beq.n	800e580 <osThreadNew+0x48>
        name = attr->name;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	699b      	ldr	r3, [r3, #24]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d002      	beq.n	800e58e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d008      	beq.n	800e5a6 <osThreadNew+0x6e>
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b38      	cmp	r3, #56	@ 0x38
 800e598:	d805      	bhi.n	800e5a6 <osThreadNew+0x6e>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <osThreadNew+0x72>
        return (NULL);
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e054      	b.n	800e654 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	695b      	ldr	r3, [r3, #20]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	089b      	lsrs	r3, r3, #2
 800e5b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00e      	beq.n	800e5e0 <osThreadNew+0xa8>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	2bbb      	cmp	r3, #187	@ 0xbb
 800e5c8:	d90a      	bls.n	800e5e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d006      	beq.n	800e5e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	695b      	ldr	r3, [r3, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <osThreadNew+0xa8>
        mem = 1;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	61bb      	str	r3, [r7, #24]
 800e5de:	e010      	b.n	800e602 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10c      	bne.n	800e602 <osThreadNew+0xca>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d108      	bne.n	800e602 <osThreadNew+0xca>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d104      	bne.n	800e602 <osThreadNew+0xca>
          mem = 0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	61bb      	str	r3, [r7, #24]
 800e5fc:	e001      	b.n	800e602 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d110      	bne.n	800e62a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e610:	9202      	str	r2, [sp, #8]
 800e612:	9301      	str	r3, [sp, #4]
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	6a3a      	ldr	r2, [r7, #32]
 800e61c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	f001 f8d8 	bl	800f7d4 <xTaskCreateStatic>
 800e624:	4603      	mov	r3, r0
 800e626:	613b      	str	r3, [r7, #16]
 800e628:	e013      	b.n	800e652 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d110      	bne.n	800e652 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	b29a      	uxth	r2, r3
 800e634:	f107 0310 	add.w	r3, r7, #16
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f001 f926 	bl	800f894 <xTaskCreate>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d001      	beq.n	800e652 <osThreadNew+0x11a>
            hTask = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e652:	693b      	ldr	r3, [r7, #16]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3728      	adds	r7, #40	@ 0x28
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b088      	sub	sp, #32
 800e660:	af02      	add	r7, sp, #8
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <osThreadFlagsSet+0x1a>
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	da03      	bge.n	800e67e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e676:	f06f 0303 	mvn.w	r3, #3
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	e035      	b.n	800e6ea <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e67e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e682:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e684:	f3ef 8305 	mrs	r3, IPSR
 800e688:	613b      	str	r3, [r7, #16]
  return(result);
 800e68a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d01f      	beq.n	800e6d0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e690:	2300      	movs	r3, #0
 800e692:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e694:	f107 0308 	add.w	r3, r7, #8
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	2300      	movs	r3, #0
 800e69c:	2201      	movs	r2, #1
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	6978      	ldr	r0, [r7, #20]
 800e6a2:	f002 fc49 	bl	8010f38 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e6a6:	f107 030c 	add.w	r3, r7, #12
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	9200      	str	r2, [sp, #0]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	6978      	ldr	r0, [r7, #20]
 800e6b4:	f002 fc40 	bl	8010f38 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d015      	beq.n	800e6ea <osThreadFlagsSet+0x8e>
 800e6be:	4b0d      	ldr	r3, [pc, #52]	@ (800e6f4 <osThreadFlagsSet+0x98>)
 800e6c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	f3bf 8f4f 	dsb	sy
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	e00c      	b.n	800e6ea <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6978      	ldr	r0, [r7, #20]
 800e6d8:	f002 fb6c 	bl	8010db4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e6dc:	f107 030c 	add.w	r3, r7, #12
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	6978      	ldr	r0, [r7, #20]
 800e6e6:	f002 fb65 	bl	8010db4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3718      	adds	r7, #24
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	e000ed04 	.word	0xe000ed04

0800e6f8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08c      	sub	sp, #48	@ 0x30
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e704:	f3ef 8305 	mrs	r3, IPSR
 800e708:	617b      	str	r3, [r7, #20]
  return(result);
 800e70a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d003      	beq.n	800e718 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e710:	f06f 0305 	mvn.w	r3, #5
 800e714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e716:	e06b      	b.n	800e7f0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	da03      	bge.n	800e726 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e71e:	f06f 0303 	mvn.w	r3, #3
 800e722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e724:	e064      	b.n	800e7f0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	f003 0302 	and.w	r3, r3, #2
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e730:	2300      	movs	r3, #0
 800e732:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e734:	e001      	b.n	800e73a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e73a:	2300      	movs	r3, #0
 800e73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e742:	f001 fc3d 	bl	800ffc0 <xTaskGetTickCount>
 800e746:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e748:	f107 0210 	add.w	r2, r7, #16
 800e74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e750:	2000      	movs	r0, #0
 800e752:	f002 facf 	bl	8010cf4 <xTaskNotifyWait>
 800e756:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d137      	bne.n	800e7ce <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4013      	ands	r3, r2
 800e764:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e76a:	4313      	orrs	r3, r2
 800e76c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00c      	beq.n	800e792 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e77c:	4013      	ands	r3, r2
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	429a      	cmp	r2, r3
 800e782:	d032      	beq.n	800e7ea <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10f      	bne.n	800e7aa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e78a:	f06f 0302 	mvn.w	r3, #2
 800e78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e790:	e02e      	b.n	800e7f0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e796:	4013      	ands	r3, r2
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d128      	bne.n	800e7ee <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d103      	bne.n	800e7aa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e7a2:	f06f 0302 	mvn.w	r3, #2
 800e7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e7a8:	e022      	b.n	800e7f0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e7aa:	f001 fc09 	bl	800ffc0 <xTaskGetTickCount>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d902      	bls.n	800e7c4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7c2:	e00e      	b.n	800e7e2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e7c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7cc:	e009      	b.n	800e7e2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d103      	bne.n	800e7dc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e7d4:	f06f 0302 	mvn.w	r3, #2
 800e7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7da:	e002      	b.n	800e7e2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e7dc:	f06f 0301 	mvn.w	r3, #1
 800e7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1af      	bne.n	800e748 <osThreadFlagsWait+0x50>
 800e7e8:	e002      	b.n	800e7f0 <osThreadFlagsWait+0xf8>
            break;
 800e7ea:	bf00      	nop
 800e7ec:	e000      	b.n	800e7f0 <osThreadFlagsWait+0xf8>
            break;
 800e7ee:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3730      	adds	r7, #48	@ 0x30
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b084      	sub	sp, #16
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e802:	f3ef 8305 	mrs	r3, IPSR
 800e806:	60bb      	str	r3, [r7, #8]
  return(result);
 800e808:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <osDelay+0x1c>
    stat = osErrorISR;
 800e80e:	f06f 0305 	mvn.w	r3, #5
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	e007      	b.n	800e826 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e816:	2300      	movs	r3, #0
 800e818:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f001 f997 	bl	800fb54 <vTaskDelay>
    }
  }

  return (stat);
 800e826:	68fb      	ldr	r3, [r7, #12]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e830:	b580      	push	{r7, lr}
 800e832:	b08a      	sub	sp, #40	@ 0x28
 800e834:	af02      	add	r7, sp, #8
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e83c:	2300      	movs	r3, #0
 800e83e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e840:	f3ef 8305 	mrs	r3, IPSR
 800e844:	613b      	str	r3, [r7, #16]
  return(result);
 800e846:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d15f      	bne.n	800e90c <osMessageQueueNew+0xdc>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d05c      	beq.n	800e90c <osMessageQueueNew+0xdc>
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d059      	beq.n	800e90c <osMessageQueueNew+0xdc>
    mem = -1;
 800e858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e85c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d029      	beq.n	800e8b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d012      	beq.n	800e892 <osMessageQueueNew+0x62>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	2b4f      	cmp	r3, #79	@ 0x4f
 800e872:	d90e      	bls.n	800e892 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00a      	beq.n	800e892 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	695a      	ldr	r2, [r3, #20]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	68b9      	ldr	r1, [r7, #8]
 800e884:	fb01 f303 	mul.w	r3, r1, r3
 800e888:	429a      	cmp	r2, r3
 800e88a:	d302      	bcc.n	800e892 <osMessageQueueNew+0x62>
        mem = 1;
 800e88c:	2301      	movs	r3, #1
 800e88e:	61bb      	str	r3, [r7, #24]
 800e890:	e014      	b.n	800e8bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d110      	bne.n	800e8bc <osMessageQueueNew+0x8c>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10c      	bne.n	800e8bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d108      	bne.n	800e8bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	695b      	ldr	r3, [r3, #20]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d104      	bne.n	800e8bc <osMessageQueueNew+0x8c>
          mem = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61bb      	str	r3, [r7, #24]
 800e8b6:	e001      	b.n	800e8bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d10b      	bne.n	800e8da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	691a      	ldr	r2, [r3, #16]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	9100      	str	r1, [sp, #0]
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f000 fa31 	bl	800ed38 <xQueueGenericCreateStatic>
 800e8d6:	61f8      	str	r0, [r7, #28]
 800e8d8:	e008      	b.n	800e8ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d105      	bne.n	800e8ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f000 faa4 	bl	800ee32 <xQueueGenericCreate>
 800e8ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00c      	beq.n	800e90c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d003      	beq.n	800e900 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	617b      	str	r3, [r7, #20]
 800e8fe:	e001      	b.n	800e904 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e900:	2300      	movs	r3, #0
 800e902:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e904:	6979      	ldr	r1, [r7, #20]
 800e906:	69f8      	ldr	r0, [r7, #28]
 800e908:	f000 ff06 	bl	800f718 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e90c:	69fb      	ldr	r3, [r7, #28]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3720      	adds	r7, #32
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
	...

0800e918 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	603b      	str	r3, [r7, #0]
 800e924:	4613      	mov	r3, r2
 800e926:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e92c:	2300      	movs	r3, #0
 800e92e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e930:	f3ef 8305 	mrs	r3, IPSR
 800e934:	617b      	str	r3, [r7, #20]
  return(result);
 800e936:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d028      	beq.n	800e98e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d005      	beq.n	800e94e <osMessageQueuePut+0x36>
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <osMessageQueuePut+0x36>
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e94e:	f06f 0303 	mvn.w	r3, #3
 800e952:	61fb      	str	r3, [r7, #28]
 800e954:	e038      	b.n	800e9c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e95a:	f107 0210 	add.w	r2, r7, #16
 800e95e:	2300      	movs	r3, #0
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	69b8      	ldr	r0, [r7, #24]
 800e964:	f000 fbc6 	bl	800f0f4 <xQueueGenericSendFromISR>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d003      	beq.n	800e976 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e96e:	f06f 0302 	mvn.w	r3, #2
 800e972:	61fb      	str	r3, [r7, #28]
 800e974:	e028      	b.n	800e9c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d025      	beq.n	800e9c8 <osMessageQueuePut+0xb0>
 800e97c:	4b15      	ldr	r3, [pc, #84]	@ (800e9d4 <osMessageQueuePut+0xbc>)
 800e97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	e01c      	b.n	800e9c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <osMessageQueuePut+0x82>
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d103      	bne.n	800e9a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e99a:	f06f 0303 	mvn.w	r3, #3
 800e99e:	61fb      	str	r3, [r7, #28]
 800e9a0:	e012      	b.n	800e9c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	68b9      	ldr	r1, [r7, #8]
 800e9a8:	69b8      	ldr	r0, [r7, #24]
 800e9aa:	f000 faa1 	bl	800eef0 <xQueueGenericSend>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d009      	beq.n	800e9c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d003      	beq.n	800e9c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e9ba:	f06f 0301 	mvn.w	r3, #1
 800e9be:	61fb      	str	r3, [r7, #28]
 800e9c0:	e002      	b.n	800e9c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e9c2:	f06f 0302 	mvn.w	r3, #2
 800e9c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e9c8:	69fb      	ldr	r3, [r7, #28]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3720      	adds	r7, #32
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	e000ed04 	.word	0xe000ed04

0800e9d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9ee:	f3ef 8305 	mrs	r3, IPSR
 800e9f2:	617b      	str	r3, [r7, #20]
  return(result);
 800e9f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d028      	beq.n	800ea4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d005      	beq.n	800ea0c <osMessageQueueGet+0x34>
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d002      	beq.n	800ea0c <osMessageQueueGet+0x34>
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ea0c:	f06f 0303 	mvn.w	r3, #3
 800ea10:	61fb      	str	r3, [r7, #28]
 800ea12:	e037      	b.n	800ea84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ea14:	2300      	movs	r3, #0
 800ea16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ea18:	f107 0310 	add.w	r3, r7, #16
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	68b9      	ldr	r1, [r7, #8]
 800ea20:	69b8      	ldr	r0, [r7, #24]
 800ea22:	f000 fce7 	bl	800f3f4 <xQueueReceiveFromISR>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d003      	beq.n	800ea34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ea2c:	f06f 0302 	mvn.w	r3, #2
 800ea30:	61fb      	str	r3, [r7, #28]
 800ea32:	e027      	b.n	800ea84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d024      	beq.n	800ea84 <osMessageQueueGet+0xac>
 800ea3a:	4b15      	ldr	r3, [pc, #84]	@ (800ea90 <osMessageQueueGet+0xb8>)
 800ea3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	e01b      	b.n	800ea84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <osMessageQueueGet+0x80>
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d103      	bne.n	800ea60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ea58:	f06f 0303 	mvn.w	r3, #3
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	e011      	b.n	800ea84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ea60:	683a      	ldr	r2, [r7, #0]
 800ea62:	68b9      	ldr	r1, [r7, #8]
 800ea64:	69b8      	ldr	r0, [r7, #24]
 800ea66:	f000 fbe3 	bl	800f230 <xQueueReceive>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d009      	beq.n	800ea84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ea76:	f06f 0301 	mvn.w	r3, #1
 800ea7a:	61fb      	str	r3, [r7, #28]
 800ea7c:	e002      	b.n	800ea84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ea7e:	f06f 0302 	mvn.w	r3, #2
 800ea82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ea84:	69fb      	ldr	r3, [r7, #28]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3720      	adds	r7, #32
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	e000ed04 	.word	0xe000ed04

0800ea94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4a07      	ldr	r2, [pc, #28]	@ (800eac0 <vApplicationGetIdleTaskMemory+0x2c>)
 800eaa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	4a06      	ldr	r2, [pc, #24]	@ (800eac4 <vApplicationGetIdleTaskMemory+0x30>)
 800eaaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2280      	movs	r2, #128	@ 0x80
 800eab0:	601a      	str	r2, [r3, #0]
}
 800eab2:	bf00      	nop
 800eab4:	3714      	adds	r7, #20
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	2000120c 	.word	0x2000120c
 800eac4:	200012c8 	.word	0x200012c8

0800eac8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	4a07      	ldr	r2, [pc, #28]	@ (800eaf4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ead8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	4a06      	ldr	r2, [pc, #24]	@ (800eaf8 <vApplicationGetTimerTaskMemory+0x30>)
 800eade:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eae6:	601a      	str	r2, [r3, #0]
}
 800eae8:	bf00      	nop
 800eaea:	3714      	adds	r7, #20
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr
 800eaf4:	200014c8 	.word	0x200014c8
 800eaf8:	20001584 	.word	0x20001584

0800eafc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f103 0208 	add.w	r2, r3, #8
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f103 0208 	add.w	r2, r3, #8
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f103 0208 	add.w	r2, r3, #8
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb4a:	bf00      	nop
 800eb4c:	370c      	adds	r7, #12
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr

0800eb56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb56:	b480      	push	{r7}
 800eb58:	b085      	sub	sp, #20
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
 800eb5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	689a      	ldr	r2, [r3, #8]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	1c5a      	adds	r2, r3, #1
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	601a      	str	r2, [r3, #0]
}
 800eb92:	bf00      	nop
 800eb94:	3714      	adds	r7, #20
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb9e:	b480      	push	{r7}
 800eba0:	b085      	sub	sp, #20
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebb4:	d103      	bne.n	800ebbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	e00c      	b.n	800ebd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	e002      	b.n	800ebcc <vListInsert+0x2e>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d2f6      	bcs.n	800ebc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	683a      	ldr	r2, [r7, #0]
 800ebf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	1c5a      	adds	r2, r3, #1
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	601a      	str	r2, [r3, #0]
}
 800ec04:	bf00      	nop
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	6892      	ldr	r2, [r2, #8]
 800ec26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	6852      	ldr	r2, [r2, #4]
 800ec30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d103      	bne.n	800ec44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	1e5a      	subs	r2, r3, #1
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10b      	bne.n	800ec90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec7c:	f383 8811 	msr	BASEPRI, r3
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ec8a:	bf00      	nop
 800ec8c:	bf00      	nop
 800ec8e:	e7fd      	b.n	800ec8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ec90:	f002 ff1a 	bl	8011ac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec9c:	68f9      	ldr	r1, [r7, #12]
 800ec9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800eca0:	fb01 f303 	mul.w	r3, r1, r3
 800eca4:	441a      	add	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	68f9      	ldr	r1, [r7, #12]
 800ecc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ecc6:	fb01 f303 	mul.w	r3, r1, r3
 800ecca:	441a      	add	r2, r3
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	22ff      	movs	r2, #255	@ 0xff
 800ecd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	22ff      	movs	r2, #255	@ 0xff
 800ecdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d114      	bne.n	800ed10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d01a      	beq.n	800ed24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3310      	adds	r3, #16
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f001 fb94 	bl	8010420 <xTaskRemoveFromEventList>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d012      	beq.n	800ed24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ed34 <xQueueGenericReset+0xd0>)
 800ed00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	e009      	b.n	800ed24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	3310      	adds	r3, #16
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff fef1 	bl	800eafc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3324      	adds	r3, #36	@ 0x24
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff feec 	bl	800eafc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed24:	f002 ff02 	bl	8011b2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed28:	2301      	movs	r3, #1
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	e000ed04 	.word	0xe000ed04

0800ed38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b08e      	sub	sp, #56	@ 0x38
 800ed3c:	af02      	add	r7, sp, #8
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
 800ed44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10b      	bne.n	800ed64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ed4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ed5e:	bf00      	nop
 800ed60:	bf00      	nop
 800ed62:	e7fd      	b.n	800ed60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10b      	bne.n	800ed82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ed7c:	bf00      	nop
 800ed7e:	bf00      	nop
 800ed80:	e7fd      	b.n	800ed7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <xQueueGenericCreateStatic+0x56>
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <xQueueGenericCreateStatic+0x5a>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e000      	b.n	800ed94 <xQueueGenericCreateStatic+0x5c>
 800ed92:	2300      	movs	r3, #0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10b      	bne.n	800edb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	623b      	str	r3, [r7, #32]
}
 800edaa:	bf00      	nop
 800edac:	bf00      	nop
 800edae:	e7fd      	b.n	800edac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d102      	bne.n	800edbc <xQueueGenericCreateStatic+0x84>
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d101      	bne.n	800edc0 <xQueueGenericCreateStatic+0x88>
 800edbc:	2301      	movs	r3, #1
 800edbe:	e000      	b.n	800edc2 <xQueueGenericCreateStatic+0x8a>
 800edc0:	2300      	movs	r3, #0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10b      	bne.n	800edde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800edc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	61fb      	str	r3, [r7, #28]
}
 800edd8:	bf00      	nop
 800edda:	bf00      	nop
 800eddc:	e7fd      	b.n	800edda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800edde:	2350      	movs	r3, #80	@ 0x50
 800ede0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	2b50      	cmp	r3, #80	@ 0x50
 800ede6:	d00b      	beq.n	800ee00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ede8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edec:	f383 8811 	msr	BASEPRI, r3
 800edf0:	f3bf 8f6f 	isb	sy
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	61bb      	str	r3, [r7, #24]
}
 800edfa:	bf00      	nop
 800edfc:	bf00      	nop
 800edfe:	e7fd      	b.n	800edfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ee06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00d      	beq.n	800ee28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ee0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ee18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	68b9      	ldr	r1, [r7, #8]
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f000 f840 	bl	800eea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3730      	adds	r7, #48	@ 0x30
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b08a      	sub	sp, #40	@ 0x28
 800ee36:	af02      	add	r7, sp, #8
 800ee38:	60f8      	str	r0, [r7, #12]
 800ee3a:	60b9      	str	r1, [r7, #8]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10b      	bne.n	800ee5e <xQueueGenericCreate+0x2c>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	613b      	str	r3, [r7, #16]
}
 800ee58:	bf00      	nop
 800ee5a:	bf00      	nop
 800ee5c:	e7fd      	b.n	800ee5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	fb02 f303 	mul.w	r3, r2, r3
 800ee66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	3350      	adds	r3, #80	@ 0x50
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f002 ff4d 	bl	8011d0c <pvPortMalloc>
 800ee72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d011      	beq.n	800ee9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	3350      	adds	r3, #80	@ 0x50
 800ee82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee8c:	79fa      	ldrb	r2, [r7, #7]
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	4613      	mov	r3, r2
 800ee94:	697a      	ldr	r2, [r7, #20]
 800ee96:	68b9      	ldr	r1, [r7, #8]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f000 f805 	bl	800eea8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee9e:	69bb      	ldr	r3, [r7, #24]
	}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3720      	adds	r7, #32
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
 800eeb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d103      	bne.n	800eec4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	69ba      	ldr	r2, [r7, #24]
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	e002      	b.n	800eeca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eed6:	2101      	movs	r1, #1
 800eed8:	69b8      	ldr	r0, [r7, #24]
 800eeda:	f7ff fec3 	bl	800ec64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	78fa      	ldrb	r2, [r7, #3]
 800eee2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eee6:	bf00      	nop
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
	...

0800eef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b08e      	sub	sp, #56	@ 0x38
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
 800eefc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eefe:	2300      	movs	r3, #0
 800ef00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ef06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d10b      	bne.n	800ef24 <xQueueGenericSend+0x34>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ef1e:	bf00      	nop
 800ef20:	bf00      	nop
 800ef22:	e7fd      	b.n	800ef20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <xQueueGenericSend+0x42>
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d101      	bne.n	800ef36 <xQueueGenericSend+0x46>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <xQueueGenericSend+0x48>
 800ef36:	2300      	movs	r3, #0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10b      	bne.n	800ef54 <xQueueGenericSend+0x64>
	__asm volatile
 800ef3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef40:	f383 8811 	msr	BASEPRI, r3
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ef4e:	bf00      	nop
 800ef50:	bf00      	nop
 800ef52:	e7fd      	b.n	800ef50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d103      	bne.n	800ef62 <xQueueGenericSend+0x72>
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d101      	bne.n	800ef66 <xQueueGenericSend+0x76>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e000      	b.n	800ef68 <xQueueGenericSend+0x78>
 800ef66:	2300      	movs	r3, #0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10b      	bne.n	800ef84 <xQueueGenericSend+0x94>
	__asm volatile
 800ef6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	623b      	str	r3, [r7, #32]
}
 800ef7e:	bf00      	nop
 800ef80:	bf00      	nop
 800ef82:	e7fd      	b.n	800ef80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef84:	f001 fce8 	bl	8010958 <xTaskGetSchedulerState>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d102      	bne.n	800ef94 <xQueueGenericSend+0xa4>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d101      	bne.n	800ef98 <xQueueGenericSend+0xa8>
 800ef94:	2301      	movs	r3, #1
 800ef96:	e000      	b.n	800ef9a <xQueueGenericSend+0xaa>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d10b      	bne.n	800efb6 <xQueueGenericSend+0xc6>
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	61fb      	str	r3, [r7, #28]
}
 800efb0:	bf00      	nop
 800efb2:	bf00      	nop
 800efb4:	e7fd      	b.n	800efb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800efb6:	f002 fd87 	bl	8011ac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800efba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d302      	bcc.n	800efcc <xQueueGenericSend+0xdc>
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d129      	bne.n	800f020 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	68b9      	ldr	r1, [r7, #8]
 800efd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800efd2:	f000 fa91 	bl	800f4f8 <prvCopyDataToQueue>
 800efd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d010      	beq.n	800f002 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe2:	3324      	adds	r3, #36	@ 0x24
 800efe4:	4618      	mov	r0, r3
 800efe6:	f001 fa1b 	bl	8010420 <xTaskRemoveFromEventList>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d013      	beq.n	800f018 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eff0:	4b3f      	ldr	r3, [pc, #252]	@ (800f0f0 <xQueueGenericSend+0x200>)
 800eff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	f3bf 8f4f 	dsb	sy
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	e00a      	b.n	800f018 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f004:	2b00      	cmp	r3, #0
 800f006:	d007      	beq.n	800f018 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f008:	4b39      	ldr	r3, [pc, #228]	@ (800f0f0 <xQueueGenericSend+0x200>)
 800f00a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f018:	f002 fd88 	bl	8011b2c <vPortExitCritical>
				return pdPASS;
 800f01c:	2301      	movs	r3, #1
 800f01e:	e063      	b.n	800f0e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d103      	bne.n	800f02e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f026:	f002 fd81 	bl	8011b2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f02a:	2300      	movs	r3, #0
 800f02c:	e05c      	b.n	800f0e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f034:	f107 0314 	add.w	r3, r7, #20
 800f038:	4618      	mov	r0, r3
 800f03a:	f001 fa55 	bl	80104e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f03e:	2301      	movs	r3, #1
 800f040:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f042:	f002 fd73 	bl	8011b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f046:	f000 ff0f 	bl	800fe68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f04a:	f002 fd3d 	bl	8011ac8 <vPortEnterCritical>
 800f04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f054:	b25b      	sxtb	r3, r3
 800f056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f05a:	d103      	bne.n	800f064 <xQueueGenericSend+0x174>
 800f05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f06a:	b25b      	sxtb	r3, r3
 800f06c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f070:	d103      	bne.n	800f07a <xQueueGenericSend+0x18a>
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	2200      	movs	r2, #0
 800f076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f07a:	f002 fd57 	bl	8011b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f07e:	1d3a      	adds	r2, r7, #4
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	4611      	mov	r1, r2
 800f086:	4618      	mov	r0, r3
 800f088:	f001 fa44 	bl	8010514 <xTaskCheckForTimeOut>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d124      	bne.n	800f0dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f092:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f094:	f000 fb28 	bl	800f6e8 <prvIsQueueFull>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d018      	beq.n	800f0d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a0:	3310      	adds	r3, #16
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 f968 	bl	801037c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f0ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f0ae:	f000 fab3 	bl	800f618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f0b2:	f000 fee7 	bl	800fe84 <xTaskResumeAll>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f47f af7c 	bne.w	800efb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f0be:	4b0c      	ldr	r3, [pc, #48]	@ (800f0f0 <xQueueGenericSend+0x200>)
 800f0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	f3bf 8f6f 	isb	sy
 800f0ce:	e772      	b.n	800efb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f0d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f0d2:	f000 faa1 	bl	800f618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0d6:	f000 fed5 	bl	800fe84 <xTaskResumeAll>
 800f0da:	e76c      	b.n	800efb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f0de:	f000 fa9b 	bl	800f618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0e2:	f000 fecf 	bl	800fe84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3738      	adds	r7, #56	@ 0x38
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	e000ed04 	.word	0xe000ed04

0800f0f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b090      	sub	sp, #64	@ 0x40
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d10b      	bne.n	800f124 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f110:	f383 8811 	msr	BASEPRI, r3
 800f114:	f3bf 8f6f 	isb	sy
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f11e:	bf00      	nop
 800f120:	bf00      	nop
 800f122:	e7fd      	b.n	800f120 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d103      	bne.n	800f132 <xQueueGenericSendFromISR+0x3e>
 800f12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <xQueueGenericSendFromISR+0x42>
 800f132:	2301      	movs	r3, #1
 800f134:	e000      	b.n	800f138 <xQueueGenericSendFromISR+0x44>
 800f136:	2300      	movs	r3, #0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10b      	bne.n	800f154 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f14e:	bf00      	nop
 800f150:	bf00      	nop
 800f152:	e7fd      	b.n	800f150 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b02      	cmp	r3, #2
 800f158:	d103      	bne.n	800f162 <xQueueGenericSendFromISR+0x6e>
 800f15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f15c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d101      	bne.n	800f166 <xQueueGenericSendFromISR+0x72>
 800f162:	2301      	movs	r3, #1
 800f164:	e000      	b.n	800f168 <xQueueGenericSendFromISR+0x74>
 800f166:	2300      	movs	r3, #0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d10b      	bne.n	800f184 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	623b      	str	r3, [r7, #32]
}
 800f17e:	bf00      	nop
 800f180:	bf00      	nop
 800f182:	e7fd      	b.n	800f180 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f184:	f002 fd80 	bl	8011c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f188:	f3ef 8211 	mrs	r2, BASEPRI
 800f18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	61fa      	str	r2, [r7, #28]
 800f19e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d302      	bcc.n	800f1b6 <xQueueGenericSendFromISR+0xc2>
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d12f      	bne.n	800f216 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	68b9      	ldr	r1, [r7, #8]
 800f1ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f1cc:	f000 f994 	bl	800f4f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f1d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1d8:	d112      	bne.n	800f200 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d016      	beq.n	800f210 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e4:	3324      	adds	r3, #36	@ 0x24
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f001 f91a 	bl	8010420 <xTaskRemoveFromEventList>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00e      	beq.n	800f210 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00b      	beq.n	800f210 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	e007      	b.n	800f210 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f200:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f204:	3301      	adds	r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	b25a      	sxtb	r2, r3
 800f20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f210:	2301      	movs	r3, #1
 800f212:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f214:	e001      	b.n	800f21a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f216:	2300      	movs	r3, #0
 800f218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f21c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f224:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3740      	adds	r7, #64	@ 0x40
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08c      	sub	sp, #48	@ 0x30
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f23c:	2300      	movs	r3, #0
 800f23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10b      	bne.n	800f262 <xQueueReceive+0x32>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	623b      	str	r3, [r7, #32]
}
 800f25c:	bf00      	nop
 800f25e:	bf00      	nop
 800f260:	e7fd      	b.n	800f25e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d103      	bne.n	800f270 <xQueueReceive+0x40>
 800f268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d101      	bne.n	800f274 <xQueueReceive+0x44>
 800f270:	2301      	movs	r3, #1
 800f272:	e000      	b.n	800f276 <xQueueReceive+0x46>
 800f274:	2300      	movs	r3, #0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10b      	bne.n	800f292 <xQueueReceive+0x62>
	__asm volatile
 800f27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27e:	f383 8811 	msr	BASEPRI, r3
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	f3bf 8f4f 	dsb	sy
 800f28a:	61fb      	str	r3, [r7, #28]
}
 800f28c:	bf00      	nop
 800f28e:	bf00      	nop
 800f290:	e7fd      	b.n	800f28e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f292:	f001 fb61 	bl	8010958 <xTaskGetSchedulerState>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d102      	bne.n	800f2a2 <xQueueReceive+0x72>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <xQueueReceive+0x76>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e000      	b.n	800f2a8 <xQueueReceive+0x78>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d10b      	bne.n	800f2c4 <xQueueReceive+0x94>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	61bb      	str	r3, [r7, #24]
}
 800f2be:	bf00      	nop
 800f2c0:	bf00      	nop
 800f2c2:	e7fd      	b.n	800f2c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2c4:	f002 fc00 	bl	8011ac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d01f      	beq.n	800f314 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2d8:	f000 f978 	bl	800f5cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2de:	1e5a      	subs	r2, r3, #1
 800f2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00f      	beq.n	800f30c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ee:	3310      	adds	r3, #16
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f001 f895 	bl	8010420 <xTaskRemoveFromEventList>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d007      	beq.n	800f30c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2fc:	4b3c      	ldr	r3, [pc, #240]	@ (800f3f0 <xQueueReceive+0x1c0>)
 800f2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f30c:	f002 fc0e 	bl	8011b2c <vPortExitCritical>
				return pdPASS;
 800f310:	2301      	movs	r3, #1
 800f312:	e069      	b.n	800f3e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d103      	bne.n	800f322 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f31a:	f002 fc07 	bl	8011b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f31e:	2300      	movs	r3, #0
 800f320:	e062      	b.n	800f3e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f324:	2b00      	cmp	r3, #0
 800f326:	d106      	bne.n	800f336 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f328:	f107 0310 	add.w	r3, r7, #16
 800f32c:	4618      	mov	r0, r3
 800f32e:	f001 f8db 	bl	80104e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f332:	2301      	movs	r3, #1
 800f334:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f336:	f002 fbf9 	bl	8011b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f33a:	f000 fd95 	bl	800fe68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f33e:	f002 fbc3 	bl	8011ac8 <vPortEnterCritical>
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f348:	b25b      	sxtb	r3, r3
 800f34a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f34e:	d103      	bne.n	800f358 <xQueueReceive+0x128>
 800f350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f352:	2200      	movs	r2, #0
 800f354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f35e:	b25b      	sxtb	r3, r3
 800f360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f364:	d103      	bne.n	800f36e <xQueueReceive+0x13e>
 800f366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f36e:	f002 fbdd 	bl	8011b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f372:	1d3a      	adds	r2, r7, #4
 800f374:	f107 0310 	add.w	r3, r7, #16
 800f378:	4611      	mov	r1, r2
 800f37a:	4618      	mov	r0, r3
 800f37c:	f001 f8ca 	bl	8010514 <xTaskCheckForTimeOut>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d123      	bne.n	800f3ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f388:	f000 f998 	bl	800f6bc <prvIsQueueEmpty>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d017      	beq.n	800f3c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f394:	3324      	adds	r3, #36	@ 0x24
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	4611      	mov	r1, r2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 ffee 	bl	801037c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f3a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3a2:	f000 f939 	bl	800f618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f3a6:	f000 fd6d 	bl	800fe84 <xTaskResumeAll>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d189      	bne.n	800f2c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f3f0 <xQueueReceive+0x1c0>)
 800f3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	e780      	b.n	800f2c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f3c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3c4:	f000 f928 	bl	800f618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3c8:	f000 fd5c 	bl	800fe84 <xTaskResumeAll>
 800f3cc:	e77a      	b.n	800f2c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f3ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3d0:	f000 f922 	bl	800f618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3d4:	f000 fd56 	bl	800fe84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3da:	f000 f96f 	bl	800f6bc <prvIsQueueEmpty>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f43f af6f 	beq.w	800f2c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3730      	adds	r7, #48	@ 0x30
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b08e      	sub	sp, #56	@ 0x38
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10b      	bne.n	800f422 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	623b      	str	r3, [r7, #32]
}
 800f41c:	bf00      	nop
 800f41e:	bf00      	nop
 800f420:	e7fd      	b.n	800f41e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d103      	bne.n	800f430 <xQueueReceiveFromISR+0x3c>
 800f428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <xQueueReceiveFromISR+0x40>
 800f430:	2301      	movs	r3, #1
 800f432:	e000      	b.n	800f436 <xQueueReceiveFromISR+0x42>
 800f434:	2300      	movs	r3, #0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d10b      	bne.n	800f452 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	61fb      	str	r3, [r7, #28]
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	e7fd      	b.n	800f44e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f452:	f002 fc19 	bl	8011c88 <vPortValidateInterruptPriority>
	__asm volatile
 800f456:	f3ef 8211 	mrs	r2, BASEPRI
 800f45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45e:	f383 8811 	msr	BASEPRI, r3
 800f462:	f3bf 8f6f 	isb	sy
 800f466:	f3bf 8f4f 	dsb	sy
 800f46a:	61ba      	str	r2, [r7, #24]
 800f46c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f46e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f470:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f476:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d02f      	beq.n	800f4de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f488:	68b9      	ldr	r1, [r7, #8]
 800f48a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f48c:	f000 f89e 	bl	800f5cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f492:	1e5a      	subs	r2, r3, #1
 800f494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f496:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f498:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f49c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f4a0:	d112      	bne.n	800f4c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d016      	beq.n	800f4d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ac:	3310      	adds	r3, #16
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 ffb6 	bl	8010420 <xTaskRemoveFromEventList>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00e      	beq.n	800f4d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00b      	beq.n	800f4d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	e007      	b.n	800f4d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	b25a      	sxtb	r2, r3
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4dc:	e001      	b.n	800f4e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	f383 8811 	msr	BASEPRI, r3
}
 800f4ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3738      	adds	r7, #56	@ 0x38
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f504:	2300      	movs	r3, #0
 800f506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f50c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10d      	bne.n	800f532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d14d      	bne.n	800f5ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	4618      	mov	r0, r3
 800f524:	f001 fa36 	bl	8010994 <xTaskPriorityDisinherit>
 800f528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	609a      	str	r2, [r3, #8]
 800f530:	e043      	b.n	800f5ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d119      	bne.n	800f56c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6858      	ldr	r0, [r3, #4]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f540:	461a      	mov	r2, r3
 800f542:	68b9      	ldr	r1, [r7, #8]
 800f544:	f004 f81b 	bl	801357e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f550:	441a      	add	r2, r3
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d32b      	bcc.n	800f5ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	605a      	str	r2, [r3, #4]
 800f56a:	e026      	b.n	800f5ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	68d8      	ldr	r0, [r3, #12]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f574:	461a      	mov	r2, r3
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	f004 f801 	bl	801357e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	68da      	ldr	r2, [r3, #12]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f584:	425b      	negs	r3, r3
 800f586:	441a      	add	r2, r3
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	68da      	ldr	r2, [r3, #12]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	429a      	cmp	r2, r3
 800f596:	d207      	bcs.n	800f5a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	689a      	ldr	r2, [r3, #8]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5a0:	425b      	negs	r3, r3
 800f5a2:	441a      	add	r2, r3
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b02      	cmp	r3, #2
 800f5ac:	d105      	bne.n	800f5ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d002      	beq.n	800f5ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f5c2:	697b      	ldr	r3, [r7, #20]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d018      	beq.n	800f610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68da      	ldr	r2, [r3, #12]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5e6:	441a      	add	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68da      	ldr	r2, [r3, #12]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d303      	bcc.n	800f600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	68d9      	ldr	r1, [r3, #12]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f608:	461a      	mov	r2, r3
 800f60a:	6838      	ldr	r0, [r7, #0]
 800f60c:	f003 ffb7 	bl	801357e <memcpy>
	}
}
 800f610:	bf00      	nop
 800f612:	3708      	adds	r7, #8
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f620:	f002 fa52 	bl	8011ac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f62c:	e011      	b.n	800f652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f632:	2b00      	cmp	r3, #0
 800f634:	d012      	beq.n	800f65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3324      	adds	r3, #36	@ 0x24
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fef0 	bl	8010420 <xTaskRemoveFromEventList>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f646:	f000 ffc9 	bl	80105dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f656:	2b00      	cmp	r3, #0
 800f658:	dce9      	bgt.n	800f62e <prvUnlockQueue+0x16>
 800f65a:	e000      	b.n	800f65e <prvUnlockQueue+0x46>
					break;
 800f65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	22ff      	movs	r2, #255	@ 0xff
 800f662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f666:	f002 fa61 	bl	8011b2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f66a:	f002 fa2d 	bl	8011ac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f676:	e011      	b.n	800f69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d012      	beq.n	800f6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	3310      	adds	r3, #16
 800f684:	4618      	mov	r0, r3
 800f686:	f000 fecb 	bl	8010420 <xTaskRemoveFromEventList>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d001      	beq.n	800f694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f690:	f000 ffa4 	bl	80105dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f694:	7bbb      	ldrb	r3, [r7, #14]
 800f696:	3b01      	subs	r3, #1
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dce9      	bgt.n	800f678 <prvUnlockQueue+0x60>
 800f6a4:	e000      	b.n	800f6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	22ff      	movs	r2, #255	@ 0xff
 800f6ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f6b0:	f002 fa3c 	bl	8011b2c <vPortExitCritical>
}
 800f6b4:	bf00      	nop
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6c4:	f002 fa00 	bl	8011ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d102      	bne.n	800f6d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	e001      	b.n	800f6da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6da:	f002 fa27 	bl	8011b2c <vPortExitCritical>

	return xReturn;
 800f6de:	68fb      	ldr	r3, [r7, #12]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6f0:	f002 f9ea 	bl	8011ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d102      	bne.n	800f706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f700:	2301      	movs	r3, #1
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	e001      	b.n	800f70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f706:	2300      	movs	r3, #0
 800f708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f70a:	f002 fa0f 	bl	8011b2c <vPortExitCritical>

	return xReturn;
 800f70e:	68fb      	ldr	r3, [r7, #12]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f722:	2300      	movs	r3, #0
 800f724:	60fb      	str	r3, [r7, #12]
 800f726:	e014      	b.n	800f752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f728:	4a0f      	ldr	r2, [pc, #60]	@ (800f768 <vQueueAddToRegistry+0x50>)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d10b      	bne.n	800f74c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f734:	490c      	ldr	r1, [pc, #48]	@ (800f768 <vQueueAddToRegistry+0x50>)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f73e:	4a0a      	ldr	r2, [pc, #40]	@ (800f768 <vQueueAddToRegistry+0x50>)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	4413      	add	r3, r2
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f74a:	e006      	b.n	800f75a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	3301      	adds	r3, #1
 800f750:	60fb      	str	r3, [r7, #12]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2b07      	cmp	r3, #7
 800f756:	d9e7      	bls.n	800f728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	3714      	adds	r7, #20
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	20001984 	.word	0x20001984

0800f76c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f77c:	f002 f9a4 	bl	8011ac8 <vPortEnterCritical>
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f786:	b25b      	sxtb	r3, r3
 800f788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f78c:	d103      	bne.n	800f796 <vQueueWaitForMessageRestricted+0x2a>
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f79c:	b25b      	sxtb	r3, r3
 800f79e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7a2:	d103      	bne.n	800f7ac <vQueueWaitForMessageRestricted+0x40>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7ac:	f002 f9be 	bl	8011b2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d106      	bne.n	800f7c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	3324      	adds	r3, #36	@ 0x24
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f000 fe01 	bl	80103c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f7c6:	6978      	ldr	r0, [r7, #20]
 800f7c8:	f7ff ff26 	bl	800f618 <prvUnlockQueue>
	}
 800f7cc:	bf00      	nop
 800f7ce:	3718      	adds	r7, #24
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08e      	sub	sp, #56	@ 0x38
 800f7d8:	af04      	add	r7, sp, #16
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10b      	bne.n	800f800 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ec:	f383 8811 	msr	BASEPRI, r3
 800f7f0:	f3bf 8f6f 	isb	sy
 800f7f4:	f3bf 8f4f 	dsb	sy
 800f7f8:	623b      	str	r3, [r7, #32]
}
 800f7fa:	bf00      	nop
 800f7fc:	bf00      	nop
 800f7fe:	e7fd      	b.n	800f7fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10b      	bne.n	800f81e <xTaskCreateStatic+0x4a>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	61fb      	str	r3, [r7, #28]
}
 800f818:	bf00      	nop
 800f81a:	bf00      	nop
 800f81c:	e7fd      	b.n	800f81a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f81e:	23bc      	movs	r3, #188	@ 0xbc
 800f820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	2bbc      	cmp	r3, #188	@ 0xbc
 800f826:	d00b      	beq.n	800f840 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f82c:	f383 8811 	msr	BASEPRI, r3
 800f830:	f3bf 8f6f 	isb	sy
 800f834:	f3bf 8f4f 	dsb	sy
 800f838:	61bb      	str	r3, [r7, #24]
}
 800f83a:	bf00      	nop
 800f83c:	bf00      	nop
 800f83e:	e7fd      	b.n	800f83c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f840:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f844:	2b00      	cmp	r3, #0
 800f846:	d01e      	beq.n	800f886 <xTaskCreateStatic+0xb2>
 800f848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d01b      	beq.n	800f886 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f850:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f856:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85a:	2202      	movs	r2, #2
 800f85c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f860:	2300      	movs	r3, #0
 800f862:	9303      	str	r3, [sp, #12]
 800f864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	f107 0314 	add.w	r3, r7, #20
 800f86c:	9301      	str	r3, [sp, #4]
 800f86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	68b9      	ldr	r1, [r7, #8]
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f000 f851 	bl	800f920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f87e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f880:	f000 f8f8 	bl	800fa74 <prvAddNewTaskToReadyList>
 800f884:	e001      	b.n	800f88a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f886:	2300      	movs	r3, #0
 800f888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f88a:	697b      	ldr	r3, [r7, #20]
	}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3728      	adds	r7, #40	@ 0x28
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f894:	b580      	push	{r7, lr}
 800f896:	b08c      	sub	sp, #48	@ 0x30
 800f898:	af04      	add	r7, sp, #16
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	603b      	str	r3, [r7, #0]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f8a4:	88fb      	ldrh	r3, [r7, #6]
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f002 fa2f 	bl	8011d0c <pvPortMalloc>
 800f8ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00e      	beq.n	800f8d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f8b6:	20bc      	movs	r0, #188	@ 0xbc
 800f8b8:	f002 fa28 	bl	8011d0c <pvPortMalloc>
 800f8bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f8ca:	e005      	b.n	800f8d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f8cc:	6978      	ldr	r0, [r7, #20]
 800f8ce:	f002 faeb 	bl	8011ea8 <vPortFree>
 800f8d2:	e001      	b.n	800f8d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d017      	beq.n	800f90e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f8e6:	88fa      	ldrh	r2, [r7, #6]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	9303      	str	r3, [sp, #12]
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	9302      	str	r3, [sp, #8]
 800f8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f2:	9301      	str	r3, [sp, #4]
 800f8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	68b9      	ldr	r1, [r7, #8]
 800f8fc:	68f8      	ldr	r0, [r7, #12]
 800f8fe:	f000 f80f 	bl	800f920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f902:	69f8      	ldr	r0, [r7, #28]
 800f904:	f000 f8b6 	bl	800fa74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f908:	2301      	movs	r3, #1
 800f90a:	61bb      	str	r3, [r7, #24]
 800f90c:	e002      	b.n	800f914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f90e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f914:	69bb      	ldr	r3, [r7, #24]
	}
 800f916:	4618      	mov	r0, r3
 800f918:	3720      	adds	r7, #32
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
	...

0800f920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b088      	sub	sp, #32
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]
 800f92c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f930:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	461a      	mov	r2, r3
 800f938:	21a5      	movs	r1, #165	@ 0xa5
 800f93a:	f003 fd32 	bl	80133a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f948:	3b01      	subs	r3, #1
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	4413      	add	r3, r2
 800f94e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	f023 0307 	bic.w	r3, r3, #7
 800f956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	f003 0307 	and.w	r3, r3, #7
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00b      	beq.n	800f97a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	617b      	str	r3, [r7, #20]
}
 800f974:	bf00      	nop
 800f976:	bf00      	nop
 800f978:	e7fd      	b.n	800f976 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d01f      	beq.n	800f9c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f980:	2300      	movs	r3, #0
 800f982:	61fb      	str	r3, [r7, #28]
 800f984:	e012      	b.n	800f9ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	4413      	add	r3, r2
 800f98c:	7819      	ldrb	r1, [r3, #0]
 800f98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	4413      	add	r3, r2
 800f994:	3334      	adds	r3, #52	@ 0x34
 800f996:	460a      	mov	r2, r1
 800f998:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f99a:	68ba      	ldr	r2, [r7, #8]
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	4413      	add	r3, r2
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d006      	beq.n	800f9b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	61fb      	str	r3, [r7, #28]
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	2b1f      	cmp	r3, #31
 800f9b0:	d9e9      	bls.n	800f986 <prvInitialiseNewTask+0x66>
 800f9b2:	e000      	b.n	800f9b6 <prvInitialiseNewTask+0x96>
			{
				break;
 800f9b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800f9be:	e003      	b.n	800f9c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ca:	2b37      	cmp	r3, #55	@ 0x37
 800f9cc:	d901      	bls.n	800f9d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f9ce:	2337      	movs	r3, #55	@ 0x37
 800f9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f9d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f9dc:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800f9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff f8a7 	bl	800eb3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f0:	3318      	adds	r3, #24
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7ff f8a2 	bl	800eb3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa10:	2200      	movs	r2, #0
 800fa12:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa16:	2200      	movs	r2, #0
 800fa18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa26:	3368      	adds	r3, #104	@ 0x68
 800fa28:	224c      	movs	r2, #76	@ 0x4c
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f003 fcb8 	bl	80133a2 <memset>
 800fa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa34:	4a0c      	ldr	r2, [pc, #48]	@ (800fa68 <prvInitialiseNewTask+0x148>)
 800fa36:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3a:	4a0c      	ldr	r2, [pc, #48]	@ (800fa6c <prvInitialiseNewTask+0x14c>)
 800fa3c:	671a      	str	r2, [r3, #112]	@ 0x70
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa40:	4a0b      	ldr	r2, [pc, #44]	@ (800fa70 <prvInitialiseNewTask+0x150>)
 800fa42:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	68f9      	ldr	r1, [r7, #12]
 800fa48:	69b8      	ldr	r0, [r7, #24]
 800fa4a:	f001 ff09 	bl	8011860 <pxPortInitialiseStack>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa60:	bf00      	nop
 800fa62:	3720      	adds	r7, #32
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	200063f0 	.word	0x200063f0
 800fa6c:	20006458 	.word	0x20006458
 800fa70:	200064c0 	.word	0x200064c0

0800fa74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fa7c:	f002 f824 	bl	8011ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fa80:	4b2d      	ldr	r3, [pc, #180]	@ (800fb38 <prvAddNewTaskToReadyList+0xc4>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3301      	adds	r3, #1
 800fa86:	4a2c      	ldr	r2, [pc, #176]	@ (800fb38 <prvAddNewTaskToReadyList+0xc4>)
 800fa88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa8a:	4b2c      	ldr	r3, [pc, #176]	@ (800fb3c <prvAddNewTaskToReadyList+0xc8>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d109      	bne.n	800faa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fa92:	4a2a      	ldr	r2, [pc, #168]	@ (800fb3c <prvAddNewTaskToReadyList+0xc8>)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa98:	4b27      	ldr	r3, [pc, #156]	@ (800fb38 <prvAddNewTaskToReadyList+0xc4>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d110      	bne.n	800fac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800faa0:	f000 fdc2 	bl	8010628 <prvInitialiseTaskLists>
 800faa4:	e00d      	b.n	800fac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800faa6:	4b26      	ldr	r3, [pc, #152]	@ (800fb40 <prvAddNewTaskToReadyList+0xcc>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d109      	bne.n	800fac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800faae:	4b23      	ldr	r3, [pc, #140]	@ (800fb3c <prvAddNewTaskToReadyList+0xc8>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab8:	429a      	cmp	r2, r3
 800faba:	d802      	bhi.n	800fac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fabc:	4a1f      	ldr	r2, [pc, #124]	@ (800fb3c <prvAddNewTaskToReadyList+0xc8>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fac2:	4b20      	ldr	r3, [pc, #128]	@ (800fb44 <prvAddNewTaskToReadyList+0xd0>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3301      	adds	r3, #1
 800fac8:	4a1e      	ldr	r2, [pc, #120]	@ (800fb44 <prvAddNewTaskToReadyList+0xd0>)
 800faca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800facc:	4b1d      	ldr	r3, [pc, #116]	@ (800fb44 <prvAddNewTaskToReadyList+0xd0>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fad8:	4b1b      	ldr	r3, [pc, #108]	@ (800fb48 <prvAddNewTaskToReadyList+0xd4>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d903      	bls.n	800fae8 <prvAddNewTaskToReadyList+0x74>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fae4:	4a18      	ldr	r2, [pc, #96]	@ (800fb48 <prvAddNewTaskToReadyList+0xd4>)
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faec:	4613      	mov	r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	4413      	add	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4a15      	ldr	r2, [pc, #84]	@ (800fb4c <prvAddNewTaskToReadyList+0xd8>)
 800faf6:	441a      	add	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3304      	adds	r3, #4
 800fafc:	4619      	mov	r1, r3
 800fafe:	4610      	mov	r0, r2
 800fb00:	f7ff f829 	bl	800eb56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb04:	f002 f812 	bl	8011b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb08:	4b0d      	ldr	r3, [pc, #52]	@ (800fb40 <prvAddNewTaskToReadyList+0xcc>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00e      	beq.n	800fb2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb10:	4b0a      	ldr	r3, [pc, #40]	@ (800fb3c <prvAddNewTaskToReadyList+0xc8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d207      	bcs.n	800fb2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fb1e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb50 <prvAddNewTaskToReadyList+0xdc>)
 800fb20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb2e:	bf00      	nop
 800fb30:	3708      	adds	r7, #8
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	20001e98 	.word	0x20001e98
 800fb3c:	200019c4 	.word	0x200019c4
 800fb40:	20001ea4 	.word	0x20001ea4
 800fb44:	20001eb4 	.word	0x20001eb4
 800fb48:	20001ea0 	.word	0x20001ea0
 800fb4c:	200019c8 	.word	0x200019c8
 800fb50:	e000ed04 	.word	0xe000ed04

0800fb54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d018      	beq.n	800fb98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fb66:	4b14      	ldr	r3, [pc, #80]	@ (800fbb8 <vTaskDelay+0x64>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00b      	beq.n	800fb86 <vTaskDelay+0x32>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	60bb      	str	r3, [r7, #8]
}
 800fb80:	bf00      	nop
 800fb82:	bf00      	nop
 800fb84:	e7fd      	b.n	800fb82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fb86:	f000 f96f 	bl	800fe68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f001 fab9 	bl	8011104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fb92:	f000 f977 	bl	800fe84 <xTaskResumeAll>
 800fb96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d107      	bne.n	800fbae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fb9e:	4b07      	ldr	r3, [pc, #28]	@ (800fbbc <vTaskDelay+0x68>)
 800fba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fba4:	601a      	str	r2, [r3, #0]
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fbae:	bf00      	nop
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	20001ec0 	.word	0x20001ec0
 800fbbc:	e000ed04 	.word	0xe000ed04

0800fbc0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b088      	sub	sp, #32
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10b      	bne.n	800fbea <eTaskGetState+0x2a>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	60bb      	str	r3, [r7, #8]
}
 800fbe4:	bf00      	nop
 800fbe6:	bf00      	nop
 800fbe8:	e7fd      	b.n	800fbe6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800fbea:	4b24      	ldr	r3, [pc, #144]	@ (800fc7c <eTaskGetState+0xbc>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	69ba      	ldr	r2, [r7, #24]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d102      	bne.n	800fbfa <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	77fb      	strb	r3, [r7, #31]
 800fbf8:	e03a      	b.n	800fc70 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800fbfa:	f001 ff65 	bl	8011ac8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	695b      	ldr	r3, [r3, #20]
 800fc02:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800fc04:	4b1e      	ldr	r3, [pc, #120]	@ (800fc80 <eTaskGetState+0xc0>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800fc0a:	4b1e      	ldr	r3, [pc, #120]	@ (800fc84 <eTaskGetState+0xc4>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800fc10:	f001 ff8c 	bl	8011b2c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d003      	beq.n	800fc24 <eTaskGetState+0x64>
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d102      	bne.n	800fc2a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800fc24:	2302      	movs	r3, #2
 800fc26:	77fb      	strb	r3, [r7, #31]
 800fc28:	e022      	b.n	800fc70 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	4a16      	ldr	r2, [pc, #88]	@ (800fc88 <eTaskGetState+0xc8>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d112      	bne.n	800fc58 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10b      	bne.n	800fc52 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d102      	bne.n	800fc4c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800fc46:	2302      	movs	r3, #2
 800fc48:	77fb      	strb	r3, [r7, #31]
 800fc4a:	e011      	b.n	800fc70 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800fc4c:	2303      	movs	r3, #3
 800fc4e:	77fb      	strb	r3, [r7, #31]
 800fc50:	e00e      	b.n	800fc70 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800fc52:	2302      	movs	r3, #2
 800fc54:	77fb      	strb	r3, [r7, #31]
 800fc56:	e00b      	b.n	800fc70 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	4a0c      	ldr	r2, [pc, #48]	@ (800fc8c <eTaskGetState+0xcc>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d002      	beq.n	800fc66 <eTaskGetState+0xa6>
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d102      	bne.n	800fc6c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800fc66:	2304      	movs	r3, #4
 800fc68:	77fb      	strb	r3, [r7, #31]
 800fc6a:	e001      	b.n	800fc70 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800fc70:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800fc72:	4618      	mov	r0, r3
 800fc74:	3720      	adds	r7, #32
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	200019c4 	.word	0x200019c4
 800fc80:	20001e50 	.word	0x20001e50
 800fc84:	20001e54 	.word	0x20001e54
 800fc88:	20001e84 	.word	0x20001e84
 800fc8c:	20001e6c 	.word	0x20001e6c

0800fc90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fc98:	f001 ff16 	bl	8011ac8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d102      	bne.n	800fca8 <vTaskSuspend+0x18>
 800fca2:	4b30      	ldr	r3, [pc, #192]	@ (800fd64 <vTaskSuspend+0xd4>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	e000      	b.n	800fcaa <vTaskSuspend+0x1a>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3304      	adds	r3, #4
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe ffad 	bl	800ec10 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d004      	beq.n	800fcc8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	3318      	adds	r3, #24
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe ffa4 	bl	800ec10 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	3304      	adds	r3, #4
 800fccc:	4619      	mov	r1, r3
 800fcce:	4826      	ldr	r0, [pc, #152]	@ (800fd68 <vTaskSuspend+0xd8>)
 800fcd0:	f7fe ff41 	bl	800eb56 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d103      	bne.n	800fce8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800fce8:	f001 ff20 	bl	8011b2c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800fcec:	4b1f      	ldr	r3, [pc, #124]	@ (800fd6c <vTaskSuspend+0xdc>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d005      	beq.n	800fd00 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800fcf4:	f001 fee8 	bl	8011ac8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800fcf8:	f000 fe0e 	bl	8010918 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800fcfc:	f001 ff16 	bl	8011b2c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800fd00:	4b18      	ldr	r3, [pc, #96]	@ (800fd64 <vTaskSuspend+0xd4>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d128      	bne.n	800fd5c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800fd0a:	4b18      	ldr	r3, [pc, #96]	@ (800fd6c <vTaskSuspend+0xdc>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d018      	beq.n	800fd44 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800fd12:	4b17      	ldr	r3, [pc, #92]	@ (800fd70 <vTaskSuspend+0xe0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00b      	beq.n	800fd32 <vTaskSuspend+0xa2>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	60bb      	str	r3, [r7, #8]
}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	e7fd      	b.n	800fd2e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800fd32:	4b10      	ldr	r3, [pc, #64]	@ (800fd74 <vTaskSuspend+0xe4>)
 800fd34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd42:	e00b      	b.n	800fd5c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800fd44:	4b08      	ldr	r3, [pc, #32]	@ (800fd68 <vTaskSuspend+0xd8>)
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	4b0b      	ldr	r3, [pc, #44]	@ (800fd78 <vTaskSuspend+0xe8>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d103      	bne.n	800fd58 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800fd50:	4b04      	ldr	r3, [pc, #16]	@ (800fd64 <vTaskSuspend+0xd4>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]
	}
 800fd56:	e001      	b.n	800fd5c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800fd58:	f000 fa8c 	bl	8010274 <vTaskSwitchContext>
	}
 800fd5c:	bf00      	nop
 800fd5e:	3710      	adds	r7, #16
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	200019c4 	.word	0x200019c4
 800fd68:	20001e84 	.word	0x20001e84
 800fd6c:	20001ea4 	.word	0x20001ea4
 800fd70:	20001ec0 	.word	0x20001ec0
 800fd74:	e000ed04 	.word	0xe000ed04
 800fd78:	20001e98 	.word	0x20001e98

0800fd7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b08a      	sub	sp, #40	@ 0x28
 800fd80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd8a:	463a      	mov	r2, r7
 800fd8c:	1d39      	adds	r1, r7, #4
 800fd8e:	f107 0308 	add.w	r3, r7, #8
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fe fe7e 	bl	800ea94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	9202      	str	r2, [sp, #8]
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	2300      	movs	r3, #0
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	2300      	movs	r3, #0
 800fda8:	460a      	mov	r2, r1
 800fdaa:	4926      	ldr	r1, [pc, #152]	@ (800fe44 <vTaskStartScheduler+0xc8>)
 800fdac:	4826      	ldr	r0, [pc, #152]	@ (800fe48 <vTaskStartScheduler+0xcc>)
 800fdae:	f7ff fd11 	bl	800f7d4 <xTaskCreateStatic>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	4a25      	ldr	r2, [pc, #148]	@ (800fe4c <vTaskStartScheduler+0xd0>)
 800fdb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fdb8:	4b24      	ldr	r3, [pc, #144]	@ (800fe4c <vTaskStartScheduler+0xd0>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	617b      	str	r3, [r7, #20]
 800fdc4:	e001      	b.n	800fdca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d102      	bne.n	800fdd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fdd0:	f001 f9ec 	bl	80111ac <xTimerCreateTimerTask>
 800fdd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d11e      	bne.n	800fe1a <vTaskStartScheduler+0x9e>
	__asm volatile
 800fddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	613b      	str	r3, [r7, #16]
}
 800fdee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fdf0:	4b17      	ldr	r3, [pc, #92]	@ (800fe50 <vTaskStartScheduler+0xd4>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	3368      	adds	r3, #104	@ 0x68
 800fdf6:	4a17      	ldr	r2, [pc, #92]	@ (800fe54 <vTaskStartScheduler+0xd8>)
 800fdf8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fdfa:	4b17      	ldr	r3, [pc, #92]	@ (800fe58 <vTaskStartScheduler+0xdc>)
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe02:	4b16      	ldr	r3, [pc, #88]	@ (800fe5c <vTaskStartScheduler+0xe0>)
 800fe04:	2201      	movs	r2, #1
 800fe06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe08:	4b15      	ldr	r3, [pc, #84]	@ (800fe60 <vTaskStartScheduler+0xe4>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800fe0e:	4b15      	ldr	r3, [pc, #84]	@ (800fe64 <vTaskStartScheduler+0xe8>)
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe14:	f001 fdb4 	bl	8011980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe18:	e00f      	b.n	800fe3a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe20:	d10b      	bne.n	800fe3a <vTaskStartScheduler+0xbe>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	60fb      	str	r3, [r7, #12]
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop
 800fe38:	e7fd      	b.n	800fe36 <vTaskStartScheduler+0xba>
}
 800fe3a:	bf00      	nop
 800fe3c:	3718      	adds	r7, #24
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	08015f24 	.word	0x08015f24
 800fe48:	080105f5 	.word	0x080105f5
 800fe4c:	20001ebc 	.word	0x20001ebc
 800fe50:	200019c4 	.word	0x200019c4
 800fe54:	2000004c 	.word	0x2000004c
 800fe58:	20001eb8 	.word	0x20001eb8
 800fe5c:	20001ea4 	.word	0x20001ea4
 800fe60:	20001e9c 	.word	0x20001e9c
 800fe64:	20000558 	.word	0x20000558

0800fe68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe68:	b480      	push	{r7}
 800fe6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fe6c:	4b04      	ldr	r3, [pc, #16]	@ (800fe80 <vTaskSuspendAll+0x18>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3301      	adds	r3, #1
 800fe72:	4a03      	ldr	r2, [pc, #12]	@ (800fe80 <vTaskSuspendAll+0x18>)
 800fe74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fe76:	bf00      	nop
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	20001ec0 	.word	0x20001ec0

0800fe84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe92:	4b42      	ldr	r3, [pc, #264]	@ (800ff9c <xTaskResumeAll+0x118>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d10b      	bne.n	800feb2 <xTaskResumeAll+0x2e>
	__asm volatile
 800fe9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	603b      	str	r3, [r7, #0]
}
 800feac:	bf00      	nop
 800feae:	bf00      	nop
 800feb0:	e7fd      	b.n	800feae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800feb2:	f001 fe09 	bl	8011ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800feb6:	4b39      	ldr	r3, [pc, #228]	@ (800ff9c <xTaskResumeAll+0x118>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	3b01      	subs	r3, #1
 800febc:	4a37      	ldr	r2, [pc, #220]	@ (800ff9c <xTaskResumeAll+0x118>)
 800febe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fec0:	4b36      	ldr	r3, [pc, #216]	@ (800ff9c <xTaskResumeAll+0x118>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d162      	bne.n	800ff8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fec8:	4b35      	ldr	r3, [pc, #212]	@ (800ffa0 <xTaskResumeAll+0x11c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d05e      	beq.n	800ff8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fed0:	e02f      	b.n	800ff32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fed2:	4b34      	ldr	r3, [pc, #208]	@ (800ffa4 <xTaskResumeAll+0x120>)
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	3318      	adds	r3, #24
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fe96 	bl	800ec10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	3304      	adds	r3, #4
 800fee8:	4618      	mov	r0, r3
 800feea:	f7fe fe91 	bl	800ec10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fef2:	4b2d      	ldr	r3, [pc, #180]	@ (800ffa8 <xTaskResumeAll+0x124>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d903      	bls.n	800ff02 <xTaskResumeAll+0x7e>
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fefe:	4a2a      	ldr	r2, [pc, #168]	@ (800ffa8 <xTaskResumeAll+0x124>)
 800ff00:	6013      	str	r3, [r2, #0]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff06:	4613      	mov	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4413      	add	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	4a27      	ldr	r2, [pc, #156]	@ (800ffac <xTaskResumeAll+0x128>)
 800ff10:	441a      	add	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	3304      	adds	r3, #4
 800ff16:	4619      	mov	r1, r3
 800ff18:	4610      	mov	r0, r2
 800ff1a:	f7fe fe1c 	bl	800eb56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff22:	4b23      	ldr	r3, [pc, #140]	@ (800ffb0 <xTaskResumeAll+0x12c>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d302      	bcc.n	800ff32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ff2c:	4b21      	ldr	r3, [pc, #132]	@ (800ffb4 <xTaskResumeAll+0x130>)
 800ff2e:	2201      	movs	r2, #1
 800ff30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff32:	4b1c      	ldr	r3, [pc, #112]	@ (800ffa4 <xTaskResumeAll+0x120>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1cb      	bne.n	800fed2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff40:	f000 fcea 	bl	8010918 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff44:	4b1c      	ldr	r3, [pc, #112]	@ (800ffb8 <xTaskResumeAll+0x134>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d010      	beq.n	800ff72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff50:	f000 f8d6 	bl	8010100 <xTaskIncrementTick>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d002      	beq.n	800ff60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ff5a:	4b16      	ldr	r3, [pc, #88]	@ (800ffb4 <xTaskResumeAll+0x130>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	3b01      	subs	r3, #1
 800ff64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d1f1      	bne.n	800ff50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ff6c:	4b12      	ldr	r3, [pc, #72]	@ (800ffb8 <xTaskResumeAll+0x134>)
 800ff6e:	2200      	movs	r2, #0
 800ff70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ff72:	4b10      	ldr	r3, [pc, #64]	@ (800ffb4 <xTaskResumeAll+0x130>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d009      	beq.n	800ff8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff7e:	4b0f      	ldr	r3, [pc, #60]	@ (800ffbc <xTaskResumeAll+0x138>)
 800ff80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	f3bf 8f4f 	dsb	sy
 800ff8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff8e:	f001 fdcd 	bl	8011b2c <vPortExitCritical>

	return xAlreadyYielded;
 800ff92:	68bb      	ldr	r3, [r7, #8]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	20001ec0 	.word	0x20001ec0
 800ffa0:	20001e98 	.word	0x20001e98
 800ffa4:	20001e58 	.word	0x20001e58
 800ffa8:	20001ea0 	.word	0x20001ea0
 800ffac:	200019c8 	.word	0x200019c8
 800ffb0:	200019c4 	.word	0x200019c4
 800ffb4:	20001eac 	.word	0x20001eac
 800ffb8:	20001ea8 	.word	0x20001ea8
 800ffbc:	e000ed04 	.word	0xe000ed04

0800ffc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ffc6:	4b05      	ldr	r3, [pc, #20]	@ (800ffdc <xTaskGetTickCount+0x1c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ffcc:	687b      	ldr	r3, [r7, #4]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	370c      	adds	r7, #12
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	20001e9c 	.word	0x20001e9c

0800ffe0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ffec:	2300      	movs	r3, #0
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	2338      	movs	r3, #56	@ 0x38
 800fff2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800fff4:	f7ff ff38 	bl	800fe68 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fff8:	4b3a      	ldr	r3, [pc, #232]	@ (80100e4 <uxTaskGetSystemState+0x104>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d369      	bcc.n	80100d6 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	3b01      	subs	r3, #1
 8010006:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8010008:	697a      	ldr	r2, [r7, #20]
 801000a:	4613      	mov	r3, r2
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	4413      	add	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	461a      	mov	r2, r3
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	1898      	adds	r0, r3, r2
 8010018:	693a      	ldr	r2, [r7, #16]
 801001a:	4613      	mov	r3, r2
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	4413      	add	r3, r2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4a31      	ldr	r2, [pc, #196]	@ (80100e8 <uxTaskGetSystemState+0x108>)
 8010024:	4413      	add	r3, r2
 8010026:	2201      	movs	r2, #1
 8010028:	4619      	mov	r1, r3
 801002a:	f000 fbd1 	bl	80107d0 <prvListTasksWithinSingleList>
 801002e:	4602      	mov	r2, r0
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	4413      	add	r3, r2
 8010034:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1e2      	bne.n	8010002 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 801003c:	697a      	ldr	r2, [r7, #20]
 801003e:	4613      	mov	r3, r2
 8010040:	00db      	lsls	r3, r3, #3
 8010042:	4413      	add	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	461a      	mov	r2, r3
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	4413      	add	r3, r2
 801004c:	4a27      	ldr	r2, [pc, #156]	@ (80100ec <uxTaskGetSystemState+0x10c>)
 801004e:	6811      	ldr	r1, [r2, #0]
 8010050:	2202      	movs	r2, #2
 8010052:	4618      	mov	r0, r3
 8010054:	f000 fbbc 	bl	80107d0 <prvListTasksWithinSingleList>
 8010058:	4602      	mov	r2, r0
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	4413      	add	r3, r2
 801005e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8010060:	697a      	ldr	r2, [r7, #20]
 8010062:	4613      	mov	r3, r2
 8010064:	00db      	lsls	r3, r3, #3
 8010066:	4413      	add	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	461a      	mov	r2, r3
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	4a1f      	ldr	r2, [pc, #124]	@ (80100f0 <uxTaskGetSystemState+0x110>)
 8010072:	6811      	ldr	r1, [r2, #0]
 8010074:	2202      	movs	r2, #2
 8010076:	4618      	mov	r0, r3
 8010078:	f000 fbaa 	bl	80107d0 <prvListTasksWithinSingleList>
 801007c:	4602      	mov	r2, r0
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	4413      	add	r3, r2
 8010082:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8010084:	697a      	ldr	r2, [r7, #20]
 8010086:	4613      	mov	r3, r2
 8010088:	00db      	lsls	r3, r3, #3
 801008a:	4413      	add	r3, r2
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	461a      	mov	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4413      	add	r3, r2
 8010094:	2204      	movs	r2, #4
 8010096:	4917      	ldr	r1, [pc, #92]	@ (80100f4 <uxTaskGetSystemState+0x114>)
 8010098:	4618      	mov	r0, r3
 801009a:	f000 fb99 	bl	80107d0 <prvListTasksWithinSingleList>
 801009e:	4602      	mov	r2, r0
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	4413      	add	r3, r2
 80100a4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	4613      	mov	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	4413      	add	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	461a      	mov	r2, r3
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	4413      	add	r3, r2
 80100b6:	2203      	movs	r2, #3
 80100b8:	490f      	ldr	r1, [pc, #60]	@ (80100f8 <uxTaskGetSystemState+0x118>)
 80100ba:	4618      	mov	r0, r3
 80100bc:	f000 fb88 	bl	80107d0 <prvListTasksWithinSingleList>
 80100c0:	4602      	mov	r2, r0
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	4413      	add	r3, r2
 80100c6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d003      	beq.n	80100d6 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80100ce:	4b0b      	ldr	r3, [pc, #44]	@ (80100fc <uxTaskGetSystemState+0x11c>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80100d6:	f7ff fed5 	bl	800fe84 <xTaskResumeAll>

		return uxTask;
 80100da:	697b      	ldr	r3, [r7, #20]
	}
 80100dc:	4618      	mov	r0, r3
 80100de:	3718      	adds	r7, #24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	20001e98 	.word	0x20001e98
 80100e8:	200019c8 	.word	0x200019c8
 80100ec:	20001e50 	.word	0x20001e50
 80100f0:	20001e54 	.word	0x20001e54
 80100f4:	20001e6c 	.word	0x20001e6c
 80100f8:	20001e84 	.word	0x20001e84
 80100fc:	20000558 	.word	0x20000558

08010100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010106:	2300      	movs	r3, #0
 8010108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801010a:	4b4f      	ldr	r3, [pc, #316]	@ (8010248 <xTaskIncrementTick+0x148>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	f040 8090 	bne.w	8010234 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010114:	4b4d      	ldr	r3, [pc, #308]	@ (801024c <xTaskIncrementTick+0x14c>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3301      	adds	r3, #1
 801011a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801011c:	4a4b      	ldr	r2, [pc, #300]	@ (801024c <xTaskIncrementTick+0x14c>)
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d121      	bne.n	801016c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010128:	4b49      	ldr	r3, [pc, #292]	@ (8010250 <xTaskIncrementTick+0x150>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00b      	beq.n	801014a <xTaskIncrementTick+0x4a>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	603b      	str	r3, [r7, #0]
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop
 8010148:	e7fd      	b.n	8010146 <xTaskIncrementTick+0x46>
 801014a:	4b41      	ldr	r3, [pc, #260]	@ (8010250 <xTaskIncrementTick+0x150>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	60fb      	str	r3, [r7, #12]
 8010150:	4b40      	ldr	r3, [pc, #256]	@ (8010254 <xTaskIncrementTick+0x154>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a3e      	ldr	r2, [pc, #248]	@ (8010250 <xTaskIncrementTick+0x150>)
 8010156:	6013      	str	r3, [r2, #0]
 8010158:	4a3e      	ldr	r2, [pc, #248]	@ (8010254 <xTaskIncrementTick+0x154>)
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6013      	str	r3, [r2, #0]
 801015e:	4b3e      	ldr	r3, [pc, #248]	@ (8010258 <xTaskIncrementTick+0x158>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	3301      	adds	r3, #1
 8010164:	4a3c      	ldr	r2, [pc, #240]	@ (8010258 <xTaskIncrementTick+0x158>)
 8010166:	6013      	str	r3, [r2, #0]
 8010168:	f000 fbd6 	bl	8010918 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801016c:	4b3b      	ldr	r3, [pc, #236]	@ (801025c <xTaskIncrementTick+0x15c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	429a      	cmp	r2, r3
 8010174:	d349      	bcc.n	801020a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010176:	4b36      	ldr	r3, [pc, #216]	@ (8010250 <xTaskIncrementTick+0x150>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d104      	bne.n	801018a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010180:	4b36      	ldr	r3, [pc, #216]	@ (801025c <xTaskIncrementTick+0x15c>)
 8010182:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010186:	601a      	str	r2, [r3, #0]
					break;
 8010188:	e03f      	b.n	801020a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801018a:	4b31      	ldr	r3, [pc, #196]	@ (8010250 <xTaskIncrementTick+0x150>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d203      	bcs.n	80101aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101a2:	4a2e      	ldr	r2, [pc, #184]	@ (801025c <xTaskIncrementTick+0x15c>)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101a8:	e02f      	b.n	801020a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	3304      	adds	r3, #4
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fd2e 	bl	800ec10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d004      	beq.n	80101c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	3318      	adds	r3, #24
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fd25 	bl	800ec10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101ca:	4b25      	ldr	r3, [pc, #148]	@ (8010260 <xTaskIncrementTick+0x160>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d903      	bls.n	80101da <xTaskIncrementTick+0xda>
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101d6:	4a22      	ldr	r2, [pc, #136]	@ (8010260 <xTaskIncrementTick+0x160>)
 80101d8:	6013      	str	r3, [r2, #0]
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101de:	4613      	mov	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4a1f      	ldr	r2, [pc, #124]	@ (8010264 <xTaskIncrementTick+0x164>)
 80101e8:	441a      	add	r2, r3
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	3304      	adds	r3, #4
 80101ee:	4619      	mov	r1, r3
 80101f0:	4610      	mov	r0, r2
 80101f2:	f7fe fcb0 	bl	800eb56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101fa:	4b1b      	ldr	r3, [pc, #108]	@ (8010268 <xTaskIncrementTick+0x168>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010200:	429a      	cmp	r2, r3
 8010202:	d3b8      	bcc.n	8010176 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010204:	2301      	movs	r3, #1
 8010206:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010208:	e7b5      	b.n	8010176 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801020a:	4b17      	ldr	r3, [pc, #92]	@ (8010268 <xTaskIncrementTick+0x168>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010210:	4914      	ldr	r1, [pc, #80]	@ (8010264 <xTaskIncrementTick+0x164>)
 8010212:	4613      	mov	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	4413      	add	r3, r2
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	440b      	add	r3, r1
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d901      	bls.n	8010226 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010222:	2301      	movs	r3, #1
 8010224:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010226:	4b11      	ldr	r3, [pc, #68]	@ (801026c <xTaskIncrementTick+0x16c>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d007      	beq.n	801023e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801022e:	2301      	movs	r3, #1
 8010230:	617b      	str	r3, [r7, #20]
 8010232:	e004      	b.n	801023e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010234:	4b0e      	ldr	r3, [pc, #56]	@ (8010270 <xTaskIncrementTick+0x170>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3301      	adds	r3, #1
 801023a:	4a0d      	ldr	r2, [pc, #52]	@ (8010270 <xTaskIncrementTick+0x170>)
 801023c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801023e:	697b      	ldr	r3, [r7, #20]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3718      	adds	r7, #24
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	20001ec0 	.word	0x20001ec0
 801024c:	20001e9c 	.word	0x20001e9c
 8010250:	20001e50 	.word	0x20001e50
 8010254:	20001e54 	.word	0x20001e54
 8010258:	20001eb0 	.word	0x20001eb0
 801025c:	20001eb8 	.word	0x20001eb8
 8010260:	20001ea0 	.word	0x20001ea0
 8010264:	200019c8 	.word	0x200019c8
 8010268:	200019c4 	.word	0x200019c4
 801026c:	20001eac 	.word	0x20001eac
 8010270:	20001ea8 	.word	0x20001ea8

08010274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010274:	b480      	push	{r7}
 8010276:	b085      	sub	sp, #20
 8010278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801027a:	4b37      	ldr	r3, [pc, #220]	@ (8010358 <vTaskSwitchContext+0xe4>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d003      	beq.n	801028a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010282:	4b36      	ldr	r3, [pc, #216]	@ (801035c <vTaskSwitchContext+0xe8>)
 8010284:	2201      	movs	r2, #1
 8010286:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010288:	e05f      	b.n	801034a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 801028a:	4b34      	ldr	r3, [pc, #208]	@ (801035c <vTaskSwitchContext+0xe8>)
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010290:	4b33      	ldr	r3, [pc, #204]	@ (8010360 <vTaskSwitchContext+0xec>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a33      	ldr	r2, [pc, #204]	@ (8010364 <vTaskSwitchContext+0xf0>)
 8010296:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010298:	4b32      	ldr	r3, [pc, #200]	@ (8010364 <vTaskSwitchContext+0xf0>)
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	4b32      	ldr	r3, [pc, #200]	@ (8010368 <vTaskSwitchContext+0xf4>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d909      	bls.n	80102b8 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80102a4:	4b31      	ldr	r3, [pc, #196]	@ (801036c <vTaskSwitchContext+0xf8>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80102aa:	4a2e      	ldr	r2, [pc, #184]	@ (8010364 <vTaskSwitchContext+0xf0>)
 80102ac:	6810      	ldr	r0, [r2, #0]
 80102ae:	4a2e      	ldr	r2, [pc, #184]	@ (8010368 <vTaskSwitchContext+0xf4>)
 80102b0:	6812      	ldr	r2, [r2, #0]
 80102b2:	1a82      	subs	r2, r0, r2
 80102b4:	440a      	add	r2, r1
 80102b6:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 80102b8:	4b2a      	ldr	r3, [pc, #168]	@ (8010364 <vTaskSwitchContext+0xf0>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a2a      	ldr	r2, [pc, #168]	@ (8010368 <vTaskSwitchContext+0xf4>)
 80102be:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102c0:	4b2b      	ldr	r3, [pc, #172]	@ (8010370 <vTaskSwitchContext+0xfc>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	60fb      	str	r3, [r7, #12]
 80102c6:	e011      	b.n	80102ec <vTaskSwitchContext+0x78>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d10b      	bne.n	80102e6 <vTaskSwitchContext+0x72>
	__asm volatile
 80102ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	607b      	str	r3, [r7, #4]
}
 80102e0:	bf00      	nop
 80102e2:	bf00      	nop
 80102e4:	e7fd      	b.n	80102e2 <vTaskSwitchContext+0x6e>
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	60fb      	str	r3, [r7, #12]
 80102ec:	4921      	ldr	r1, [pc, #132]	@ (8010374 <vTaskSwitchContext+0x100>)
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	4613      	mov	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	4413      	add	r3, r2
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	440b      	add	r3, r1
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d0e3      	beq.n	80102c8 <vTaskSwitchContext+0x54>
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	4613      	mov	r3, r2
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4a1a      	ldr	r2, [pc, #104]	@ (8010374 <vTaskSwitchContext+0x100>)
 801030c:	4413      	add	r3, r2
 801030e:	60bb      	str	r3, [r7, #8]
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	685a      	ldr	r2, [r3, #4]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	605a      	str	r2, [r3, #4]
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	685a      	ldr	r2, [r3, #4]
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	3308      	adds	r3, #8
 8010322:	429a      	cmp	r2, r3
 8010324:	d104      	bne.n	8010330 <vTaskSwitchContext+0xbc>
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	685a      	ldr	r2, [r3, #4]
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	605a      	str	r2, [r3, #4]
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	4a0d      	ldr	r2, [pc, #52]	@ (801036c <vTaskSwitchContext+0xf8>)
 8010338:	6013      	str	r3, [r2, #0]
 801033a:	4a0d      	ldr	r2, [pc, #52]	@ (8010370 <vTaskSwitchContext+0xfc>)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010340:	4b0a      	ldr	r3, [pc, #40]	@ (801036c <vTaskSwitchContext+0xf8>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3368      	adds	r3, #104	@ 0x68
 8010346:	4a0c      	ldr	r2, [pc, #48]	@ (8010378 <vTaskSwitchContext+0x104>)
 8010348:	6013      	str	r3, [r2, #0]
}
 801034a:	bf00      	nop
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	20001ec0 	.word	0x20001ec0
 801035c:	20001eac 	.word	0x20001eac
 8010360:	20000558 	.word	0x20000558
 8010364:	20001ec8 	.word	0x20001ec8
 8010368:	20001ec4 	.word	0x20001ec4
 801036c:	200019c4 	.word	0x200019c4
 8010370:	20001ea0 	.word	0x20001ea0
 8010374:	200019c8 	.word	0x200019c8
 8010378:	2000004c 	.word	0x2000004c

0801037c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10b      	bne.n	80103a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801038c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	60fb      	str	r3, [r7, #12]
}
 801039e:	bf00      	nop
 80103a0:	bf00      	nop
 80103a2:	e7fd      	b.n	80103a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103a4:	4b07      	ldr	r3, [pc, #28]	@ (80103c4 <vTaskPlaceOnEventList+0x48>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	3318      	adds	r3, #24
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7fe fbf6 	bl	800eb9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103b2:	2101      	movs	r1, #1
 80103b4:	6838      	ldr	r0, [r7, #0]
 80103b6:	f000 fea5 	bl	8011104 <prvAddCurrentTaskToDelayedList>
}
 80103ba:	bf00      	nop
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	200019c4 	.word	0x200019c4

080103c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10b      	bne.n	80103f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80103da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103de:	f383 8811 	msr	BASEPRI, r3
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	617b      	str	r3, [r7, #20]
}
 80103ec:	bf00      	nop
 80103ee:	bf00      	nop
 80103f0:	e7fd      	b.n	80103ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103f2:	4b0a      	ldr	r3, [pc, #40]	@ (801041c <vTaskPlaceOnEventListRestricted+0x54>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3318      	adds	r3, #24
 80103f8:	4619      	mov	r1, r3
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f7fe fbab 	bl	800eb56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d002      	beq.n	801040c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801040a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801040c:	6879      	ldr	r1, [r7, #4]
 801040e:	68b8      	ldr	r0, [r7, #8]
 8010410:	f000 fe78 	bl	8011104 <prvAddCurrentTaskToDelayedList>
	}
 8010414:	bf00      	nop
 8010416:	3718      	adds	r7, #24
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	200019c4 	.word	0x200019c4

08010420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d10b      	bne.n	801044e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801043a:	f383 8811 	msr	BASEPRI, r3
 801043e:	f3bf 8f6f 	isb	sy
 8010442:	f3bf 8f4f 	dsb	sy
 8010446:	60fb      	str	r3, [r7, #12]
}
 8010448:	bf00      	nop
 801044a:	bf00      	nop
 801044c:	e7fd      	b.n	801044a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	3318      	adds	r3, #24
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe fbdc 	bl	800ec10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010458:	4b1d      	ldr	r3, [pc, #116]	@ (80104d0 <xTaskRemoveFromEventList+0xb0>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d11d      	bne.n	801049c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	3304      	adds	r3, #4
 8010464:	4618      	mov	r0, r3
 8010466:	f7fe fbd3 	bl	800ec10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801046e:	4b19      	ldr	r3, [pc, #100]	@ (80104d4 <xTaskRemoveFromEventList+0xb4>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	429a      	cmp	r2, r3
 8010474:	d903      	bls.n	801047e <xTaskRemoveFromEventList+0x5e>
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801047a:	4a16      	ldr	r2, [pc, #88]	@ (80104d4 <xTaskRemoveFromEventList+0xb4>)
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010482:	4613      	mov	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4413      	add	r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4a13      	ldr	r2, [pc, #76]	@ (80104d8 <xTaskRemoveFromEventList+0xb8>)
 801048c:	441a      	add	r2, r3
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	3304      	adds	r3, #4
 8010492:	4619      	mov	r1, r3
 8010494:	4610      	mov	r0, r2
 8010496:	f7fe fb5e 	bl	800eb56 <vListInsertEnd>
 801049a:	e005      	b.n	80104a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	3318      	adds	r3, #24
 80104a0:	4619      	mov	r1, r3
 80104a2:	480e      	ldr	r0, [pc, #56]	@ (80104dc <xTaskRemoveFromEventList+0xbc>)
 80104a4:	f7fe fb57 	bl	800eb56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ac:	4b0c      	ldr	r3, [pc, #48]	@ (80104e0 <xTaskRemoveFromEventList+0xc0>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d905      	bls.n	80104c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80104b6:	2301      	movs	r3, #1
 80104b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80104ba:	4b0a      	ldr	r3, [pc, #40]	@ (80104e4 <xTaskRemoveFromEventList+0xc4>)
 80104bc:	2201      	movs	r2, #1
 80104be:	601a      	str	r2, [r3, #0]
 80104c0:	e001      	b.n	80104c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80104c2:	2300      	movs	r3, #0
 80104c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80104c6:	697b      	ldr	r3, [r7, #20]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3718      	adds	r7, #24
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	20001ec0 	.word	0x20001ec0
 80104d4:	20001ea0 	.word	0x20001ea0
 80104d8:	200019c8 	.word	0x200019c8
 80104dc:	20001e58 	.word	0x20001e58
 80104e0:	200019c4 	.word	0x200019c4
 80104e4:	20001eac 	.word	0x20001eac

080104e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104f0:	4b06      	ldr	r3, [pc, #24]	@ (801050c <vTaskInternalSetTimeOutState+0x24>)
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104f8:	4b05      	ldr	r3, [pc, #20]	@ (8010510 <vTaskInternalSetTimeOutState+0x28>)
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	605a      	str	r2, [r3, #4]
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	20001eb0 	.word	0x20001eb0
 8010510:	20001e9c 	.word	0x20001e9c

08010514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b088      	sub	sp, #32
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10b      	bne.n	801053c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	613b      	str	r3, [r7, #16]
}
 8010536:	bf00      	nop
 8010538:	bf00      	nop
 801053a:	e7fd      	b.n	8010538 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10b      	bne.n	801055a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	60fb      	str	r3, [r7, #12]
}
 8010554:	bf00      	nop
 8010556:	bf00      	nop
 8010558:	e7fd      	b.n	8010556 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801055a:	f001 fab5 	bl	8011ac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801055e:	4b1d      	ldr	r3, [pc, #116]	@ (80105d4 <xTaskCheckForTimeOut+0xc0>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	69ba      	ldr	r2, [r7, #24]
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010576:	d102      	bne.n	801057e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010578:	2300      	movs	r3, #0
 801057a:	61fb      	str	r3, [r7, #28]
 801057c:	e023      	b.n	80105c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	4b15      	ldr	r3, [pc, #84]	@ (80105d8 <xTaskCheckForTimeOut+0xc4>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	429a      	cmp	r2, r3
 8010588:	d007      	beq.n	801059a <xTaskCheckForTimeOut+0x86>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	69ba      	ldr	r2, [r7, #24]
 8010590:	429a      	cmp	r2, r3
 8010592:	d302      	bcc.n	801059a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010594:	2301      	movs	r3, #1
 8010596:	61fb      	str	r3, [r7, #28]
 8010598:	e015      	b.n	80105c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d20b      	bcs.n	80105bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	1ad2      	subs	r2, r2, r3
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f7ff ff99 	bl	80104e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80105b6:	2300      	movs	r3, #0
 80105b8:	61fb      	str	r3, [r7, #28]
 80105ba:	e004      	b.n	80105c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	2200      	movs	r2, #0
 80105c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80105c2:	2301      	movs	r3, #1
 80105c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80105c6:	f001 fab1 	bl	8011b2c <vPortExitCritical>

	return xReturn;
 80105ca:	69fb      	ldr	r3, [r7, #28]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	20001e9c 	.word	0x20001e9c
 80105d8:	20001eb0 	.word	0x20001eb0

080105dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105dc:	b480      	push	{r7}
 80105de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105e0:	4b03      	ldr	r3, [pc, #12]	@ (80105f0 <vTaskMissedYield+0x14>)
 80105e2:	2201      	movs	r2, #1
 80105e4:	601a      	str	r2, [r3, #0]
}
 80105e6:	bf00      	nop
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	20001eac 	.word	0x20001eac

080105f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105fc:	f000 f854 	bl	80106a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010600:	4b07      	ldr	r3, [pc, #28]	@ (8010620 <prvIdleTask+0x2c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b01      	cmp	r3, #1
 8010606:	d907      	bls.n	8010618 <prvIdleTask+0x24>
			{
				taskYIELD();
 8010608:	4b06      	ldr	r3, [pc, #24]	@ (8010624 <prvIdleTask+0x30>)
 801060a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801060e:	601a      	str	r2, [r3, #0]
 8010610:	f3bf 8f4f 	dsb	sy
 8010614:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010618:	f7f0 fe90 	bl	800133c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801061c:	e7ee      	b.n	80105fc <prvIdleTask+0x8>
 801061e:	bf00      	nop
 8010620:	200019c8 	.word	0x200019c8
 8010624:	e000ed04 	.word	0xe000ed04

08010628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801062e:	2300      	movs	r3, #0
 8010630:	607b      	str	r3, [r7, #4]
 8010632:	e00c      	b.n	801064e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	4613      	mov	r3, r2
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4413      	add	r3, r2
 801063c:	009b      	lsls	r3, r3, #2
 801063e:	4a12      	ldr	r2, [pc, #72]	@ (8010688 <prvInitialiseTaskLists+0x60>)
 8010640:	4413      	add	r3, r2
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe fa5a 	bl	800eafc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	3301      	adds	r3, #1
 801064c:	607b      	str	r3, [r7, #4]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b37      	cmp	r3, #55	@ 0x37
 8010652:	d9ef      	bls.n	8010634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010654:	480d      	ldr	r0, [pc, #52]	@ (801068c <prvInitialiseTaskLists+0x64>)
 8010656:	f7fe fa51 	bl	800eafc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801065a:	480d      	ldr	r0, [pc, #52]	@ (8010690 <prvInitialiseTaskLists+0x68>)
 801065c:	f7fe fa4e 	bl	800eafc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010660:	480c      	ldr	r0, [pc, #48]	@ (8010694 <prvInitialiseTaskLists+0x6c>)
 8010662:	f7fe fa4b 	bl	800eafc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010666:	480c      	ldr	r0, [pc, #48]	@ (8010698 <prvInitialiseTaskLists+0x70>)
 8010668:	f7fe fa48 	bl	800eafc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801066c:	480b      	ldr	r0, [pc, #44]	@ (801069c <prvInitialiseTaskLists+0x74>)
 801066e:	f7fe fa45 	bl	800eafc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010672:	4b0b      	ldr	r3, [pc, #44]	@ (80106a0 <prvInitialiseTaskLists+0x78>)
 8010674:	4a05      	ldr	r2, [pc, #20]	@ (801068c <prvInitialiseTaskLists+0x64>)
 8010676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010678:	4b0a      	ldr	r3, [pc, #40]	@ (80106a4 <prvInitialiseTaskLists+0x7c>)
 801067a:	4a05      	ldr	r2, [pc, #20]	@ (8010690 <prvInitialiseTaskLists+0x68>)
 801067c:	601a      	str	r2, [r3, #0]
}
 801067e:	bf00      	nop
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	200019c8 	.word	0x200019c8
 801068c:	20001e28 	.word	0x20001e28
 8010690:	20001e3c 	.word	0x20001e3c
 8010694:	20001e58 	.word	0x20001e58
 8010698:	20001e6c 	.word	0x20001e6c
 801069c:	20001e84 	.word	0x20001e84
 80106a0:	20001e50 	.word	0x20001e50
 80106a4:	20001e54 	.word	0x20001e54

080106a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106ae:	e019      	b.n	80106e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80106b0:	f001 fa0a 	bl	8011ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106b4:	4b10      	ldr	r3, [pc, #64]	@ (80106f8 <prvCheckTasksWaitingTermination+0x50>)
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3304      	adds	r3, #4
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fe faa5 	bl	800ec10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80106c6:	4b0d      	ldr	r3, [pc, #52]	@ (80106fc <prvCheckTasksWaitingTermination+0x54>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3b01      	subs	r3, #1
 80106cc:	4a0b      	ldr	r2, [pc, #44]	@ (80106fc <prvCheckTasksWaitingTermination+0x54>)
 80106ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80106d0:	4b0b      	ldr	r3, [pc, #44]	@ (8010700 <prvCheckTasksWaitingTermination+0x58>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	3b01      	subs	r3, #1
 80106d6:	4a0a      	ldr	r2, [pc, #40]	@ (8010700 <prvCheckTasksWaitingTermination+0x58>)
 80106d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80106da:	f001 fa27 	bl	8011b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 f8e4 	bl	80108ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106e4:	4b06      	ldr	r3, [pc, #24]	@ (8010700 <prvCheckTasksWaitingTermination+0x58>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d1e1      	bne.n	80106b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106ec:	bf00      	nop
 80106ee:	bf00      	nop
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	20001e6c 	.word	0x20001e6c
 80106fc:	20001e98 	.word	0x20001e98
 8010700:	20001e80 	.word	0x20001e80

08010704 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <vTaskGetInfo+0x1a>
 8010718:	4b2c      	ldr	r3, [pc, #176]	@ (80107cc <vTaskGetInfo+0xc8>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	e000      	b.n	8010720 <vTaskGetInfo+0x1c>
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801075a:	78fb      	ldrb	r3, [r7, #3]
 801075c:	2b05      	cmp	r3, #5
 801075e:	d01a      	beq.n	8010796 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8010760:	4b1a      	ldr	r3, [pc, #104]	@ (80107cc <vTaskGetInfo+0xc8>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	697a      	ldr	r2, [r7, #20]
 8010766:	429a      	cmp	r2, r3
 8010768:	d103      	bne.n	8010772 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2200      	movs	r2, #0
 801076e:	731a      	strb	r2, [r3, #12]
 8010770:	e018      	b.n	80107a4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	78fa      	ldrb	r2, [r7, #3]
 8010776:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8010778:	78fb      	ldrb	r3, [r7, #3]
 801077a:	2b03      	cmp	r3, #3
 801077c:	d112      	bne.n	80107a4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 801077e:	f7ff fb73 	bl	800fe68 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010786:	2b00      	cmp	r3, #0
 8010788:	d002      	beq.n	8010790 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	2202      	movs	r2, #2
 801078e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8010790:	f7ff fb78 	bl	800fe84 <xTaskResumeAll>
 8010794:	e006      	b.n	80107a4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8010796:	6978      	ldr	r0, [r7, #20]
 8010798:	f7ff fa12 	bl	800fbc0 <eTaskGetState>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d009      	beq.n	80107be <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ae:	4618      	mov	r0, r3
 80107b0:	f000 f860 	bl	8010874 <prvTaskCheckFreeStackSpace>
 80107b4:	4603      	mov	r3, r0
 80107b6:	461a      	mov	r2, r3
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80107bc:	e002      	b.n	80107c4 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	2200      	movs	r2, #0
 80107c2:	841a      	strh	r2, [r3, #32]
	}
 80107c4:	bf00      	nop
 80107c6:	3718      	adds	r7, #24
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	200019c4 	.word	0x200019c4

080107d0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b08a      	sub	sp, #40	@ 0x28
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	4613      	mov	r3, r2
 80107dc:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d03f      	beq.n	801086a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	623b      	str	r3, [r7, #32]
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	685a      	ldr	r2, [r3, #4]
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	605a      	str	r2, [r3, #4]
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	685a      	ldr	r2, [r3, #4]
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	3308      	adds	r3, #8
 8010800:	429a      	cmp	r2, r3
 8010802:	d104      	bne.n	801080e <prvListTasksWithinSingleList+0x3e>
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	685a      	ldr	r2, [r3, #4]
 801080a:	6a3b      	ldr	r3, [r7, #32]
 801080c:	605a      	str	r2, [r3, #4]
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	61bb      	str	r3, [r7, #24]
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	605a      	str	r2, [r3, #4]
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	685a      	ldr	r2, [r3, #4]
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	3308      	adds	r3, #8
 801082c:	429a      	cmp	r2, r3
 801082e:	d104      	bne.n	801083a <prvListTasksWithinSingleList+0x6a>
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	685a      	ldr	r2, [r3, #4]
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	605a      	str	r2, [r3, #4]
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8010842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010844:	4613      	mov	r3, r2
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	4413      	add	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	461a      	mov	r2, r3
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	1899      	adds	r1, r3, r2
 8010852:	79fb      	ldrb	r3, [r7, #7]
 8010854:	2201      	movs	r2, #1
 8010856:	6978      	ldr	r0, [r7, #20]
 8010858:	f7ff ff54 	bl	8010704 <vTaskGetInfo>
				uxTask++;
 801085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801085e:	3301      	adds	r3, #1
 8010860:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	429a      	cmp	r2, r3
 8010868:	d1d5      	bne.n	8010816 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801086c:	4618      	mov	r0, r3
 801086e:	3728      	adds	r7, #40	@ 0x28
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801087c:	2300      	movs	r3, #0
 801087e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8010880:	e005      	b.n	801088e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	3301      	adds	r3, #1
 8010886:	607b      	str	r3, [r7, #4]
			ulCount++;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	3301      	adds	r3, #1
 801088c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	2ba5      	cmp	r3, #165	@ 0xa5
 8010894:	d0f5      	beq.n	8010882 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	089b      	lsrs	r3, r3, #2
 801089a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	b29b      	uxth	r3, r3
	}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	3368      	adds	r3, #104	@ 0x68
 80108b8:	4618      	mov	r0, r3
 80108ba:	f002 fd8f 	bl	80133dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d108      	bne.n	80108da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108cc:	4618      	mov	r0, r3
 80108ce:	f001 faeb 	bl	8011ea8 <vPortFree>
				vPortFree( pxTCB );
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f001 fae8 	bl	8011ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80108d8:	e019      	b.n	801090e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d103      	bne.n	80108ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f001 fadf 	bl	8011ea8 <vPortFree>
	}
 80108ea:	e010      	b.n	801090e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80108f2:	2b02      	cmp	r3, #2
 80108f4:	d00b      	beq.n	801090e <prvDeleteTCB+0x62>
	__asm volatile
 80108f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108fa:	f383 8811 	msr	BASEPRI, r3
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	60fb      	str	r3, [r7, #12]
}
 8010908:	bf00      	nop
 801090a:	bf00      	nop
 801090c:	e7fd      	b.n	801090a <prvDeleteTCB+0x5e>
	}
 801090e:	bf00      	nop
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801091e:	4b0c      	ldr	r3, [pc, #48]	@ (8010950 <prvResetNextTaskUnblockTime+0x38>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d104      	bne.n	8010932 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010928:	4b0a      	ldr	r3, [pc, #40]	@ (8010954 <prvResetNextTaskUnblockTime+0x3c>)
 801092a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801092e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010930:	e008      	b.n	8010944 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010932:	4b07      	ldr	r3, [pc, #28]	@ (8010950 <prvResetNextTaskUnblockTime+0x38>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	4a04      	ldr	r2, [pc, #16]	@ (8010954 <prvResetNextTaskUnblockTime+0x3c>)
 8010942:	6013      	str	r3, [r2, #0]
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr
 8010950:	20001e50 	.word	0x20001e50
 8010954:	20001eb8 	.word	0x20001eb8

08010958 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801095e:	4b0b      	ldr	r3, [pc, #44]	@ (801098c <xTaskGetSchedulerState+0x34>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d102      	bne.n	801096c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010966:	2301      	movs	r3, #1
 8010968:	607b      	str	r3, [r7, #4]
 801096a:	e008      	b.n	801097e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801096c:	4b08      	ldr	r3, [pc, #32]	@ (8010990 <xTaskGetSchedulerState+0x38>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d102      	bne.n	801097a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010974:	2302      	movs	r3, #2
 8010976:	607b      	str	r3, [r7, #4]
 8010978:	e001      	b.n	801097e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801097a:	2300      	movs	r3, #0
 801097c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801097e:	687b      	ldr	r3, [r7, #4]
	}
 8010980:	4618      	mov	r0, r3
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr
 801098c:	20001ea4 	.word	0x20001ea4
 8010990:	20001ec0 	.word	0x20001ec0

08010994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80109a0:	2300      	movs	r3, #0
 80109a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d058      	beq.n	8010a5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80109aa:	4b2f      	ldr	r3, [pc, #188]	@ (8010a68 <xTaskPriorityDisinherit+0xd4>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	693a      	ldr	r2, [r7, #16]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d00b      	beq.n	80109cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80109b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	60fb      	str	r3, [r7, #12]
}
 80109c6:	bf00      	nop
 80109c8:	bf00      	nop
 80109ca:	e7fd      	b.n	80109c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d10b      	bne.n	80109ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80109d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	60bb      	str	r3, [r7, #8]
}
 80109e6:	bf00      	nop
 80109e8:	bf00      	nop
 80109ea:	e7fd      	b.n	80109e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d02c      	beq.n	8010a5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d128      	bne.n	8010a5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fe f8fe 	bl	800ec10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010a6c <xTaskPriorityDisinherit+0xd8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d903      	bls.n	8010a3c <xTaskPriorityDisinherit+0xa8>
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a38:	4a0c      	ldr	r2, [pc, #48]	@ (8010a6c <xTaskPriorityDisinherit+0xd8>)
 8010a3a:	6013      	str	r3, [r2, #0]
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a40:	4613      	mov	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4a09      	ldr	r2, [pc, #36]	@ (8010a70 <xTaskPriorityDisinherit+0xdc>)
 8010a4a:	441a      	add	r2, r3
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	4619      	mov	r1, r3
 8010a52:	4610      	mov	r0, r2
 8010a54:	f7fe f87f 	bl	800eb56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010a5c:	697b      	ldr	r3, [r7, #20]
	}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3718      	adds	r7, #24
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	200019c4 	.word	0x200019c4
 8010a6c:	20001ea0 	.word	0x20001ea0
 8010a70:	200019c8 	.word	0x200019c8

08010a74 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8010a7e:	6839      	ldr	r1, [r7, #0]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f002 fd74 	bl	801356e <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f7ef fc02 	bl	8000290 <strlen>
 8010a8c:	60f8      	str	r0, [r7, #12]
 8010a8e:	e007      	b.n	8010aa0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	4413      	add	r3, r2
 8010a96:	2220      	movs	r2, #32
 8010a98:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b1e      	cmp	r3, #30
 8010aa4:	d9f4      	bls.n	8010a90 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	4413      	add	r3, r2
 8010aac:	2200      	movs	r2, #0
 8010aae:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4413      	add	r3, r2
	}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
	...

08010ac0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8010ac0:	b590      	push	{r4, r7, lr}
 8010ac2:	b089      	sub	sp, #36	@ 0x24
 8010ac4:	af02      	add	r7, sp, #8
 8010ac6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010ace:	4b45      	ldr	r3, [pc, #276]	@ (8010be4 <vTaskList+0x124>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8010ad4:	4b43      	ldr	r3, [pc, #268]	@ (8010be4 <vTaskList+0x124>)
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	00db      	lsls	r3, r3, #3
 8010adc:	4413      	add	r3, r2
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f001 f913 	bl	8011d0c <pvPortMalloc>
 8010ae6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d076      	beq.n	8010bdc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8010aee:	2200      	movs	r2, #0
 8010af0:	68f9      	ldr	r1, [r7, #12]
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f7ff fa74 	bl	800ffe0 <uxTaskGetSystemState>
 8010af8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8010afa:	2300      	movs	r3, #0
 8010afc:	617b      	str	r3, [r7, #20]
 8010afe:	e066      	b.n	8010bce <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010b00:	697a      	ldr	r2, [r7, #20]
 8010b02:	4613      	mov	r3, r2
 8010b04:	00db      	lsls	r3, r3, #3
 8010b06:	4413      	add	r3, r2
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	4413      	add	r3, r2
 8010b10:	7b1b      	ldrb	r3, [r3, #12]
 8010b12:	2b04      	cmp	r3, #4
 8010b14:	d81b      	bhi.n	8010b4e <vTaskList+0x8e>
 8010b16:	a201      	add	r2, pc, #4	@ (adr r2, 8010b1c <vTaskList+0x5c>)
 8010b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1c:	08010b31 	.word	0x08010b31
 8010b20:	08010b37 	.word	0x08010b37
 8010b24:	08010b3d 	.word	0x08010b3d
 8010b28:	08010b43 	.word	0x08010b43
 8010b2c:	08010b49 	.word	0x08010b49
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8010b30:	2358      	movs	r3, #88	@ 0x58
 8010b32:	74fb      	strb	r3, [r7, #19]
										break;
 8010b34:	e00e      	b.n	8010b54 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8010b36:	2352      	movs	r3, #82	@ 0x52
 8010b38:	74fb      	strb	r3, [r7, #19]
										break;
 8010b3a:	e00b      	b.n	8010b54 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8010b3c:	2342      	movs	r3, #66	@ 0x42
 8010b3e:	74fb      	strb	r3, [r7, #19]
										break;
 8010b40:	e008      	b.n	8010b54 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8010b42:	2353      	movs	r3, #83	@ 0x53
 8010b44:	74fb      	strb	r3, [r7, #19]
										break;
 8010b46:	e005      	b.n	8010b54 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8010b48:	2344      	movs	r3, #68	@ 0x44
 8010b4a:	74fb      	strb	r3, [r7, #19]
										break;
 8010b4c:	e002      	b.n	8010b54 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	74fb      	strb	r3, [r7, #19]
										break;
 8010b52:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010b54:	697a      	ldr	r2, [r7, #20]
 8010b56:	4613      	mov	r3, r2
 8010b58:	00db      	lsls	r3, r3, #3
 8010b5a:	4413      	add	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	461a      	mov	r2, r3
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	4413      	add	r3, r2
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff ff83 	bl	8010a74 <prvWriteNameToBuffer>
 8010b6e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010b70:	7cf9      	ldrb	r1, [r7, #19]
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	4613      	mov	r3, r2
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	4413      	add	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	4413      	add	r3, r2
 8010b82:	6918      	ldr	r0, [r3, #16]
 8010b84:	697a      	ldr	r2, [r7, #20]
 8010b86:	4613      	mov	r3, r2
 8010b88:	00db      	lsls	r3, r3, #3
 8010b8a:	4413      	add	r3, r2
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	461a      	mov	r2, r3
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	4413      	add	r3, r2
 8010b94:	8c1b      	ldrh	r3, [r3, #32]
 8010b96:	461c      	mov	r4, r3
 8010b98:	697a      	ldr	r2, [r7, #20]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	4413      	add	r3, r2
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	689b      	ldr	r3, [r3, #8]
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	9400      	str	r4, [sp, #0]
 8010bae:	4603      	mov	r3, r0
 8010bb0:	460a      	mov	r2, r1
 8010bb2:	490d      	ldr	r1, [pc, #52]	@ (8010be8 <vTaskList+0x128>)
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f002 fb91 	bl	80132dc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f7ef fb68 	bl	8000290 <strlen>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	617b      	str	r3, [r7, #20]
 8010bce:	697a      	ldr	r2, [r7, #20]
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d394      	bcc.n	8010b00 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8010bd6:	68b8      	ldr	r0, [r7, #8]
 8010bd8:	f001 f966 	bl	8011ea8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010bdc:	bf00      	nop
 8010bde:	371c      	adds	r7, #28
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd90      	pop	{r4, r7, pc}
 8010be4:	20001e98 	.word	0x20001e98
 8010be8:	08015f2c 	.word	0x08015f2c

08010bec <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b088      	sub	sp, #32
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8010ce4 <vTaskGetRunTimeStats+0xf8>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8010c00:	4b38      	ldr	r3, [pc, #224]	@ (8010ce4 <vTaskGetRunTimeStats+0xf8>)
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	4613      	mov	r3, r2
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	4413      	add	r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f001 f87d 	bl	8011d0c <pvPortMalloc>
 8010c12:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d05f      	beq.n	8010cda <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010c1a:	f107 030c 	add.w	r3, r7, #12
 8010c1e:	461a      	mov	r2, r3
 8010c20:	69b9      	ldr	r1, [r7, #24]
 8010c22:	6978      	ldr	r0, [r7, #20]
 8010c24:	f7ff f9dc 	bl	800ffe0 <uxTaskGetSystemState>
 8010c28:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8010ce8 <vTaskGetRunTimeStats+0xfc>)
 8010c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c32:	095b      	lsrs	r3, r3, #5
 8010c34:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d04b      	beq.n	8010cd4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	61fb      	str	r3, [r7, #28]
 8010c40:	e044      	b.n	8010ccc <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010c42:	69fa      	ldr	r2, [r7, #28]
 8010c44:	4613      	mov	r3, r2
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	4413      	add	r3, r2
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	4413      	add	r3, r2
 8010c52:	699a      	ldr	r2, [r3, #24]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c5a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010c5c:	69fa      	ldr	r2, [r7, #28]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	00db      	lsls	r3, r3, #3
 8010c62:	4413      	add	r3, r2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	461a      	mov	r2, r3
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	4413      	add	r3, r2
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7ff feff 	bl	8010a74 <prvWriteNameToBuffer>
 8010c76:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d00e      	beq.n	8010c9c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010c7e:	69fa      	ldr	r2, [r7, #28]
 8010c80:	4613      	mov	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	4413      	add	r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	461a      	mov	r2, r3
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	699a      	ldr	r2, [r3, #24]
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	4916      	ldr	r1, [pc, #88]	@ (8010cec <vTaskGetRunTimeStats+0x100>)
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f002 fb21 	bl	80132dc <siprintf>
 8010c9a:	e00d      	b.n	8010cb8 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8010c9c:	69fa      	ldr	r2, [r7, #28]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	00db      	lsls	r3, r3, #3
 8010ca2:	4413      	add	r3, r2
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	4413      	add	r3, r2
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	490f      	ldr	r1, [pc, #60]	@ (8010cf0 <vTaskGetRunTimeStats+0x104>)
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f002 fb12 	bl	80132dc <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ef fae9 	bl	8000290 <strlen>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	61fb      	str	r3, [r7, #28]
 8010ccc:	69fa      	ldr	r2, [r7, #28]
 8010cce:	69bb      	ldr	r3, [r7, #24]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d3b6      	bcc.n	8010c42 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8010cd4:	6978      	ldr	r0, [r7, #20]
 8010cd6:	f001 f8e7 	bl	8011ea8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010cda:	bf00      	nop
 8010cdc:	3720      	adds	r7, #32
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20001e98 	.word	0x20001e98
 8010ce8:	51eb851f 	.word	0x51eb851f
 8010cec:	08015f3c 	.word	0x08015f3c
 8010cf0:	08015f48 	.word	0x08015f48

08010cf4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	607a      	str	r2, [r7, #4]
 8010d00:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010d02:	f000 fee1 	bl	8011ac8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010d06:	4b29      	ldr	r3, [pc, #164]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	d01c      	beq.n	8010d4e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010d14:	4b25      	ldr	r3, [pc, #148]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	43d2      	mvns	r2, r2
 8010d20:	400a      	ands	r2, r1
 8010d22:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010d26:	4b21      	ldr	r3, [pc, #132]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d00b      	beq.n	8010d4e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d36:	2101      	movs	r1, #1
 8010d38:	6838      	ldr	r0, [r7, #0]
 8010d3a:	f000 f9e3 	bl	8011104 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8010db0 <xTaskNotifyWait+0xbc>)
 8010d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d44:	601a      	str	r2, [r3, #0]
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010d4e:	f000 feed 	bl	8011b2c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010d52:	f000 feb9 	bl	8011ac8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d005      	beq.n	8010d68 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010d5c:	4b13      	ldr	r3, [pc, #76]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010d68:	4b10      	ldr	r3, [pc, #64]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d002      	beq.n	8010d7c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010d76:	2300      	movs	r3, #0
 8010d78:	617b      	str	r3, [r7, #20]
 8010d7a:	e00a      	b.n	8010d92 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8010d84:	68ba      	ldr	r2, [r7, #8]
 8010d86:	43d2      	mvns	r2, r2
 8010d88:	400a      	ands	r2, r1
 8010d8a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010d92:	4b06      	ldr	r3, [pc, #24]	@ (8010dac <xTaskNotifyWait+0xb8>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2200      	movs	r2, #0
 8010d98:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 8010d9c:	f000 fec6 	bl	8011b2c <vPortExitCritical>

		return xReturn;
 8010da0:	697b      	ldr	r3, [r7, #20]
	}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3718      	adds	r7, #24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	200019c4 	.word	0x200019c4
 8010db0:	e000ed04 	.word	0xe000ed04

08010db4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b08a      	sub	sp, #40	@ 0x28
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	603b      	str	r3, [r7, #0]
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d10b      	bne.n	8010de6 <xTaskGenericNotify+0x32>
	__asm volatile
 8010dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	61bb      	str	r3, [r7, #24]
}
 8010de0:	bf00      	nop
 8010de2:	bf00      	nop
 8010de4:	e7fd      	b.n	8010de2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010dea:	f000 fe6d 	bl	8011ac8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d004      	beq.n	8010dfe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010dfe:	6a3b      	ldr	r3, [r7, #32]
 8010e00:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010e04:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	2202      	movs	r2, #2
 8010e0a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	2b04      	cmp	r3, #4
 8010e12:	d82e      	bhi.n	8010e72 <xTaskGenericNotify+0xbe>
 8010e14:	a201      	add	r2, pc, #4	@ (adr r2, 8010e1c <xTaskGenericNotify+0x68>)
 8010e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1a:	bf00      	nop
 8010e1c:	08010e97 	.word	0x08010e97
 8010e20:	08010e31 	.word	0x08010e31
 8010e24:	08010e43 	.word	0x08010e43
 8010e28:	08010e53 	.word	0x08010e53
 8010e2c:	08010e5d 	.word	0x08010e5d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010e30:	6a3b      	ldr	r3, [r7, #32]
 8010e32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	431a      	orrs	r2, r3
 8010e3a:	6a3b      	ldr	r3, [r7, #32]
 8010e3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010e40:	e02c      	b.n	8010e9c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010e42:	6a3b      	ldr	r3, [r7, #32]
 8010e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010e48:	1c5a      	adds	r2, r3, #1
 8010e4a:	6a3b      	ldr	r3, [r7, #32]
 8010e4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010e50:	e024      	b.n	8010e9c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010e52:	6a3b      	ldr	r3, [r7, #32]
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010e5a:	e01f      	b.n	8010e9c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010e5c:	7ffb      	ldrb	r3, [r7, #31]
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d004      	beq.n	8010e6c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010e62:	6a3b      	ldr	r3, [r7, #32]
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010e6a:	e017      	b.n	8010e9c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8010e70:	e014      	b.n	8010e9c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010e72:	6a3b      	ldr	r3, [r7, #32]
 8010e74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010e7c:	d00d      	beq.n	8010e9a <xTaskGenericNotify+0xe6>
	__asm volatile
 8010e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	617b      	str	r3, [r7, #20]
}
 8010e90:	bf00      	nop
 8010e92:	bf00      	nop
 8010e94:	e7fd      	b.n	8010e92 <xTaskGenericNotify+0xde>
					break;
 8010e96:	bf00      	nop
 8010e98:	e000      	b.n	8010e9c <xTaskGenericNotify+0xe8>

					break;
 8010e9a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010e9c:	7ffb      	ldrb	r3, [r7, #31]
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d13b      	bne.n	8010f1a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	3304      	adds	r3, #4
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fd feb2 	bl	800ec10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8010f28 <xTaskGenericNotify+0x174>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d903      	bls.n	8010ec0 <xTaskGenericNotify+0x10c>
 8010eb8:	6a3b      	ldr	r3, [r7, #32]
 8010eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8010f28 <xTaskGenericNotify+0x174>)
 8010ebe:	6013      	str	r3, [r2, #0]
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	4413      	add	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4a17      	ldr	r2, [pc, #92]	@ (8010f2c <xTaskGenericNotify+0x178>)
 8010ece:	441a      	add	r2, r3
 8010ed0:	6a3b      	ldr	r3, [r7, #32]
 8010ed2:	3304      	adds	r3, #4
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	f7fd fe3d 	bl	800eb56 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010edc:	6a3b      	ldr	r3, [r7, #32]
 8010ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00b      	beq.n	8010efc <xTaskGenericNotify+0x148>
	__asm volatile
 8010ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee8:	f383 8811 	msr	BASEPRI, r3
 8010eec:	f3bf 8f6f 	isb	sy
 8010ef0:	f3bf 8f4f 	dsb	sy
 8010ef4:	613b      	str	r3, [r7, #16]
}
 8010ef6:	bf00      	nop
 8010ef8:	bf00      	nop
 8010efa:	e7fd      	b.n	8010ef8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f00:	4b0b      	ldr	r3, [pc, #44]	@ (8010f30 <xTaskGenericNotify+0x17c>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d907      	bls.n	8010f1a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8010f34 <xTaskGenericNotify+0x180>)
 8010f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010f1a:	f000 fe07 	bl	8011b2c <vPortExitCritical>

		return xReturn;
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3728      	adds	r7, #40	@ 0x28
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	20001ea0 	.word	0x20001ea0
 8010f2c:	200019c8 	.word	0x200019c8
 8010f30:	200019c4 	.word	0x200019c4
 8010f34:	e000ed04 	.word	0xe000ed04

08010f38 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08e      	sub	sp, #56	@ 0x38
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	603b      	str	r3, [r7, #0]
 8010f44:	4613      	mov	r3, r2
 8010f46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d10b      	bne.n	8010f6a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8010f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f56:	f383 8811 	msr	BASEPRI, r3
 8010f5a:	f3bf 8f6f 	isb	sy
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010f64:	bf00      	nop
 8010f66:	bf00      	nop
 8010f68:	e7fd      	b.n	8010f66 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f6a:	f000 fe8d 	bl	8011c88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8010f72:	f3ef 8211 	mrs	r2, BASEPRI
 8010f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f7a:	f383 8811 	msr	BASEPRI, r3
 8010f7e:	f3bf 8f6f 	isb	sy
 8010f82:	f3bf 8f4f 	dsb	sy
 8010f86:	623a      	str	r2, [r7, #32]
 8010f88:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010f8a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d004      	beq.n	8010f9e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f96:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa0:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010faa:	2202      	movs	r2, #2
 8010fac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 8010fb0:	79fb      	ldrb	r3, [r7, #7]
 8010fb2:	2b04      	cmp	r3, #4
 8010fb4:	d82e      	bhi.n	8011014 <xTaskGenericNotifyFromISR+0xdc>
 8010fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8010fbc <xTaskGenericNotifyFromISR+0x84>)
 8010fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fbc:	08011039 	.word	0x08011039
 8010fc0:	08010fd1 	.word	0x08010fd1
 8010fc4:	08010fe3 	.word	0x08010fe3
 8010fc8:	08010ff3 	.word	0x08010ff3
 8010fcc:	08010ffd 	.word	0x08010ffd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fd2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	431a      	orrs	r2, r3
 8010fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010fe0:	e02d      	b.n	801103e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010ff0:	e025      	b.n	801103e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010ffa:	e020      	b.n	801103e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011000:	2b02      	cmp	r3, #2
 8011002:	d004      	beq.n	801100e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011006:	68ba      	ldr	r2, [r7, #8]
 8011008:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801100c:	e017      	b.n	801103e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 801100e:	2300      	movs	r3, #0
 8011010:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8011012:	e014      	b.n	801103e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801101a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801101e:	d00d      	beq.n	801103c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	61bb      	str	r3, [r7, #24]
}
 8011032:	bf00      	nop
 8011034:	bf00      	nop
 8011036:	e7fd      	b.n	8011034 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011038:	bf00      	nop
 801103a:	e000      	b.n	801103e <xTaskGenericNotifyFromISR+0x106>
					break;
 801103c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801103e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011042:	2b01      	cmp	r3, #1
 8011044:	d147      	bne.n	80110d6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00b      	beq.n	8011066 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	617b      	str	r3, [r7, #20]
}
 8011060:	bf00      	nop
 8011062:	bf00      	nop
 8011064:	e7fd      	b.n	8011062 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011066:	4b21      	ldr	r3, [pc, #132]	@ (80110ec <xTaskGenericNotifyFromISR+0x1b4>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d11d      	bne.n	80110aa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801106e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011070:	3304      	adds	r3, #4
 8011072:	4618      	mov	r0, r3
 8011074:	f7fd fdcc 	bl	800ec10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801107a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801107c:	4b1c      	ldr	r3, [pc, #112]	@ (80110f0 <xTaskGenericNotifyFromISR+0x1b8>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	429a      	cmp	r2, r3
 8011082:	d903      	bls.n	801108c <xTaskGenericNotifyFromISR+0x154>
 8011084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011088:	4a19      	ldr	r2, [pc, #100]	@ (80110f0 <xTaskGenericNotifyFromISR+0x1b8>)
 801108a:	6013      	str	r3, [r2, #0]
 801108c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801108e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011090:	4613      	mov	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	4413      	add	r3, r2
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4a16      	ldr	r2, [pc, #88]	@ (80110f4 <xTaskGenericNotifyFromISR+0x1bc>)
 801109a:	441a      	add	r2, r3
 801109c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801109e:	3304      	adds	r3, #4
 80110a0:	4619      	mov	r1, r3
 80110a2:	4610      	mov	r0, r2
 80110a4:	f7fd fd57 	bl	800eb56 <vListInsertEnd>
 80110a8:	e005      	b.n	80110b6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80110aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ac:	3318      	adds	r3, #24
 80110ae:	4619      	mov	r1, r3
 80110b0:	4811      	ldr	r0, [pc, #68]	@ (80110f8 <xTaskGenericNotifyFromISR+0x1c0>)
 80110b2:	f7fd fd50 	bl	800eb56 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80110b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ba:	4b10      	ldr	r3, [pc, #64]	@ (80110fc <xTaskGenericNotifyFromISR+0x1c4>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d908      	bls.n	80110d6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80110c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d002      	beq.n	80110d0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80110ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80110cc:	2201      	movs	r2, #1
 80110ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80110d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011100 <xTaskGenericNotifyFromISR+0x1c8>)
 80110d2:	2201      	movs	r2, #1
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	f383 8811 	msr	BASEPRI, r3
}
 80110e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80110e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3738      	adds	r7, #56	@ 0x38
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	20001ec0 	.word	0x20001ec0
 80110f0:	20001ea0 	.word	0x20001ea0
 80110f4:	200019c8 	.word	0x200019c8
 80110f8:	20001e58 	.word	0x20001e58
 80110fc:	200019c4 	.word	0x200019c4
 8011100:	20001eac 	.word	0x20001eac

08011104 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801110e:	4b21      	ldr	r3, [pc, #132]	@ (8011194 <prvAddCurrentTaskToDelayedList+0x90>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011114:	4b20      	ldr	r3, [pc, #128]	@ (8011198 <prvAddCurrentTaskToDelayedList+0x94>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	3304      	adds	r3, #4
 801111a:	4618      	mov	r0, r3
 801111c:	f7fd fd78 	bl	800ec10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011126:	d10a      	bne.n	801113e <prvAddCurrentTaskToDelayedList+0x3a>
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d007      	beq.n	801113e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801112e:	4b1a      	ldr	r3, [pc, #104]	@ (8011198 <prvAddCurrentTaskToDelayedList+0x94>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	3304      	adds	r3, #4
 8011134:	4619      	mov	r1, r3
 8011136:	4819      	ldr	r0, [pc, #100]	@ (801119c <prvAddCurrentTaskToDelayedList+0x98>)
 8011138:	f7fd fd0d 	bl	800eb56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801113c:	e026      	b.n	801118c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4413      	add	r3, r2
 8011144:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011146:	4b14      	ldr	r3, [pc, #80]	@ (8011198 <prvAddCurrentTaskToDelayedList+0x94>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	68ba      	ldr	r2, [r7, #8]
 801114c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	429a      	cmp	r2, r3
 8011154:	d209      	bcs.n	801116a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011156:	4b12      	ldr	r3, [pc, #72]	@ (80111a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	4b0f      	ldr	r3, [pc, #60]	@ (8011198 <prvAddCurrentTaskToDelayedList+0x94>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	3304      	adds	r3, #4
 8011160:	4619      	mov	r1, r3
 8011162:	4610      	mov	r0, r2
 8011164:	f7fd fd1b 	bl	800eb9e <vListInsert>
}
 8011168:	e010      	b.n	801118c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801116a:	4b0e      	ldr	r3, [pc, #56]	@ (80111a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801116c:	681a      	ldr	r2, [r3, #0]
 801116e:	4b0a      	ldr	r3, [pc, #40]	@ (8011198 <prvAddCurrentTaskToDelayedList+0x94>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	3304      	adds	r3, #4
 8011174:	4619      	mov	r1, r3
 8011176:	4610      	mov	r0, r2
 8011178:	f7fd fd11 	bl	800eb9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801117c:	4b0a      	ldr	r3, [pc, #40]	@ (80111a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	429a      	cmp	r2, r3
 8011184:	d202      	bcs.n	801118c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011186:	4a08      	ldr	r2, [pc, #32]	@ (80111a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	6013      	str	r3, [r2, #0]
}
 801118c:	bf00      	nop
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	20001e9c 	.word	0x20001e9c
 8011198:	200019c4 	.word	0x200019c4
 801119c:	20001e84 	.word	0x20001e84
 80111a0:	20001e54 	.word	0x20001e54
 80111a4:	20001e50 	.word	0x20001e50
 80111a8:	20001eb8 	.word	0x20001eb8

080111ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b08a      	sub	sp, #40	@ 0x28
 80111b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80111b2:	2300      	movs	r3, #0
 80111b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80111b6:	f000 fb13 	bl	80117e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80111ba:	4b1d      	ldr	r3, [pc, #116]	@ (8011230 <xTimerCreateTimerTask+0x84>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d021      	beq.n	8011206 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80111c2:	2300      	movs	r3, #0
 80111c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80111c6:	2300      	movs	r3, #0
 80111c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80111ca:	1d3a      	adds	r2, r7, #4
 80111cc:	f107 0108 	add.w	r1, r7, #8
 80111d0:	f107 030c 	add.w	r3, r7, #12
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fd fc77 	bl	800eac8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80111da:	6879      	ldr	r1, [r7, #4]
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	9202      	str	r2, [sp, #8]
 80111e2:	9301      	str	r3, [sp, #4]
 80111e4:	2302      	movs	r3, #2
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	2300      	movs	r3, #0
 80111ea:	460a      	mov	r2, r1
 80111ec:	4911      	ldr	r1, [pc, #68]	@ (8011234 <xTimerCreateTimerTask+0x88>)
 80111ee:	4812      	ldr	r0, [pc, #72]	@ (8011238 <xTimerCreateTimerTask+0x8c>)
 80111f0:	f7fe faf0 	bl	800f7d4 <xTaskCreateStatic>
 80111f4:	4603      	mov	r3, r0
 80111f6:	4a11      	ldr	r2, [pc, #68]	@ (801123c <xTimerCreateTimerTask+0x90>)
 80111f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80111fa:	4b10      	ldr	r3, [pc, #64]	@ (801123c <xTimerCreateTimerTask+0x90>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011202:	2301      	movs	r3, #1
 8011204:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d10b      	bne.n	8011224 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801120c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011210:	f383 8811 	msr	BASEPRI, r3
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	613b      	str	r3, [r7, #16]
}
 801121e:	bf00      	nop
 8011220:	bf00      	nop
 8011222:	e7fd      	b.n	8011220 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011224:	697b      	ldr	r3, [r7, #20]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3718      	adds	r7, #24
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	20001efc 	.word	0x20001efc
 8011234:	08015f54 	.word	0x08015f54
 8011238:	08011379 	.word	0x08011379
 801123c:	20001f00 	.word	0x20001f00

08011240 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08a      	sub	sp, #40	@ 0x28
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
 801124c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801124e:	2300      	movs	r3, #0
 8011250:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d10b      	bne.n	8011270 <xTimerGenericCommand+0x30>
	__asm volatile
 8011258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801125c:	f383 8811 	msr	BASEPRI, r3
 8011260:	f3bf 8f6f 	isb	sy
 8011264:	f3bf 8f4f 	dsb	sy
 8011268:	623b      	str	r3, [r7, #32]
}
 801126a:	bf00      	nop
 801126c:	bf00      	nop
 801126e:	e7fd      	b.n	801126c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011270:	4b19      	ldr	r3, [pc, #100]	@ (80112d8 <xTimerGenericCommand+0x98>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d02a      	beq.n	80112ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	2b05      	cmp	r3, #5
 8011288:	dc18      	bgt.n	80112bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801128a:	f7ff fb65 	bl	8010958 <xTaskGetSchedulerState>
 801128e:	4603      	mov	r3, r0
 8011290:	2b02      	cmp	r3, #2
 8011292:	d109      	bne.n	80112a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011294:	4b10      	ldr	r3, [pc, #64]	@ (80112d8 <xTimerGenericCommand+0x98>)
 8011296:	6818      	ldr	r0, [r3, #0]
 8011298:	f107 0110 	add.w	r1, r7, #16
 801129c:	2300      	movs	r3, #0
 801129e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112a0:	f7fd fe26 	bl	800eef0 <xQueueGenericSend>
 80112a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80112a6:	e012      	b.n	80112ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80112a8:	4b0b      	ldr	r3, [pc, #44]	@ (80112d8 <xTimerGenericCommand+0x98>)
 80112aa:	6818      	ldr	r0, [r3, #0]
 80112ac:	f107 0110 	add.w	r1, r7, #16
 80112b0:	2300      	movs	r3, #0
 80112b2:	2200      	movs	r2, #0
 80112b4:	f7fd fe1c 	bl	800eef0 <xQueueGenericSend>
 80112b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80112ba:	e008      	b.n	80112ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80112bc:	4b06      	ldr	r3, [pc, #24]	@ (80112d8 <xTimerGenericCommand+0x98>)
 80112be:	6818      	ldr	r0, [r3, #0]
 80112c0:	f107 0110 	add.w	r1, r7, #16
 80112c4:	2300      	movs	r3, #0
 80112c6:	683a      	ldr	r2, [r7, #0]
 80112c8:	f7fd ff14 	bl	800f0f4 <xQueueGenericSendFromISR>
 80112cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80112ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3728      	adds	r7, #40	@ 0x28
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	20001efc 	.word	0x20001efc

080112dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af02      	add	r7, sp, #8
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112e6:	4b23      	ldr	r3, [pc, #140]	@ (8011374 <prvProcessExpiredTimer+0x98>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	3304      	adds	r3, #4
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fd fc8b 	bl	800ec10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	d023      	beq.n	8011350 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	699a      	ldr	r2, [r3, #24]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	18d1      	adds	r1, r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	683a      	ldr	r2, [r7, #0]
 8011314:	6978      	ldr	r0, [r7, #20]
 8011316:	f000 f8d5 	bl	80114c4 <prvInsertTimerInActiveList>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d020      	beq.n	8011362 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011320:	2300      	movs	r3, #0
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	2300      	movs	r3, #0
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	2100      	movs	r1, #0
 801132a:	6978      	ldr	r0, [r7, #20]
 801132c:	f7ff ff88 	bl	8011240 <xTimerGenericCommand>
 8011330:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d114      	bne.n	8011362 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801133c:	f383 8811 	msr	BASEPRI, r3
 8011340:	f3bf 8f6f 	isb	sy
 8011344:	f3bf 8f4f 	dsb	sy
 8011348:	60fb      	str	r3, [r7, #12]
}
 801134a:	bf00      	nop
 801134c:	bf00      	nop
 801134e:	e7fd      	b.n	801134c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011356:	f023 0301 	bic.w	r3, r3, #1
 801135a:	b2da      	uxtb	r2, r3
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	6978      	ldr	r0, [r7, #20]
 8011368:	4798      	blx	r3
}
 801136a:	bf00      	nop
 801136c:	3718      	adds	r7, #24
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	20001ef4 	.word	0x20001ef4

08011378 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011380:	f107 0308 	add.w	r3, r7, #8
 8011384:	4618      	mov	r0, r3
 8011386:	f000 f859 	bl	801143c <prvGetNextExpireTime>
 801138a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	4619      	mov	r1, r3
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f000 f805 	bl	80113a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011396:	f000 f8d7 	bl	8011548 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801139a:	bf00      	nop
 801139c:	e7f0      	b.n	8011380 <prvTimerTask+0x8>
	...

080113a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80113aa:	f7fe fd5d 	bl	800fe68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113ae:	f107 0308 	add.w	r3, r7, #8
 80113b2:	4618      	mov	r0, r3
 80113b4:	f000 f866 	bl	8011484 <prvSampleTimeNow>
 80113b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d130      	bne.n	8011422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d10a      	bne.n	80113dc <prvProcessTimerOrBlockTask+0x3c>
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d806      	bhi.n	80113dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80113ce:	f7fe fd59 	bl	800fe84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80113d2:	68f9      	ldr	r1, [r7, #12]
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff ff81 	bl	80112dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80113da:	e024      	b.n	8011426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d008      	beq.n	80113f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80113e2:	4b13      	ldr	r3, [pc, #76]	@ (8011430 <prvProcessTimerOrBlockTask+0x90>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d101      	bne.n	80113f0 <prvProcessTimerOrBlockTask+0x50>
 80113ec:	2301      	movs	r3, #1
 80113ee:	e000      	b.n	80113f2 <prvProcessTimerOrBlockTask+0x52>
 80113f0:	2300      	movs	r3, #0
 80113f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80113f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011434 <prvProcessTimerOrBlockTask+0x94>)
 80113f6:	6818      	ldr	r0, [r3, #0]
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	1ad3      	subs	r3, r2, r3
 80113fe:	683a      	ldr	r2, [r7, #0]
 8011400:	4619      	mov	r1, r3
 8011402:	f7fe f9b3 	bl	800f76c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011406:	f7fe fd3d 	bl	800fe84 <xTaskResumeAll>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d10a      	bne.n	8011426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011410:	4b09      	ldr	r3, [pc, #36]	@ (8011438 <prvProcessTimerOrBlockTask+0x98>)
 8011412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	f3bf 8f4f 	dsb	sy
 801141c:	f3bf 8f6f 	isb	sy
}
 8011420:	e001      	b.n	8011426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011422:	f7fe fd2f 	bl	800fe84 <xTaskResumeAll>
}
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20001ef8 	.word	0x20001ef8
 8011434:	20001efc 	.word	0x20001efc
 8011438:	e000ed04 	.word	0xe000ed04

0801143c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801143c:	b480      	push	{r7}
 801143e:	b085      	sub	sp, #20
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011444:	4b0e      	ldr	r3, [pc, #56]	@ (8011480 <prvGetNextExpireTime+0x44>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d101      	bne.n	8011452 <prvGetNextExpireTime+0x16>
 801144e:	2201      	movs	r2, #1
 8011450:	e000      	b.n	8011454 <prvGetNextExpireTime+0x18>
 8011452:	2200      	movs	r2, #0
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d105      	bne.n	801146c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011460:	4b07      	ldr	r3, [pc, #28]	@ (8011480 <prvGetNextExpireTime+0x44>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	60fb      	str	r3, [r7, #12]
 801146a:	e001      	b.n	8011470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801146c:	2300      	movs	r3, #0
 801146e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011470:	68fb      	ldr	r3, [r7, #12]
}
 8011472:	4618      	mov	r0, r3
 8011474:	3714      	adds	r7, #20
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	20001ef4 	.word	0x20001ef4

08011484 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801148c:	f7fe fd98 	bl	800ffc0 <xTaskGetTickCount>
 8011490:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011492:	4b0b      	ldr	r3, [pc, #44]	@ (80114c0 <prvSampleTimeNow+0x3c>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	429a      	cmp	r2, r3
 801149a:	d205      	bcs.n	80114a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801149c:	f000 f93a 	bl	8011714 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2201      	movs	r2, #1
 80114a4:	601a      	str	r2, [r3, #0]
 80114a6:	e002      	b.n	80114ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80114ae:	4a04      	ldr	r2, [pc, #16]	@ (80114c0 <prvSampleTimeNow+0x3c>)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80114b4:	68fb      	ldr	r3, [r7, #12]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	20001f04 	.word	0x20001f04

080114c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b086      	sub	sp, #24
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	607a      	str	r2, [r7, #4]
 80114d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80114d2:	2300      	movs	r3, #0
 80114d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	68ba      	ldr	r2, [r7, #8]
 80114da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	68fa      	ldr	r2, [r7, #12]
 80114e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80114e2:	68ba      	ldr	r2, [r7, #8]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d812      	bhi.n	8011510 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	1ad2      	subs	r2, r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	699b      	ldr	r3, [r3, #24]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d302      	bcc.n	80114fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80114f8:	2301      	movs	r3, #1
 80114fa:	617b      	str	r3, [r7, #20]
 80114fc:	e01b      	b.n	8011536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80114fe:	4b10      	ldr	r3, [pc, #64]	@ (8011540 <prvInsertTimerInActiveList+0x7c>)
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	3304      	adds	r3, #4
 8011506:	4619      	mov	r1, r3
 8011508:	4610      	mov	r0, r2
 801150a:	f7fd fb48 	bl	800eb9e <vListInsert>
 801150e:	e012      	b.n	8011536 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	429a      	cmp	r2, r3
 8011516:	d206      	bcs.n	8011526 <prvInsertTimerInActiveList+0x62>
 8011518:	68ba      	ldr	r2, [r7, #8]
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	429a      	cmp	r2, r3
 801151e:	d302      	bcc.n	8011526 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011520:	2301      	movs	r3, #1
 8011522:	617b      	str	r3, [r7, #20]
 8011524:	e007      	b.n	8011536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011526:	4b07      	ldr	r3, [pc, #28]	@ (8011544 <prvInsertTimerInActiveList+0x80>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	3304      	adds	r3, #4
 801152e:	4619      	mov	r1, r3
 8011530:	4610      	mov	r0, r2
 8011532:	f7fd fb34 	bl	800eb9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011536:	697b      	ldr	r3, [r7, #20]
}
 8011538:	4618      	mov	r0, r3
 801153a:	3718      	adds	r7, #24
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	20001ef8 	.word	0x20001ef8
 8011544:	20001ef4 	.word	0x20001ef4

08011548 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b08e      	sub	sp, #56	@ 0x38
 801154c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801154e:	e0ce      	b.n	80116ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	da19      	bge.n	801158a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011556:	1d3b      	adds	r3, r7, #4
 8011558:	3304      	adds	r3, #4
 801155a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801155c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155e:	2b00      	cmp	r3, #0
 8011560:	d10b      	bne.n	801157a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011566:	f383 8811 	msr	BASEPRI, r3
 801156a:	f3bf 8f6f 	isb	sy
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	61fb      	str	r3, [r7, #28]
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop
 8011578:	e7fd      	b.n	8011576 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011580:	6850      	ldr	r0, [r2, #4]
 8011582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011584:	6892      	ldr	r2, [r2, #8]
 8011586:	4611      	mov	r1, r2
 8011588:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	f2c0 80ae 	blt.w	80116ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d004      	beq.n	80115a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801159e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115a0:	3304      	adds	r3, #4
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fd fb34 	bl	800ec10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115a8:	463b      	mov	r3, r7
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7ff ff6a 	bl	8011484 <prvSampleTimeNow>
 80115b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2b09      	cmp	r3, #9
 80115b6:	f200 8097 	bhi.w	80116e8 <prvProcessReceivedCommands+0x1a0>
 80115ba:	a201      	add	r2, pc, #4	@ (adr r2, 80115c0 <prvProcessReceivedCommands+0x78>)
 80115bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c0:	080115e9 	.word	0x080115e9
 80115c4:	080115e9 	.word	0x080115e9
 80115c8:	080115e9 	.word	0x080115e9
 80115cc:	0801165f 	.word	0x0801165f
 80115d0:	08011673 	.word	0x08011673
 80115d4:	080116bf 	.word	0x080116bf
 80115d8:	080115e9 	.word	0x080115e9
 80115dc:	080115e9 	.word	0x080115e9
 80115e0:	0801165f 	.word	0x0801165f
 80115e4:	08011673 	.word	0x08011673
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80115ee:	f043 0301 	orr.w	r3, r3, #1
 80115f2:	b2da      	uxtb	r2, r3
 80115f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80115fa:	68ba      	ldr	r2, [r7, #8]
 80115fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	18d1      	adds	r1, r2, r3
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011608:	f7ff ff5c 	bl	80114c4 <prvInsertTimerInActiveList>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d06c      	beq.n	80116ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011614:	6a1b      	ldr	r3, [r3, #32]
 8011616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011618:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801161c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011620:	f003 0304 	and.w	r3, r3, #4
 8011624:	2b00      	cmp	r3, #0
 8011626:	d061      	beq.n	80116ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801162c:	699b      	ldr	r3, [r3, #24]
 801162e:	441a      	add	r2, r3
 8011630:	2300      	movs	r3, #0
 8011632:	9300      	str	r3, [sp, #0]
 8011634:	2300      	movs	r3, #0
 8011636:	2100      	movs	r1, #0
 8011638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801163a:	f7ff fe01 	bl	8011240 <xTimerGenericCommand>
 801163e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d152      	bne.n	80116ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801164a:	f383 8811 	msr	BASEPRI, r3
 801164e:	f3bf 8f6f 	isb	sy
 8011652:	f3bf 8f4f 	dsb	sy
 8011656:	61bb      	str	r3, [r7, #24]
}
 8011658:	bf00      	nop
 801165a:	bf00      	nop
 801165c:	e7fd      	b.n	801165a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801165e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011664:	f023 0301 	bic.w	r3, r3, #1
 8011668:	b2da      	uxtb	r2, r3
 801166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801166c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011670:	e03d      	b.n	80116ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011678:	f043 0301 	orr.w	r3, r3, #1
 801167c:	b2da      	uxtb	r2, r3
 801167e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011688:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801168a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801168c:	699b      	ldr	r3, [r3, #24]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d10b      	bne.n	80116aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011696:	f383 8811 	msr	BASEPRI, r3
 801169a:	f3bf 8f6f 	isb	sy
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	617b      	str	r3, [r7, #20]
}
 80116a4:	bf00      	nop
 80116a6:	bf00      	nop
 80116a8:	e7fd      	b.n	80116a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80116aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ac:	699a      	ldr	r2, [r3, #24]
 80116ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b0:	18d1      	adds	r1, r2, r3
 80116b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80116b8:	f7ff ff04 	bl	80114c4 <prvInsertTimerInActiveList>
					break;
 80116bc:	e017      	b.n	80116ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80116be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80116c4:	f003 0302 	and.w	r3, r3, #2
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d103      	bne.n	80116d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80116cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80116ce:	f000 fbeb 	bl	8011ea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80116d2:	e00c      	b.n	80116ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80116d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80116da:	f023 0301 	bic.w	r3, r3, #1
 80116de:	b2da      	uxtb	r2, r3
 80116e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80116e6:	e002      	b.n	80116ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80116e8:	bf00      	nop
 80116ea:	e000      	b.n	80116ee <prvProcessReceivedCommands+0x1a6>
					break;
 80116ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116ee:	4b08      	ldr	r3, [pc, #32]	@ (8011710 <prvProcessReceivedCommands+0x1c8>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	1d39      	adds	r1, r7, #4
 80116f4:	2200      	movs	r2, #0
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fd fd9a 	bl	800f230 <xQueueReceive>
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f47f af26 	bne.w	8011550 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011704:	bf00      	nop
 8011706:	bf00      	nop
 8011708:	3730      	adds	r7, #48	@ 0x30
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	20001efc 	.word	0x20001efc

08011714 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b088      	sub	sp, #32
 8011718:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801171a:	e049      	b.n	80117b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801171c:	4b2e      	ldr	r3, [pc, #184]	@ (80117d8 <prvSwitchTimerLists+0xc4>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011726:	4b2c      	ldr	r3, [pc, #176]	@ (80117d8 <prvSwitchTimerLists+0xc4>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	3304      	adds	r3, #4
 8011734:	4618      	mov	r0, r3
 8011736:	f7fd fa6b 	bl	800ec10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6a1b      	ldr	r3, [r3, #32]
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011748:	f003 0304 	and.w	r3, r3, #4
 801174c:	2b00      	cmp	r3, #0
 801174e:	d02f      	beq.n	80117b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	699b      	ldr	r3, [r3, #24]
 8011754:	693a      	ldr	r2, [r7, #16]
 8011756:	4413      	add	r3, r2
 8011758:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	429a      	cmp	r2, r3
 8011760:	d90e      	bls.n	8011780 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	68ba      	ldr	r2, [r7, #8]
 8011766:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801176e:	4b1a      	ldr	r3, [pc, #104]	@ (80117d8 <prvSwitchTimerLists+0xc4>)
 8011770:	681a      	ldr	r2, [r3, #0]
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	3304      	adds	r3, #4
 8011776:	4619      	mov	r1, r3
 8011778:	4610      	mov	r0, r2
 801177a:	f7fd fa10 	bl	800eb9e <vListInsert>
 801177e:	e017      	b.n	80117b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011780:	2300      	movs	r3, #0
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	2300      	movs	r3, #0
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	2100      	movs	r1, #0
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f7ff fd58 	bl	8011240 <xTimerGenericCommand>
 8011790:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d10b      	bne.n	80117b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	603b      	str	r3, [r7, #0]
}
 80117aa:	bf00      	nop
 80117ac:	bf00      	nop
 80117ae:	e7fd      	b.n	80117ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80117b0:	4b09      	ldr	r3, [pc, #36]	@ (80117d8 <prvSwitchTimerLists+0xc4>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d1b0      	bne.n	801171c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80117ba:	4b07      	ldr	r3, [pc, #28]	@ (80117d8 <prvSwitchTimerLists+0xc4>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80117c0:	4b06      	ldr	r3, [pc, #24]	@ (80117dc <prvSwitchTimerLists+0xc8>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a04      	ldr	r2, [pc, #16]	@ (80117d8 <prvSwitchTimerLists+0xc4>)
 80117c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80117c8:	4a04      	ldr	r2, [pc, #16]	@ (80117dc <prvSwitchTimerLists+0xc8>)
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	6013      	str	r3, [r2, #0]
}
 80117ce:	bf00      	nop
 80117d0:	3718      	adds	r7, #24
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20001ef4 	.word	0x20001ef4
 80117dc:	20001ef8 	.word	0x20001ef8

080117e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80117e6:	f000 f96f 	bl	8011ac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80117ea:	4b15      	ldr	r3, [pc, #84]	@ (8011840 <prvCheckForValidListAndQueue+0x60>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d120      	bne.n	8011834 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80117f2:	4814      	ldr	r0, [pc, #80]	@ (8011844 <prvCheckForValidListAndQueue+0x64>)
 80117f4:	f7fd f982 	bl	800eafc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80117f8:	4813      	ldr	r0, [pc, #76]	@ (8011848 <prvCheckForValidListAndQueue+0x68>)
 80117fa:	f7fd f97f 	bl	800eafc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80117fe:	4b13      	ldr	r3, [pc, #76]	@ (801184c <prvCheckForValidListAndQueue+0x6c>)
 8011800:	4a10      	ldr	r2, [pc, #64]	@ (8011844 <prvCheckForValidListAndQueue+0x64>)
 8011802:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011804:	4b12      	ldr	r3, [pc, #72]	@ (8011850 <prvCheckForValidListAndQueue+0x70>)
 8011806:	4a10      	ldr	r2, [pc, #64]	@ (8011848 <prvCheckForValidListAndQueue+0x68>)
 8011808:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801180a:	2300      	movs	r3, #0
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	4b11      	ldr	r3, [pc, #68]	@ (8011854 <prvCheckForValidListAndQueue+0x74>)
 8011810:	4a11      	ldr	r2, [pc, #68]	@ (8011858 <prvCheckForValidListAndQueue+0x78>)
 8011812:	2110      	movs	r1, #16
 8011814:	200a      	movs	r0, #10
 8011816:	f7fd fa8f 	bl	800ed38 <xQueueGenericCreateStatic>
 801181a:	4603      	mov	r3, r0
 801181c:	4a08      	ldr	r2, [pc, #32]	@ (8011840 <prvCheckForValidListAndQueue+0x60>)
 801181e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011820:	4b07      	ldr	r3, [pc, #28]	@ (8011840 <prvCheckForValidListAndQueue+0x60>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d005      	beq.n	8011834 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011828:	4b05      	ldr	r3, [pc, #20]	@ (8011840 <prvCheckForValidListAndQueue+0x60>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	490b      	ldr	r1, [pc, #44]	@ (801185c <prvCheckForValidListAndQueue+0x7c>)
 801182e:	4618      	mov	r0, r3
 8011830:	f7fd ff72 	bl	800f718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011834:	f000 f97a 	bl	8011b2c <vPortExitCritical>
}
 8011838:	bf00      	nop
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	20001efc 	.word	0x20001efc
 8011844:	20001ecc 	.word	0x20001ecc
 8011848:	20001ee0 	.word	0x20001ee0
 801184c:	20001ef4 	.word	0x20001ef4
 8011850:	20001ef8 	.word	0x20001ef8
 8011854:	20001fa8 	.word	0x20001fa8
 8011858:	20001f08 	.word	0x20001f08
 801185c:	08015f5c 	.word	0x08015f5c

08011860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011860:	b480      	push	{r7}
 8011862:	b085      	sub	sp, #20
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	3b04      	subs	r3, #4
 8011870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	3b04      	subs	r3, #4
 801187e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	f023 0201 	bic.w	r2, r3, #1
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	3b04      	subs	r3, #4
 801188e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011890:	4a0c      	ldr	r2, [pc, #48]	@ (80118c4 <pxPortInitialiseStack+0x64>)
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	3b14      	subs	r3, #20
 801189a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	3b04      	subs	r3, #4
 80118a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f06f 0202 	mvn.w	r2, #2
 80118ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	3b20      	subs	r3, #32
 80118b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80118b6:	68fb      	ldr	r3, [r7, #12]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3714      	adds	r7, #20
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	080118c9 	.word	0x080118c9

080118c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80118c8:	b480      	push	{r7}
 80118ca:	b085      	sub	sp, #20
 80118cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80118d2:	4b13      	ldr	r3, [pc, #76]	@ (8011920 <prvTaskExitError+0x58>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80118da:	d00b      	beq.n	80118f4 <prvTaskExitError+0x2c>
	__asm volatile
 80118dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118e0:	f383 8811 	msr	BASEPRI, r3
 80118e4:	f3bf 8f6f 	isb	sy
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	60fb      	str	r3, [r7, #12]
}
 80118ee:	bf00      	nop
 80118f0:	bf00      	nop
 80118f2:	e7fd      	b.n	80118f0 <prvTaskExitError+0x28>
	__asm volatile
 80118f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	60bb      	str	r3, [r7, #8]
}
 8011906:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011908:	bf00      	nop
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d0fc      	beq.n	801190a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011910:	bf00      	nop
 8011912:	bf00      	nop
 8011914:	3714      	adds	r7, #20
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	2000003c 	.word	0x2000003c
	...

08011930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011930:	4b07      	ldr	r3, [pc, #28]	@ (8011950 <pxCurrentTCBConst2>)
 8011932:	6819      	ldr	r1, [r3, #0]
 8011934:	6808      	ldr	r0, [r1, #0]
 8011936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193a:	f380 8809 	msr	PSP, r0
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f04f 0000 	mov.w	r0, #0
 8011946:	f380 8811 	msr	BASEPRI, r0
 801194a:	4770      	bx	lr
 801194c:	f3af 8000 	nop.w

08011950 <pxCurrentTCBConst2>:
 8011950:	200019c4 	.word	0x200019c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop

08011958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011958:	4808      	ldr	r0, [pc, #32]	@ (801197c <prvPortStartFirstTask+0x24>)
 801195a:	6800      	ldr	r0, [r0, #0]
 801195c:	6800      	ldr	r0, [r0, #0]
 801195e:	f380 8808 	msr	MSP, r0
 8011962:	f04f 0000 	mov.w	r0, #0
 8011966:	f380 8814 	msr	CONTROL, r0
 801196a:	b662      	cpsie	i
 801196c:	b661      	cpsie	f
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	f3bf 8f6f 	isb	sy
 8011976:	df00      	svc	0
 8011978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801197a:	bf00      	nop
 801197c:	e000ed08 	.word	0xe000ed08

08011980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011986:	4b47      	ldr	r3, [pc, #284]	@ (8011aa4 <xPortStartScheduler+0x124>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	4a47      	ldr	r2, [pc, #284]	@ (8011aa8 <xPortStartScheduler+0x128>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d10b      	bne.n	80119a8 <xPortStartScheduler+0x28>
	__asm volatile
 8011990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	613b      	str	r3, [r7, #16]
}
 80119a2:	bf00      	nop
 80119a4:	bf00      	nop
 80119a6:	e7fd      	b.n	80119a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80119a8:	4b3e      	ldr	r3, [pc, #248]	@ (8011aa4 <xPortStartScheduler+0x124>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a3f      	ldr	r2, [pc, #252]	@ (8011aac <xPortStartScheduler+0x12c>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d10b      	bne.n	80119ca <xPortStartScheduler+0x4a>
	__asm volatile
 80119b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b6:	f383 8811 	msr	BASEPRI, r3
 80119ba:	f3bf 8f6f 	isb	sy
 80119be:	f3bf 8f4f 	dsb	sy
 80119c2:	60fb      	str	r3, [r7, #12]
}
 80119c4:	bf00      	nop
 80119c6:	bf00      	nop
 80119c8:	e7fd      	b.n	80119c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80119ca:	4b39      	ldr	r3, [pc, #228]	@ (8011ab0 <xPortStartScheduler+0x130>)
 80119cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	22ff      	movs	r2, #255	@ 0xff
 80119da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80119e4:	78fb      	ldrb	r3, [r7, #3]
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80119ec:	b2da      	uxtb	r2, r3
 80119ee:	4b31      	ldr	r3, [pc, #196]	@ (8011ab4 <xPortStartScheduler+0x134>)
 80119f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80119f2:	4b31      	ldr	r3, [pc, #196]	@ (8011ab8 <xPortStartScheduler+0x138>)
 80119f4:	2207      	movs	r2, #7
 80119f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119f8:	e009      	b.n	8011a0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80119fa:	4b2f      	ldr	r3, [pc, #188]	@ (8011ab8 <xPortStartScheduler+0x138>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	3b01      	subs	r3, #1
 8011a00:	4a2d      	ldr	r2, [pc, #180]	@ (8011ab8 <xPortStartScheduler+0x138>)
 8011a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011a04:	78fb      	ldrb	r3, [r7, #3]
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a0e:	78fb      	ldrb	r3, [r7, #3]
 8011a10:	b2db      	uxtb	r3, r3
 8011a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a16:	2b80      	cmp	r3, #128	@ 0x80
 8011a18:	d0ef      	beq.n	80119fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011a1a:	4b27      	ldr	r3, [pc, #156]	@ (8011ab8 <xPortStartScheduler+0x138>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f1c3 0307 	rsb	r3, r3, #7
 8011a22:	2b04      	cmp	r3, #4
 8011a24:	d00b      	beq.n	8011a3e <xPortStartScheduler+0xbe>
	__asm volatile
 8011a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a2a:	f383 8811 	msr	BASEPRI, r3
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	f3bf 8f4f 	dsb	sy
 8011a36:	60bb      	str	r3, [r7, #8]
}
 8011a38:	bf00      	nop
 8011a3a:	bf00      	nop
 8011a3c:	e7fd      	b.n	8011a3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ab8 <xPortStartScheduler+0x138>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	021b      	lsls	r3, r3, #8
 8011a44:	4a1c      	ldr	r2, [pc, #112]	@ (8011ab8 <xPortStartScheduler+0x138>)
 8011a46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011a48:	4b1b      	ldr	r3, [pc, #108]	@ (8011ab8 <xPortStartScheduler+0x138>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011a50:	4a19      	ldr	r2, [pc, #100]	@ (8011ab8 <xPortStartScheduler+0x138>)
 8011a52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	b2da      	uxtb	r2, r3
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011a5c:	4b17      	ldr	r3, [pc, #92]	@ (8011abc <xPortStartScheduler+0x13c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4a16      	ldr	r2, [pc, #88]	@ (8011abc <xPortStartScheduler+0x13c>)
 8011a62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011a68:	4b14      	ldr	r3, [pc, #80]	@ (8011abc <xPortStartScheduler+0x13c>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a13      	ldr	r2, [pc, #76]	@ (8011abc <xPortStartScheduler+0x13c>)
 8011a6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011a72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011a74:	f000 f8da 	bl	8011c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011a78:	4b11      	ldr	r3, [pc, #68]	@ (8011ac0 <xPortStartScheduler+0x140>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a7e:	f000 f8f9 	bl	8011c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a82:	4b10      	ldr	r3, [pc, #64]	@ (8011ac4 <xPortStartScheduler+0x144>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4a0f      	ldr	r2, [pc, #60]	@ (8011ac4 <xPortStartScheduler+0x144>)
 8011a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011a8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a8e:	f7ff ff63 	bl	8011958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a92:	f7fe fbef 	bl	8010274 <vTaskSwitchContext>
	prvTaskExitError();
 8011a96:	f7ff ff17 	bl	80118c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a9a:	2300      	movs	r3, #0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3718      	adds	r7, #24
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	e000ed00 	.word	0xe000ed00
 8011aa8:	410fc271 	.word	0x410fc271
 8011aac:	410fc270 	.word	0x410fc270
 8011ab0:	e000e400 	.word	0xe000e400
 8011ab4:	20001ff8 	.word	0x20001ff8
 8011ab8:	20001ffc 	.word	0x20001ffc
 8011abc:	e000ed20 	.word	0xe000ed20
 8011ac0:	2000003c 	.word	0x2000003c
 8011ac4:	e000ef34 	.word	0xe000ef34

08011ac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b083      	sub	sp, #12
 8011acc:	af00      	add	r7, sp, #0
	__asm volatile
 8011ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ad2:	f383 8811 	msr	BASEPRI, r3
 8011ad6:	f3bf 8f6f 	isb	sy
 8011ada:	f3bf 8f4f 	dsb	sy
 8011ade:	607b      	str	r3, [r7, #4]
}
 8011ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011ae2:	4b10      	ldr	r3, [pc, #64]	@ (8011b24 <vPortEnterCritical+0x5c>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8011b24 <vPortEnterCritical+0x5c>)
 8011aea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011aec:	4b0d      	ldr	r3, [pc, #52]	@ (8011b24 <vPortEnterCritical+0x5c>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d110      	bne.n	8011b16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011af4:	4b0c      	ldr	r3, [pc, #48]	@ (8011b28 <vPortEnterCritical+0x60>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00b      	beq.n	8011b16 <vPortEnterCritical+0x4e>
	__asm volatile
 8011afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b02:	f383 8811 	msr	BASEPRI, r3
 8011b06:	f3bf 8f6f 	isb	sy
 8011b0a:	f3bf 8f4f 	dsb	sy
 8011b0e:	603b      	str	r3, [r7, #0]
}
 8011b10:	bf00      	nop
 8011b12:	bf00      	nop
 8011b14:	e7fd      	b.n	8011b12 <vPortEnterCritical+0x4a>
	}
}
 8011b16:	bf00      	nop
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	2000003c 	.word	0x2000003c
 8011b28:	e000ed04 	.word	0xe000ed04

08011b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011b32:	4b12      	ldr	r3, [pc, #72]	@ (8011b7c <vPortExitCritical+0x50>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d10b      	bne.n	8011b52 <vPortExitCritical+0x26>
	__asm volatile
 8011b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b3e:	f383 8811 	msr	BASEPRI, r3
 8011b42:	f3bf 8f6f 	isb	sy
 8011b46:	f3bf 8f4f 	dsb	sy
 8011b4a:	607b      	str	r3, [r7, #4]
}
 8011b4c:	bf00      	nop
 8011b4e:	bf00      	nop
 8011b50:	e7fd      	b.n	8011b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011b52:	4b0a      	ldr	r3, [pc, #40]	@ (8011b7c <vPortExitCritical+0x50>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	4a08      	ldr	r2, [pc, #32]	@ (8011b7c <vPortExitCritical+0x50>)
 8011b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b5c:	4b07      	ldr	r3, [pc, #28]	@ (8011b7c <vPortExitCritical+0x50>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d105      	bne.n	8011b70 <vPortExitCritical+0x44>
 8011b64:	2300      	movs	r3, #0
 8011b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	f383 8811 	msr	BASEPRI, r3
}
 8011b6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b70:	bf00      	nop
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	2000003c 	.word	0x2000003c

08011b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b80:	f3ef 8009 	mrs	r0, PSP
 8011b84:	f3bf 8f6f 	isb	sy
 8011b88:	4b15      	ldr	r3, [pc, #84]	@ (8011be0 <pxCurrentTCBConst>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	f01e 0f10 	tst.w	lr, #16
 8011b90:	bf08      	it	eq
 8011b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9a:	6010      	str	r0, [r2, #0]
 8011b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011ba4:	f380 8811 	msr	BASEPRI, r0
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	f3bf 8f6f 	isb	sy
 8011bb0:	f7fe fb60 	bl	8010274 <vTaskSwitchContext>
 8011bb4:	f04f 0000 	mov.w	r0, #0
 8011bb8:	f380 8811 	msr	BASEPRI, r0
 8011bbc:	bc09      	pop	{r0, r3}
 8011bbe:	6819      	ldr	r1, [r3, #0]
 8011bc0:	6808      	ldr	r0, [r1, #0]
 8011bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc6:	f01e 0f10 	tst.w	lr, #16
 8011bca:	bf08      	it	eq
 8011bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011bd0:	f380 8809 	msr	PSP, r0
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	f3af 8000 	nop.w

08011be0 <pxCurrentTCBConst>:
 8011be0:	200019c4 	.word	0x200019c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011be4:	bf00      	nop
 8011be6:	bf00      	nop

08011be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
	__asm volatile
 8011bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bf2:	f383 8811 	msr	BASEPRI, r3
 8011bf6:	f3bf 8f6f 	isb	sy
 8011bfa:	f3bf 8f4f 	dsb	sy
 8011bfe:	607b      	str	r3, [r7, #4]
}
 8011c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011c02:	f7fe fa7d 	bl	8010100 <xTaskIncrementTick>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d003      	beq.n	8011c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011c0c:	4b06      	ldr	r3, [pc, #24]	@ (8011c28 <xPortSysTickHandler+0x40>)
 8011c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c12:	601a      	str	r2, [r3, #0]
 8011c14:	2300      	movs	r3, #0
 8011c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	f383 8811 	msr	BASEPRI, r3
}
 8011c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011c20:	bf00      	nop
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	e000ed04 	.word	0xe000ed04

08011c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011c30:	4b0b      	ldr	r3, [pc, #44]	@ (8011c60 <vPortSetupTimerInterrupt+0x34>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011c36:	4b0b      	ldr	r3, [pc, #44]	@ (8011c64 <vPortSetupTimerInterrupt+0x38>)
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8011c68 <vPortSetupTimerInterrupt+0x3c>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a0a      	ldr	r2, [pc, #40]	@ (8011c6c <vPortSetupTimerInterrupt+0x40>)
 8011c42:	fba2 2303 	umull	r2, r3, r2, r3
 8011c46:	099b      	lsrs	r3, r3, #6
 8011c48:	4a09      	ldr	r2, [pc, #36]	@ (8011c70 <vPortSetupTimerInterrupt+0x44>)
 8011c4a:	3b01      	subs	r3, #1
 8011c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011c4e:	4b04      	ldr	r3, [pc, #16]	@ (8011c60 <vPortSetupTimerInterrupt+0x34>)
 8011c50:	2207      	movs	r2, #7
 8011c52:	601a      	str	r2, [r3, #0]
}
 8011c54:	bf00      	nop
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	e000e010 	.word	0xe000e010
 8011c64:	e000e018 	.word	0xe000e018
 8011c68:	20000010 	.word	0x20000010
 8011c6c:	10624dd3 	.word	0x10624dd3
 8011c70:	e000e014 	.word	0xe000e014

08011c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011c84 <vPortEnableVFP+0x10>
 8011c78:	6801      	ldr	r1, [r0, #0]
 8011c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011c7e:	6001      	str	r1, [r0, #0]
 8011c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011c82:	bf00      	nop
 8011c84:	e000ed88 	.word	0xe000ed88

08011c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c8e:	f3ef 8305 	mrs	r3, IPSR
 8011c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2b0f      	cmp	r3, #15
 8011c98:	d915      	bls.n	8011cc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c9a:	4a18      	ldr	r2, [pc, #96]	@ (8011cfc <vPortValidateInterruptPriority+0x74>)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	4413      	add	r3, r2
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ca4:	4b16      	ldr	r3, [pc, #88]	@ (8011d00 <vPortValidateInterruptPriority+0x78>)
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	7afa      	ldrb	r2, [r7, #11]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d20b      	bcs.n	8011cc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cb2:	f383 8811 	msr	BASEPRI, r3
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	f3bf 8f4f 	dsb	sy
 8011cbe:	607b      	str	r3, [r7, #4]
}
 8011cc0:	bf00      	nop
 8011cc2:	bf00      	nop
 8011cc4:	e7fd      	b.n	8011cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8011d04 <vPortValidateInterruptPriority+0x7c>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011cce:	4b0e      	ldr	r3, [pc, #56]	@ (8011d08 <vPortValidateInterruptPriority+0x80>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d90b      	bls.n	8011cee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cda:	f383 8811 	msr	BASEPRI, r3
 8011cde:	f3bf 8f6f 	isb	sy
 8011ce2:	f3bf 8f4f 	dsb	sy
 8011ce6:	603b      	str	r3, [r7, #0]
}
 8011ce8:	bf00      	nop
 8011cea:	bf00      	nop
 8011cec:	e7fd      	b.n	8011cea <vPortValidateInterruptPriority+0x62>
	}
 8011cee:	bf00      	nop
 8011cf0:	3714      	adds	r7, #20
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr
 8011cfa:	bf00      	nop
 8011cfc:	e000e3f0 	.word	0xe000e3f0
 8011d00:	20001ff8 	.word	0x20001ff8
 8011d04:	e000ed0c 	.word	0xe000ed0c
 8011d08:	20001ffc 	.word	0x20001ffc

08011d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b08a      	sub	sp, #40	@ 0x28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011d14:	2300      	movs	r3, #0
 8011d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d18:	f7fe f8a6 	bl	800fe68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8011e90 <pvPortMalloc+0x184>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d101      	bne.n	8011d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011d24:	f000 f930 	bl	8011f88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011d28:	4b5a      	ldr	r3, [pc, #360]	@ (8011e94 <pvPortMalloc+0x188>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	4013      	ands	r3, r2
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f040 8095 	bne.w	8011e60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d01e      	beq.n	8011d7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011d3c:	2208      	movs	r2, #8
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	4413      	add	r3, r2
 8011d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f003 0307 	and.w	r3, r3, #7
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d015      	beq.n	8011d7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f023 0307 	bic.w	r3, r3, #7
 8011d54:	3308      	adds	r3, #8
 8011d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f003 0307 	and.w	r3, r3, #7
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00b      	beq.n	8011d7a <pvPortMalloc+0x6e>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	617b      	str	r3, [r7, #20]
}
 8011d74:	bf00      	nop
 8011d76:	bf00      	nop
 8011d78:	e7fd      	b.n	8011d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d06f      	beq.n	8011e60 <pvPortMalloc+0x154>
 8011d80:	4b45      	ldr	r3, [pc, #276]	@ (8011e98 <pvPortMalloc+0x18c>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d86a      	bhi.n	8011e60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011d8a:	4b44      	ldr	r3, [pc, #272]	@ (8011e9c <pvPortMalloc+0x190>)
 8011d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011d8e:	4b43      	ldr	r3, [pc, #268]	@ (8011e9c <pvPortMalloc+0x190>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d94:	e004      	b.n	8011da0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d903      	bls.n	8011db2 <pvPortMalloc+0xa6>
 8011daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d1f1      	bne.n	8011d96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011db2:	4b37      	ldr	r3, [pc, #220]	@ (8011e90 <pvPortMalloc+0x184>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d051      	beq.n	8011e60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011dbc:	6a3b      	ldr	r3, [r7, #32]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2208      	movs	r2, #8
 8011dc2:	4413      	add	r3, r2
 8011dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd0:	685a      	ldr	r2, [r3, #4]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	1ad2      	subs	r2, r2, r3
 8011dd6:	2308      	movs	r3, #8
 8011dd8:	005b      	lsls	r3, r3, #1
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d920      	bls.n	8011e20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4413      	add	r3, r2
 8011de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	f003 0307 	and.w	r3, r3, #7
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00b      	beq.n	8011e08 <pvPortMalloc+0xfc>
	__asm volatile
 8011df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011df4:	f383 8811 	msr	BASEPRI, r3
 8011df8:	f3bf 8f6f 	isb	sy
 8011dfc:	f3bf 8f4f 	dsb	sy
 8011e00:	613b      	str	r3, [r7, #16]
}
 8011e02:	bf00      	nop
 8011e04:	bf00      	nop
 8011e06:	e7fd      	b.n	8011e04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e0a:	685a      	ldr	r2, [r3, #4]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	1ad2      	subs	r2, r2, r3
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e1a:	69b8      	ldr	r0, [r7, #24]
 8011e1c:	f000 f916 	bl	801204c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e20:	4b1d      	ldr	r3, [pc, #116]	@ (8011e98 <pvPortMalloc+0x18c>)
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8011e98 <pvPortMalloc+0x18c>)
 8011e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8011e98 <pvPortMalloc+0x18c>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	4b1b      	ldr	r3, [pc, #108]	@ (8011ea0 <pvPortMalloc+0x194>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d203      	bcs.n	8011e42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e3a:	4b17      	ldr	r3, [pc, #92]	@ (8011e98 <pvPortMalloc+0x18c>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a18      	ldr	r2, [pc, #96]	@ (8011ea0 <pvPortMalloc+0x194>)
 8011e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e44:	685a      	ldr	r2, [r3, #4]
 8011e46:	4b13      	ldr	r3, [pc, #76]	@ (8011e94 <pvPortMalloc+0x188>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	431a      	orrs	r2, r3
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e52:	2200      	movs	r2, #0
 8011e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011e56:	4b13      	ldr	r3, [pc, #76]	@ (8011ea4 <pvPortMalloc+0x198>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	4a11      	ldr	r2, [pc, #68]	@ (8011ea4 <pvPortMalloc+0x198>)
 8011e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011e60:	f7fe f810 	bl	800fe84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	f003 0307 	and.w	r3, r3, #7
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d00b      	beq.n	8011e86 <pvPortMalloc+0x17a>
	__asm volatile
 8011e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e72:	f383 8811 	msr	BASEPRI, r3
 8011e76:	f3bf 8f6f 	isb	sy
 8011e7a:	f3bf 8f4f 	dsb	sy
 8011e7e:	60fb      	str	r3, [r7, #12]
}
 8011e80:	bf00      	nop
 8011e82:	bf00      	nop
 8011e84:	e7fd      	b.n	8011e82 <pvPortMalloc+0x176>
	return pvReturn;
 8011e86:	69fb      	ldr	r3, [r7, #28]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3728      	adds	r7, #40	@ 0x28
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	20005c08 	.word	0x20005c08
 8011e94:	20005c1c 	.word	0x20005c1c
 8011e98:	20005c0c 	.word	0x20005c0c
 8011e9c:	20005c00 	.word	0x20005c00
 8011ea0:	20005c10 	.word	0x20005c10
 8011ea4:	20005c14 	.word	0x20005c14

08011ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b086      	sub	sp, #24
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d04f      	beq.n	8011f5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011eba:	2308      	movs	r3, #8
 8011ebc:	425b      	negs	r3, r3
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	4b25      	ldr	r3, [pc, #148]	@ (8011f64 <vPortFree+0xbc>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10b      	bne.n	8011eee <vPortFree+0x46>
	__asm volatile
 8011ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eda:	f383 8811 	msr	BASEPRI, r3
 8011ede:	f3bf 8f6f 	isb	sy
 8011ee2:	f3bf 8f4f 	dsb	sy
 8011ee6:	60fb      	str	r3, [r7, #12]
}
 8011ee8:	bf00      	nop
 8011eea:	bf00      	nop
 8011eec:	e7fd      	b.n	8011eea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00b      	beq.n	8011f0e <vPortFree+0x66>
	__asm volatile
 8011ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011efa:	f383 8811 	msr	BASEPRI, r3
 8011efe:	f3bf 8f6f 	isb	sy
 8011f02:	f3bf 8f4f 	dsb	sy
 8011f06:	60bb      	str	r3, [r7, #8]
}
 8011f08:	bf00      	nop
 8011f0a:	bf00      	nop
 8011f0c:	e7fd      	b.n	8011f0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	685a      	ldr	r2, [r3, #4]
 8011f12:	4b14      	ldr	r3, [pc, #80]	@ (8011f64 <vPortFree+0xbc>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4013      	ands	r3, r2
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d01e      	beq.n	8011f5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d11a      	bne.n	8011f5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	685a      	ldr	r2, [r3, #4]
 8011f28:	4b0e      	ldr	r3, [pc, #56]	@ (8011f64 <vPortFree+0xbc>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	43db      	mvns	r3, r3
 8011f2e:	401a      	ands	r2, r3
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011f34:	f7fd ff98 	bl	800fe68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	685a      	ldr	r2, [r3, #4]
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8011f68 <vPortFree+0xc0>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	4413      	add	r3, r2
 8011f42:	4a09      	ldr	r2, [pc, #36]	@ (8011f68 <vPortFree+0xc0>)
 8011f44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011f46:	6938      	ldr	r0, [r7, #16]
 8011f48:	f000 f880 	bl	801204c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011f4c:	4b07      	ldr	r3, [pc, #28]	@ (8011f6c <vPortFree+0xc4>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	3301      	adds	r3, #1
 8011f52:	4a06      	ldr	r2, [pc, #24]	@ (8011f6c <vPortFree+0xc4>)
 8011f54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011f56:	f7fd ff95 	bl	800fe84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011f5a:	bf00      	nop
 8011f5c:	3718      	adds	r7, #24
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	20005c1c 	.word	0x20005c1c
 8011f68:	20005c0c 	.word	0x20005c0c
 8011f6c:	20005c18 	.word	0x20005c18

08011f70 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8011f70:	b480      	push	{r7}
 8011f72:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011f74:	4b03      	ldr	r3, [pc, #12]	@ (8011f84 <xPortGetFreeHeapSize+0x14>)
 8011f76:	681b      	ldr	r3, [r3, #0]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	20005c0c 	.word	0x20005c0c

08011f88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011f8e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011f92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011f94:	4b27      	ldr	r3, [pc, #156]	@ (8012034 <prvHeapInit+0xac>)
 8011f96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f003 0307 	and.w	r3, r3, #7
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d00c      	beq.n	8011fbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	3307      	adds	r3, #7
 8011fa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f023 0307 	bic.w	r3, r3, #7
 8011fae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011fb0:	68ba      	ldr	r2, [r7, #8]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	1ad3      	subs	r3, r2, r3
 8011fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8012034 <prvHeapInit+0xac>)
 8011fb8:	4413      	add	r3, r2
 8011fba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8012038 <prvHeapInit+0xb0>)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8012038 <prvHeapInit+0xb0>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	68ba      	ldr	r2, [r7, #8]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011fd4:	2208      	movs	r2, #8
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	1a9b      	subs	r3, r3, r2
 8011fda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f023 0307 	bic.w	r3, r3, #7
 8011fe2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	4a15      	ldr	r2, [pc, #84]	@ (801203c <prvHeapInit+0xb4>)
 8011fe8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011fea:	4b14      	ldr	r3, [pc, #80]	@ (801203c <prvHeapInit+0xb4>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011ff2:	4b12      	ldr	r3, [pc, #72]	@ (801203c <prvHeapInit+0xb4>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	1ad2      	subs	r2, r2, r3
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012008:	4b0c      	ldr	r3, [pc, #48]	@ (801203c <prvHeapInit+0xb4>)
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	4a0a      	ldr	r2, [pc, #40]	@ (8012040 <prvHeapInit+0xb8>)
 8012016:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	4a09      	ldr	r2, [pc, #36]	@ (8012044 <prvHeapInit+0xbc>)
 801201e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012020:	4b09      	ldr	r3, [pc, #36]	@ (8012048 <prvHeapInit+0xc0>)
 8012022:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012026:	601a      	str	r2, [r3, #0]
}
 8012028:	bf00      	nop
 801202a:	3714      	adds	r7, #20
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr
 8012034:	20002000 	.word	0x20002000
 8012038:	20005c00 	.word	0x20005c00
 801203c:	20005c08 	.word	0x20005c08
 8012040:	20005c10 	.word	0x20005c10
 8012044:	20005c0c 	.word	0x20005c0c
 8012048:	20005c1c 	.word	0x20005c1c

0801204c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012054:	4b28      	ldr	r3, [pc, #160]	@ (80120f8 <prvInsertBlockIntoFreeList+0xac>)
 8012056:	60fb      	str	r3, [r7, #12]
 8012058:	e002      	b.n	8012060 <prvInsertBlockIntoFreeList+0x14>
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	60fb      	str	r3, [r7, #12]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	429a      	cmp	r2, r3
 8012068:	d8f7      	bhi.n	801205a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	4413      	add	r3, r2
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	429a      	cmp	r2, r3
 801207a:	d108      	bne.n	801208e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	685a      	ldr	r2, [r3, #4]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	441a      	add	r2, r3
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	68ba      	ldr	r2, [r7, #8]
 8012098:	441a      	add	r2, r3
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d118      	bne.n	80120d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	4b15      	ldr	r3, [pc, #84]	@ (80120fc <prvInsertBlockIntoFreeList+0xb0>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d00d      	beq.n	80120ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	441a      	add	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	601a      	str	r2, [r3, #0]
 80120c8:	e008      	b.n	80120dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80120ca:	4b0c      	ldr	r3, [pc, #48]	@ (80120fc <prvInsertBlockIntoFreeList+0xb0>)
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	601a      	str	r2, [r3, #0]
 80120d2:	e003      	b.n	80120dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80120dc:	68fa      	ldr	r2, [r7, #12]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d002      	beq.n	80120ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120ea:	bf00      	nop
 80120ec:	3714      	adds	r7, #20
 80120ee:	46bd      	mov	sp, r7
 80120f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f4:	4770      	bx	lr
 80120f6:	bf00      	nop
 80120f8:	20005c00 	.word	0x20005c00
 80120fc:	20005c08 	.word	0x20005c08

08012100 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012104:	2201      	movs	r2, #1
 8012106:	490e      	ldr	r1, [pc, #56]	@ (8012140 <MX_USB_HOST_Init+0x40>)
 8012108:	480e      	ldr	r0, [pc, #56]	@ (8012144 <MX_USB_HOST_Init+0x44>)
 801210a:	f7fa fa73 	bl	800c5f4 <USBH_Init>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d001      	beq.n	8012118 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012114:	f7f0 fd64 	bl	8002be0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012118:	490b      	ldr	r1, [pc, #44]	@ (8012148 <MX_USB_HOST_Init+0x48>)
 801211a:	480a      	ldr	r0, [pc, #40]	@ (8012144 <MX_USB_HOST_Init+0x44>)
 801211c:	f7fa fb39 	bl	800c792 <USBH_RegisterClass>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d001      	beq.n	801212a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012126:	f7f0 fd5b 	bl	8002be0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801212a:	4806      	ldr	r0, [pc, #24]	@ (8012144 <MX_USB_HOST_Init+0x44>)
 801212c:	f7fa fbbd 	bl	800c8aa <USBH_Start>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d001      	beq.n	801213a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012136:	f7f0 fd53 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801213a:	bf00      	nop
 801213c:	bd80      	pop	{r7, pc}
 801213e:	bf00      	nop
 8012140:	0801214d 	.word	0x0801214d
 8012144:	20005c20 	.word	0x20005c20
 8012148:	2000001c 	.word	0x2000001c

0801214c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	460b      	mov	r3, r1
 8012156:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012158:	78fb      	ldrb	r3, [r7, #3]
 801215a:	3b01      	subs	r3, #1
 801215c:	2b04      	cmp	r3, #4
 801215e:	d819      	bhi.n	8012194 <USBH_UserProcess+0x48>
 8012160:	a201      	add	r2, pc, #4	@ (adr r2, 8012168 <USBH_UserProcess+0x1c>)
 8012162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012166:	bf00      	nop
 8012168:	08012195 	.word	0x08012195
 801216c:	08012185 	.word	0x08012185
 8012170:	08012195 	.word	0x08012195
 8012174:	0801218d 	.word	0x0801218d
 8012178:	0801217d 	.word	0x0801217d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801217c:	4b09      	ldr	r3, [pc, #36]	@ (80121a4 <USBH_UserProcess+0x58>)
 801217e:	2203      	movs	r2, #3
 8012180:	701a      	strb	r2, [r3, #0]
  break;
 8012182:	e008      	b.n	8012196 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012184:	4b07      	ldr	r3, [pc, #28]	@ (80121a4 <USBH_UserProcess+0x58>)
 8012186:	2202      	movs	r2, #2
 8012188:	701a      	strb	r2, [r3, #0]
  break;
 801218a:	e004      	b.n	8012196 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801218c:	4b05      	ldr	r3, [pc, #20]	@ (80121a4 <USBH_UserProcess+0x58>)
 801218e:	2201      	movs	r2, #1
 8012190:	701a      	strb	r2, [r3, #0]
  break;
 8012192:	e000      	b.n	8012196 <USBH_UserProcess+0x4a>

  default:
  break;
 8012194:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012196:	bf00      	nop
 8012198:	370c      	adds	r7, #12
 801219a:	46bd      	mov	sp, r7
 801219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop
 80121a4:	20006004 	.word	0x20006004

080121a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b08a      	sub	sp, #40	@ 0x28
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121b0:	f107 0314 	add.w	r3, r7, #20
 80121b4:	2200      	movs	r2, #0
 80121b6:	601a      	str	r2, [r3, #0]
 80121b8:	605a      	str	r2, [r3, #4]
 80121ba:	609a      	str	r2, [r3, #8]
 80121bc:	60da      	str	r2, [r3, #12]
 80121be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80121c8:	d147      	bne.n	801225a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80121ca:	2300      	movs	r3, #0
 80121cc:	613b      	str	r3, [r7, #16]
 80121ce:	4b25      	ldr	r3, [pc, #148]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 80121d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121d2:	4a24      	ldr	r2, [pc, #144]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 80121d4:	f043 0301 	orr.w	r3, r3, #1
 80121d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80121da:	4b22      	ldr	r3, [pc, #136]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 80121dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121de:	f003 0301 	and.w	r3, r3, #1
 80121e2:	613b      	str	r3, [r7, #16]
 80121e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80121e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80121ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80121ec:	2300      	movs	r3, #0
 80121ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121f0:	2300      	movs	r3, #0
 80121f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80121f4:	f107 0314 	add.w	r3, r7, #20
 80121f8:	4619      	mov	r1, r3
 80121fa:	481b      	ldr	r0, [pc, #108]	@ (8012268 <HAL_HCD_MspInit+0xc0>)
 80121fc:	f7f1 fe5e 	bl	8003ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8012200:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8012204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012206:	2302      	movs	r3, #2
 8012208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801220a:	2300      	movs	r3, #0
 801220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801220e:	2300      	movs	r3, #0
 8012210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012212:	230a      	movs	r3, #10
 8012214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012216:	f107 0314 	add.w	r3, r7, #20
 801221a:	4619      	mov	r1, r3
 801221c:	4812      	ldr	r0, [pc, #72]	@ (8012268 <HAL_HCD_MspInit+0xc0>)
 801221e:	f7f1 fe4d 	bl	8003ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012222:	4b10      	ldr	r3, [pc, #64]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 8012224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012226:	4a0f      	ldr	r2, [pc, #60]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 8012228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801222c:	6353      	str	r3, [r2, #52]	@ 0x34
 801222e:	2300      	movs	r3, #0
 8012230:	60fb      	str	r3, [r7, #12]
 8012232:	4b0c      	ldr	r3, [pc, #48]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 8012234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012236:	4a0b      	ldr	r2, [pc, #44]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 8012238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801223c:	6453      	str	r3, [r2, #68]	@ 0x44
 801223e:	4b09      	ldr	r3, [pc, #36]	@ (8012264 <HAL_HCD_MspInit+0xbc>)
 8012240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012246:	60fb      	str	r3, [r7, #12]
 8012248:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801224a:	2200      	movs	r2, #0
 801224c:	2105      	movs	r1, #5
 801224e:	2043      	movs	r0, #67	@ 0x43
 8012250:	f7f1 fa08 	bl	8003664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012254:	2043      	movs	r0, #67	@ 0x43
 8012256:	f7f1 fa21 	bl	800369c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801225a:	bf00      	nop
 801225c:	3728      	adds	r7, #40	@ 0x28
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	40023800 	.word	0x40023800
 8012268:	40020000 	.word	0x40020000

0801226c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801227a:	4618      	mov	r0, r3
 801227c:	f7fa ffc7 	bl	800d20e <USBH_LL_IncTimer>
}
 8012280:	bf00      	nop
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012296:	4618      	mov	r0, r3
 8012298:	f7fb f80b 	bl	800d2b2 <USBH_LL_Connect>
}
 801229c:	bf00      	nop
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7fb f820 	bl	800d2f8 <USBH_LL_Disconnect>
}
 80122b8:	bf00      	nop
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}

080122c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	460b      	mov	r3, r1
 80122ca:	70fb      	strb	r3, [r7, #3]
 80122cc:	4613      	mov	r3, r2
 80122ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fb f857 	bl	800d38a <USBH_LL_NotifyURBChange>
#endif
}
 80122dc:	bf00      	nop
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fa ffb5 	bl	800d262 <USBH_LL_PortEnabled>
}
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801230e:	4618      	mov	r0, r3
 8012310:	f7fa ffc1 	bl	800d296 <USBH_LL_PortDisabled>
}
 8012314:	bf00      	nop
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801232a:	2b01      	cmp	r3, #1
 801232c:	d12a      	bne.n	8012384 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801232e:	4a18      	ldr	r2, [pc, #96]	@ (8012390 <USBH_LL_Init+0x74>)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4a15      	ldr	r2, [pc, #84]	@ (8012390 <USBH_LL_Init+0x74>)
 801233a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801233e:	4b14      	ldr	r3, [pc, #80]	@ (8012390 <USBH_LL_Init+0x74>)
 8012340:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012344:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012346:	4b12      	ldr	r3, [pc, #72]	@ (8012390 <USBH_LL_Init+0x74>)
 8012348:	2208      	movs	r2, #8
 801234a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801234c:	4b10      	ldr	r3, [pc, #64]	@ (8012390 <USBH_LL_Init+0x74>)
 801234e:	2201      	movs	r2, #1
 8012350:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012352:	4b0f      	ldr	r3, [pc, #60]	@ (8012390 <USBH_LL_Init+0x74>)
 8012354:	2200      	movs	r2, #0
 8012356:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012358:	4b0d      	ldr	r3, [pc, #52]	@ (8012390 <USBH_LL_Init+0x74>)
 801235a:	2202      	movs	r2, #2
 801235c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801235e:	4b0c      	ldr	r3, [pc, #48]	@ (8012390 <USBH_LL_Init+0x74>)
 8012360:	2200      	movs	r2, #0
 8012362:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012364:	480a      	ldr	r0, [pc, #40]	@ (8012390 <USBH_LL_Init+0x74>)
 8012366:	f7f1 ff91 	bl	800428c <HAL_HCD_Init>
 801236a:	4603      	mov	r3, r0
 801236c:	2b00      	cmp	r3, #0
 801236e:	d001      	beq.n	8012374 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012370:	f7f0 fc36 	bl	8002be0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012374:	4806      	ldr	r0, [pc, #24]	@ (8012390 <USBH_LL_Init+0x74>)
 8012376:	f7f2 fbf1 	bl	8004b5c <HAL_HCD_GetCurrentFrame>
 801237a:	4603      	mov	r3, r0
 801237c:	4619      	mov	r1, r3
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7fa ff36 	bl	800d1f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012384:	2300      	movs	r3, #0
}
 8012386:	4618      	mov	r0, r3
 8012388:	3708      	adds	r7, #8
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	20006008 	.word	0x20006008

08012394 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801239c:	2300      	movs	r3, #0
 801239e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80123a0:	2300      	movs	r3, #0
 80123a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7f2 fb5e 	bl	8004a6c <HAL_HCD_Start>
 80123b0:	4603      	mov	r3, r0
 80123b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80123b4:	7bfb      	ldrb	r3, [r7, #15]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 f95e 	bl	8012678 <USBH_Get_USB_Status>
 80123bc:	4603      	mov	r3, r0
 80123be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80123ca:	b580      	push	{r7, lr}
 80123cc:	b084      	sub	sp, #16
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123d2:	2300      	movs	r3, #0
 80123d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80123d6:	2300      	movs	r3, #0
 80123d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7f2 fb66 	bl	8004ab2 <HAL_HCD_Stop>
 80123e6:	4603      	mov	r3, r0
 80123e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80123ea:	7bfb      	ldrb	r3, [r7, #15]
 80123ec:	4618      	mov	r0, r3
 80123ee:	f000 f943 	bl	8012678 <USBH_Get_USB_Status>
 80123f2:	4603      	mov	r3, r0
 80123f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012408:	2301      	movs	r3, #1
 801240a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012412:	4618      	mov	r0, r3
 8012414:	f7f2 fbb0 	bl	8004b78 <HAL_HCD_GetCurrentSpeed>
 8012418:	4603      	mov	r3, r0
 801241a:	2b02      	cmp	r3, #2
 801241c:	d00c      	beq.n	8012438 <USBH_LL_GetSpeed+0x38>
 801241e:	2b02      	cmp	r3, #2
 8012420:	d80d      	bhi.n	801243e <USBH_LL_GetSpeed+0x3e>
 8012422:	2b00      	cmp	r3, #0
 8012424:	d002      	beq.n	801242c <USBH_LL_GetSpeed+0x2c>
 8012426:	2b01      	cmp	r3, #1
 8012428:	d003      	beq.n	8012432 <USBH_LL_GetSpeed+0x32>
 801242a:	e008      	b.n	801243e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801242c:	2300      	movs	r3, #0
 801242e:	73fb      	strb	r3, [r7, #15]
    break;
 8012430:	e008      	b.n	8012444 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012432:	2301      	movs	r3, #1
 8012434:	73fb      	strb	r3, [r7, #15]
    break;
 8012436:	e005      	b.n	8012444 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012438:	2302      	movs	r3, #2
 801243a:	73fb      	strb	r3, [r7, #15]
    break;
 801243c:	e002      	b.n	8012444 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801243e:	2301      	movs	r3, #1
 8012440:	73fb      	strb	r3, [r7, #15]
    break;
 8012442:	bf00      	nop
  }
  return  speed;
 8012444:	7bfb      	ldrb	r3, [r7, #15]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3710      	adds	r7, #16
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b084      	sub	sp, #16
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012456:	2300      	movs	r3, #0
 8012458:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801245a:	2300      	movs	r3, #0
 801245c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012464:	4618      	mov	r0, r3
 8012466:	f7f2 fb41 	bl	8004aec <HAL_HCD_ResetPort>
 801246a:	4603      	mov	r3, r0
 801246c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801246e:	7bfb      	ldrb	r3, [r7, #15]
 8012470:	4618      	mov	r0, r3
 8012472:	f000 f901 	bl	8012678 <USBH_Get_USB_Status>
 8012476:	4603      	mov	r3, r0
 8012478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801247a:	7bbb      	ldrb	r3, [r7, #14]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	460b      	mov	r3, r1
 801248e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012496:	78fa      	ldrb	r2, [r7, #3]
 8012498:	4611      	mov	r1, r2
 801249a:	4618      	mov	r0, r3
 801249c:	f7f2 fb49 	bl	8004b32 <HAL_HCD_HC_GetXferCount>
 80124a0:	4603      	mov	r3, r0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80124aa:	b590      	push	{r4, r7, lr}
 80124ac:	b089      	sub	sp, #36	@ 0x24
 80124ae:	af04      	add	r7, sp, #16
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	461a      	mov	r2, r3
 80124b8:	4603      	mov	r3, r0
 80124ba:	70fb      	strb	r3, [r7, #3]
 80124bc:	460b      	mov	r3, r1
 80124be:	70bb      	strb	r3, [r7, #2]
 80124c0:	4613      	mov	r3, r2
 80124c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124c4:	2300      	movs	r3, #0
 80124c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80124c8:	2300      	movs	r3, #0
 80124ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80124d2:	787c      	ldrb	r4, [r7, #1]
 80124d4:	78ba      	ldrb	r2, [r7, #2]
 80124d6:	78f9      	ldrb	r1, [r7, #3]
 80124d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80124da:	9302      	str	r3, [sp, #8]
 80124dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80124e0:	9301      	str	r3, [sp, #4]
 80124e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	4623      	mov	r3, r4
 80124ea:	f7f1 ff36 	bl	800435a <HAL_HCD_HC_Init>
 80124ee:	4603      	mov	r3, r0
 80124f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80124f2:	7bfb      	ldrb	r3, [r7, #15]
 80124f4:	4618      	mov	r0, r3
 80124f6:	f000 f8bf 	bl	8012678 <USBH_Get_USB_Status>
 80124fa:	4603      	mov	r3, r0
 80124fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	bd90      	pop	{r4, r7, pc}

08012508 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	460b      	mov	r3, r1
 8012512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012514:	2300      	movs	r3, #0
 8012516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012522:	78fa      	ldrb	r2, [r7, #3]
 8012524:	4611      	mov	r1, r2
 8012526:	4618      	mov	r0, r3
 8012528:	f7f1 ffcf 	bl	80044ca <HAL_HCD_HC_Halt>
 801252c:	4603      	mov	r3, r0
 801252e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012530:	7bfb      	ldrb	r3, [r7, #15]
 8012532:	4618      	mov	r0, r3
 8012534:	f000 f8a0 	bl	8012678 <USBH_Get_USB_Status>
 8012538:	4603      	mov	r3, r0
 801253a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801253c:	7bbb      	ldrb	r3, [r7, #14]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}

08012546 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012546:	b590      	push	{r4, r7, lr}
 8012548:	b089      	sub	sp, #36	@ 0x24
 801254a:	af04      	add	r7, sp, #16
 801254c:	6078      	str	r0, [r7, #4]
 801254e:	4608      	mov	r0, r1
 8012550:	4611      	mov	r1, r2
 8012552:	461a      	mov	r2, r3
 8012554:	4603      	mov	r3, r0
 8012556:	70fb      	strb	r3, [r7, #3]
 8012558:	460b      	mov	r3, r1
 801255a:	70bb      	strb	r3, [r7, #2]
 801255c:	4613      	mov	r3, r2
 801255e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012560:	2300      	movs	r3, #0
 8012562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012564:	2300      	movs	r3, #0
 8012566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801256e:	787c      	ldrb	r4, [r7, #1]
 8012570:	78ba      	ldrb	r2, [r7, #2]
 8012572:	78f9      	ldrb	r1, [r7, #3]
 8012574:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8012578:	9303      	str	r3, [sp, #12]
 801257a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801257c:	9302      	str	r3, [sp, #8]
 801257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012580:	9301      	str	r3, [sp, #4]
 8012582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	4623      	mov	r3, r4
 801258a:	f7f1 ffc1 	bl	8004510 <HAL_HCD_HC_SubmitRequest>
 801258e:	4603      	mov	r3, r0
 8012590:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012592:	7bfb      	ldrb	r3, [r7, #15]
 8012594:	4618      	mov	r0, r3
 8012596:	f000 f86f 	bl	8012678 <USBH_Get_USB_Status>
 801259a:	4603      	mov	r3, r0
 801259c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801259e:	7bbb      	ldrb	r3, [r7, #14]
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3714      	adds	r7, #20
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd90      	pop	{r4, r7, pc}

080125a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	460b      	mov	r3, r1
 80125b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80125ba:	78fa      	ldrb	r2, [r7, #3]
 80125bc:	4611      	mov	r1, r2
 80125be:	4618      	mov	r0, r3
 80125c0:	f7f2 faa2 	bl	8004b08 <HAL_HCD_HC_GetURBState>
 80125c4:	4603      	mov	r3, r0
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3708      	adds	r7, #8
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b082      	sub	sp, #8
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	6078      	str	r0, [r7, #4]
 80125d6:	460b      	mov	r3, r1
 80125d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	d103      	bne.n	80125ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80125e4:	78fb      	ldrb	r3, [r7, #3]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f000 f872 	bl	80126d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80125ec:	20c8      	movs	r0, #200	@ 0xc8
 80125ee:	f7f0 ff5d 	bl	80034ac <HAL_Delay>
  return USBH_OK;
 80125f2:	2300      	movs	r3, #0
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b085      	sub	sp, #20
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	70fb      	strb	r3, [r7, #3]
 8012608:	4613      	mov	r3, r2
 801260a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012612:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012614:	78fa      	ldrb	r2, [r7, #3]
 8012616:	68f9      	ldr	r1, [r7, #12]
 8012618:	4613      	mov	r3, r2
 801261a:	011b      	lsls	r3, r3, #4
 801261c:	1a9b      	subs	r3, r3, r2
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	440b      	add	r3, r1
 8012622:	3317      	adds	r3, #23
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00a      	beq.n	8012640 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801262a:	78fa      	ldrb	r2, [r7, #3]
 801262c:	68f9      	ldr	r1, [r7, #12]
 801262e:	4613      	mov	r3, r2
 8012630:	011b      	lsls	r3, r3, #4
 8012632:	1a9b      	subs	r3, r3, r2
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	440b      	add	r3, r1
 8012638:	333c      	adds	r3, #60	@ 0x3c
 801263a:	78ba      	ldrb	r2, [r7, #2]
 801263c:	701a      	strb	r2, [r3, #0]
 801263e:	e009      	b.n	8012654 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012640:	78fa      	ldrb	r2, [r7, #3]
 8012642:	68f9      	ldr	r1, [r7, #12]
 8012644:	4613      	mov	r3, r2
 8012646:	011b      	lsls	r3, r3, #4
 8012648:	1a9b      	subs	r3, r3, r2
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	440b      	add	r3, r1
 801264e:	333d      	adds	r3, #61	@ 0x3d
 8012650:	78ba      	ldrb	r2, [r7, #2]
 8012652:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012654:	2300      	movs	r3, #0
}
 8012656:	4618      	mov	r0, r3
 8012658:	3714      	adds	r7, #20
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr

08012662 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012662:	b580      	push	{r7, lr}
 8012664:	b082      	sub	sp, #8
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7f0 ff1e 	bl	80034ac <HAL_Delay>
}
 8012670:	bf00      	nop
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012678:	b480      	push	{r7}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
 801267e:	4603      	mov	r3, r0
 8012680:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012682:	2300      	movs	r3, #0
 8012684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012686:	79fb      	ldrb	r3, [r7, #7]
 8012688:	2b03      	cmp	r3, #3
 801268a:	d817      	bhi.n	80126bc <USBH_Get_USB_Status+0x44>
 801268c:	a201      	add	r2, pc, #4	@ (adr r2, 8012694 <USBH_Get_USB_Status+0x1c>)
 801268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012692:	bf00      	nop
 8012694:	080126a5 	.word	0x080126a5
 8012698:	080126ab 	.word	0x080126ab
 801269c:	080126b1 	.word	0x080126b1
 80126a0:	080126b7 	.word	0x080126b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80126a4:	2300      	movs	r3, #0
 80126a6:	73fb      	strb	r3, [r7, #15]
    break;
 80126a8:	e00b      	b.n	80126c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80126aa:	2302      	movs	r3, #2
 80126ac:	73fb      	strb	r3, [r7, #15]
    break;
 80126ae:	e008      	b.n	80126c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80126b0:	2301      	movs	r3, #1
 80126b2:	73fb      	strb	r3, [r7, #15]
    break;
 80126b4:	e005      	b.n	80126c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80126b6:	2302      	movs	r3, #2
 80126b8:	73fb      	strb	r3, [r7, #15]
    break;
 80126ba:	e002      	b.n	80126c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80126bc:	2302      	movs	r3, #2
 80126be:	73fb      	strb	r3, [r7, #15]
    break;
 80126c0:	bf00      	nop
  }
  return usb_status;
 80126c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr

080126d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	4603      	mov	r3, r0
 80126d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80126da:	79fb      	ldrb	r3, [r7, #7]
 80126dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80126de:	79fb      	ldrb	r3, [r7, #7]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d102      	bne.n	80126ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80126e4:	2300      	movs	r3, #0
 80126e6:	73fb      	strb	r3, [r7, #15]
 80126e8:	e001      	b.n	80126ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80126ea:	2301      	movs	r3, #1
 80126ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80126ee:	7bfb      	ldrb	r3, [r7, #15]
 80126f0:	461a      	mov	r2, r3
 80126f2:	2101      	movs	r1, #1
 80126f4:	4803      	ldr	r0, [pc, #12]	@ (8012704 <MX_DriverVbusFS+0x34>)
 80126f6:	f7f1 fd7d 	bl	80041f4 <HAL_GPIO_WritePin>
}
 80126fa:	bf00      	nop
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	40020800 	.word	0x40020800

08012708 <malloc>:
 8012708:	4b02      	ldr	r3, [pc, #8]	@ (8012714 <malloc+0xc>)
 801270a:	4601      	mov	r1, r0
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	f000 b82d 	b.w	801276c <_malloc_r>
 8012712:	bf00      	nop
 8012714:	2000004c 	.word	0x2000004c

08012718 <free>:
 8012718:	4b02      	ldr	r3, [pc, #8]	@ (8012724 <free+0xc>)
 801271a:	4601      	mov	r1, r0
 801271c:	6818      	ldr	r0, [r3, #0]
 801271e:	f001 bd8b 	b.w	8014238 <_free_r>
 8012722:	bf00      	nop
 8012724:	2000004c 	.word	0x2000004c

08012728 <sbrk_aligned>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	4e0f      	ldr	r6, [pc, #60]	@ (8012768 <sbrk_aligned+0x40>)
 801272c:	460c      	mov	r4, r1
 801272e:	6831      	ldr	r1, [r6, #0]
 8012730:	4605      	mov	r5, r0
 8012732:	b911      	cbnz	r1, 801273a <sbrk_aligned+0x12>
 8012734:	f000 fecc 	bl	80134d0 <_sbrk_r>
 8012738:	6030      	str	r0, [r6, #0]
 801273a:	4621      	mov	r1, r4
 801273c:	4628      	mov	r0, r5
 801273e:	f000 fec7 	bl	80134d0 <_sbrk_r>
 8012742:	1c43      	adds	r3, r0, #1
 8012744:	d103      	bne.n	801274e <sbrk_aligned+0x26>
 8012746:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801274a:	4620      	mov	r0, r4
 801274c:	bd70      	pop	{r4, r5, r6, pc}
 801274e:	1cc4      	adds	r4, r0, #3
 8012750:	f024 0403 	bic.w	r4, r4, #3
 8012754:	42a0      	cmp	r0, r4
 8012756:	d0f8      	beq.n	801274a <sbrk_aligned+0x22>
 8012758:	1a21      	subs	r1, r4, r0
 801275a:	4628      	mov	r0, r5
 801275c:	f000 feb8 	bl	80134d0 <_sbrk_r>
 8012760:	3001      	adds	r0, #1
 8012762:	d1f2      	bne.n	801274a <sbrk_aligned+0x22>
 8012764:	e7ef      	b.n	8012746 <sbrk_aligned+0x1e>
 8012766:	bf00      	nop
 8012768:	200063e8 	.word	0x200063e8

0801276c <_malloc_r>:
 801276c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012770:	1ccd      	adds	r5, r1, #3
 8012772:	f025 0503 	bic.w	r5, r5, #3
 8012776:	3508      	adds	r5, #8
 8012778:	2d0c      	cmp	r5, #12
 801277a:	bf38      	it	cc
 801277c:	250c      	movcc	r5, #12
 801277e:	2d00      	cmp	r5, #0
 8012780:	4606      	mov	r6, r0
 8012782:	db01      	blt.n	8012788 <_malloc_r+0x1c>
 8012784:	42a9      	cmp	r1, r5
 8012786:	d904      	bls.n	8012792 <_malloc_r+0x26>
 8012788:	230c      	movs	r3, #12
 801278a:	6033      	str	r3, [r6, #0]
 801278c:	2000      	movs	r0, #0
 801278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012868 <_malloc_r+0xfc>
 8012796:	f000 f869 	bl	801286c <__malloc_lock>
 801279a:	f8d8 3000 	ldr.w	r3, [r8]
 801279e:	461c      	mov	r4, r3
 80127a0:	bb44      	cbnz	r4, 80127f4 <_malloc_r+0x88>
 80127a2:	4629      	mov	r1, r5
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7ff ffbf 	bl	8012728 <sbrk_aligned>
 80127aa:	1c43      	adds	r3, r0, #1
 80127ac:	4604      	mov	r4, r0
 80127ae:	d158      	bne.n	8012862 <_malloc_r+0xf6>
 80127b0:	f8d8 4000 	ldr.w	r4, [r8]
 80127b4:	4627      	mov	r7, r4
 80127b6:	2f00      	cmp	r7, #0
 80127b8:	d143      	bne.n	8012842 <_malloc_r+0xd6>
 80127ba:	2c00      	cmp	r4, #0
 80127bc:	d04b      	beq.n	8012856 <_malloc_r+0xea>
 80127be:	6823      	ldr	r3, [r4, #0]
 80127c0:	4639      	mov	r1, r7
 80127c2:	4630      	mov	r0, r6
 80127c4:	eb04 0903 	add.w	r9, r4, r3
 80127c8:	f000 fe82 	bl	80134d0 <_sbrk_r>
 80127cc:	4581      	cmp	r9, r0
 80127ce:	d142      	bne.n	8012856 <_malloc_r+0xea>
 80127d0:	6821      	ldr	r1, [r4, #0]
 80127d2:	1a6d      	subs	r5, r5, r1
 80127d4:	4629      	mov	r1, r5
 80127d6:	4630      	mov	r0, r6
 80127d8:	f7ff ffa6 	bl	8012728 <sbrk_aligned>
 80127dc:	3001      	adds	r0, #1
 80127de:	d03a      	beq.n	8012856 <_malloc_r+0xea>
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	442b      	add	r3, r5
 80127e4:	6023      	str	r3, [r4, #0]
 80127e6:	f8d8 3000 	ldr.w	r3, [r8]
 80127ea:	685a      	ldr	r2, [r3, #4]
 80127ec:	bb62      	cbnz	r2, 8012848 <_malloc_r+0xdc>
 80127ee:	f8c8 7000 	str.w	r7, [r8]
 80127f2:	e00f      	b.n	8012814 <_malloc_r+0xa8>
 80127f4:	6822      	ldr	r2, [r4, #0]
 80127f6:	1b52      	subs	r2, r2, r5
 80127f8:	d420      	bmi.n	801283c <_malloc_r+0xd0>
 80127fa:	2a0b      	cmp	r2, #11
 80127fc:	d917      	bls.n	801282e <_malloc_r+0xc2>
 80127fe:	1961      	adds	r1, r4, r5
 8012800:	42a3      	cmp	r3, r4
 8012802:	6025      	str	r5, [r4, #0]
 8012804:	bf18      	it	ne
 8012806:	6059      	strne	r1, [r3, #4]
 8012808:	6863      	ldr	r3, [r4, #4]
 801280a:	bf08      	it	eq
 801280c:	f8c8 1000 	streq.w	r1, [r8]
 8012810:	5162      	str	r2, [r4, r5]
 8012812:	604b      	str	r3, [r1, #4]
 8012814:	4630      	mov	r0, r6
 8012816:	f000 f82f 	bl	8012878 <__malloc_unlock>
 801281a:	f104 000b 	add.w	r0, r4, #11
 801281e:	1d23      	adds	r3, r4, #4
 8012820:	f020 0007 	bic.w	r0, r0, #7
 8012824:	1ac2      	subs	r2, r0, r3
 8012826:	bf1c      	itt	ne
 8012828:	1a1b      	subne	r3, r3, r0
 801282a:	50a3      	strne	r3, [r4, r2]
 801282c:	e7af      	b.n	801278e <_malloc_r+0x22>
 801282e:	6862      	ldr	r2, [r4, #4]
 8012830:	42a3      	cmp	r3, r4
 8012832:	bf0c      	ite	eq
 8012834:	f8c8 2000 	streq.w	r2, [r8]
 8012838:	605a      	strne	r2, [r3, #4]
 801283a:	e7eb      	b.n	8012814 <_malloc_r+0xa8>
 801283c:	4623      	mov	r3, r4
 801283e:	6864      	ldr	r4, [r4, #4]
 8012840:	e7ae      	b.n	80127a0 <_malloc_r+0x34>
 8012842:	463c      	mov	r4, r7
 8012844:	687f      	ldr	r7, [r7, #4]
 8012846:	e7b6      	b.n	80127b6 <_malloc_r+0x4a>
 8012848:	461a      	mov	r2, r3
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	42a3      	cmp	r3, r4
 801284e:	d1fb      	bne.n	8012848 <_malloc_r+0xdc>
 8012850:	2300      	movs	r3, #0
 8012852:	6053      	str	r3, [r2, #4]
 8012854:	e7de      	b.n	8012814 <_malloc_r+0xa8>
 8012856:	230c      	movs	r3, #12
 8012858:	6033      	str	r3, [r6, #0]
 801285a:	4630      	mov	r0, r6
 801285c:	f000 f80c 	bl	8012878 <__malloc_unlock>
 8012860:	e794      	b.n	801278c <_malloc_r+0x20>
 8012862:	6005      	str	r5, [r0, #0]
 8012864:	e7d6      	b.n	8012814 <_malloc_r+0xa8>
 8012866:	bf00      	nop
 8012868:	200063ec 	.word	0x200063ec

0801286c <__malloc_lock>:
 801286c:	4801      	ldr	r0, [pc, #4]	@ (8012874 <__malloc_lock+0x8>)
 801286e:	f000 be7c 	b.w	801356a <__retarget_lock_acquire_recursive>
 8012872:	bf00      	nop
 8012874:	20006530 	.word	0x20006530

08012878 <__malloc_unlock>:
 8012878:	4801      	ldr	r0, [pc, #4]	@ (8012880 <__malloc_unlock+0x8>)
 801287a:	f000 be77 	b.w	801356c <__retarget_lock_release_recursive>
 801287e:	bf00      	nop
 8012880:	20006530 	.word	0x20006530

08012884 <__cvt>:
 8012884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012888:	ec57 6b10 	vmov	r6, r7, d0
 801288c:	2f00      	cmp	r7, #0
 801288e:	460c      	mov	r4, r1
 8012890:	4619      	mov	r1, r3
 8012892:	463b      	mov	r3, r7
 8012894:	bfbb      	ittet	lt
 8012896:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801289a:	461f      	movlt	r7, r3
 801289c:	2300      	movge	r3, #0
 801289e:	232d      	movlt	r3, #45	@ 0x2d
 80128a0:	700b      	strb	r3, [r1, #0]
 80128a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80128a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80128a8:	4691      	mov	r9, r2
 80128aa:	f023 0820 	bic.w	r8, r3, #32
 80128ae:	bfbc      	itt	lt
 80128b0:	4632      	movlt	r2, r6
 80128b2:	4616      	movlt	r6, r2
 80128b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80128b8:	d005      	beq.n	80128c6 <__cvt+0x42>
 80128ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80128be:	d100      	bne.n	80128c2 <__cvt+0x3e>
 80128c0:	3401      	adds	r4, #1
 80128c2:	2102      	movs	r1, #2
 80128c4:	e000      	b.n	80128c8 <__cvt+0x44>
 80128c6:	2103      	movs	r1, #3
 80128c8:	ab03      	add	r3, sp, #12
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	ab02      	add	r3, sp, #8
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	ec47 6b10 	vmov	d0, r6, r7
 80128d4:	4653      	mov	r3, sl
 80128d6:	4622      	mov	r2, r4
 80128d8:	f000 feea 	bl	80136b0 <_dtoa_r>
 80128dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80128e0:	4605      	mov	r5, r0
 80128e2:	d119      	bne.n	8012918 <__cvt+0x94>
 80128e4:	f019 0f01 	tst.w	r9, #1
 80128e8:	d00e      	beq.n	8012908 <__cvt+0x84>
 80128ea:	eb00 0904 	add.w	r9, r0, r4
 80128ee:	2200      	movs	r2, #0
 80128f0:	2300      	movs	r3, #0
 80128f2:	4630      	mov	r0, r6
 80128f4:	4639      	mov	r1, r7
 80128f6:	f7ee f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80128fa:	b108      	cbz	r0, 8012900 <__cvt+0x7c>
 80128fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8012900:	2230      	movs	r2, #48	@ 0x30
 8012902:	9b03      	ldr	r3, [sp, #12]
 8012904:	454b      	cmp	r3, r9
 8012906:	d31e      	bcc.n	8012946 <__cvt+0xc2>
 8012908:	9b03      	ldr	r3, [sp, #12]
 801290a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801290c:	1b5b      	subs	r3, r3, r5
 801290e:	4628      	mov	r0, r5
 8012910:	6013      	str	r3, [r2, #0]
 8012912:	b004      	add	sp, #16
 8012914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801291c:	eb00 0904 	add.w	r9, r0, r4
 8012920:	d1e5      	bne.n	80128ee <__cvt+0x6a>
 8012922:	7803      	ldrb	r3, [r0, #0]
 8012924:	2b30      	cmp	r3, #48	@ 0x30
 8012926:	d10a      	bne.n	801293e <__cvt+0xba>
 8012928:	2200      	movs	r2, #0
 801292a:	2300      	movs	r3, #0
 801292c:	4630      	mov	r0, r6
 801292e:	4639      	mov	r1, r7
 8012930:	f7ee f8da 	bl	8000ae8 <__aeabi_dcmpeq>
 8012934:	b918      	cbnz	r0, 801293e <__cvt+0xba>
 8012936:	f1c4 0401 	rsb	r4, r4, #1
 801293a:	f8ca 4000 	str.w	r4, [sl]
 801293e:	f8da 3000 	ldr.w	r3, [sl]
 8012942:	4499      	add	r9, r3
 8012944:	e7d3      	b.n	80128ee <__cvt+0x6a>
 8012946:	1c59      	adds	r1, r3, #1
 8012948:	9103      	str	r1, [sp, #12]
 801294a:	701a      	strb	r2, [r3, #0]
 801294c:	e7d9      	b.n	8012902 <__cvt+0x7e>

0801294e <__exponent>:
 801294e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012950:	2900      	cmp	r1, #0
 8012952:	bfba      	itte	lt
 8012954:	4249      	neglt	r1, r1
 8012956:	232d      	movlt	r3, #45	@ 0x2d
 8012958:	232b      	movge	r3, #43	@ 0x2b
 801295a:	2909      	cmp	r1, #9
 801295c:	7002      	strb	r2, [r0, #0]
 801295e:	7043      	strb	r3, [r0, #1]
 8012960:	dd29      	ble.n	80129b6 <__exponent+0x68>
 8012962:	f10d 0307 	add.w	r3, sp, #7
 8012966:	461d      	mov	r5, r3
 8012968:	270a      	movs	r7, #10
 801296a:	461a      	mov	r2, r3
 801296c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012970:	fb07 1416 	mls	r4, r7, r6, r1
 8012974:	3430      	adds	r4, #48	@ 0x30
 8012976:	f802 4c01 	strb.w	r4, [r2, #-1]
 801297a:	460c      	mov	r4, r1
 801297c:	2c63      	cmp	r4, #99	@ 0x63
 801297e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012982:	4631      	mov	r1, r6
 8012984:	dcf1      	bgt.n	801296a <__exponent+0x1c>
 8012986:	3130      	adds	r1, #48	@ 0x30
 8012988:	1e94      	subs	r4, r2, #2
 801298a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801298e:	1c41      	adds	r1, r0, #1
 8012990:	4623      	mov	r3, r4
 8012992:	42ab      	cmp	r3, r5
 8012994:	d30a      	bcc.n	80129ac <__exponent+0x5e>
 8012996:	f10d 0309 	add.w	r3, sp, #9
 801299a:	1a9b      	subs	r3, r3, r2
 801299c:	42ac      	cmp	r4, r5
 801299e:	bf88      	it	hi
 80129a0:	2300      	movhi	r3, #0
 80129a2:	3302      	adds	r3, #2
 80129a4:	4403      	add	r3, r0
 80129a6:	1a18      	subs	r0, r3, r0
 80129a8:	b003      	add	sp, #12
 80129aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80129b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80129b4:	e7ed      	b.n	8012992 <__exponent+0x44>
 80129b6:	2330      	movs	r3, #48	@ 0x30
 80129b8:	3130      	adds	r1, #48	@ 0x30
 80129ba:	7083      	strb	r3, [r0, #2]
 80129bc:	70c1      	strb	r1, [r0, #3]
 80129be:	1d03      	adds	r3, r0, #4
 80129c0:	e7f1      	b.n	80129a6 <__exponent+0x58>
	...

080129c4 <_printf_float>:
 80129c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c8:	b08d      	sub	sp, #52	@ 0x34
 80129ca:	460c      	mov	r4, r1
 80129cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80129d0:	4616      	mov	r6, r2
 80129d2:	461f      	mov	r7, r3
 80129d4:	4605      	mov	r5, r0
 80129d6:	f000 fced 	bl	80133b4 <_localeconv_r>
 80129da:	6803      	ldr	r3, [r0, #0]
 80129dc:	9304      	str	r3, [sp, #16]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7ed fc56 	bl	8000290 <strlen>
 80129e4:	2300      	movs	r3, #0
 80129e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80129e8:	f8d8 3000 	ldr.w	r3, [r8]
 80129ec:	9005      	str	r0, [sp, #20]
 80129ee:	3307      	adds	r3, #7
 80129f0:	f023 0307 	bic.w	r3, r3, #7
 80129f4:	f103 0208 	add.w	r2, r3, #8
 80129f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80129fc:	f8d4 b000 	ldr.w	fp, [r4]
 8012a00:	f8c8 2000 	str.w	r2, [r8]
 8012a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012a0c:	9307      	str	r3, [sp, #28]
 8012a0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012a12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8012c8c <_printf_float+0x2c8>)
 8012a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a20:	f7ee f894 	bl	8000b4c <__aeabi_dcmpun>
 8012a24:	bb70      	cbnz	r0, 8012a84 <_printf_float+0xc0>
 8012a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a2a:	4b98      	ldr	r3, [pc, #608]	@ (8012c8c <_printf_float+0x2c8>)
 8012a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a30:	f7ee f86e 	bl	8000b10 <__aeabi_dcmple>
 8012a34:	bb30      	cbnz	r0, 8012a84 <_printf_float+0xc0>
 8012a36:	2200      	movs	r2, #0
 8012a38:	2300      	movs	r3, #0
 8012a3a:	4640      	mov	r0, r8
 8012a3c:	4649      	mov	r1, r9
 8012a3e:	f7ee f85d 	bl	8000afc <__aeabi_dcmplt>
 8012a42:	b110      	cbz	r0, 8012a4a <_printf_float+0x86>
 8012a44:	232d      	movs	r3, #45	@ 0x2d
 8012a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a4a:	4a91      	ldr	r2, [pc, #580]	@ (8012c90 <_printf_float+0x2cc>)
 8012a4c:	4b91      	ldr	r3, [pc, #580]	@ (8012c94 <_printf_float+0x2d0>)
 8012a4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a52:	bf94      	ite	ls
 8012a54:	4690      	movls	r8, r2
 8012a56:	4698      	movhi	r8, r3
 8012a58:	2303      	movs	r3, #3
 8012a5a:	6123      	str	r3, [r4, #16]
 8012a5c:	f02b 0304 	bic.w	r3, fp, #4
 8012a60:	6023      	str	r3, [r4, #0]
 8012a62:	f04f 0900 	mov.w	r9, #0
 8012a66:	9700      	str	r7, [sp, #0]
 8012a68:	4633      	mov	r3, r6
 8012a6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f000 f9d2 	bl	8012e18 <_printf_common>
 8012a74:	3001      	adds	r0, #1
 8012a76:	f040 808d 	bne.w	8012b94 <_printf_float+0x1d0>
 8012a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a7e:	b00d      	add	sp, #52	@ 0x34
 8012a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a84:	4642      	mov	r2, r8
 8012a86:	464b      	mov	r3, r9
 8012a88:	4640      	mov	r0, r8
 8012a8a:	4649      	mov	r1, r9
 8012a8c:	f7ee f85e 	bl	8000b4c <__aeabi_dcmpun>
 8012a90:	b140      	cbz	r0, 8012aa4 <_printf_float+0xe0>
 8012a92:	464b      	mov	r3, r9
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	bfbc      	itt	lt
 8012a98:	232d      	movlt	r3, #45	@ 0x2d
 8012a9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8012c98 <_printf_float+0x2d4>)
 8012aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8012c9c <_printf_float+0x2d8>)
 8012aa2:	e7d4      	b.n	8012a4e <_printf_float+0x8a>
 8012aa4:	6863      	ldr	r3, [r4, #4]
 8012aa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012aaa:	9206      	str	r2, [sp, #24]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	d13b      	bne.n	8012b28 <_printf_float+0x164>
 8012ab0:	2306      	movs	r3, #6
 8012ab2:	6063      	str	r3, [r4, #4]
 8012ab4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012ab8:	2300      	movs	r3, #0
 8012aba:	6022      	str	r2, [r4, #0]
 8012abc:	9303      	str	r3, [sp, #12]
 8012abe:	ab0a      	add	r3, sp, #40	@ 0x28
 8012ac0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012ac4:	ab09      	add	r3, sp, #36	@ 0x24
 8012ac6:	9300      	str	r3, [sp, #0]
 8012ac8:	6861      	ldr	r1, [r4, #4]
 8012aca:	ec49 8b10 	vmov	d0, r8, r9
 8012ace:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f7ff fed6 	bl	8012884 <__cvt>
 8012ad8:	9b06      	ldr	r3, [sp, #24]
 8012ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012adc:	2b47      	cmp	r3, #71	@ 0x47
 8012ade:	4680      	mov	r8, r0
 8012ae0:	d129      	bne.n	8012b36 <_printf_float+0x172>
 8012ae2:	1cc8      	adds	r0, r1, #3
 8012ae4:	db02      	blt.n	8012aec <_printf_float+0x128>
 8012ae6:	6863      	ldr	r3, [r4, #4]
 8012ae8:	4299      	cmp	r1, r3
 8012aea:	dd41      	ble.n	8012b70 <_printf_float+0x1ac>
 8012aec:	f1aa 0a02 	sub.w	sl, sl, #2
 8012af0:	fa5f fa8a 	uxtb.w	sl, sl
 8012af4:	3901      	subs	r1, #1
 8012af6:	4652      	mov	r2, sl
 8012af8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012afc:	9109      	str	r1, [sp, #36]	@ 0x24
 8012afe:	f7ff ff26 	bl	801294e <__exponent>
 8012b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b04:	1813      	adds	r3, r2, r0
 8012b06:	2a01      	cmp	r2, #1
 8012b08:	4681      	mov	r9, r0
 8012b0a:	6123      	str	r3, [r4, #16]
 8012b0c:	dc02      	bgt.n	8012b14 <_printf_float+0x150>
 8012b0e:	6822      	ldr	r2, [r4, #0]
 8012b10:	07d2      	lsls	r2, r2, #31
 8012b12:	d501      	bpl.n	8012b18 <_printf_float+0x154>
 8012b14:	3301      	adds	r3, #1
 8012b16:	6123      	str	r3, [r4, #16]
 8012b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d0a2      	beq.n	8012a66 <_printf_float+0xa2>
 8012b20:	232d      	movs	r3, #45	@ 0x2d
 8012b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b26:	e79e      	b.n	8012a66 <_printf_float+0xa2>
 8012b28:	9a06      	ldr	r2, [sp, #24]
 8012b2a:	2a47      	cmp	r2, #71	@ 0x47
 8012b2c:	d1c2      	bne.n	8012ab4 <_printf_float+0xf0>
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d1c0      	bne.n	8012ab4 <_printf_float+0xf0>
 8012b32:	2301      	movs	r3, #1
 8012b34:	e7bd      	b.n	8012ab2 <_printf_float+0xee>
 8012b36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012b3a:	d9db      	bls.n	8012af4 <_printf_float+0x130>
 8012b3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012b40:	d118      	bne.n	8012b74 <_printf_float+0x1b0>
 8012b42:	2900      	cmp	r1, #0
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	dd0b      	ble.n	8012b60 <_printf_float+0x19c>
 8012b48:	6121      	str	r1, [r4, #16]
 8012b4a:	b913      	cbnz	r3, 8012b52 <_printf_float+0x18e>
 8012b4c:	6822      	ldr	r2, [r4, #0]
 8012b4e:	07d0      	lsls	r0, r2, #31
 8012b50:	d502      	bpl.n	8012b58 <_printf_float+0x194>
 8012b52:	3301      	adds	r3, #1
 8012b54:	440b      	add	r3, r1
 8012b56:	6123      	str	r3, [r4, #16]
 8012b58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012b5a:	f04f 0900 	mov.w	r9, #0
 8012b5e:	e7db      	b.n	8012b18 <_printf_float+0x154>
 8012b60:	b913      	cbnz	r3, 8012b68 <_printf_float+0x1a4>
 8012b62:	6822      	ldr	r2, [r4, #0]
 8012b64:	07d2      	lsls	r2, r2, #31
 8012b66:	d501      	bpl.n	8012b6c <_printf_float+0x1a8>
 8012b68:	3302      	adds	r3, #2
 8012b6a:	e7f4      	b.n	8012b56 <_printf_float+0x192>
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e7f2      	b.n	8012b56 <_printf_float+0x192>
 8012b70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b76:	4299      	cmp	r1, r3
 8012b78:	db05      	blt.n	8012b86 <_printf_float+0x1c2>
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	6121      	str	r1, [r4, #16]
 8012b7e:	07d8      	lsls	r0, r3, #31
 8012b80:	d5ea      	bpl.n	8012b58 <_printf_float+0x194>
 8012b82:	1c4b      	adds	r3, r1, #1
 8012b84:	e7e7      	b.n	8012b56 <_printf_float+0x192>
 8012b86:	2900      	cmp	r1, #0
 8012b88:	bfd4      	ite	le
 8012b8a:	f1c1 0202 	rsble	r2, r1, #2
 8012b8e:	2201      	movgt	r2, #1
 8012b90:	4413      	add	r3, r2
 8012b92:	e7e0      	b.n	8012b56 <_printf_float+0x192>
 8012b94:	6823      	ldr	r3, [r4, #0]
 8012b96:	055a      	lsls	r2, r3, #21
 8012b98:	d407      	bmi.n	8012baa <_printf_float+0x1e6>
 8012b9a:	6923      	ldr	r3, [r4, #16]
 8012b9c:	4642      	mov	r2, r8
 8012b9e:	4631      	mov	r1, r6
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	47b8      	blx	r7
 8012ba4:	3001      	adds	r0, #1
 8012ba6:	d12b      	bne.n	8012c00 <_printf_float+0x23c>
 8012ba8:	e767      	b.n	8012a7a <_printf_float+0xb6>
 8012baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012bae:	f240 80dd 	bls.w	8012d6c <_printf_float+0x3a8>
 8012bb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	2300      	movs	r3, #0
 8012bba:	f7ed ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d033      	beq.n	8012c2a <_printf_float+0x266>
 8012bc2:	4a37      	ldr	r2, [pc, #220]	@ (8012ca0 <_printf_float+0x2dc>)
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	4631      	mov	r1, r6
 8012bc8:	4628      	mov	r0, r5
 8012bca:	47b8      	blx	r7
 8012bcc:	3001      	adds	r0, #1
 8012bce:	f43f af54 	beq.w	8012a7a <_printf_float+0xb6>
 8012bd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012bd6:	4543      	cmp	r3, r8
 8012bd8:	db02      	blt.n	8012be0 <_printf_float+0x21c>
 8012bda:	6823      	ldr	r3, [r4, #0]
 8012bdc:	07d8      	lsls	r0, r3, #31
 8012bde:	d50f      	bpl.n	8012c00 <_printf_float+0x23c>
 8012be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012be4:	4631      	mov	r1, r6
 8012be6:	4628      	mov	r0, r5
 8012be8:	47b8      	blx	r7
 8012bea:	3001      	adds	r0, #1
 8012bec:	f43f af45 	beq.w	8012a7a <_printf_float+0xb6>
 8012bf0:	f04f 0900 	mov.w	r9, #0
 8012bf4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012bf8:	f104 0a1a 	add.w	sl, r4, #26
 8012bfc:	45c8      	cmp	r8, r9
 8012bfe:	dc09      	bgt.n	8012c14 <_printf_float+0x250>
 8012c00:	6823      	ldr	r3, [r4, #0]
 8012c02:	079b      	lsls	r3, r3, #30
 8012c04:	f100 8103 	bmi.w	8012e0e <_printf_float+0x44a>
 8012c08:	68e0      	ldr	r0, [r4, #12]
 8012c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c0c:	4298      	cmp	r0, r3
 8012c0e:	bfb8      	it	lt
 8012c10:	4618      	movlt	r0, r3
 8012c12:	e734      	b.n	8012a7e <_printf_float+0xba>
 8012c14:	2301      	movs	r3, #1
 8012c16:	4652      	mov	r2, sl
 8012c18:	4631      	mov	r1, r6
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	47b8      	blx	r7
 8012c1e:	3001      	adds	r0, #1
 8012c20:	f43f af2b 	beq.w	8012a7a <_printf_float+0xb6>
 8012c24:	f109 0901 	add.w	r9, r9, #1
 8012c28:	e7e8      	b.n	8012bfc <_printf_float+0x238>
 8012c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	dc39      	bgt.n	8012ca4 <_printf_float+0x2e0>
 8012c30:	4a1b      	ldr	r2, [pc, #108]	@ (8012ca0 <_printf_float+0x2dc>)
 8012c32:	2301      	movs	r3, #1
 8012c34:	4631      	mov	r1, r6
 8012c36:	4628      	mov	r0, r5
 8012c38:	47b8      	blx	r7
 8012c3a:	3001      	adds	r0, #1
 8012c3c:	f43f af1d 	beq.w	8012a7a <_printf_float+0xb6>
 8012c40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012c44:	ea59 0303 	orrs.w	r3, r9, r3
 8012c48:	d102      	bne.n	8012c50 <_printf_float+0x28c>
 8012c4a:	6823      	ldr	r3, [r4, #0]
 8012c4c:	07d9      	lsls	r1, r3, #31
 8012c4e:	d5d7      	bpl.n	8012c00 <_printf_float+0x23c>
 8012c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c54:	4631      	mov	r1, r6
 8012c56:	4628      	mov	r0, r5
 8012c58:	47b8      	blx	r7
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	f43f af0d 	beq.w	8012a7a <_printf_float+0xb6>
 8012c60:	f04f 0a00 	mov.w	sl, #0
 8012c64:	f104 0b1a 	add.w	fp, r4, #26
 8012c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c6a:	425b      	negs	r3, r3
 8012c6c:	4553      	cmp	r3, sl
 8012c6e:	dc01      	bgt.n	8012c74 <_printf_float+0x2b0>
 8012c70:	464b      	mov	r3, r9
 8012c72:	e793      	b.n	8012b9c <_printf_float+0x1d8>
 8012c74:	2301      	movs	r3, #1
 8012c76:	465a      	mov	r2, fp
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	47b8      	blx	r7
 8012c7e:	3001      	adds	r0, #1
 8012c80:	f43f aefb 	beq.w	8012a7a <_printf_float+0xb6>
 8012c84:	f10a 0a01 	add.w	sl, sl, #1
 8012c88:	e7ee      	b.n	8012c68 <_printf_float+0x2a4>
 8012c8a:	bf00      	nop
 8012c8c:	7fefffff 	.word	0x7fefffff
 8012c90:	080160e0 	.word	0x080160e0
 8012c94:	080160e4 	.word	0x080160e4
 8012c98:	080160e8 	.word	0x080160e8
 8012c9c:	080160ec 	.word	0x080160ec
 8012ca0:	080160f0 	.word	0x080160f0
 8012ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012caa:	4553      	cmp	r3, sl
 8012cac:	bfa8      	it	ge
 8012cae:	4653      	movge	r3, sl
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	4699      	mov	r9, r3
 8012cb4:	dc36      	bgt.n	8012d24 <_printf_float+0x360>
 8012cb6:	f04f 0b00 	mov.w	fp, #0
 8012cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cbe:	f104 021a 	add.w	r2, r4, #26
 8012cc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012cc4:	9306      	str	r3, [sp, #24]
 8012cc6:	eba3 0309 	sub.w	r3, r3, r9
 8012cca:	455b      	cmp	r3, fp
 8012ccc:	dc31      	bgt.n	8012d32 <_printf_float+0x36e>
 8012cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cd0:	459a      	cmp	sl, r3
 8012cd2:	dc3a      	bgt.n	8012d4a <_printf_float+0x386>
 8012cd4:	6823      	ldr	r3, [r4, #0]
 8012cd6:	07da      	lsls	r2, r3, #31
 8012cd8:	d437      	bmi.n	8012d4a <_printf_float+0x386>
 8012cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cdc:	ebaa 0903 	sub.w	r9, sl, r3
 8012ce0:	9b06      	ldr	r3, [sp, #24]
 8012ce2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ce6:	4599      	cmp	r9, r3
 8012ce8:	bfa8      	it	ge
 8012cea:	4699      	movge	r9, r3
 8012cec:	f1b9 0f00 	cmp.w	r9, #0
 8012cf0:	dc33      	bgt.n	8012d5a <_printf_float+0x396>
 8012cf2:	f04f 0800 	mov.w	r8, #0
 8012cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cfa:	f104 0b1a 	add.w	fp, r4, #26
 8012cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d00:	ebaa 0303 	sub.w	r3, sl, r3
 8012d04:	eba3 0309 	sub.w	r3, r3, r9
 8012d08:	4543      	cmp	r3, r8
 8012d0a:	f77f af79 	ble.w	8012c00 <_printf_float+0x23c>
 8012d0e:	2301      	movs	r3, #1
 8012d10:	465a      	mov	r2, fp
 8012d12:	4631      	mov	r1, r6
 8012d14:	4628      	mov	r0, r5
 8012d16:	47b8      	blx	r7
 8012d18:	3001      	adds	r0, #1
 8012d1a:	f43f aeae 	beq.w	8012a7a <_printf_float+0xb6>
 8012d1e:	f108 0801 	add.w	r8, r8, #1
 8012d22:	e7ec      	b.n	8012cfe <_printf_float+0x33a>
 8012d24:	4642      	mov	r2, r8
 8012d26:	4631      	mov	r1, r6
 8012d28:	4628      	mov	r0, r5
 8012d2a:	47b8      	blx	r7
 8012d2c:	3001      	adds	r0, #1
 8012d2e:	d1c2      	bne.n	8012cb6 <_printf_float+0x2f2>
 8012d30:	e6a3      	b.n	8012a7a <_printf_float+0xb6>
 8012d32:	2301      	movs	r3, #1
 8012d34:	4631      	mov	r1, r6
 8012d36:	4628      	mov	r0, r5
 8012d38:	9206      	str	r2, [sp, #24]
 8012d3a:	47b8      	blx	r7
 8012d3c:	3001      	adds	r0, #1
 8012d3e:	f43f ae9c 	beq.w	8012a7a <_printf_float+0xb6>
 8012d42:	9a06      	ldr	r2, [sp, #24]
 8012d44:	f10b 0b01 	add.w	fp, fp, #1
 8012d48:	e7bb      	b.n	8012cc2 <_printf_float+0x2fe>
 8012d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d4e:	4631      	mov	r1, r6
 8012d50:	4628      	mov	r0, r5
 8012d52:	47b8      	blx	r7
 8012d54:	3001      	adds	r0, #1
 8012d56:	d1c0      	bne.n	8012cda <_printf_float+0x316>
 8012d58:	e68f      	b.n	8012a7a <_printf_float+0xb6>
 8012d5a:	9a06      	ldr	r2, [sp, #24]
 8012d5c:	464b      	mov	r3, r9
 8012d5e:	4442      	add	r2, r8
 8012d60:	4631      	mov	r1, r6
 8012d62:	4628      	mov	r0, r5
 8012d64:	47b8      	blx	r7
 8012d66:	3001      	adds	r0, #1
 8012d68:	d1c3      	bne.n	8012cf2 <_printf_float+0x32e>
 8012d6a:	e686      	b.n	8012a7a <_printf_float+0xb6>
 8012d6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012d70:	f1ba 0f01 	cmp.w	sl, #1
 8012d74:	dc01      	bgt.n	8012d7a <_printf_float+0x3b6>
 8012d76:	07db      	lsls	r3, r3, #31
 8012d78:	d536      	bpl.n	8012de8 <_printf_float+0x424>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	4642      	mov	r2, r8
 8012d7e:	4631      	mov	r1, r6
 8012d80:	4628      	mov	r0, r5
 8012d82:	47b8      	blx	r7
 8012d84:	3001      	adds	r0, #1
 8012d86:	f43f ae78 	beq.w	8012a7a <_printf_float+0xb6>
 8012d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d8e:	4631      	mov	r1, r6
 8012d90:	4628      	mov	r0, r5
 8012d92:	47b8      	blx	r7
 8012d94:	3001      	adds	r0, #1
 8012d96:	f43f ae70 	beq.w	8012a7a <_printf_float+0xb6>
 8012d9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012d9e:	2200      	movs	r2, #0
 8012da0:	2300      	movs	r3, #0
 8012da2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012da6:	f7ed fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8012daa:	b9c0      	cbnz	r0, 8012dde <_printf_float+0x41a>
 8012dac:	4653      	mov	r3, sl
 8012dae:	f108 0201 	add.w	r2, r8, #1
 8012db2:	4631      	mov	r1, r6
 8012db4:	4628      	mov	r0, r5
 8012db6:	47b8      	blx	r7
 8012db8:	3001      	adds	r0, #1
 8012dba:	d10c      	bne.n	8012dd6 <_printf_float+0x412>
 8012dbc:	e65d      	b.n	8012a7a <_printf_float+0xb6>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	465a      	mov	r2, fp
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	47b8      	blx	r7
 8012dc8:	3001      	adds	r0, #1
 8012dca:	f43f ae56 	beq.w	8012a7a <_printf_float+0xb6>
 8012dce:	f108 0801 	add.w	r8, r8, #1
 8012dd2:	45d0      	cmp	r8, sl
 8012dd4:	dbf3      	blt.n	8012dbe <_printf_float+0x3fa>
 8012dd6:	464b      	mov	r3, r9
 8012dd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012ddc:	e6df      	b.n	8012b9e <_printf_float+0x1da>
 8012dde:	f04f 0800 	mov.w	r8, #0
 8012de2:	f104 0b1a 	add.w	fp, r4, #26
 8012de6:	e7f4      	b.n	8012dd2 <_printf_float+0x40e>
 8012de8:	2301      	movs	r3, #1
 8012dea:	4642      	mov	r2, r8
 8012dec:	e7e1      	b.n	8012db2 <_printf_float+0x3ee>
 8012dee:	2301      	movs	r3, #1
 8012df0:	464a      	mov	r2, r9
 8012df2:	4631      	mov	r1, r6
 8012df4:	4628      	mov	r0, r5
 8012df6:	47b8      	blx	r7
 8012df8:	3001      	adds	r0, #1
 8012dfa:	f43f ae3e 	beq.w	8012a7a <_printf_float+0xb6>
 8012dfe:	f108 0801 	add.w	r8, r8, #1
 8012e02:	68e3      	ldr	r3, [r4, #12]
 8012e04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e06:	1a5b      	subs	r3, r3, r1
 8012e08:	4543      	cmp	r3, r8
 8012e0a:	dcf0      	bgt.n	8012dee <_printf_float+0x42a>
 8012e0c:	e6fc      	b.n	8012c08 <_printf_float+0x244>
 8012e0e:	f04f 0800 	mov.w	r8, #0
 8012e12:	f104 0919 	add.w	r9, r4, #25
 8012e16:	e7f4      	b.n	8012e02 <_printf_float+0x43e>

08012e18 <_printf_common>:
 8012e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e1c:	4616      	mov	r6, r2
 8012e1e:	4698      	mov	r8, r3
 8012e20:	688a      	ldr	r2, [r1, #8]
 8012e22:	690b      	ldr	r3, [r1, #16]
 8012e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	bfb8      	it	lt
 8012e2c:	4613      	movlt	r3, r2
 8012e2e:	6033      	str	r3, [r6, #0]
 8012e30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012e34:	4607      	mov	r7, r0
 8012e36:	460c      	mov	r4, r1
 8012e38:	b10a      	cbz	r2, 8012e3e <_printf_common+0x26>
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	6033      	str	r3, [r6, #0]
 8012e3e:	6823      	ldr	r3, [r4, #0]
 8012e40:	0699      	lsls	r1, r3, #26
 8012e42:	bf42      	ittt	mi
 8012e44:	6833      	ldrmi	r3, [r6, #0]
 8012e46:	3302      	addmi	r3, #2
 8012e48:	6033      	strmi	r3, [r6, #0]
 8012e4a:	6825      	ldr	r5, [r4, #0]
 8012e4c:	f015 0506 	ands.w	r5, r5, #6
 8012e50:	d106      	bne.n	8012e60 <_printf_common+0x48>
 8012e52:	f104 0a19 	add.w	sl, r4, #25
 8012e56:	68e3      	ldr	r3, [r4, #12]
 8012e58:	6832      	ldr	r2, [r6, #0]
 8012e5a:	1a9b      	subs	r3, r3, r2
 8012e5c:	42ab      	cmp	r3, r5
 8012e5e:	dc26      	bgt.n	8012eae <_printf_common+0x96>
 8012e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012e64:	6822      	ldr	r2, [r4, #0]
 8012e66:	3b00      	subs	r3, #0
 8012e68:	bf18      	it	ne
 8012e6a:	2301      	movne	r3, #1
 8012e6c:	0692      	lsls	r2, r2, #26
 8012e6e:	d42b      	bmi.n	8012ec8 <_printf_common+0xb0>
 8012e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012e74:	4641      	mov	r1, r8
 8012e76:	4638      	mov	r0, r7
 8012e78:	47c8      	blx	r9
 8012e7a:	3001      	adds	r0, #1
 8012e7c:	d01e      	beq.n	8012ebc <_printf_common+0xa4>
 8012e7e:	6823      	ldr	r3, [r4, #0]
 8012e80:	6922      	ldr	r2, [r4, #16]
 8012e82:	f003 0306 	and.w	r3, r3, #6
 8012e86:	2b04      	cmp	r3, #4
 8012e88:	bf02      	ittt	eq
 8012e8a:	68e5      	ldreq	r5, [r4, #12]
 8012e8c:	6833      	ldreq	r3, [r6, #0]
 8012e8e:	1aed      	subeq	r5, r5, r3
 8012e90:	68a3      	ldr	r3, [r4, #8]
 8012e92:	bf0c      	ite	eq
 8012e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e98:	2500      	movne	r5, #0
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	bfc4      	itt	gt
 8012e9e:	1a9b      	subgt	r3, r3, r2
 8012ea0:	18ed      	addgt	r5, r5, r3
 8012ea2:	2600      	movs	r6, #0
 8012ea4:	341a      	adds	r4, #26
 8012ea6:	42b5      	cmp	r5, r6
 8012ea8:	d11a      	bne.n	8012ee0 <_printf_common+0xc8>
 8012eaa:	2000      	movs	r0, #0
 8012eac:	e008      	b.n	8012ec0 <_printf_common+0xa8>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	4652      	mov	r2, sl
 8012eb2:	4641      	mov	r1, r8
 8012eb4:	4638      	mov	r0, r7
 8012eb6:	47c8      	blx	r9
 8012eb8:	3001      	adds	r0, #1
 8012eba:	d103      	bne.n	8012ec4 <_printf_common+0xac>
 8012ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ec4:	3501      	adds	r5, #1
 8012ec6:	e7c6      	b.n	8012e56 <_printf_common+0x3e>
 8012ec8:	18e1      	adds	r1, r4, r3
 8012eca:	1c5a      	adds	r2, r3, #1
 8012ecc:	2030      	movs	r0, #48	@ 0x30
 8012ece:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012ed2:	4422      	add	r2, r4
 8012ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012edc:	3302      	adds	r3, #2
 8012ede:	e7c7      	b.n	8012e70 <_printf_common+0x58>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	4622      	mov	r2, r4
 8012ee4:	4641      	mov	r1, r8
 8012ee6:	4638      	mov	r0, r7
 8012ee8:	47c8      	blx	r9
 8012eea:	3001      	adds	r0, #1
 8012eec:	d0e6      	beq.n	8012ebc <_printf_common+0xa4>
 8012eee:	3601      	adds	r6, #1
 8012ef0:	e7d9      	b.n	8012ea6 <_printf_common+0x8e>
	...

08012ef4 <_printf_i>:
 8012ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef8:	7e0f      	ldrb	r7, [r1, #24]
 8012efa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012efc:	2f78      	cmp	r7, #120	@ 0x78
 8012efe:	4691      	mov	r9, r2
 8012f00:	4680      	mov	r8, r0
 8012f02:	460c      	mov	r4, r1
 8012f04:	469a      	mov	sl, r3
 8012f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012f0a:	d807      	bhi.n	8012f1c <_printf_i+0x28>
 8012f0c:	2f62      	cmp	r7, #98	@ 0x62
 8012f0e:	d80a      	bhi.n	8012f26 <_printf_i+0x32>
 8012f10:	2f00      	cmp	r7, #0
 8012f12:	f000 80d2 	beq.w	80130ba <_printf_i+0x1c6>
 8012f16:	2f58      	cmp	r7, #88	@ 0x58
 8012f18:	f000 80b9 	beq.w	801308e <_printf_i+0x19a>
 8012f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012f24:	e03a      	b.n	8012f9c <_printf_i+0xa8>
 8012f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012f2a:	2b15      	cmp	r3, #21
 8012f2c:	d8f6      	bhi.n	8012f1c <_printf_i+0x28>
 8012f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8012f34 <_printf_i+0x40>)
 8012f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f34:	08012f8d 	.word	0x08012f8d
 8012f38:	08012fa1 	.word	0x08012fa1
 8012f3c:	08012f1d 	.word	0x08012f1d
 8012f40:	08012f1d 	.word	0x08012f1d
 8012f44:	08012f1d 	.word	0x08012f1d
 8012f48:	08012f1d 	.word	0x08012f1d
 8012f4c:	08012fa1 	.word	0x08012fa1
 8012f50:	08012f1d 	.word	0x08012f1d
 8012f54:	08012f1d 	.word	0x08012f1d
 8012f58:	08012f1d 	.word	0x08012f1d
 8012f5c:	08012f1d 	.word	0x08012f1d
 8012f60:	080130a1 	.word	0x080130a1
 8012f64:	08012fcb 	.word	0x08012fcb
 8012f68:	0801305b 	.word	0x0801305b
 8012f6c:	08012f1d 	.word	0x08012f1d
 8012f70:	08012f1d 	.word	0x08012f1d
 8012f74:	080130c3 	.word	0x080130c3
 8012f78:	08012f1d 	.word	0x08012f1d
 8012f7c:	08012fcb 	.word	0x08012fcb
 8012f80:	08012f1d 	.word	0x08012f1d
 8012f84:	08012f1d 	.word	0x08012f1d
 8012f88:	08013063 	.word	0x08013063
 8012f8c:	6833      	ldr	r3, [r6, #0]
 8012f8e:	1d1a      	adds	r2, r3, #4
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	6032      	str	r2, [r6, #0]
 8012f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	e09d      	b.n	80130dc <_printf_i+0x1e8>
 8012fa0:	6833      	ldr	r3, [r6, #0]
 8012fa2:	6820      	ldr	r0, [r4, #0]
 8012fa4:	1d19      	adds	r1, r3, #4
 8012fa6:	6031      	str	r1, [r6, #0]
 8012fa8:	0606      	lsls	r6, r0, #24
 8012faa:	d501      	bpl.n	8012fb0 <_printf_i+0xbc>
 8012fac:	681d      	ldr	r5, [r3, #0]
 8012fae:	e003      	b.n	8012fb8 <_printf_i+0xc4>
 8012fb0:	0645      	lsls	r5, r0, #25
 8012fb2:	d5fb      	bpl.n	8012fac <_printf_i+0xb8>
 8012fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012fb8:	2d00      	cmp	r5, #0
 8012fba:	da03      	bge.n	8012fc4 <_printf_i+0xd0>
 8012fbc:	232d      	movs	r3, #45	@ 0x2d
 8012fbe:	426d      	negs	r5, r5
 8012fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012fc4:	4859      	ldr	r0, [pc, #356]	@ (801312c <_printf_i+0x238>)
 8012fc6:	230a      	movs	r3, #10
 8012fc8:	e011      	b.n	8012fee <_printf_i+0xfa>
 8012fca:	6821      	ldr	r1, [r4, #0]
 8012fcc:	6833      	ldr	r3, [r6, #0]
 8012fce:	0608      	lsls	r0, r1, #24
 8012fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012fd4:	d402      	bmi.n	8012fdc <_printf_i+0xe8>
 8012fd6:	0649      	lsls	r1, r1, #25
 8012fd8:	bf48      	it	mi
 8012fda:	b2ad      	uxthmi	r5, r5
 8012fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012fde:	4853      	ldr	r0, [pc, #332]	@ (801312c <_printf_i+0x238>)
 8012fe0:	6033      	str	r3, [r6, #0]
 8012fe2:	bf14      	ite	ne
 8012fe4:	230a      	movne	r3, #10
 8012fe6:	2308      	moveq	r3, #8
 8012fe8:	2100      	movs	r1, #0
 8012fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012fee:	6866      	ldr	r6, [r4, #4]
 8012ff0:	60a6      	str	r6, [r4, #8]
 8012ff2:	2e00      	cmp	r6, #0
 8012ff4:	bfa2      	ittt	ge
 8012ff6:	6821      	ldrge	r1, [r4, #0]
 8012ff8:	f021 0104 	bicge.w	r1, r1, #4
 8012ffc:	6021      	strge	r1, [r4, #0]
 8012ffe:	b90d      	cbnz	r5, 8013004 <_printf_i+0x110>
 8013000:	2e00      	cmp	r6, #0
 8013002:	d04b      	beq.n	801309c <_printf_i+0x1a8>
 8013004:	4616      	mov	r6, r2
 8013006:	fbb5 f1f3 	udiv	r1, r5, r3
 801300a:	fb03 5711 	mls	r7, r3, r1, r5
 801300e:	5dc7      	ldrb	r7, [r0, r7]
 8013010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013014:	462f      	mov	r7, r5
 8013016:	42bb      	cmp	r3, r7
 8013018:	460d      	mov	r5, r1
 801301a:	d9f4      	bls.n	8013006 <_printf_i+0x112>
 801301c:	2b08      	cmp	r3, #8
 801301e:	d10b      	bne.n	8013038 <_printf_i+0x144>
 8013020:	6823      	ldr	r3, [r4, #0]
 8013022:	07df      	lsls	r7, r3, #31
 8013024:	d508      	bpl.n	8013038 <_printf_i+0x144>
 8013026:	6923      	ldr	r3, [r4, #16]
 8013028:	6861      	ldr	r1, [r4, #4]
 801302a:	4299      	cmp	r1, r3
 801302c:	bfde      	ittt	le
 801302e:	2330      	movle	r3, #48	@ 0x30
 8013030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013034:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013038:	1b92      	subs	r2, r2, r6
 801303a:	6122      	str	r2, [r4, #16]
 801303c:	f8cd a000 	str.w	sl, [sp]
 8013040:	464b      	mov	r3, r9
 8013042:	aa03      	add	r2, sp, #12
 8013044:	4621      	mov	r1, r4
 8013046:	4640      	mov	r0, r8
 8013048:	f7ff fee6 	bl	8012e18 <_printf_common>
 801304c:	3001      	adds	r0, #1
 801304e:	d14a      	bne.n	80130e6 <_printf_i+0x1f2>
 8013050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013054:	b004      	add	sp, #16
 8013056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801305a:	6823      	ldr	r3, [r4, #0]
 801305c:	f043 0320 	orr.w	r3, r3, #32
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	4833      	ldr	r0, [pc, #204]	@ (8013130 <_printf_i+0x23c>)
 8013064:	2778      	movs	r7, #120	@ 0x78
 8013066:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801306a:	6823      	ldr	r3, [r4, #0]
 801306c:	6831      	ldr	r1, [r6, #0]
 801306e:	061f      	lsls	r7, r3, #24
 8013070:	f851 5b04 	ldr.w	r5, [r1], #4
 8013074:	d402      	bmi.n	801307c <_printf_i+0x188>
 8013076:	065f      	lsls	r7, r3, #25
 8013078:	bf48      	it	mi
 801307a:	b2ad      	uxthmi	r5, r5
 801307c:	6031      	str	r1, [r6, #0]
 801307e:	07d9      	lsls	r1, r3, #31
 8013080:	bf44      	itt	mi
 8013082:	f043 0320 	orrmi.w	r3, r3, #32
 8013086:	6023      	strmi	r3, [r4, #0]
 8013088:	b11d      	cbz	r5, 8013092 <_printf_i+0x19e>
 801308a:	2310      	movs	r3, #16
 801308c:	e7ac      	b.n	8012fe8 <_printf_i+0xf4>
 801308e:	4827      	ldr	r0, [pc, #156]	@ (801312c <_printf_i+0x238>)
 8013090:	e7e9      	b.n	8013066 <_printf_i+0x172>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	f023 0320 	bic.w	r3, r3, #32
 8013098:	6023      	str	r3, [r4, #0]
 801309a:	e7f6      	b.n	801308a <_printf_i+0x196>
 801309c:	4616      	mov	r6, r2
 801309e:	e7bd      	b.n	801301c <_printf_i+0x128>
 80130a0:	6833      	ldr	r3, [r6, #0]
 80130a2:	6825      	ldr	r5, [r4, #0]
 80130a4:	6961      	ldr	r1, [r4, #20]
 80130a6:	1d18      	adds	r0, r3, #4
 80130a8:	6030      	str	r0, [r6, #0]
 80130aa:	062e      	lsls	r6, r5, #24
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	d501      	bpl.n	80130b4 <_printf_i+0x1c0>
 80130b0:	6019      	str	r1, [r3, #0]
 80130b2:	e002      	b.n	80130ba <_printf_i+0x1c6>
 80130b4:	0668      	lsls	r0, r5, #25
 80130b6:	d5fb      	bpl.n	80130b0 <_printf_i+0x1bc>
 80130b8:	8019      	strh	r1, [r3, #0]
 80130ba:	2300      	movs	r3, #0
 80130bc:	6123      	str	r3, [r4, #16]
 80130be:	4616      	mov	r6, r2
 80130c0:	e7bc      	b.n	801303c <_printf_i+0x148>
 80130c2:	6833      	ldr	r3, [r6, #0]
 80130c4:	1d1a      	adds	r2, r3, #4
 80130c6:	6032      	str	r2, [r6, #0]
 80130c8:	681e      	ldr	r6, [r3, #0]
 80130ca:	6862      	ldr	r2, [r4, #4]
 80130cc:	2100      	movs	r1, #0
 80130ce:	4630      	mov	r0, r6
 80130d0:	f7ed f88e 	bl	80001f0 <memchr>
 80130d4:	b108      	cbz	r0, 80130da <_printf_i+0x1e6>
 80130d6:	1b80      	subs	r0, r0, r6
 80130d8:	6060      	str	r0, [r4, #4]
 80130da:	6863      	ldr	r3, [r4, #4]
 80130dc:	6123      	str	r3, [r4, #16]
 80130de:	2300      	movs	r3, #0
 80130e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130e4:	e7aa      	b.n	801303c <_printf_i+0x148>
 80130e6:	6923      	ldr	r3, [r4, #16]
 80130e8:	4632      	mov	r2, r6
 80130ea:	4649      	mov	r1, r9
 80130ec:	4640      	mov	r0, r8
 80130ee:	47d0      	blx	sl
 80130f0:	3001      	adds	r0, #1
 80130f2:	d0ad      	beq.n	8013050 <_printf_i+0x15c>
 80130f4:	6823      	ldr	r3, [r4, #0]
 80130f6:	079b      	lsls	r3, r3, #30
 80130f8:	d413      	bmi.n	8013122 <_printf_i+0x22e>
 80130fa:	68e0      	ldr	r0, [r4, #12]
 80130fc:	9b03      	ldr	r3, [sp, #12]
 80130fe:	4298      	cmp	r0, r3
 8013100:	bfb8      	it	lt
 8013102:	4618      	movlt	r0, r3
 8013104:	e7a6      	b.n	8013054 <_printf_i+0x160>
 8013106:	2301      	movs	r3, #1
 8013108:	4632      	mov	r2, r6
 801310a:	4649      	mov	r1, r9
 801310c:	4640      	mov	r0, r8
 801310e:	47d0      	blx	sl
 8013110:	3001      	adds	r0, #1
 8013112:	d09d      	beq.n	8013050 <_printf_i+0x15c>
 8013114:	3501      	adds	r5, #1
 8013116:	68e3      	ldr	r3, [r4, #12]
 8013118:	9903      	ldr	r1, [sp, #12]
 801311a:	1a5b      	subs	r3, r3, r1
 801311c:	42ab      	cmp	r3, r5
 801311e:	dcf2      	bgt.n	8013106 <_printf_i+0x212>
 8013120:	e7eb      	b.n	80130fa <_printf_i+0x206>
 8013122:	2500      	movs	r5, #0
 8013124:	f104 0619 	add.w	r6, r4, #25
 8013128:	e7f5      	b.n	8013116 <_printf_i+0x222>
 801312a:	bf00      	nop
 801312c:	080160f2 	.word	0x080160f2
 8013130:	08016103 	.word	0x08016103

08013134 <std>:
 8013134:	2300      	movs	r3, #0
 8013136:	b510      	push	{r4, lr}
 8013138:	4604      	mov	r4, r0
 801313a:	e9c0 3300 	strd	r3, r3, [r0]
 801313e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013142:	6083      	str	r3, [r0, #8]
 8013144:	8181      	strh	r1, [r0, #12]
 8013146:	6643      	str	r3, [r0, #100]	@ 0x64
 8013148:	81c2      	strh	r2, [r0, #14]
 801314a:	6183      	str	r3, [r0, #24]
 801314c:	4619      	mov	r1, r3
 801314e:	2208      	movs	r2, #8
 8013150:	305c      	adds	r0, #92	@ 0x5c
 8013152:	f000 f926 	bl	80133a2 <memset>
 8013156:	4b0d      	ldr	r3, [pc, #52]	@ (801318c <std+0x58>)
 8013158:	6263      	str	r3, [r4, #36]	@ 0x24
 801315a:	4b0d      	ldr	r3, [pc, #52]	@ (8013190 <std+0x5c>)
 801315c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801315e:	4b0d      	ldr	r3, [pc, #52]	@ (8013194 <std+0x60>)
 8013160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013162:	4b0d      	ldr	r3, [pc, #52]	@ (8013198 <std+0x64>)
 8013164:	6323      	str	r3, [r4, #48]	@ 0x30
 8013166:	4b0d      	ldr	r3, [pc, #52]	@ (801319c <std+0x68>)
 8013168:	6224      	str	r4, [r4, #32]
 801316a:	429c      	cmp	r4, r3
 801316c:	d006      	beq.n	801317c <std+0x48>
 801316e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013172:	4294      	cmp	r4, r2
 8013174:	d002      	beq.n	801317c <std+0x48>
 8013176:	33d0      	adds	r3, #208	@ 0xd0
 8013178:	429c      	cmp	r4, r3
 801317a:	d105      	bne.n	8013188 <std+0x54>
 801317c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013184:	f000 b9f0 	b.w	8013568 <__retarget_lock_init_recursive>
 8013188:	bd10      	pop	{r4, pc}
 801318a:	bf00      	nop
 801318c:	0801331d 	.word	0x0801331d
 8013190:	0801333f 	.word	0x0801333f
 8013194:	08013377 	.word	0x08013377
 8013198:	0801339b 	.word	0x0801339b
 801319c:	200063f0 	.word	0x200063f0

080131a0 <stdio_exit_handler>:
 80131a0:	4a02      	ldr	r2, [pc, #8]	@ (80131ac <stdio_exit_handler+0xc>)
 80131a2:	4903      	ldr	r1, [pc, #12]	@ (80131b0 <stdio_exit_handler+0x10>)
 80131a4:	4803      	ldr	r0, [pc, #12]	@ (80131b4 <stdio_exit_handler+0x14>)
 80131a6:	f000 b869 	b.w	801327c <_fwalk_sglue>
 80131aa:	bf00      	nop
 80131ac:	20000040 	.word	0x20000040
 80131b0:	0801500d 	.word	0x0801500d
 80131b4:	20000050 	.word	0x20000050

080131b8 <cleanup_stdio>:
 80131b8:	6841      	ldr	r1, [r0, #4]
 80131ba:	4b0c      	ldr	r3, [pc, #48]	@ (80131ec <cleanup_stdio+0x34>)
 80131bc:	4299      	cmp	r1, r3
 80131be:	b510      	push	{r4, lr}
 80131c0:	4604      	mov	r4, r0
 80131c2:	d001      	beq.n	80131c8 <cleanup_stdio+0x10>
 80131c4:	f001 ff22 	bl	801500c <_fflush_r>
 80131c8:	68a1      	ldr	r1, [r4, #8]
 80131ca:	4b09      	ldr	r3, [pc, #36]	@ (80131f0 <cleanup_stdio+0x38>)
 80131cc:	4299      	cmp	r1, r3
 80131ce:	d002      	beq.n	80131d6 <cleanup_stdio+0x1e>
 80131d0:	4620      	mov	r0, r4
 80131d2:	f001 ff1b 	bl	801500c <_fflush_r>
 80131d6:	68e1      	ldr	r1, [r4, #12]
 80131d8:	4b06      	ldr	r3, [pc, #24]	@ (80131f4 <cleanup_stdio+0x3c>)
 80131da:	4299      	cmp	r1, r3
 80131dc:	d004      	beq.n	80131e8 <cleanup_stdio+0x30>
 80131de:	4620      	mov	r0, r4
 80131e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e4:	f001 bf12 	b.w	801500c <_fflush_r>
 80131e8:	bd10      	pop	{r4, pc}
 80131ea:	bf00      	nop
 80131ec:	200063f0 	.word	0x200063f0
 80131f0:	20006458 	.word	0x20006458
 80131f4:	200064c0 	.word	0x200064c0

080131f8 <global_stdio_init.part.0>:
 80131f8:	b510      	push	{r4, lr}
 80131fa:	4b0b      	ldr	r3, [pc, #44]	@ (8013228 <global_stdio_init.part.0+0x30>)
 80131fc:	4c0b      	ldr	r4, [pc, #44]	@ (801322c <global_stdio_init.part.0+0x34>)
 80131fe:	4a0c      	ldr	r2, [pc, #48]	@ (8013230 <global_stdio_init.part.0+0x38>)
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	4620      	mov	r0, r4
 8013204:	2200      	movs	r2, #0
 8013206:	2104      	movs	r1, #4
 8013208:	f7ff ff94 	bl	8013134 <std>
 801320c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013210:	2201      	movs	r2, #1
 8013212:	2109      	movs	r1, #9
 8013214:	f7ff ff8e 	bl	8013134 <std>
 8013218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801321c:	2202      	movs	r2, #2
 801321e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013222:	2112      	movs	r1, #18
 8013224:	f7ff bf86 	b.w	8013134 <std>
 8013228:	20006528 	.word	0x20006528
 801322c:	200063f0 	.word	0x200063f0
 8013230:	080131a1 	.word	0x080131a1

08013234 <__sfp_lock_acquire>:
 8013234:	4801      	ldr	r0, [pc, #4]	@ (801323c <__sfp_lock_acquire+0x8>)
 8013236:	f000 b998 	b.w	801356a <__retarget_lock_acquire_recursive>
 801323a:	bf00      	nop
 801323c:	20006531 	.word	0x20006531

08013240 <__sfp_lock_release>:
 8013240:	4801      	ldr	r0, [pc, #4]	@ (8013248 <__sfp_lock_release+0x8>)
 8013242:	f000 b993 	b.w	801356c <__retarget_lock_release_recursive>
 8013246:	bf00      	nop
 8013248:	20006531 	.word	0x20006531

0801324c <__sinit>:
 801324c:	b510      	push	{r4, lr}
 801324e:	4604      	mov	r4, r0
 8013250:	f7ff fff0 	bl	8013234 <__sfp_lock_acquire>
 8013254:	6a23      	ldr	r3, [r4, #32]
 8013256:	b11b      	cbz	r3, 8013260 <__sinit+0x14>
 8013258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801325c:	f7ff bff0 	b.w	8013240 <__sfp_lock_release>
 8013260:	4b04      	ldr	r3, [pc, #16]	@ (8013274 <__sinit+0x28>)
 8013262:	6223      	str	r3, [r4, #32]
 8013264:	4b04      	ldr	r3, [pc, #16]	@ (8013278 <__sinit+0x2c>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d1f5      	bne.n	8013258 <__sinit+0xc>
 801326c:	f7ff ffc4 	bl	80131f8 <global_stdio_init.part.0>
 8013270:	e7f2      	b.n	8013258 <__sinit+0xc>
 8013272:	bf00      	nop
 8013274:	080131b9 	.word	0x080131b9
 8013278:	20006528 	.word	0x20006528

0801327c <_fwalk_sglue>:
 801327c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013280:	4607      	mov	r7, r0
 8013282:	4688      	mov	r8, r1
 8013284:	4614      	mov	r4, r2
 8013286:	2600      	movs	r6, #0
 8013288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801328c:	f1b9 0901 	subs.w	r9, r9, #1
 8013290:	d505      	bpl.n	801329e <_fwalk_sglue+0x22>
 8013292:	6824      	ldr	r4, [r4, #0]
 8013294:	2c00      	cmp	r4, #0
 8013296:	d1f7      	bne.n	8013288 <_fwalk_sglue+0xc>
 8013298:	4630      	mov	r0, r6
 801329a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801329e:	89ab      	ldrh	r3, [r5, #12]
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d907      	bls.n	80132b4 <_fwalk_sglue+0x38>
 80132a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132a8:	3301      	adds	r3, #1
 80132aa:	d003      	beq.n	80132b4 <_fwalk_sglue+0x38>
 80132ac:	4629      	mov	r1, r5
 80132ae:	4638      	mov	r0, r7
 80132b0:	47c0      	blx	r8
 80132b2:	4306      	orrs	r6, r0
 80132b4:	3568      	adds	r5, #104	@ 0x68
 80132b6:	e7e9      	b.n	801328c <_fwalk_sglue+0x10>

080132b8 <iprintf>:
 80132b8:	b40f      	push	{r0, r1, r2, r3}
 80132ba:	b507      	push	{r0, r1, r2, lr}
 80132bc:	4906      	ldr	r1, [pc, #24]	@ (80132d8 <iprintf+0x20>)
 80132be:	ab04      	add	r3, sp, #16
 80132c0:	6808      	ldr	r0, [r1, #0]
 80132c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80132c6:	6881      	ldr	r1, [r0, #8]
 80132c8:	9301      	str	r3, [sp, #4]
 80132ca:	f001 fd03 	bl	8014cd4 <_vfiprintf_r>
 80132ce:	b003      	add	sp, #12
 80132d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80132d4:	b004      	add	sp, #16
 80132d6:	4770      	bx	lr
 80132d8:	2000004c 	.word	0x2000004c

080132dc <siprintf>:
 80132dc:	b40e      	push	{r1, r2, r3}
 80132de:	b500      	push	{lr}
 80132e0:	b09c      	sub	sp, #112	@ 0x70
 80132e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80132e4:	9002      	str	r0, [sp, #8]
 80132e6:	9006      	str	r0, [sp, #24]
 80132e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80132ec:	4809      	ldr	r0, [pc, #36]	@ (8013314 <siprintf+0x38>)
 80132ee:	9107      	str	r1, [sp, #28]
 80132f0:	9104      	str	r1, [sp, #16]
 80132f2:	4909      	ldr	r1, [pc, #36]	@ (8013318 <siprintf+0x3c>)
 80132f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80132f8:	9105      	str	r1, [sp, #20]
 80132fa:	6800      	ldr	r0, [r0, #0]
 80132fc:	9301      	str	r3, [sp, #4]
 80132fe:	a902      	add	r1, sp, #8
 8013300:	f001 fbc2 	bl	8014a88 <_svfiprintf_r>
 8013304:	9b02      	ldr	r3, [sp, #8]
 8013306:	2200      	movs	r2, #0
 8013308:	701a      	strb	r2, [r3, #0]
 801330a:	b01c      	add	sp, #112	@ 0x70
 801330c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013310:	b003      	add	sp, #12
 8013312:	4770      	bx	lr
 8013314:	2000004c 	.word	0x2000004c
 8013318:	ffff0208 	.word	0xffff0208

0801331c <__sread>:
 801331c:	b510      	push	{r4, lr}
 801331e:	460c      	mov	r4, r1
 8013320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013324:	f000 f8c2 	bl	80134ac <_read_r>
 8013328:	2800      	cmp	r0, #0
 801332a:	bfab      	itete	ge
 801332c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801332e:	89a3      	ldrhlt	r3, [r4, #12]
 8013330:	181b      	addge	r3, r3, r0
 8013332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013336:	bfac      	ite	ge
 8013338:	6563      	strge	r3, [r4, #84]	@ 0x54
 801333a:	81a3      	strhlt	r3, [r4, #12]
 801333c:	bd10      	pop	{r4, pc}

0801333e <__swrite>:
 801333e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013342:	461f      	mov	r7, r3
 8013344:	898b      	ldrh	r3, [r1, #12]
 8013346:	05db      	lsls	r3, r3, #23
 8013348:	4605      	mov	r5, r0
 801334a:	460c      	mov	r4, r1
 801334c:	4616      	mov	r6, r2
 801334e:	d505      	bpl.n	801335c <__swrite+0x1e>
 8013350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013354:	2302      	movs	r3, #2
 8013356:	2200      	movs	r2, #0
 8013358:	f000 f896 	bl	8013488 <_lseek_r>
 801335c:	89a3      	ldrh	r3, [r4, #12]
 801335e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013366:	81a3      	strh	r3, [r4, #12]
 8013368:	4632      	mov	r2, r6
 801336a:	463b      	mov	r3, r7
 801336c:	4628      	mov	r0, r5
 801336e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013372:	f000 b8bd 	b.w	80134f0 <_write_r>

08013376 <__sseek>:
 8013376:	b510      	push	{r4, lr}
 8013378:	460c      	mov	r4, r1
 801337a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801337e:	f000 f883 	bl	8013488 <_lseek_r>
 8013382:	1c43      	adds	r3, r0, #1
 8013384:	89a3      	ldrh	r3, [r4, #12]
 8013386:	bf15      	itete	ne
 8013388:	6560      	strne	r0, [r4, #84]	@ 0x54
 801338a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801338e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013392:	81a3      	strheq	r3, [r4, #12]
 8013394:	bf18      	it	ne
 8013396:	81a3      	strhne	r3, [r4, #12]
 8013398:	bd10      	pop	{r4, pc}

0801339a <__sclose>:
 801339a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801339e:	f000 b80d 	b.w	80133bc <_close_r>

080133a2 <memset>:
 80133a2:	4402      	add	r2, r0
 80133a4:	4603      	mov	r3, r0
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d100      	bne.n	80133ac <memset+0xa>
 80133aa:	4770      	bx	lr
 80133ac:	f803 1b01 	strb.w	r1, [r3], #1
 80133b0:	e7f9      	b.n	80133a6 <memset+0x4>
	...

080133b4 <_localeconv_r>:
 80133b4:	4800      	ldr	r0, [pc, #0]	@ (80133b8 <_localeconv_r+0x4>)
 80133b6:	4770      	bx	lr
 80133b8:	2000018c 	.word	0x2000018c

080133bc <_close_r>:
 80133bc:	b538      	push	{r3, r4, r5, lr}
 80133be:	4d06      	ldr	r5, [pc, #24]	@ (80133d8 <_close_r+0x1c>)
 80133c0:	2300      	movs	r3, #0
 80133c2:	4604      	mov	r4, r0
 80133c4:	4608      	mov	r0, r1
 80133c6:	602b      	str	r3, [r5, #0]
 80133c8:	f7ef ff88 	bl	80032dc <_close>
 80133cc:	1c43      	adds	r3, r0, #1
 80133ce:	d102      	bne.n	80133d6 <_close_r+0x1a>
 80133d0:	682b      	ldr	r3, [r5, #0]
 80133d2:	b103      	cbz	r3, 80133d6 <_close_r+0x1a>
 80133d4:	6023      	str	r3, [r4, #0]
 80133d6:	bd38      	pop	{r3, r4, r5, pc}
 80133d8:	2000652c 	.word	0x2000652c

080133dc <_reclaim_reent>:
 80133dc:	4b29      	ldr	r3, [pc, #164]	@ (8013484 <_reclaim_reent+0xa8>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4283      	cmp	r3, r0
 80133e2:	b570      	push	{r4, r5, r6, lr}
 80133e4:	4604      	mov	r4, r0
 80133e6:	d04b      	beq.n	8013480 <_reclaim_reent+0xa4>
 80133e8:	69c3      	ldr	r3, [r0, #28]
 80133ea:	b1ab      	cbz	r3, 8013418 <_reclaim_reent+0x3c>
 80133ec:	68db      	ldr	r3, [r3, #12]
 80133ee:	b16b      	cbz	r3, 801340c <_reclaim_reent+0x30>
 80133f0:	2500      	movs	r5, #0
 80133f2:	69e3      	ldr	r3, [r4, #28]
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	5959      	ldr	r1, [r3, r5]
 80133f8:	2900      	cmp	r1, #0
 80133fa:	d13b      	bne.n	8013474 <_reclaim_reent+0x98>
 80133fc:	3504      	adds	r5, #4
 80133fe:	2d80      	cmp	r5, #128	@ 0x80
 8013400:	d1f7      	bne.n	80133f2 <_reclaim_reent+0x16>
 8013402:	69e3      	ldr	r3, [r4, #28]
 8013404:	4620      	mov	r0, r4
 8013406:	68d9      	ldr	r1, [r3, #12]
 8013408:	f000 ff16 	bl	8014238 <_free_r>
 801340c:	69e3      	ldr	r3, [r4, #28]
 801340e:	6819      	ldr	r1, [r3, #0]
 8013410:	b111      	cbz	r1, 8013418 <_reclaim_reent+0x3c>
 8013412:	4620      	mov	r0, r4
 8013414:	f000 ff10 	bl	8014238 <_free_r>
 8013418:	6961      	ldr	r1, [r4, #20]
 801341a:	b111      	cbz	r1, 8013422 <_reclaim_reent+0x46>
 801341c:	4620      	mov	r0, r4
 801341e:	f000 ff0b 	bl	8014238 <_free_r>
 8013422:	69e1      	ldr	r1, [r4, #28]
 8013424:	b111      	cbz	r1, 801342c <_reclaim_reent+0x50>
 8013426:	4620      	mov	r0, r4
 8013428:	f000 ff06 	bl	8014238 <_free_r>
 801342c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801342e:	b111      	cbz	r1, 8013436 <_reclaim_reent+0x5a>
 8013430:	4620      	mov	r0, r4
 8013432:	f000 ff01 	bl	8014238 <_free_r>
 8013436:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013438:	b111      	cbz	r1, 8013440 <_reclaim_reent+0x64>
 801343a:	4620      	mov	r0, r4
 801343c:	f000 fefc 	bl	8014238 <_free_r>
 8013440:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013442:	b111      	cbz	r1, 801344a <_reclaim_reent+0x6e>
 8013444:	4620      	mov	r0, r4
 8013446:	f000 fef7 	bl	8014238 <_free_r>
 801344a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801344c:	b111      	cbz	r1, 8013454 <_reclaim_reent+0x78>
 801344e:	4620      	mov	r0, r4
 8013450:	f000 fef2 	bl	8014238 <_free_r>
 8013454:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013456:	b111      	cbz	r1, 801345e <_reclaim_reent+0x82>
 8013458:	4620      	mov	r0, r4
 801345a:	f000 feed 	bl	8014238 <_free_r>
 801345e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013460:	b111      	cbz	r1, 8013468 <_reclaim_reent+0x8c>
 8013462:	4620      	mov	r0, r4
 8013464:	f000 fee8 	bl	8014238 <_free_r>
 8013468:	6a23      	ldr	r3, [r4, #32]
 801346a:	b14b      	cbz	r3, 8013480 <_reclaim_reent+0xa4>
 801346c:	4620      	mov	r0, r4
 801346e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013472:	4718      	bx	r3
 8013474:	680e      	ldr	r6, [r1, #0]
 8013476:	4620      	mov	r0, r4
 8013478:	f000 fede 	bl	8014238 <_free_r>
 801347c:	4631      	mov	r1, r6
 801347e:	e7bb      	b.n	80133f8 <_reclaim_reent+0x1c>
 8013480:	bd70      	pop	{r4, r5, r6, pc}
 8013482:	bf00      	nop
 8013484:	2000004c 	.word	0x2000004c

08013488 <_lseek_r>:
 8013488:	b538      	push	{r3, r4, r5, lr}
 801348a:	4d07      	ldr	r5, [pc, #28]	@ (80134a8 <_lseek_r+0x20>)
 801348c:	4604      	mov	r4, r0
 801348e:	4608      	mov	r0, r1
 8013490:	4611      	mov	r1, r2
 8013492:	2200      	movs	r2, #0
 8013494:	602a      	str	r2, [r5, #0]
 8013496:	461a      	mov	r2, r3
 8013498:	f7ef ff47 	bl	800332a <_lseek>
 801349c:	1c43      	adds	r3, r0, #1
 801349e:	d102      	bne.n	80134a6 <_lseek_r+0x1e>
 80134a0:	682b      	ldr	r3, [r5, #0]
 80134a2:	b103      	cbz	r3, 80134a6 <_lseek_r+0x1e>
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	2000652c 	.word	0x2000652c

080134ac <_read_r>:
 80134ac:	b538      	push	{r3, r4, r5, lr}
 80134ae:	4d07      	ldr	r5, [pc, #28]	@ (80134cc <_read_r+0x20>)
 80134b0:	4604      	mov	r4, r0
 80134b2:	4608      	mov	r0, r1
 80134b4:	4611      	mov	r1, r2
 80134b6:	2200      	movs	r2, #0
 80134b8:	602a      	str	r2, [r5, #0]
 80134ba:	461a      	mov	r2, r3
 80134bc:	f7ef fed5 	bl	800326a <_read>
 80134c0:	1c43      	adds	r3, r0, #1
 80134c2:	d102      	bne.n	80134ca <_read_r+0x1e>
 80134c4:	682b      	ldr	r3, [r5, #0]
 80134c6:	b103      	cbz	r3, 80134ca <_read_r+0x1e>
 80134c8:	6023      	str	r3, [r4, #0]
 80134ca:	bd38      	pop	{r3, r4, r5, pc}
 80134cc:	2000652c 	.word	0x2000652c

080134d0 <_sbrk_r>:
 80134d0:	b538      	push	{r3, r4, r5, lr}
 80134d2:	4d06      	ldr	r5, [pc, #24]	@ (80134ec <_sbrk_r+0x1c>)
 80134d4:	2300      	movs	r3, #0
 80134d6:	4604      	mov	r4, r0
 80134d8:	4608      	mov	r0, r1
 80134da:	602b      	str	r3, [r5, #0]
 80134dc:	f7ef ff32 	bl	8003344 <_sbrk>
 80134e0:	1c43      	adds	r3, r0, #1
 80134e2:	d102      	bne.n	80134ea <_sbrk_r+0x1a>
 80134e4:	682b      	ldr	r3, [r5, #0]
 80134e6:	b103      	cbz	r3, 80134ea <_sbrk_r+0x1a>
 80134e8:	6023      	str	r3, [r4, #0]
 80134ea:	bd38      	pop	{r3, r4, r5, pc}
 80134ec:	2000652c 	.word	0x2000652c

080134f0 <_write_r>:
 80134f0:	b538      	push	{r3, r4, r5, lr}
 80134f2:	4d07      	ldr	r5, [pc, #28]	@ (8013510 <_write_r+0x20>)
 80134f4:	4604      	mov	r4, r0
 80134f6:	4608      	mov	r0, r1
 80134f8:	4611      	mov	r1, r2
 80134fa:	2200      	movs	r2, #0
 80134fc:	602a      	str	r2, [r5, #0]
 80134fe:	461a      	mov	r2, r3
 8013500:	f7ef fed0 	bl	80032a4 <_write>
 8013504:	1c43      	adds	r3, r0, #1
 8013506:	d102      	bne.n	801350e <_write_r+0x1e>
 8013508:	682b      	ldr	r3, [r5, #0]
 801350a:	b103      	cbz	r3, 801350e <_write_r+0x1e>
 801350c:	6023      	str	r3, [r4, #0]
 801350e:	bd38      	pop	{r3, r4, r5, pc}
 8013510:	2000652c 	.word	0x2000652c

08013514 <__errno>:
 8013514:	4b01      	ldr	r3, [pc, #4]	@ (801351c <__errno+0x8>)
 8013516:	6818      	ldr	r0, [r3, #0]
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop
 801351c:	2000004c 	.word	0x2000004c

08013520 <__libc_init_array>:
 8013520:	b570      	push	{r4, r5, r6, lr}
 8013522:	4d0d      	ldr	r5, [pc, #52]	@ (8013558 <__libc_init_array+0x38>)
 8013524:	4c0d      	ldr	r4, [pc, #52]	@ (801355c <__libc_init_array+0x3c>)
 8013526:	1b64      	subs	r4, r4, r5
 8013528:	10a4      	asrs	r4, r4, #2
 801352a:	2600      	movs	r6, #0
 801352c:	42a6      	cmp	r6, r4
 801352e:	d109      	bne.n	8013544 <__libc_init_array+0x24>
 8013530:	4d0b      	ldr	r5, [pc, #44]	@ (8013560 <__libc_init_array+0x40>)
 8013532:	4c0c      	ldr	r4, [pc, #48]	@ (8013564 <__libc_init_array+0x44>)
 8013534:	f002 fb1c 	bl	8015b70 <_init>
 8013538:	1b64      	subs	r4, r4, r5
 801353a:	10a4      	asrs	r4, r4, #2
 801353c:	2600      	movs	r6, #0
 801353e:	42a6      	cmp	r6, r4
 8013540:	d105      	bne.n	801354e <__libc_init_array+0x2e>
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	f855 3b04 	ldr.w	r3, [r5], #4
 8013548:	4798      	blx	r3
 801354a:	3601      	adds	r6, #1
 801354c:	e7ee      	b.n	801352c <__libc_init_array+0xc>
 801354e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013552:	4798      	blx	r3
 8013554:	3601      	adds	r6, #1
 8013556:	e7f2      	b.n	801353e <__libc_init_array+0x1e>
 8013558:	080164c8 	.word	0x080164c8
 801355c:	080164c8 	.word	0x080164c8
 8013560:	080164c8 	.word	0x080164c8
 8013564:	080164cc 	.word	0x080164cc

08013568 <__retarget_lock_init_recursive>:
 8013568:	4770      	bx	lr

0801356a <__retarget_lock_acquire_recursive>:
 801356a:	4770      	bx	lr

0801356c <__retarget_lock_release_recursive>:
 801356c:	4770      	bx	lr

0801356e <strcpy>:
 801356e:	4603      	mov	r3, r0
 8013570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013574:	f803 2b01 	strb.w	r2, [r3], #1
 8013578:	2a00      	cmp	r2, #0
 801357a:	d1f9      	bne.n	8013570 <strcpy+0x2>
 801357c:	4770      	bx	lr

0801357e <memcpy>:
 801357e:	440a      	add	r2, r1
 8013580:	4291      	cmp	r1, r2
 8013582:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013586:	d100      	bne.n	801358a <memcpy+0xc>
 8013588:	4770      	bx	lr
 801358a:	b510      	push	{r4, lr}
 801358c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013594:	4291      	cmp	r1, r2
 8013596:	d1f9      	bne.n	801358c <memcpy+0xe>
 8013598:	bd10      	pop	{r4, pc}

0801359a <quorem>:
 801359a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359e:	6903      	ldr	r3, [r0, #16]
 80135a0:	690c      	ldr	r4, [r1, #16]
 80135a2:	42a3      	cmp	r3, r4
 80135a4:	4607      	mov	r7, r0
 80135a6:	db7e      	blt.n	80136a6 <quorem+0x10c>
 80135a8:	3c01      	subs	r4, #1
 80135aa:	f101 0814 	add.w	r8, r1, #20
 80135ae:	00a3      	lsls	r3, r4, #2
 80135b0:	f100 0514 	add.w	r5, r0, #20
 80135b4:	9300      	str	r3, [sp, #0]
 80135b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135ba:	9301      	str	r3, [sp, #4]
 80135bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80135c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135c4:	3301      	adds	r3, #1
 80135c6:	429a      	cmp	r2, r3
 80135c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80135cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80135d0:	d32e      	bcc.n	8013630 <quorem+0x96>
 80135d2:	f04f 0a00 	mov.w	sl, #0
 80135d6:	46c4      	mov	ip, r8
 80135d8:	46ae      	mov	lr, r5
 80135da:	46d3      	mov	fp, sl
 80135dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80135e0:	b298      	uxth	r0, r3
 80135e2:	fb06 a000 	mla	r0, r6, r0, sl
 80135e6:	0c02      	lsrs	r2, r0, #16
 80135e8:	0c1b      	lsrs	r3, r3, #16
 80135ea:	fb06 2303 	mla	r3, r6, r3, r2
 80135ee:	f8de 2000 	ldr.w	r2, [lr]
 80135f2:	b280      	uxth	r0, r0
 80135f4:	b292      	uxth	r2, r2
 80135f6:	1a12      	subs	r2, r2, r0
 80135f8:	445a      	add	r2, fp
 80135fa:	f8de 0000 	ldr.w	r0, [lr]
 80135fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013602:	b29b      	uxth	r3, r3
 8013604:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013608:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801360c:	b292      	uxth	r2, r2
 801360e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013612:	45e1      	cmp	r9, ip
 8013614:	f84e 2b04 	str.w	r2, [lr], #4
 8013618:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801361c:	d2de      	bcs.n	80135dc <quorem+0x42>
 801361e:	9b00      	ldr	r3, [sp, #0]
 8013620:	58eb      	ldr	r3, [r5, r3]
 8013622:	b92b      	cbnz	r3, 8013630 <quorem+0x96>
 8013624:	9b01      	ldr	r3, [sp, #4]
 8013626:	3b04      	subs	r3, #4
 8013628:	429d      	cmp	r5, r3
 801362a:	461a      	mov	r2, r3
 801362c:	d32f      	bcc.n	801368e <quorem+0xf4>
 801362e:	613c      	str	r4, [r7, #16]
 8013630:	4638      	mov	r0, r7
 8013632:	f001 f8c5 	bl	80147c0 <__mcmp>
 8013636:	2800      	cmp	r0, #0
 8013638:	db25      	blt.n	8013686 <quorem+0xec>
 801363a:	4629      	mov	r1, r5
 801363c:	2000      	movs	r0, #0
 801363e:	f858 2b04 	ldr.w	r2, [r8], #4
 8013642:	f8d1 c000 	ldr.w	ip, [r1]
 8013646:	fa1f fe82 	uxth.w	lr, r2
 801364a:	fa1f f38c 	uxth.w	r3, ip
 801364e:	eba3 030e 	sub.w	r3, r3, lr
 8013652:	4403      	add	r3, r0
 8013654:	0c12      	lsrs	r2, r2, #16
 8013656:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801365a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801365e:	b29b      	uxth	r3, r3
 8013660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013664:	45c1      	cmp	r9, r8
 8013666:	f841 3b04 	str.w	r3, [r1], #4
 801366a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801366e:	d2e6      	bcs.n	801363e <quorem+0xa4>
 8013670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013678:	b922      	cbnz	r2, 8013684 <quorem+0xea>
 801367a:	3b04      	subs	r3, #4
 801367c:	429d      	cmp	r5, r3
 801367e:	461a      	mov	r2, r3
 8013680:	d30b      	bcc.n	801369a <quorem+0x100>
 8013682:	613c      	str	r4, [r7, #16]
 8013684:	3601      	adds	r6, #1
 8013686:	4630      	mov	r0, r6
 8013688:	b003      	add	sp, #12
 801368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368e:	6812      	ldr	r2, [r2, #0]
 8013690:	3b04      	subs	r3, #4
 8013692:	2a00      	cmp	r2, #0
 8013694:	d1cb      	bne.n	801362e <quorem+0x94>
 8013696:	3c01      	subs	r4, #1
 8013698:	e7c6      	b.n	8013628 <quorem+0x8e>
 801369a:	6812      	ldr	r2, [r2, #0]
 801369c:	3b04      	subs	r3, #4
 801369e:	2a00      	cmp	r2, #0
 80136a0:	d1ef      	bne.n	8013682 <quorem+0xe8>
 80136a2:	3c01      	subs	r4, #1
 80136a4:	e7ea      	b.n	801367c <quorem+0xe2>
 80136a6:	2000      	movs	r0, #0
 80136a8:	e7ee      	b.n	8013688 <quorem+0xee>
 80136aa:	0000      	movs	r0, r0
 80136ac:	0000      	movs	r0, r0
	...

080136b0 <_dtoa_r>:
 80136b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b4:	69c7      	ldr	r7, [r0, #28]
 80136b6:	b099      	sub	sp, #100	@ 0x64
 80136b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80136bc:	ec55 4b10 	vmov	r4, r5, d0
 80136c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80136c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80136c4:	4683      	mov	fp, r0
 80136c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80136c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136ca:	b97f      	cbnz	r7, 80136ec <_dtoa_r+0x3c>
 80136cc:	2010      	movs	r0, #16
 80136ce:	f7ff f81b 	bl	8012708 <malloc>
 80136d2:	4602      	mov	r2, r0
 80136d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80136d8:	b920      	cbnz	r0, 80136e4 <_dtoa_r+0x34>
 80136da:	4ba7      	ldr	r3, [pc, #668]	@ (8013978 <_dtoa_r+0x2c8>)
 80136dc:	21ef      	movs	r1, #239	@ 0xef
 80136de:	48a7      	ldr	r0, [pc, #668]	@ (801397c <_dtoa_r+0x2cc>)
 80136e0:	f001 fd6a 	bl	80151b8 <__assert_func>
 80136e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80136e8:	6007      	str	r7, [r0, #0]
 80136ea:	60c7      	str	r7, [r0, #12]
 80136ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80136f0:	6819      	ldr	r1, [r3, #0]
 80136f2:	b159      	cbz	r1, 801370c <_dtoa_r+0x5c>
 80136f4:	685a      	ldr	r2, [r3, #4]
 80136f6:	604a      	str	r2, [r1, #4]
 80136f8:	2301      	movs	r3, #1
 80136fa:	4093      	lsls	r3, r2
 80136fc:	608b      	str	r3, [r1, #8]
 80136fe:	4658      	mov	r0, fp
 8013700:	f000 fe24 	bl	801434c <_Bfree>
 8013704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013708:	2200      	movs	r2, #0
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	1e2b      	subs	r3, r5, #0
 801370e:	bfb9      	ittee	lt
 8013710:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013714:	9303      	strlt	r3, [sp, #12]
 8013716:	2300      	movge	r3, #0
 8013718:	6033      	strge	r3, [r6, #0]
 801371a:	9f03      	ldr	r7, [sp, #12]
 801371c:	4b98      	ldr	r3, [pc, #608]	@ (8013980 <_dtoa_r+0x2d0>)
 801371e:	bfbc      	itt	lt
 8013720:	2201      	movlt	r2, #1
 8013722:	6032      	strlt	r2, [r6, #0]
 8013724:	43bb      	bics	r3, r7
 8013726:	d112      	bne.n	801374e <_dtoa_r+0x9e>
 8013728:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801372a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801372e:	6013      	str	r3, [r2, #0]
 8013730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013734:	4323      	orrs	r3, r4
 8013736:	f000 854d 	beq.w	80141d4 <_dtoa_r+0xb24>
 801373a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801373c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013994 <_dtoa_r+0x2e4>
 8013740:	2b00      	cmp	r3, #0
 8013742:	f000 854f 	beq.w	80141e4 <_dtoa_r+0xb34>
 8013746:	f10a 0303 	add.w	r3, sl, #3
 801374a:	f000 bd49 	b.w	80141e0 <_dtoa_r+0xb30>
 801374e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013752:	2200      	movs	r2, #0
 8013754:	ec51 0b17 	vmov	r0, r1, d7
 8013758:	2300      	movs	r3, #0
 801375a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801375e:	f7ed f9c3 	bl	8000ae8 <__aeabi_dcmpeq>
 8013762:	4680      	mov	r8, r0
 8013764:	b158      	cbz	r0, 801377e <_dtoa_r+0xce>
 8013766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013768:	2301      	movs	r3, #1
 801376a:	6013      	str	r3, [r2, #0]
 801376c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801376e:	b113      	cbz	r3, 8013776 <_dtoa_r+0xc6>
 8013770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013772:	4b84      	ldr	r3, [pc, #528]	@ (8013984 <_dtoa_r+0x2d4>)
 8013774:	6013      	str	r3, [r2, #0]
 8013776:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013998 <_dtoa_r+0x2e8>
 801377a:	f000 bd33 	b.w	80141e4 <_dtoa_r+0xb34>
 801377e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013782:	aa16      	add	r2, sp, #88	@ 0x58
 8013784:	a917      	add	r1, sp, #92	@ 0x5c
 8013786:	4658      	mov	r0, fp
 8013788:	f001 f8ca 	bl	8014920 <__d2b>
 801378c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013790:	4681      	mov	r9, r0
 8013792:	2e00      	cmp	r6, #0
 8013794:	d077      	beq.n	8013886 <_dtoa_r+0x1d6>
 8013796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013798:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801379c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80137a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80137a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80137ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80137b0:	4619      	mov	r1, r3
 80137b2:	2200      	movs	r2, #0
 80137b4:	4b74      	ldr	r3, [pc, #464]	@ (8013988 <_dtoa_r+0x2d8>)
 80137b6:	f7ec fd77 	bl	80002a8 <__aeabi_dsub>
 80137ba:	a369      	add	r3, pc, #420	@ (adr r3, 8013960 <_dtoa_r+0x2b0>)
 80137bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c0:	f7ec ff2a 	bl	8000618 <__aeabi_dmul>
 80137c4:	a368      	add	r3, pc, #416	@ (adr r3, 8013968 <_dtoa_r+0x2b8>)
 80137c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ca:	f7ec fd6f 	bl	80002ac <__adddf3>
 80137ce:	4604      	mov	r4, r0
 80137d0:	4630      	mov	r0, r6
 80137d2:	460d      	mov	r5, r1
 80137d4:	f7ec feb6 	bl	8000544 <__aeabi_i2d>
 80137d8:	a365      	add	r3, pc, #404	@ (adr r3, 8013970 <_dtoa_r+0x2c0>)
 80137da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137de:	f7ec ff1b 	bl	8000618 <__aeabi_dmul>
 80137e2:	4602      	mov	r2, r0
 80137e4:	460b      	mov	r3, r1
 80137e6:	4620      	mov	r0, r4
 80137e8:	4629      	mov	r1, r5
 80137ea:	f7ec fd5f 	bl	80002ac <__adddf3>
 80137ee:	4604      	mov	r4, r0
 80137f0:	460d      	mov	r5, r1
 80137f2:	f7ed f9c1 	bl	8000b78 <__aeabi_d2iz>
 80137f6:	2200      	movs	r2, #0
 80137f8:	4607      	mov	r7, r0
 80137fa:	2300      	movs	r3, #0
 80137fc:	4620      	mov	r0, r4
 80137fe:	4629      	mov	r1, r5
 8013800:	f7ed f97c 	bl	8000afc <__aeabi_dcmplt>
 8013804:	b140      	cbz	r0, 8013818 <_dtoa_r+0x168>
 8013806:	4638      	mov	r0, r7
 8013808:	f7ec fe9c 	bl	8000544 <__aeabi_i2d>
 801380c:	4622      	mov	r2, r4
 801380e:	462b      	mov	r3, r5
 8013810:	f7ed f96a 	bl	8000ae8 <__aeabi_dcmpeq>
 8013814:	b900      	cbnz	r0, 8013818 <_dtoa_r+0x168>
 8013816:	3f01      	subs	r7, #1
 8013818:	2f16      	cmp	r7, #22
 801381a:	d851      	bhi.n	80138c0 <_dtoa_r+0x210>
 801381c:	4b5b      	ldr	r3, [pc, #364]	@ (801398c <_dtoa_r+0x2dc>)
 801381e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801382a:	f7ed f967 	bl	8000afc <__aeabi_dcmplt>
 801382e:	2800      	cmp	r0, #0
 8013830:	d048      	beq.n	80138c4 <_dtoa_r+0x214>
 8013832:	3f01      	subs	r7, #1
 8013834:	2300      	movs	r3, #0
 8013836:	9312      	str	r3, [sp, #72]	@ 0x48
 8013838:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801383a:	1b9b      	subs	r3, r3, r6
 801383c:	1e5a      	subs	r2, r3, #1
 801383e:	bf44      	itt	mi
 8013840:	f1c3 0801 	rsbmi	r8, r3, #1
 8013844:	2300      	movmi	r3, #0
 8013846:	9208      	str	r2, [sp, #32]
 8013848:	bf54      	ite	pl
 801384a:	f04f 0800 	movpl.w	r8, #0
 801384e:	9308      	strmi	r3, [sp, #32]
 8013850:	2f00      	cmp	r7, #0
 8013852:	db39      	blt.n	80138c8 <_dtoa_r+0x218>
 8013854:	9b08      	ldr	r3, [sp, #32]
 8013856:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013858:	443b      	add	r3, r7
 801385a:	9308      	str	r3, [sp, #32]
 801385c:	2300      	movs	r3, #0
 801385e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013862:	2b09      	cmp	r3, #9
 8013864:	d864      	bhi.n	8013930 <_dtoa_r+0x280>
 8013866:	2b05      	cmp	r3, #5
 8013868:	bfc4      	itt	gt
 801386a:	3b04      	subgt	r3, #4
 801386c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801386e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013870:	f1a3 0302 	sub.w	r3, r3, #2
 8013874:	bfcc      	ite	gt
 8013876:	2400      	movgt	r4, #0
 8013878:	2401      	movle	r4, #1
 801387a:	2b03      	cmp	r3, #3
 801387c:	d863      	bhi.n	8013946 <_dtoa_r+0x296>
 801387e:	e8df f003 	tbb	[pc, r3]
 8013882:	372a      	.short	0x372a
 8013884:	5535      	.short	0x5535
 8013886:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801388a:	441e      	add	r6, r3
 801388c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013890:	2b20      	cmp	r3, #32
 8013892:	bfc1      	itttt	gt
 8013894:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013898:	409f      	lslgt	r7, r3
 801389a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801389e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80138a2:	bfd6      	itet	le
 80138a4:	f1c3 0320 	rsble	r3, r3, #32
 80138a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80138ac:	fa04 f003 	lslle.w	r0, r4, r3
 80138b0:	f7ec fe38 	bl	8000524 <__aeabi_ui2d>
 80138b4:	2201      	movs	r2, #1
 80138b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80138ba:	3e01      	subs	r6, #1
 80138bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80138be:	e777      	b.n	80137b0 <_dtoa_r+0x100>
 80138c0:	2301      	movs	r3, #1
 80138c2:	e7b8      	b.n	8013836 <_dtoa_r+0x186>
 80138c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80138c6:	e7b7      	b.n	8013838 <_dtoa_r+0x188>
 80138c8:	427b      	negs	r3, r7
 80138ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80138cc:	2300      	movs	r3, #0
 80138ce:	eba8 0807 	sub.w	r8, r8, r7
 80138d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80138d4:	e7c4      	b.n	8013860 <_dtoa_r+0x1b0>
 80138d6:	2300      	movs	r3, #0
 80138d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138dc:	2b00      	cmp	r3, #0
 80138de:	dc35      	bgt.n	801394c <_dtoa_r+0x29c>
 80138e0:	2301      	movs	r3, #1
 80138e2:	9300      	str	r3, [sp, #0]
 80138e4:	9307      	str	r3, [sp, #28]
 80138e6:	461a      	mov	r2, r3
 80138e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80138ea:	e00b      	b.n	8013904 <_dtoa_r+0x254>
 80138ec:	2301      	movs	r3, #1
 80138ee:	e7f3      	b.n	80138d8 <_dtoa_r+0x228>
 80138f0:	2300      	movs	r3, #0
 80138f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138f6:	18fb      	adds	r3, r7, r3
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	3301      	adds	r3, #1
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	9307      	str	r3, [sp, #28]
 8013900:	bfb8      	it	lt
 8013902:	2301      	movlt	r3, #1
 8013904:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013908:	2100      	movs	r1, #0
 801390a:	2204      	movs	r2, #4
 801390c:	f102 0514 	add.w	r5, r2, #20
 8013910:	429d      	cmp	r5, r3
 8013912:	d91f      	bls.n	8013954 <_dtoa_r+0x2a4>
 8013914:	6041      	str	r1, [r0, #4]
 8013916:	4658      	mov	r0, fp
 8013918:	f000 fcd8 	bl	80142cc <_Balloc>
 801391c:	4682      	mov	sl, r0
 801391e:	2800      	cmp	r0, #0
 8013920:	d13c      	bne.n	801399c <_dtoa_r+0x2ec>
 8013922:	4b1b      	ldr	r3, [pc, #108]	@ (8013990 <_dtoa_r+0x2e0>)
 8013924:	4602      	mov	r2, r0
 8013926:	f240 11af 	movw	r1, #431	@ 0x1af
 801392a:	e6d8      	b.n	80136de <_dtoa_r+0x2e>
 801392c:	2301      	movs	r3, #1
 801392e:	e7e0      	b.n	80138f2 <_dtoa_r+0x242>
 8013930:	2401      	movs	r4, #1
 8013932:	2300      	movs	r3, #0
 8013934:	9309      	str	r3, [sp, #36]	@ 0x24
 8013936:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	9307      	str	r3, [sp, #28]
 8013940:	2200      	movs	r2, #0
 8013942:	2312      	movs	r3, #18
 8013944:	e7d0      	b.n	80138e8 <_dtoa_r+0x238>
 8013946:	2301      	movs	r3, #1
 8013948:	930b      	str	r3, [sp, #44]	@ 0x2c
 801394a:	e7f5      	b.n	8013938 <_dtoa_r+0x288>
 801394c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801394e:	9300      	str	r3, [sp, #0]
 8013950:	9307      	str	r3, [sp, #28]
 8013952:	e7d7      	b.n	8013904 <_dtoa_r+0x254>
 8013954:	3101      	adds	r1, #1
 8013956:	0052      	lsls	r2, r2, #1
 8013958:	e7d8      	b.n	801390c <_dtoa_r+0x25c>
 801395a:	bf00      	nop
 801395c:	f3af 8000 	nop.w
 8013960:	636f4361 	.word	0x636f4361
 8013964:	3fd287a7 	.word	0x3fd287a7
 8013968:	8b60c8b3 	.word	0x8b60c8b3
 801396c:	3fc68a28 	.word	0x3fc68a28
 8013970:	509f79fb 	.word	0x509f79fb
 8013974:	3fd34413 	.word	0x3fd34413
 8013978:	08016121 	.word	0x08016121
 801397c:	08016138 	.word	0x08016138
 8013980:	7ff00000 	.word	0x7ff00000
 8013984:	080160f1 	.word	0x080160f1
 8013988:	3ff80000 	.word	0x3ff80000
 801398c:	08016230 	.word	0x08016230
 8013990:	08016190 	.word	0x08016190
 8013994:	0801611d 	.word	0x0801611d
 8013998:	080160f0 	.word	0x080160f0
 801399c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80139a0:	6018      	str	r0, [r3, #0]
 80139a2:	9b07      	ldr	r3, [sp, #28]
 80139a4:	2b0e      	cmp	r3, #14
 80139a6:	f200 80a4 	bhi.w	8013af2 <_dtoa_r+0x442>
 80139aa:	2c00      	cmp	r4, #0
 80139ac:	f000 80a1 	beq.w	8013af2 <_dtoa_r+0x442>
 80139b0:	2f00      	cmp	r7, #0
 80139b2:	dd33      	ble.n	8013a1c <_dtoa_r+0x36c>
 80139b4:	4bad      	ldr	r3, [pc, #692]	@ (8013c6c <_dtoa_r+0x5bc>)
 80139b6:	f007 020f 	and.w	r2, r7, #15
 80139ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139be:	ed93 7b00 	vldr	d7, [r3]
 80139c2:	05f8      	lsls	r0, r7, #23
 80139c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80139c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80139cc:	d516      	bpl.n	80139fc <_dtoa_r+0x34c>
 80139ce:	4ba8      	ldr	r3, [pc, #672]	@ (8013c70 <_dtoa_r+0x5c0>)
 80139d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80139d8:	f7ec ff48 	bl	800086c <__aeabi_ddiv>
 80139dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139e0:	f004 040f 	and.w	r4, r4, #15
 80139e4:	2603      	movs	r6, #3
 80139e6:	4da2      	ldr	r5, [pc, #648]	@ (8013c70 <_dtoa_r+0x5c0>)
 80139e8:	b954      	cbnz	r4, 8013a00 <_dtoa_r+0x350>
 80139ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139f2:	f7ec ff3b 	bl	800086c <__aeabi_ddiv>
 80139f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139fa:	e028      	b.n	8013a4e <_dtoa_r+0x39e>
 80139fc:	2602      	movs	r6, #2
 80139fe:	e7f2      	b.n	80139e6 <_dtoa_r+0x336>
 8013a00:	07e1      	lsls	r1, r4, #31
 8013a02:	d508      	bpl.n	8013a16 <_dtoa_r+0x366>
 8013a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a0c:	f7ec fe04 	bl	8000618 <__aeabi_dmul>
 8013a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a14:	3601      	adds	r6, #1
 8013a16:	1064      	asrs	r4, r4, #1
 8013a18:	3508      	adds	r5, #8
 8013a1a:	e7e5      	b.n	80139e8 <_dtoa_r+0x338>
 8013a1c:	f000 80d2 	beq.w	8013bc4 <_dtoa_r+0x514>
 8013a20:	427c      	negs	r4, r7
 8013a22:	4b92      	ldr	r3, [pc, #584]	@ (8013c6c <_dtoa_r+0x5bc>)
 8013a24:	4d92      	ldr	r5, [pc, #584]	@ (8013c70 <_dtoa_r+0x5c0>)
 8013a26:	f004 020f 	and.w	r2, r4, #15
 8013a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a36:	f7ec fdef 	bl	8000618 <__aeabi_dmul>
 8013a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a3e:	1124      	asrs	r4, r4, #4
 8013a40:	2300      	movs	r3, #0
 8013a42:	2602      	movs	r6, #2
 8013a44:	2c00      	cmp	r4, #0
 8013a46:	f040 80b2 	bne.w	8013bae <_dtoa_r+0x4fe>
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1d3      	bne.n	80139f6 <_dtoa_r+0x346>
 8013a4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013a50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	f000 80b7 	beq.w	8013bc8 <_dtoa_r+0x518>
 8013a5a:	4b86      	ldr	r3, [pc, #536]	@ (8013c74 <_dtoa_r+0x5c4>)
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	4620      	mov	r0, r4
 8013a60:	4629      	mov	r1, r5
 8013a62:	f7ed f84b 	bl	8000afc <__aeabi_dcmplt>
 8013a66:	2800      	cmp	r0, #0
 8013a68:	f000 80ae 	beq.w	8013bc8 <_dtoa_r+0x518>
 8013a6c:	9b07      	ldr	r3, [sp, #28]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	f000 80aa 	beq.w	8013bc8 <_dtoa_r+0x518>
 8013a74:	9b00      	ldr	r3, [sp, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	dd37      	ble.n	8013aea <_dtoa_r+0x43a>
 8013a7a:	1e7b      	subs	r3, r7, #1
 8013a7c:	9304      	str	r3, [sp, #16]
 8013a7e:	4620      	mov	r0, r4
 8013a80:	4b7d      	ldr	r3, [pc, #500]	@ (8013c78 <_dtoa_r+0x5c8>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	4629      	mov	r1, r5
 8013a86:	f7ec fdc7 	bl	8000618 <__aeabi_dmul>
 8013a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a8e:	9c00      	ldr	r4, [sp, #0]
 8013a90:	3601      	adds	r6, #1
 8013a92:	4630      	mov	r0, r6
 8013a94:	f7ec fd56 	bl	8000544 <__aeabi_i2d>
 8013a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a9c:	f7ec fdbc 	bl	8000618 <__aeabi_dmul>
 8013aa0:	4b76      	ldr	r3, [pc, #472]	@ (8013c7c <_dtoa_r+0x5cc>)
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	f7ec fc02 	bl	80002ac <__adddf3>
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013aae:	2c00      	cmp	r4, #0
 8013ab0:	f040 808d 	bne.w	8013bce <_dtoa_r+0x51e>
 8013ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ab8:	4b71      	ldr	r3, [pc, #452]	@ (8013c80 <_dtoa_r+0x5d0>)
 8013aba:	2200      	movs	r2, #0
 8013abc:	f7ec fbf4 	bl	80002a8 <__aeabi_dsub>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ac8:	462a      	mov	r2, r5
 8013aca:	4633      	mov	r3, r6
 8013acc:	f7ed f834 	bl	8000b38 <__aeabi_dcmpgt>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	f040 828b 	bne.w	8013fec <_dtoa_r+0x93c>
 8013ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ada:	462a      	mov	r2, r5
 8013adc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013ae0:	f7ed f80c 	bl	8000afc <__aeabi_dcmplt>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	f040 8128 	bne.w	8013d3a <_dtoa_r+0x68a>
 8013aea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013aee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013af2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f2c0 815a 	blt.w	8013dae <_dtoa_r+0x6fe>
 8013afa:	2f0e      	cmp	r7, #14
 8013afc:	f300 8157 	bgt.w	8013dae <_dtoa_r+0x6fe>
 8013b00:	4b5a      	ldr	r3, [pc, #360]	@ (8013c6c <_dtoa_r+0x5bc>)
 8013b02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013b06:	ed93 7b00 	vldr	d7, [r3]
 8013b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	ed8d 7b00 	vstr	d7, [sp]
 8013b12:	da03      	bge.n	8013b1c <_dtoa_r+0x46c>
 8013b14:	9b07      	ldr	r3, [sp, #28]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f340 8101 	ble.w	8013d1e <_dtoa_r+0x66e>
 8013b1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013b20:	4656      	mov	r6, sl
 8013b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b26:	4620      	mov	r0, r4
 8013b28:	4629      	mov	r1, r5
 8013b2a:	f7ec fe9f 	bl	800086c <__aeabi_ddiv>
 8013b2e:	f7ed f823 	bl	8000b78 <__aeabi_d2iz>
 8013b32:	4680      	mov	r8, r0
 8013b34:	f7ec fd06 	bl	8000544 <__aeabi_i2d>
 8013b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b3c:	f7ec fd6c 	bl	8000618 <__aeabi_dmul>
 8013b40:	4602      	mov	r2, r0
 8013b42:	460b      	mov	r3, r1
 8013b44:	4620      	mov	r0, r4
 8013b46:	4629      	mov	r1, r5
 8013b48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013b4c:	f7ec fbac 	bl	80002a8 <__aeabi_dsub>
 8013b50:	f806 4b01 	strb.w	r4, [r6], #1
 8013b54:	9d07      	ldr	r5, [sp, #28]
 8013b56:	eba6 040a 	sub.w	r4, r6, sl
 8013b5a:	42a5      	cmp	r5, r4
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	f040 8117 	bne.w	8013d92 <_dtoa_r+0x6e2>
 8013b64:	f7ec fba2 	bl	80002ac <__adddf3>
 8013b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	460d      	mov	r5, r1
 8013b70:	f7ec ffe2 	bl	8000b38 <__aeabi_dcmpgt>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	f040 80f9 	bne.w	8013d6c <_dtoa_r+0x6bc>
 8013b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b7e:	4620      	mov	r0, r4
 8013b80:	4629      	mov	r1, r5
 8013b82:	f7ec ffb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b86:	b118      	cbz	r0, 8013b90 <_dtoa_r+0x4e0>
 8013b88:	f018 0f01 	tst.w	r8, #1
 8013b8c:	f040 80ee 	bne.w	8013d6c <_dtoa_r+0x6bc>
 8013b90:	4649      	mov	r1, r9
 8013b92:	4658      	mov	r0, fp
 8013b94:	f000 fbda 	bl	801434c <_Bfree>
 8013b98:	2300      	movs	r3, #0
 8013b9a:	7033      	strb	r3, [r6, #0]
 8013b9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013b9e:	3701      	adds	r7, #1
 8013ba0:	601f      	str	r7, [r3, #0]
 8013ba2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f000 831d 	beq.w	80141e4 <_dtoa_r+0xb34>
 8013baa:	601e      	str	r6, [r3, #0]
 8013bac:	e31a      	b.n	80141e4 <_dtoa_r+0xb34>
 8013bae:	07e2      	lsls	r2, r4, #31
 8013bb0:	d505      	bpl.n	8013bbe <_dtoa_r+0x50e>
 8013bb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013bb6:	f7ec fd2f 	bl	8000618 <__aeabi_dmul>
 8013bba:	3601      	adds	r6, #1
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	1064      	asrs	r4, r4, #1
 8013bc0:	3508      	adds	r5, #8
 8013bc2:	e73f      	b.n	8013a44 <_dtoa_r+0x394>
 8013bc4:	2602      	movs	r6, #2
 8013bc6:	e742      	b.n	8013a4e <_dtoa_r+0x39e>
 8013bc8:	9c07      	ldr	r4, [sp, #28]
 8013bca:	9704      	str	r7, [sp, #16]
 8013bcc:	e761      	b.n	8013a92 <_dtoa_r+0x3e2>
 8013bce:	4b27      	ldr	r3, [pc, #156]	@ (8013c6c <_dtoa_r+0x5bc>)
 8013bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013bd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013bd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013bda:	4454      	add	r4, sl
 8013bdc:	2900      	cmp	r1, #0
 8013bde:	d053      	beq.n	8013c88 <_dtoa_r+0x5d8>
 8013be0:	4928      	ldr	r1, [pc, #160]	@ (8013c84 <_dtoa_r+0x5d4>)
 8013be2:	2000      	movs	r0, #0
 8013be4:	f7ec fe42 	bl	800086c <__aeabi_ddiv>
 8013be8:	4633      	mov	r3, r6
 8013bea:	462a      	mov	r2, r5
 8013bec:	f7ec fb5c 	bl	80002a8 <__aeabi_dsub>
 8013bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013bf4:	4656      	mov	r6, sl
 8013bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bfa:	f7ec ffbd 	bl	8000b78 <__aeabi_d2iz>
 8013bfe:	4605      	mov	r5, r0
 8013c00:	f7ec fca0 	bl	8000544 <__aeabi_i2d>
 8013c04:	4602      	mov	r2, r0
 8013c06:	460b      	mov	r3, r1
 8013c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c0c:	f7ec fb4c 	bl	80002a8 <__aeabi_dsub>
 8013c10:	3530      	adds	r5, #48	@ 0x30
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c1a:	f806 5b01 	strb.w	r5, [r6], #1
 8013c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013c22:	f7ec ff6b 	bl	8000afc <__aeabi_dcmplt>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d171      	bne.n	8013d0e <_dtoa_r+0x65e>
 8013c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013c2e:	4911      	ldr	r1, [pc, #68]	@ (8013c74 <_dtoa_r+0x5c4>)
 8013c30:	2000      	movs	r0, #0
 8013c32:	f7ec fb39 	bl	80002a8 <__aeabi_dsub>
 8013c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013c3a:	f7ec ff5f 	bl	8000afc <__aeabi_dcmplt>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	f040 8095 	bne.w	8013d6e <_dtoa_r+0x6be>
 8013c44:	42a6      	cmp	r6, r4
 8013c46:	f43f af50 	beq.w	8013aea <_dtoa_r+0x43a>
 8013c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8013c78 <_dtoa_r+0x5c8>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	f7ec fce1 	bl	8000618 <__aeabi_dmul>
 8013c56:	4b08      	ldr	r3, [pc, #32]	@ (8013c78 <_dtoa_r+0x5c8>)
 8013c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c62:	f7ec fcd9 	bl	8000618 <__aeabi_dmul>
 8013c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c6a:	e7c4      	b.n	8013bf6 <_dtoa_r+0x546>
 8013c6c:	08016230 	.word	0x08016230
 8013c70:	08016208 	.word	0x08016208
 8013c74:	3ff00000 	.word	0x3ff00000
 8013c78:	40240000 	.word	0x40240000
 8013c7c:	401c0000 	.word	0x401c0000
 8013c80:	40140000 	.word	0x40140000
 8013c84:	3fe00000 	.word	0x3fe00000
 8013c88:	4631      	mov	r1, r6
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	f7ec fcc4 	bl	8000618 <__aeabi_dmul>
 8013c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013c94:	9415      	str	r4, [sp, #84]	@ 0x54
 8013c96:	4656      	mov	r6, sl
 8013c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c9c:	f7ec ff6c 	bl	8000b78 <__aeabi_d2iz>
 8013ca0:	4605      	mov	r5, r0
 8013ca2:	f7ec fc4f 	bl	8000544 <__aeabi_i2d>
 8013ca6:	4602      	mov	r2, r0
 8013ca8:	460b      	mov	r3, r1
 8013caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cae:	f7ec fafb 	bl	80002a8 <__aeabi_dsub>
 8013cb2:	3530      	adds	r5, #48	@ 0x30
 8013cb4:	f806 5b01 	strb.w	r5, [r6], #1
 8013cb8:	4602      	mov	r2, r0
 8013cba:	460b      	mov	r3, r1
 8013cbc:	42a6      	cmp	r6, r4
 8013cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013cc2:	f04f 0200 	mov.w	r2, #0
 8013cc6:	d124      	bne.n	8013d12 <_dtoa_r+0x662>
 8013cc8:	4bac      	ldr	r3, [pc, #688]	@ (8013f7c <_dtoa_r+0x8cc>)
 8013cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013cce:	f7ec faed 	bl	80002ac <__adddf3>
 8013cd2:	4602      	mov	r2, r0
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cda:	f7ec ff2d 	bl	8000b38 <__aeabi_dcmpgt>
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d145      	bne.n	8013d6e <_dtoa_r+0x6be>
 8013ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013ce6:	49a5      	ldr	r1, [pc, #660]	@ (8013f7c <_dtoa_r+0x8cc>)
 8013ce8:	2000      	movs	r0, #0
 8013cea:	f7ec fadd 	bl	80002a8 <__aeabi_dsub>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	460b      	mov	r3, r1
 8013cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cf6:	f7ec ff01 	bl	8000afc <__aeabi_dcmplt>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	f43f aef5 	beq.w	8013aea <_dtoa_r+0x43a>
 8013d00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013d02:	1e73      	subs	r3, r6, #1
 8013d04:	9315      	str	r3, [sp, #84]	@ 0x54
 8013d06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013d0a:	2b30      	cmp	r3, #48	@ 0x30
 8013d0c:	d0f8      	beq.n	8013d00 <_dtoa_r+0x650>
 8013d0e:	9f04      	ldr	r7, [sp, #16]
 8013d10:	e73e      	b.n	8013b90 <_dtoa_r+0x4e0>
 8013d12:	4b9b      	ldr	r3, [pc, #620]	@ (8013f80 <_dtoa_r+0x8d0>)
 8013d14:	f7ec fc80 	bl	8000618 <__aeabi_dmul>
 8013d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d1c:	e7bc      	b.n	8013c98 <_dtoa_r+0x5e8>
 8013d1e:	d10c      	bne.n	8013d3a <_dtoa_r+0x68a>
 8013d20:	4b98      	ldr	r3, [pc, #608]	@ (8013f84 <_dtoa_r+0x8d4>)
 8013d22:	2200      	movs	r2, #0
 8013d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d28:	f7ec fc76 	bl	8000618 <__aeabi_dmul>
 8013d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d30:	f7ec fef8 	bl	8000b24 <__aeabi_dcmpge>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	f000 8157 	beq.w	8013fe8 <_dtoa_r+0x938>
 8013d3a:	2400      	movs	r4, #0
 8013d3c:	4625      	mov	r5, r4
 8013d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d40:	43db      	mvns	r3, r3
 8013d42:	9304      	str	r3, [sp, #16]
 8013d44:	4656      	mov	r6, sl
 8013d46:	2700      	movs	r7, #0
 8013d48:	4621      	mov	r1, r4
 8013d4a:	4658      	mov	r0, fp
 8013d4c:	f000 fafe 	bl	801434c <_Bfree>
 8013d50:	2d00      	cmp	r5, #0
 8013d52:	d0dc      	beq.n	8013d0e <_dtoa_r+0x65e>
 8013d54:	b12f      	cbz	r7, 8013d62 <_dtoa_r+0x6b2>
 8013d56:	42af      	cmp	r7, r5
 8013d58:	d003      	beq.n	8013d62 <_dtoa_r+0x6b2>
 8013d5a:	4639      	mov	r1, r7
 8013d5c:	4658      	mov	r0, fp
 8013d5e:	f000 faf5 	bl	801434c <_Bfree>
 8013d62:	4629      	mov	r1, r5
 8013d64:	4658      	mov	r0, fp
 8013d66:	f000 faf1 	bl	801434c <_Bfree>
 8013d6a:	e7d0      	b.n	8013d0e <_dtoa_r+0x65e>
 8013d6c:	9704      	str	r7, [sp, #16]
 8013d6e:	4633      	mov	r3, r6
 8013d70:	461e      	mov	r6, r3
 8013d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d76:	2a39      	cmp	r2, #57	@ 0x39
 8013d78:	d107      	bne.n	8013d8a <_dtoa_r+0x6da>
 8013d7a:	459a      	cmp	sl, r3
 8013d7c:	d1f8      	bne.n	8013d70 <_dtoa_r+0x6c0>
 8013d7e:	9a04      	ldr	r2, [sp, #16]
 8013d80:	3201      	adds	r2, #1
 8013d82:	9204      	str	r2, [sp, #16]
 8013d84:	2230      	movs	r2, #48	@ 0x30
 8013d86:	f88a 2000 	strb.w	r2, [sl]
 8013d8a:	781a      	ldrb	r2, [r3, #0]
 8013d8c:	3201      	adds	r2, #1
 8013d8e:	701a      	strb	r2, [r3, #0]
 8013d90:	e7bd      	b.n	8013d0e <_dtoa_r+0x65e>
 8013d92:	4b7b      	ldr	r3, [pc, #492]	@ (8013f80 <_dtoa_r+0x8d0>)
 8013d94:	2200      	movs	r2, #0
 8013d96:	f7ec fc3f 	bl	8000618 <__aeabi_dmul>
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	f7ec fea1 	bl	8000ae8 <__aeabi_dcmpeq>
 8013da6:	2800      	cmp	r0, #0
 8013da8:	f43f aebb 	beq.w	8013b22 <_dtoa_r+0x472>
 8013dac:	e6f0      	b.n	8013b90 <_dtoa_r+0x4e0>
 8013dae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013db0:	2a00      	cmp	r2, #0
 8013db2:	f000 80db 	beq.w	8013f6c <_dtoa_r+0x8bc>
 8013db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013db8:	2a01      	cmp	r2, #1
 8013dba:	f300 80bf 	bgt.w	8013f3c <_dtoa_r+0x88c>
 8013dbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013dc0:	2a00      	cmp	r2, #0
 8013dc2:	f000 80b7 	beq.w	8013f34 <_dtoa_r+0x884>
 8013dc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013dca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013dcc:	4646      	mov	r6, r8
 8013dce:	9a08      	ldr	r2, [sp, #32]
 8013dd0:	2101      	movs	r1, #1
 8013dd2:	441a      	add	r2, r3
 8013dd4:	4658      	mov	r0, fp
 8013dd6:	4498      	add	r8, r3
 8013dd8:	9208      	str	r2, [sp, #32]
 8013dda:	f000 fb6b 	bl	80144b4 <__i2b>
 8013dde:	4605      	mov	r5, r0
 8013de0:	b15e      	cbz	r6, 8013dfa <_dtoa_r+0x74a>
 8013de2:	9b08      	ldr	r3, [sp, #32]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	dd08      	ble.n	8013dfa <_dtoa_r+0x74a>
 8013de8:	42b3      	cmp	r3, r6
 8013dea:	9a08      	ldr	r2, [sp, #32]
 8013dec:	bfa8      	it	ge
 8013dee:	4633      	movge	r3, r6
 8013df0:	eba8 0803 	sub.w	r8, r8, r3
 8013df4:	1af6      	subs	r6, r6, r3
 8013df6:	1ad3      	subs	r3, r2, r3
 8013df8:	9308      	str	r3, [sp, #32]
 8013dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013dfc:	b1f3      	cbz	r3, 8013e3c <_dtoa_r+0x78c>
 8013dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f000 80b7 	beq.w	8013f74 <_dtoa_r+0x8c4>
 8013e06:	b18c      	cbz	r4, 8013e2c <_dtoa_r+0x77c>
 8013e08:	4629      	mov	r1, r5
 8013e0a:	4622      	mov	r2, r4
 8013e0c:	4658      	mov	r0, fp
 8013e0e:	f000 fc11 	bl	8014634 <__pow5mult>
 8013e12:	464a      	mov	r2, r9
 8013e14:	4601      	mov	r1, r0
 8013e16:	4605      	mov	r5, r0
 8013e18:	4658      	mov	r0, fp
 8013e1a:	f000 fb61 	bl	80144e0 <__multiply>
 8013e1e:	4649      	mov	r1, r9
 8013e20:	9004      	str	r0, [sp, #16]
 8013e22:	4658      	mov	r0, fp
 8013e24:	f000 fa92 	bl	801434c <_Bfree>
 8013e28:	9b04      	ldr	r3, [sp, #16]
 8013e2a:	4699      	mov	r9, r3
 8013e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e2e:	1b1a      	subs	r2, r3, r4
 8013e30:	d004      	beq.n	8013e3c <_dtoa_r+0x78c>
 8013e32:	4649      	mov	r1, r9
 8013e34:	4658      	mov	r0, fp
 8013e36:	f000 fbfd 	bl	8014634 <__pow5mult>
 8013e3a:	4681      	mov	r9, r0
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	4658      	mov	r0, fp
 8013e40:	f000 fb38 	bl	80144b4 <__i2b>
 8013e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e46:	4604      	mov	r4, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f000 81cf 	beq.w	80141ec <_dtoa_r+0xb3c>
 8013e4e:	461a      	mov	r2, r3
 8013e50:	4601      	mov	r1, r0
 8013e52:	4658      	mov	r0, fp
 8013e54:	f000 fbee 	bl	8014634 <__pow5mult>
 8013e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	f300 8095 	bgt.w	8013f8c <_dtoa_r+0x8dc>
 8013e62:	9b02      	ldr	r3, [sp, #8]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f040 8087 	bne.w	8013f78 <_dtoa_r+0x8c8>
 8013e6a:	9b03      	ldr	r3, [sp, #12]
 8013e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f040 8089 	bne.w	8013f88 <_dtoa_r+0x8d8>
 8013e76:	9b03      	ldr	r3, [sp, #12]
 8013e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013e7c:	0d1b      	lsrs	r3, r3, #20
 8013e7e:	051b      	lsls	r3, r3, #20
 8013e80:	b12b      	cbz	r3, 8013e8e <_dtoa_r+0x7de>
 8013e82:	9b08      	ldr	r3, [sp, #32]
 8013e84:	3301      	adds	r3, #1
 8013e86:	9308      	str	r3, [sp, #32]
 8013e88:	f108 0801 	add.w	r8, r8, #1
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	f000 81b0 	beq.w	80141f8 <_dtoa_r+0xb48>
 8013e98:	6923      	ldr	r3, [r4, #16]
 8013e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e9e:	6918      	ldr	r0, [r3, #16]
 8013ea0:	f000 fabc 	bl	801441c <__hi0bits>
 8013ea4:	f1c0 0020 	rsb	r0, r0, #32
 8013ea8:	9b08      	ldr	r3, [sp, #32]
 8013eaa:	4418      	add	r0, r3
 8013eac:	f010 001f 	ands.w	r0, r0, #31
 8013eb0:	d077      	beq.n	8013fa2 <_dtoa_r+0x8f2>
 8013eb2:	f1c0 0320 	rsb	r3, r0, #32
 8013eb6:	2b04      	cmp	r3, #4
 8013eb8:	dd6b      	ble.n	8013f92 <_dtoa_r+0x8e2>
 8013eba:	9b08      	ldr	r3, [sp, #32]
 8013ebc:	f1c0 001c 	rsb	r0, r0, #28
 8013ec0:	4403      	add	r3, r0
 8013ec2:	4480      	add	r8, r0
 8013ec4:	4406      	add	r6, r0
 8013ec6:	9308      	str	r3, [sp, #32]
 8013ec8:	f1b8 0f00 	cmp.w	r8, #0
 8013ecc:	dd05      	ble.n	8013eda <_dtoa_r+0x82a>
 8013ece:	4649      	mov	r1, r9
 8013ed0:	4642      	mov	r2, r8
 8013ed2:	4658      	mov	r0, fp
 8013ed4:	f000 fc08 	bl	80146e8 <__lshift>
 8013ed8:	4681      	mov	r9, r0
 8013eda:	9b08      	ldr	r3, [sp, #32]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	dd05      	ble.n	8013eec <_dtoa_r+0x83c>
 8013ee0:	4621      	mov	r1, r4
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	4658      	mov	r0, fp
 8013ee6:	f000 fbff 	bl	80146e8 <__lshift>
 8013eea:	4604      	mov	r4, r0
 8013eec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d059      	beq.n	8013fa6 <_dtoa_r+0x8f6>
 8013ef2:	4621      	mov	r1, r4
 8013ef4:	4648      	mov	r0, r9
 8013ef6:	f000 fc63 	bl	80147c0 <__mcmp>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	da53      	bge.n	8013fa6 <_dtoa_r+0x8f6>
 8013efe:	1e7b      	subs	r3, r7, #1
 8013f00:	9304      	str	r3, [sp, #16]
 8013f02:	4649      	mov	r1, r9
 8013f04:	2300      	movs	r3, #0
 8013f06:	220a      	movs	r2, #10
 8013f08:	4658      	mov	r0, fp
 8013f0a:	f000 fa41 	bl	8014390 <__multadd>
 8013f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f10:	4681      	mov	r9, r0
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	f000 8172 	beq.w	80141fc <_dtoa_r+0xb4c>
 8013f18:	2300      	movs	r3, #0
 8013f1a:	4629      	mov	r1, r5
 8013f1c:	220a      	movs	r2, #10
 8013f1e:	4658      	mov	r0, fp
 8013f20:	f000 fa36 	bl	8014390 <__multadd>
 8013f24:	9b00      	ldr	r3, [sp, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	4605      	mov	r5, r0
 8013f2a:	dc67      	bgt.n	8013ffc <_dtoa_r+0x94c>
 8013f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	dc41      	bgt.n	8013fb6 <_dtoa_r+0x906>
 8013f32:	e063      	b.n	8013ffc <_dtoa_r+0x94c>
 8013f34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013f3a:	e746      	b.n	8013dca <_dtoa_r+0x71a>
 8013f3c:	9b07      	ldr	r3, [sp, #28]
 8013f3e:	1e5c      	subs	r4, r3, #1
 8013f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f42:	42a3      	cmp	r3, r4
 8013f44:	bfbf      	itttt	lt
 8013f46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013f48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013f4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013f4c:	1ae3      	sublt	r3, r4, r3
 8013f4e:	bfb4      	ite	lt
 8013f50:	18d2      	addlt	r2, r2, r3
 8013f52:	1b1c      	subge	r4, r3, r4
 8013f54:	9b07      	ldr	r3, [sp, #28]
 8013f56:	bfbc      	itt	lt
 8013f58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013f5a:	2400      	movlt	r4, #0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	bfb5      	itete	lt
 8013f60:	eba8 0603 	sublt.w	r6, r8, r3
 8013f64:	9b07      	ldrge	r3, [sp, #28]
 8013f66:	2300      	movlt	r3, #0
 8013f68:	4646      	movge	r6, r8
 8013f6a:	e730      	b.n	8013dce <_dtoa_r+0x71e>
 8013f6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013f6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013f70:	4646      	mov	r6, r8
 8013f72:	e735      	b.n	8013de0 <_dtoa_r+0x730>
 8013f74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f76:	e75c      	b.n	8013e32 <_dtoa_r+0x782>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	e788      	b.n	8013e8e <_dtoa_r+0x7de>
 8013f7c:	3fe00000 	.word	0x3fe00000
 8013f80:	40240000 	.word	0x40240000
 8013f84:	40140000 	.word	0x40140000
 8013f88:	9b02      	ldr	r3, [sp, #8]
 8013f8a:	e780      	b.n	8013e8e <_dtoa_r+0x7de>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f90:	e782      	b.n	8013e98 <_dtoa_r+0x7e8>
 8013f92:	d099      	beq.n	8013ec8 <_dtoa_r+0x818>
 8013f94:	9a08      	ldr	r2, [sp, #32]
 8013f96:	331c      	adds	r3, #28
 8013f98:	441a      	add	r2, r3
 8013f9a:	4498      	add	r8, r3
 8013f9c:	441e      	add	r6, r3
 8013f9e:	9208      	str	r2, [sp, #32]
 8013fa0:	e792      	b.n	8013ec8 <_dtoa_r+0x818>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	e7f6      	b.n	8013f94 <_dtoa_r+0x8e4>
 8013fa6:	9b07      	ldr	r3, [sp, #28]
 8013fa8:	9704      	str	r7, [sp, #16]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	dc20      	bgt.n	8013ff0 <_dtoa_r+0x940>
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	dd1e      	ble.n	8013ff4 <_dtoa_r+0x944>
 8013fb6:	9b00      	ldr	r3, [sp, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	f47f aec0 	bne.w	8013d3e <_dtoa_r+0x68e>
 8013fbe:	4621      	mov	r1, r4
 8013fc0:	2205      	movs	r2, #5
 8013fc2:	4658      	mov	r0, fp
 8013fc4:	f000 f9e4 	bl	8014390 <__multadd>
 8013fc8:	4601      	mov	r1, r0
 8013fca:	4604      	mov	r4, r0
 8013fcc:	4648      	mov	r0, r9
 8013fce:	f000 fbf7 	bl	80147c0 <__mcmp>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	f77f aeb3 	ble.w	8013d3e <_dtoa_r+0x68e>
 8013fd8:	4656      	mov	r6, sl
 8013fda:	2331      	movs	r3, #49	@ 0x31
 8013fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8013fe0:	9b04      	ldr	r3, [sp, #16]
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	9304      	str	r3, [sp, #16]
 8013fe6:	e6ae      	b.n	8013d46 <_dtoa_r+0x696>
 8013fe8:	9c07      	ldr	r4, [sp, #28]
 8013fea:	9704      	str	r7, [sp, #16]
 8013fec:	4625      	mov	r5, r4
 8013fee:	e7f3      	b.n	8013fd8 <_dtoa_r+0x928>
 8013ff0:	9b07      	ldr	r3, [sp, #28]
 8013ff2:	9300      	str	r3, [sp, #0]
 8013ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f000 8104 	beq.w	8014204 <_dtoa_r+0xb54>
 8013ffc:	2e00      	cmp	r6, #0
 8013ffe:	dd05      	ble.n	801400c <_dtoa_r+0x95c>
 8014000:	4629      	mov	r1, r5
 8014002:	4632      	mov	r2, r6
 8014004:	4658      	mov	r0, fp
 8014006:	f000 fb6f 	bl	80146e8 <__lshift>
 801400a:	4605      	mov	r5, r0
 801400c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801400e:	2b00      	cmp	r3, #0
 8014010:	d05a      	beq.n	80140c8 <_dtoa_r+0xa18>
 8014012:	6869      	ldr	r1, [r5, #4]
 8014014:	4658      	mov	r0, fp
 8014016:	f000 f959 	bl	80142cc <_Balloc>
 801401a:	4606      	mov	r6, r0
 801401c:	b928      	cbnz	r0, 801402a <_dtoa_r+0x97a>
 801401e:	4b84      	ldr	r3, [pc, #528]	@ (8014230 <_dtoa_r+0xb80>)
 8014020:	4602      	mov	r2, r0
 8014022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014026:	f7ff bb5a 	b.w	80136de <_dtoa_r+0x2e>
 801402a:	692a      	ldr	r2, [r5, #16]
 801402c:	3202      	adds	r2, #2
 801402e:	0092      	lsls	r2, r2, #2
 8014030:	f105 010c 	add.w	r1, r5, #12
 8014034:	300c      	adds	r0, #12
 8014036:	f7ff faa2 	bl	801357e <memcpy>
 801403a:	2201      	movs	r2, #1
 801403c:	4631      	mov	r1, r6
 801403e:	4658      	mov	r0, fp
 8014040:	f000 fb52 	bl	80146e8 <__lshift>
 8014044:	f10a 0301 	add.w	r3, sl, #1
 8014048:	9307      	str	r3, [sp, #28]
 801404a:	9b00      	ldr	r3, [sp, #0]
 801404c:	4453      	add	r3, sl
 801404e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014050:	9b02      	ldr	r3, [sp, #8]
 8014052:	f003 0301 	and.w	r3, r3, #1
 8014056:	462f      	mov	r7, r5
 8014058:	930a      	str	r3, [sp, #40]	@ 0x28
 801405a:	4605      	mov	r5, r0
 801405c:	9b07      	ldr	r3, [sp, #28]
 801405e:	4621      	mov	r1, r4
 8014060:	3b01      	subs	r3, #1
 8014062:	4648      	mov	r0, r9
 8014064:	9300      	str	r3, [sp, #0]
 8014066:	f7ff fa98 	bl	801359a <quorem>
 801406a:	4639      	mov	r1, r7
 801406c:	9002      	str	r0, [sp, #8]
 801406e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014072:	4648      	mov	r0, r9
 8014074:	f000 fba4 	bl	80147c0 <__mcmp>
 8014078:	462a      	mov	r2, r5
 801407a:	9008      	str	r0, [sp, #32]
 801407c:	4621      	mov	r1, r4
 801407e:	4658      	mov	r0, fp
 8014080:	f000 fbba 	bl	80147f8 <__mdiff>
 8014084:	68c2      	ldr	r2, [r0, #12]
 8014086:	4606      	mov	r6, r0
 8014088:	bb02      	cbnz	r2, 80140cc <_dtoa_r+0xa1c>
 801408a:	4601      	mov	r1, r0
 801408c:	4648      	mov	r0, r9
 801408e:	f000 fb97 	bl	80147c0 <__mcmp>
 8014092:	4602      	mov	r2, r0
 8014094:	4631      	mov	r1, r6
 8014096:	4658      	mov	r0, fp
 8014098:	920e      	str	r2, [sp, #56]	@ 0x38
 801409a:	f000 f957 	bl	801434c <_Bfree>
 801409e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140a2:	9e07      	ldr	r6, [sp, #28]
 80140a4:	ea43 0102 	orr.w	r1, r3, r2
 80140a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140aa:	4319      	orrs	r1, r3
 80140ac:	d110      	bne.n	80140d0 <_dtoa_r+0xa20>
 80140ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80140b2:	d029      	beq.n	8014108 <_dtoa_r+0xa58>
 80140b4:	9b08      	ldr	r3, [sp, #32]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dd02      	ble.n	80140c0 <_dtoa_r+0xa10>
 80140ba:	9b02      	ldr	r3, [sp, #8]
 80140bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80140c0:	9b00      	ldr	r3, [sp, #0]
 80140c2:	f883 8000 	strb.w	r8, [r3]
 80140c6:	e63f      	b.n	8013d48 <_dtoa_r+0x698>
 80140c8:	4628      	mov	r0, r5
 80140ca:	e7bb      	b.n	8014044 <_dtoa_r+0x994>
 80140cc:	2201      	movs	r2, #1
 80140ce:	e7e1      	b.n	8014094 <_dtoa_r+0x9e4>
 80140d0:	9b08      	ldr	r3, [sp, #32]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	db04      	blt.n	80140e0 <_dtoa_r+0xa30>
 80140d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80140d8:	430b      	orrs	r3, r1
 80140da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80140dc:	430b      	orrs	r3, r1
 80140de:	d120      	bne.n	8014122 <_dtoa_r+0xa72>
 80140e0:	2a00      	cmp	r2, #0
 80140e2:	dded      	ble.n	80140c0 <_dtoa_r+0xa10>
 80140e4:	4649      	mov	r1, r9
 80140e6:	2201      	movs	r2, #1
 80140e8:	4658      	mov	r0, fp
 80140ea:	f000 fafd 	bl	80146e8 <__lshift>
 80140ee:	4621      	mov	r1, r4
 80140f0:	4681      	mov	r9, r0
 80140f2:	f000 fb65 	bl	80147c0 <__mcmp>
 80140f6:	2800      	cmp	r0, #0
 80140f8:	dc03      	bgt.n	8014102 <_dtoa_r+0xa52>
 80140fa:	d1e1      	bne.n	80140c0 <_dtoa_r+0xa10>
 80140fc:	f018 0f01 	tst.w	r8, #1
 8014100:	d0de      	beq.n	80140c0 <_dtoa_r+0xa10>
 8014102:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014106:	d1d8      	bne.n	80140ba <_dtoa_r+0xa0a>
 8014108:	9a00      	ldr	r2, [sp, #0]
 801410a:	2339      	movs	r3, #57	@ 0x39
 801410c:	7013      	strb	r3, [r2, #0]
 801410e:	4633      	mov	r3, r6
 8014110:	461e      	mov	r6, r3
 8014112:	3b01      	subs	r3, #1
 8014114:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014118:	2a39      	cmp	r2, #57	@ 0x39
 801411a:	d052      	beq.n	80141c2 <_dtoa_r+0xb12>
 801411c:	3201      	adds	r2, #1
 801411e:	701a      	strb	r2, [r3, #0]
 8014120:	e612      	b.n	8013d48 <_dtoa_r+0x698>
 8014122:	2a00      	cmp	r2, #0
 8014124:	dd07      	ble.n	8014136 <_dtoa_r+0xa86>
 8014126:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801412a:	d0ed      	beq.n	8014108 <_dtoa_r+0xa58>
 801412c:	9a00      	ldr	r2, [sp, #0]
 801412e:	f108 0301 	add.w	r3, r8, #1
 8014132:	7013      	strb	r3, [r2, #0]
 8014134:	e608      	b.n	8013d48 <_dtoa_r+0x698>
 8014136:	9b07      	ldr	r3, [sp, #28]
 8014138:	9a07      	ldr	r2, [sp, #28]
 801413a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801413e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014140:	4293      	cmp	r3, r2
 8014142:	d028      	beq.n	8014196 <_dtoa_r+0xae6>
 8014144:	4649      	mov	r1, r9
 8014146:	2300      	movs	r3, #0
 8014148:	220a      	movs	r2, #10
 801414a:	4658      	mov	r0, fp
 801414c:	f000 f920 	bl	8014390 <__multadd>
 8014150:	42af      	cmp	r7, r5
 8014152:	4681      	mov	r9, r0
 8014154:	f04f 0300 	mov.w	r3, #0
 8014158:	f04f 020a 	mov.w	r2, #10
 801415c:	4639      	mov	r1, r7
 801415e:	4658      	mov	r0, fp
 8014160:	d107      	bne.n	8014172 <_dtoa_r+0xac2>
 8014162:	f000 f915 	bl	8014390 <__multadd>
 8014166:	4607      	mov	r7, r0
 8014168:	4605      	mov	r5, r0
 801416a:	9b07      	ldr	r3, [sp, #28]
 801416c:	3301      	adds	r3, #1
 801416e:	9307      	str	r3, [sp, #28]
 8014170:	e774      	b.n	801405c <_dtoa_r+0x9ac>
 8014172:	f000 f90d 	bl	8014390 <__multadd>
 8014176:	4629      	mov	r1, r5
 8014178:	4607      	mov	r7, r0
 801417a:	2300      	movs	r3, #0
 801417c:	220a      	movs	r2, #10
 801417e:	4658      	mov	r0, fp
 8014180:	f000 f906 	bl	8014390 <__multadd>
 8014184:	4605      	mov	r5, r0
 8014186:	e7f0      	b.n	801416a <_dtoa_r+0xaba>
 8014188:	9b00      	ldr	r3, [sp, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	bfcc      	ite	gt
 801418e:	461e      	movgt	r6, r3
 8014190:	2601      	movle	r6, #1
 8014192:	4456      	add	r6, sl
 8014194:	2700      	movs	r7, #0
 8014196:	4649      	mov	r1, r9
 8014198:	2201      	movs	r2, #1
 801419a:	4658      	mov	r0, fp
 801419c:	f000 faa4 	bl	80146e8 <__lshift>
 80141a0:	4621      	mov	r1, r4
 80141a2:	4681      	mov	r9, r0
 80141a4:	f000 fb0c 	bl	80147c0 <__mcmp>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	dcb0      	bgt.n	801410e <_dtoa_r+0xa5e>
 80141ac:	d102      	bne.n	80141b4 <_dtoa_r+0xb04>
 80141ae:	f018 0f01 	tst.w	r8, #1
 80141b2:	d1ac      	bne.n	801410e <_dtoa_r+0xa5e>
 80141b4:	4633      	mov	r3, r6
 80141b6:	461e      	mov	r6, r3
 80141b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80141bc:	2a30      	cmp	r2, #48	@ 0x30
 80141be:	d0fa      	beq.n	80141b6 <_dtoa_r+0xb06>
 80141c0:	e5c2      	b.n	8013d48 <_dtoa_r+0x698>
 80141c2:	459a      	cmp	sl, r3
 80141c4:	d1a4      	bne.n	8014110 <_dtoa_r+0xa60>
 80141c6:	9b04      	ldr	r3, [sp, #16]
 80141c8:	3301      	adds	r3, #1
 80141ca:	9304      	str	r3, [sp, #16]
 80141cc:	2331      	movs	r3, #49	@ 0x31
 80141ce:	f88a 3000 	strb.w	r3, [sl]
 80141d2:	e5b9      	b.n	8013d48 <_dtoa_r+0x698>
 80141d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80141d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014234 <_dtoa_r+0xb84>
 80141da:	b11b      	cbz	r3, 80141e4 <_dtoa_r+0xb34>
 80141dc:	f10a 0308 	add.w	r3, sl, #8
 80141e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80141e2:	6013      	str	r3, [r2, #0]
 80141e4:	4650      	mov	r0, sl
 80141e6:	b019      	add	sp, #100	@ 0x64
 80141e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141ee:	2b01      	cmp	r3, #1
 80141f0:	f77f ae37 	ble.w	8013e62 <_dtoa_r+0x7b2>
 80141f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80141f8:	2001      	movs	r0, #1
 80141fa:	e655      	b.n	8013ea8 <_dtoa_r+0x7f8>
 80141fc:	9b00      	ldr	r3, [sp, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f77f aed6 	ble.w	8013fb0 <_dtoa_r+0x900>
 8014204:	4656      	mov	r6, sl
 8014206:	4621      	mov	r1, r4
 8014208:	4648      	mov	r0, r9
 801420a:	f7ff f9c6 	bl	801359a <quorem>
 801420e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014212:	f806 8b01 	strb.w	r8, [r6], #1
 8014216:	9b00      	ldr	r3, [sp, #0]
 8014218:	eba6 020a 	sub.w	r2, r6, sl
 801421c:	4293      	cmp	r3, r2
 801421e:	ddb3      	ble.n	8014188 <_dtoa_r+0xad8>
 8014220:	4649      	mov	r1, r9
 8014222:	2300      	movs	r3, #0
 8014224:	220a      	movs	r2, #10
 8014226:	4658      	mov	r0, fp
 8014228:	f000 f8b2 	bl	8014390 <__multadd>
 801422c:	4681      	mov	r9, r0
 801422e:	e7ea      	b.n	8014206 <_dtoa_r+0xb56>
 8014230:	08016190 	.word	0x08016190
 8014234:	08016114 	.word	0x08016114

08014238 <_free_r>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	4605      	mov	r5, r0
 801423c:	2900      	cmp	r1, #0
 801423e:	d041      	beq.n	80142c4 <_free_r+0x8c>
 8014240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014244:	1f0c      	subs	r4, r1, #4
 8014246:	2b00      	cmp	r3, #0
 8014248:	bfb8      	it	lt
 801424a:	18e4      	addlt	r4, r4, r3
 801424c:	f7fe fb0e 	bl	801286c <__malloc_lock>
 8014250:	4a1d      	ldr	r2, [pc, #116]	@ (80142c8 <_free_r+0x90>)
 8014252:	6813      	ldr	r3, [r2, #0]
 8014254:	b933      	cbnz	r3, 8014264 <_free_r+0x2c>
 8014256:	6063      	str	r3, [r4, #4]
 8014258:	6014      	str	r4, [r2, #0]
 801425a:	4628      	mov	r0, r5
 801425c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014260:	f7fe bb0a 	b.w	8012878 <__malloc_unlock>
 8014264:	42a3      	cmp	r3, r4
 8014266:	d908      	bls.n	801427a <_free_r+0x42>
 8014268:	6820      	ldr	r0, [r4, #0]
 801426a:	1821      	adds	r1, r4, r0
 801426c:	428b      	cmp	r3, r1
 801426e:	bf01      	itttt	eq
 8014270:	6819      	ldreq	r1, [r3, #0]
 8014272:	685b      	ldreq	r3, [r3, #4]
 8014274:	1809      	addeq	r1, r1, r0
 8014276:	6021      	streq	r1, [r4, #0]
 8014278:	e7ed      	b.n	8014256 <_free_r+0x1e>
 801427a:	461a      	mov	r2, r3
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	b10b      	cbz	r3, 8014284 <_free_r+0x4c>
 8014280:	42a3      	cmp	r3, r4
 8014282:	d9fa      	bls.n	801427a <_free_r+0x42>
 8014284:	6811      	ldr	r1, [r2, #0]
 8014286:	1850      	adds	r0, r2, r1
 8014288:	42a0      	cmp	r0, r4
 801428a:	d10b      	bne.n	80142a4 <_free_r+0x6c>
 801428c:	6820      	ldr	r0, [r4, #0]
 801428e:	4401      	add	r1, r0
 8014290:	1850      	adds	r0, r2, r1
 8014292:	4283      	cmp	r3, r0
 8014294:	6011      	str	r1, [r2, #0]
 8014296:	d1e0      	bne.n	801425a <_free_r+0x22>
 8014298:	6818      	ldr	r0, [r3, #0]
 801429a:	685b      	ldr	r3, [r3, #4]
 801429c:	6053      	str	r3, [r2, #4]
 801429e:	4408      	add	r0, r1
 80142a0:	6010      	str	r0, [r2, #0]
 80142a2:	e7da      	b.n	801425a <_free_r+0x22>
 80142a4:	d902      	bls.n	80142ac <_free_r+0x74>
 80142a6:	230c      	movs	r3, #12
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	e7d6      	b.n	801425a <_free_r+0x22>
 80142ac:	6820      	ldr	r0, [r4, #0]
 80142ae:	1821      	adds	r1, r4, r0
 80142b0:	428b      	cmp	r3, r1
 80142b2:	bf04      	itt	eq
 80142b4:	6819      	ldreq	r1, [r3, #0]
 80142b6:	685b      	ldreq	r3, [r3, #4]
 80142b8:	6063      	str	r3, [r4, #4]
 80142ba:	bf04      	itt	eq
 80142bc:	1809      	addeq	r1, r1, r0
 80142be:	6021      	streq	r1, [r4, #0]
 80142c0:	6054      	str	r4, [r2, #4]
 80142c2:	e7ca      	b.n	801425a <_free_r+0x22>
 80142c4:	bd38      	pop	{r3, r4, r5, pc}
 80142c6:	bf00      	nop
 80142c8:	200063ec 	.word	0x200063ec

080142cc <_Balloc>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	69c6      	ldr	r6, [r0, #28]
 80142d0:	4604      	mov	r4, r0
 80142d2:	460d      	mov	r5, r1
 80142d4:	b976      	cbnz	r6, 80142f4 <_Balloc+0x28>
 80142d6:	2010      	movs	r0, #16
 80142d8:	f7fe fa16 	bl	8012708 <malloc>
 80142dc:	4602      	mov	r2, r0
 80142de:	61e0      	str	r0, [r4, #28]
 80142e0:	b920      	cbnz	r0, 80142ec <_Balloc+0x20>
 80142e2:	4b18      	ldr	r3, [pc, #96]	@ (8014344 <_Balloc+0x78>)
 80142e4:	4818      	ldr	r0, [pc, #96]	@ (8014348 <_Balloc+0x7c>)
 80142e6:	216b      	movs	r1, #107	@ 0x6b
 80142e8:	f000 ff66 	bl	80151b8 <__assert_func>
 80142ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80142f0:	6006      	str	r6, [r0, #0]
 80142f2:	60c6      	str	r6, [r0, #12]
 80142f4:	69e6      	ldr	r6, [r4, #28]
 80142f6:	68f3      	ldr	r3, [r6, #12]
 80142f8:	b183      	cbz	r3, 801431c <_Balloc+0x50>
 80142fa:	69e3      	ldr	r3, [r4, #28]
 80142fc:	68db      	ldr	r3, [r3, #12]
 80142fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014302:	b9b8      	cbnz	r0, 8014334 <_Balloc+0x68>
 8014304:	2101      	movs	r1, #1
 8014306:	fa01 f605 	lsl.w	r6, r1, r5
 801430a:	1d72      	adds	r2, r6, #5
 801430c:	0092      	lsls	r2, r2, #2
 801430e:	4620      	mov	r0, r4
 8014310:	f000 ff70 	bl	80151f4 <_calloc_r>
 8014314:	b160      	cbz	r0, 8014330 <_Balloc+0x64>
 8014316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801431a:	e00e      	b.n	801433a <_Balloc+0x6e>
 801431c:	2221      	movs	r2, #33	@ 0x21
 801431e:	2104      	movs	r1, #4
 8014320:	4620      	mov	r0, r4
 8014322:	f000 ff67 	bl	80151f4 <_calloc_r>
 8014326:	69e3      	ldr	r3, [r4, #28]
 8014328:	60f0      	str	r0, [r6, #12]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d1e4      	bne.n	80142fa <_Balloc+0x2e>
 8014330:	2000      	movs	r0, #0
 8014332:	bd70      	pop	{r4, r5, r6, pc}
 8014334:	6802      	ldr	r2, [r0, #0]
 8014336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801433a:	2300      	movs	r3, #0
 801433c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014340:	e7f7      	b.n	8014332 <_Balloc+0x66>
 8014342:	bf00      	nop
 8014344:	08016121 	.word	0x08016121
 8014348:	080161a1 	.word	0x080161a1

0801434c <_Bfree>:
 801434c:	b570      	push	{r4, r5, r6, lr}
 801434e:	69c6      	ldr	r6, [r0, #28]
 8014350:	4605      	mov	r5, r0
 8014352:	460c      	mov	r4, r1
 8014354:	b976      	cbnz	r6, 8014374 <_Bfree+0x28>
 8014356:	2010      	movs	r0, #16
 8014358:	f7fe f9d6 	bl	8012708 <malloc>
 801435c:	4602      	mov	r2, r0
 801435e:	61e8      	str	r0, [r5, #28]
 8014360:	b920      	cbnz	r0, 801436c <_Bfree+0x20>
 8014362:	4b09      	ldr	r3, [pc, #36]	@ (8014388 <_Bfree+0x3c>)
 8014364:	4809      	ldr	r0, [pc, #36]	@ (801438c <_Bfree+0x40>)
 8014366:	218f      	movs	r1, #143	@ 0x8f
 8014368:	f000 ff26 	bl	80151b8 <__assert_func>
 801436c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014370:	6006      	str	r6, [r0, #0]
 8014372:	60c6      	str	r6, [r0, #12]
 8014374:	b13c      	cbz	r4, 8014386 <_Bfree+0x3a>
 8014376:	69eb      	ldr	r3, [r5, #28]
 8014378:	6862      	ldr	r2, [r4, #4]
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014380:	6021      	str	r1, [r4, #0]
 8014382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014386:	bd70      	pop	{r4, r5, r6, pc}
 8014388:	08016121 	.word	0x08016121
 801438c:	080161a1 	.word	0x080161a1

08014390 <__multadd>:
 8014390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014394:	690d      	ldr	r5, [r1, #16]
 8014396:	4607      	mov	r7, r0
 8014398:	460c      	mov	r4, r1
 801439a:	461e      	mov	r6, r3
 801439c:	f101 0c14 	add.w	ip, r1, #20
 80143a0:	2000      	movs	r0, #0
 80143a2:	f8dc 3000 	ldr.w	r3, [ip]
 80143a6:	b299      	uxth	r1, r3
 80143a8:	fb02 6101 	mla	r1, r2, r1, r6
 80143ac:	0c1e      	lsrs	r6, r3, #16
 80143ae:	0c0b      	lsrs	r3, r1, #16
 80143b0:	fb02 3306 	mla	r3, r2, r6, r3
 80143b4:	b289      	uxth	r1, r1
 80143b6:	3001      	adds	r0, #1
 80143b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80143bc:	4285      	cmp	r5, r0
 80143be:	f84c 1b04 	str.w	r1, [ip], #4
 80143c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80143c6:	dcec      	bgt.n	80143a2 <__multadd+0x12>
 80143c8:	b30e      	cbz	r6, 801440e <__multadd+0x7e>
 80143ca:	68a3      	ldr	r3, [r4, #8]
 80143cc:	42ab      	cmp	r3, r5
 80143ce:	dc19      	bgt.n	8014404 <__multadd+0x74>
 80143d0:	6861      	ldr	r1, [r4, #4]
 80143d2:	4638      	mov	r0, r7
 80143d4:	3101      	adds	r1, #1
 80143d6:	f7ff ff79 	bl	80142cc <_Balloc>
 80143da:	4680      	mov	r8, r0
 80143dc:	b928      	cbnz	r0, 80143ea <__multadd+0x5a>
 80143de:	4602      	mov	r2, r0
 80143e0:	4b0c      	ldr	r3, [pc, #48]	@ (8014414 <__multadd+0x84>)
 80143e2:	480d      	ldr	r0, [pc, #52]	@ (8014418 <__multadd+0x88>)
 80143e4:	21ba      	movs	r1, #186	@ 0xba
 80143e6:	f000 fee7 	bl	80151b8 <__assert_func>
 80143ea:	6922      	ldr	r2, [r4, #16]
 80143ec:	3202      	adds	r2, #2
 80143ee:	f104 010c 	add.w	r1, r4, #12
 80143f2:	0092      	lsls	r2, r2, #2
 80143f4:	300c      	adds	r0, #12
 80143f6:	f7ff f8c2 	bl	801357e <memcpy>
 80143fa:	4621      	mov	r1, r4
 80143fc:	4638      	mov	r0, r7
 80143fe:	f7ff ffa5 	bl	801434c <_Bfree>
 8014402:	4644      	mov	r4, r8
 8014404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014408:	3501      	adds	r5, #1
 801440a:	615e      	str	r6, [r3, #20]
 801440c:	6125      	str	r5, [r4, #16]
 801440e:	4620      	mov	r0, r4
 8014410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014414:	08016190 	.word	0x08016190
 8014418:	080161a1 	.word	0x080161a1

0801441c <__hi0bits>:
 801441c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014420:	4603      	mov	r3, r0
 8014422:	bf36      	itet	cc
 8014424:	0403      	lslcc	r3, r0, #16
 8014426:	2000      	movcs	r0, #0
 8014428:	2010      	movcc	r0, #16
 801442a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801442e:	bf3c      	itt	cc
 8014430:	021b      	lslcc	r3, r3, #8
 8014432:	3008      	addcc	r0, #8
 8014434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014438:	bf3c      	itt	cc
 801443a:	011b      	lslcc	r3, r3, #4
 801443c:	3004      	addcc	r0, #4
 801443e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014442:	bf3c      	itt	cc
 8014444:	009b      	lslcc	r3, r3, #2
 8014446:	3002      	addcc	r0, #2
 8014448:	2b00      	cmp	r3, #0
 801444a:	db05      	blt.n	8014458 <__hi0bits+0x3c>
 801444c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014450:	f100 0001 	add.w	r0, r0, #1
 8014454:	bf08      	it	eq
 8014456:	2020      	moveq	r0, #32
 8014458:	4770      	bx	lr

0801445a <__lo0bits>:
 801445a:	6803      	ldr	r3, [r0, #0]
 801445c:	4602      	mov	r2, r0
 801445e:	f013 0007 	ands.w	r0, r3, #7
 8014462:	d00b      	beq.n	801447c <__lo0bits+0x22>
 8014464:	07d9      	lsls	r1, r3, #31
 8014466:	d421      	bmi.n	80144ac <__lo0bits+0x52>
 8014468:	0798      	lsls	r0, r3, #30
 801446a:	bf49      	itett	mi
 801446c:	085b      	lsrmi	r3, r3, #1
 801446e:	089b      	lsrpl	r3, r3, #2
 8014470:	2001      	movmi	r0, #1
 8014472:	6013      	strmi	r3, [r2, #0]
 8014474:	bf5c      	itt	pl
 8014476:	6013      	strpl	r3, [r2, #0]
 8014478:	2002      	movpl	r0, #2
 801447a:	4770      	bx	lr
 801447c:	b299      	uxth	r1, r3
 801447e:	b909      	cbnz	r1, 8014484 <__lo0bits+0x2a>
 8014480:	0c1b      	lsrs	r3, r3, #16
 8014482:	2010      	movs	r0, #16
 8014484:	b2d9      	uxtb	r1, r3
 8014486:	b909      	cbnz	r1, 801448c <__lo0bits+0x32>
 8014488:	3008      	adds	r0, #8
 801448a:	0a1b      	lsrs	r3, r3, #8
 801448c:	0719      	lsls	r1, r3, #28
 801448e:	bf04      	itt	eq
 8014490:	091b      	lsreq	r3, r3, #4
 8014492:	3004      	addeq	r0, #4
 8014494:	0799      	lsls	r1, r3, #30
 8014496:	bf04      	itt	eq
 8014498:	089b      	lsreq	r3, r3, #2
 801449a:	3002      	addeq	r0, #2
 801449c:	07d9      	lsls	r1, r3, #31
 801449e:	d403      	bmi.n	80144a8 <__lo0bits+0x4e>
 80144a0:	085b      	lsrs	r3, r3, #1
 80144a2:	f100 0001 	add.w	r0, r0, #1
 80144a6:	d003      	beq.n	80144b0 <__lo0bits+0x56>
 80144a8:	6013      	str	r3, [r2, #0]
 80144aa:	4770      	bx	lr
 80144ac:	2000      	movs	r0, #0
 80144ae:	4770      	bx	lr
 80144b0:	2020      	movs	r0, #32
 80144b2:	4770      	bx	lr

080144b4 <__i2b>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	460c      	mov	r4, r1
 80144b8:	2101      	movs	r1, #1
 80144ba:	f7ff ff07 	bl	80142cc <_Balloc>
 80144be:	4602      	mov	r2, r0
 80144c0:	b928      	cbnz	r0, 80144ce <__i2b+0x1a>
 80144c2:	4b05      	ldr	r3, [pc, #20]	@ (80144d8 <__i2b+0x24>)
 80144c4:	4805      	ldr	r0, [pc, #20]	@ (80144dc <__i2b+0x28>)
 80144c6:	f240 1145 	movw	r1, #325	@ 0x145
 80144ca:	f000 fe75 	bl	80151b8 <__assert_func>
 80144ce:	2301      	movs	r3, #1
 80144d0:	6144      	str	r4, [r0, #20]
 80144d2:	6103      	str	r3, [r0, #16]
 80144d4:	bd10      	pop	{r4, pc}
 80144d6:	bf00      	nop
 80144d8:	08016190 	.word	0x08016190
 80144dc:	080161a1 	.word	0x080161a1

080144e0 <__multiply>:
 80144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	4614      	mov	r4, r2
 80144e6:	690a      	ldr	r2, [r1, #16]
 80144e8:	6923      	ldr	r3, [r4, #16]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	bfa8      	it	ge
 80144ee:	4623      	movge	r3, r4
 80144f0:	460f      	mov	r7, r1
 80144f2:	bfa4      	itt	ge
 80144f4:	460c      	movge	r4, r1
 80144f6:	461f      	movge	r7, r3
 80144f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80144fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014500:	68a3      	ldr	r3, [r4, #8]
 8014502:	6861      	ldr	r1, [r4, #4]
 8014504:	eb0a 0609 	add.w	r6, sl, r9
 8014508:	42b3      	cmp	r3, r6
 801450a:	b085      	sub	sp, #20
 801450c:	bfb8      	it	lt
 801450e:	3101      	addlt	r1, #1
 8014510:	f7ff fedc 	bl	80142cc <_Balloc>
 8014514:	b930      	cbnz	r0, 8014524 <__multiply+0x44>
 8014516:	4602      	mov	r2, r0
 8014518:	4b44      	ldr	r3, [pc, #272]	@ (801462c <__multiply+0x14c>)
 801451a:	4845      	ldr	r0, [pc, #276]	@ (8014630 <__multiply+0x150>)
 801451c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014520:	f000 fe4a 	bl	80151b8 <__assert_func>
 8014524:	f100 0514 	add.w	r5, r0, #20
 8014528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801452c:	462b      	mov	r3, r5
 801452e:	2200      	movs	r2, #0
 8014530:	4543      	cmp	r3, r8
 8014532:	d321      	bcc.n	8014578 <__multiply+0x98>
 8014534:	f107 0114 	add.w	r1, r7, #20
 8014538:	f104 0214 	add.w	r2, r4, #20
 801453c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014540:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014544:	9302      	str	r3, [sp, #8]
 8014546:	1b13      	subs	r3, r2, r4
 8014548:	3b15      	subs	r3, #21
 801454a:	f023 0303 	bic.w	r3, r3, #3
 801454e:	3304      	adds	r3, #4
 8014550:	f104 0715 	add.w	r7, r4, #21
 8014554:	42ba      	cmp	r2, r7
 8014556:	bf38      	it	cc
 8014558:	2304      	movcc	r3, #4
 801455a:	9301      	str	r3, [sp, #4]
 801455c:	9b02      	ldr	r3, [sp, #8]
 801455e:	9103      	str	r1, [sp, #12]
 8014560:	428b      	cmp	r3, r1
 8014562:	d80c      	bhi.n	801457e <__multiply+0x9e>
 8014564:	2e00      	cmp	r6, #0
 8014566:	dd03      	ble.n	8014570 <__multiply+0x90>
 8014568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801456c:	2b00      	cmp	r3, #0
 801456e:	d05b      	beq.n	8014628 <__multiply+0x148>
 8014570:	6106      	str	r6, [r0, #16]
 8014572:	b005      	add	sp, #20
 8014574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014578:	f843 2b04 	str.w	r2, [r3], #4
 801457c:	e7d8      	b.n	8014530 <__multiply+0x50>
 801457e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014582:	f1ba 0f00 	cmp.w	sl, #0
 8014586:	d024      	beq.n	80145d2 <__multiply+0xf2>
 8014588:	f104 0e14 	add.w	lr, r4, #20
 801458c:	46a9      	mov	r9, r5
 801458e:	f04f 0c00 	mov.w	ip, #0
 8014592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014596:	f8d9 3000 	ldr.w	r3, [r9]
 801459a:	fa1f fb87 	uxth.w	fp, r7
 801459e:	b29b      	uxth	r3, r3
 80145a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80145a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80145a8:	f8d9 7000 	ldr.w	r7, [r9]
 80145ac:	4463      	add	r3, ip
 80145ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80145b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80145b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80145c0:	4572      	cmp	r2, lr
 80145c2:	f849 3b04 	str.w	r3, [r9], #4
 80145c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80145ca:	d8e2      	bhi.n	8014592 <__multiply+0xb2>
 80145cc:	9b01      	ldr	r3, [sp, #4]
 80145ce:	f845 c003 	str.w	ip, [r5, r3]
 80145d2:	9b03      	ldr	r3, [sp, #12]
 80145d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80145d8:	3104      	adds	r1, #4
 80145da:	f1b9 0f00 	cmp.w	r9, #0
 80145de:	d021      	beq.n	8014624 <__multiply+0x144>
 80145e0:	682b      	ldr	r3, [r5, #0]
 80145e2:	f104 0c14 	add.w	ip, r4, #20
 80145e6:	46ae      	mov	lr, r5
 80145e8:	f04f 0a00 	mov.w	sl, #0
 80145ec:	f8bc b000 	ldrh.w	fp, [ip]
 80145f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80145f4:	fb09 770b 	mla	r7, r9, fp, r7
 80145f8:	4457      	add	r7, sl
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014600:	f84e 3b04 	str.w	r3, [lr], #4
 8014604:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014608:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801460c:	f8be 3000 	ldrh.w	r3, [lr]
 8014610:	fb09 330a 	mla	r3, r9, sl, r3
 8014614:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014618:	4562      	cmp	r2, ip
 801461a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801461e:	d8e5      	bhi.n	80145ec <__multiply+0x10c>
 8014620:	9f01      	ldr	r7, [sp, #4]
 8014622:	51eb      	str	r3, [r5, r7]
 8014624:	3504      	adds	r5, #4
 8014626:	e799      	b.n	801455c <__multiply+0x7c>
 8014628:	3e01      	subs	r6, #1
 801462a:	e79b      	b.n	8014564 <__multiply+0x84>
 801462c:	08016190 	.word	0x08016190
 8014630:	080161a1 	.word	0x080161a1

08014634 <__pow5mult>:
 8014634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014638:	4615      	mov	r5, r2
 801463a:	f012 0203 	ands.w	r2, r2, #3
 801463e:	4607      	mov	r7, r0
 8014640:	460e      	mov	r6, r1
 8014642:	d007      	beq.n	8014654 <__pow5mult+0x20>
 8014644:	4c25      	ldr	r4, [pc, #148]	@ (80146dc <__pow5mult+0xa8>)
 8014646:	3a01      	subs	r2, #1
 8014648:	2300      	movs	r3, #0
 801464a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801464e:	f7ff fe9f 	bl	8014390 <__multadd>
 8014652:	4606      	mov	r6, r0
 8014654:	10ad      	asrs	r5, r5, #2
 8014656:	d03d      	beq.n	80146d4 <__pow5mult+0xa0>
 8014658:	69fc      	ldr	r4, [r7, #28]
 801465a:	b97c      	cbnz	r4, 801467c <__pow5mult+0x48>
 801465c:	2010      	movs	r0, #16
 801465e:	f7fe f853 	bl	8012708 <malloc>
 8014662:	4602      	mov	r2, r0
 8014664:	61f8      	str	r0, [r7, #28]
 8014666:	b928      	cbnz	r0, 8014674 <__pow5mult+0x40>
 8014668:	4b1d      	ldr	r3, [pc, #116]	@ (80146e0 <__pow5mult+0xac>)
 801466a:	481e      	ldr	r0, [pc, #120]	@ (80146e4 <__pow5mult+0xb0>)
 801466c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014670:	f000 fda2 	bl	80151b8 <__assert_func>
 8014674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014678:	6004      	str	r4, [r0, #0]
 801467a:	60c4      	str	r4, [r0, #12]
 801467c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014684:	b94c      	cbnz	r4, 801469a <__pow5mult+0x66>
 8014686:	f240 2171 	movw	r1, #625	@ 0x271
 801468a:	4638      	mov	r0, r7
 801468c:	f7ff ff12 	bl	80144b4 <__i2b>
 8014690:	2300      	movs	r3, #0
 8014692:	f8c8 0008 	str.w	r0, [r8, #8]
 8014696:	4604      	mov	r4, r0
 8014698:	6003      	str	r3, [r0, #0]
 801469a:	f04f 0900 	mov.w	r9, #0
 801469e:	07eb      	lsls	r3, r5, #31
 80146a0:	d50a      	bpl.n	80146b8 <__pow5mult+0x84>
 80146a2:	4631      	mov	r1, r6
 80146a4:	4622      	mov	r2, r4
 80146a6:	4638      	mov	r0, r7
 80146a8:	f7ff ff1a 	bl	80144e0 <__multiply>
 80146ac:	4631      	mov	r1, r6
 80146ae:	4680      	mov	r8, r0
 80146b0:	4638      	mov	r0, r7
 80146b2:	f7ff fe4b 	bl	801434c <_Bfree>
 80146b6:	4646      	mov	r6, r8
 80146b8:	106d      	asrs	r5, r5, #1
 80146ba:	d00b      	beq.n	80146d4 <__pow5mult+0xa0>
 80146bc:	6820      	ldr	r0, [r4, #0]
 80146be:	b938      	cbnz	r0, 80146d0 <__pow5mult+0x9c>
 80146c0:	4622      	mov	r2, r4
 80146c2:	4621      	mov	r1, r4
 80146c4:	4638      	mov	r0, r7
 80146c6:	f7ff ff0b 	bl	80144e0 <__multiply>
 80146ca:	6020      	str	r0, [r4, #0]
 80146cc:	f8c0 9000 	str.w	r9, [r0]
 80146d0:	4604      	mov	r4, r0
 80146d2:	e7e4      	b.n	801469e <__pow5mult+0x6a>
 80146d4:	4630      	mov	r0, r6
 80146d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146da:	bf00      	nop
 80146dc:	080161fc 	.word	0x080161fc
 80146e0:	08016121 	.word	0x08016121
 80146e4:	080161a1 	.word	0x080161a1

080146e8 <__lshift>:
 80146e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146ec:	460c      	mov	r4, r1
 80146ee:	6849      	ldr	r1, [r1, #4]
 80146f0:	6923      	ldr	r3, [r4, #16]
 80146f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80146f6:	68a3      	ldr	r3, [r4, #8]
 80146f8:	4607      	mov	r7, r0
 80146fa:	4691      	mov	r9, r2
 80146fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014700:	f108 0601 	add.w	r6, r8, #1
 8014704:	42b3      	cmp	r3, r6
 8014706:	db0b      	blt.n	8014720 <__lshift+0x38>
 8014708:	4638      	mov	r0, r7
 801470a:	f7ff fddf 	bl	80142cc <_Balloc>
 801470e:	4605      	mov	r5, r0
 8014710:	b948      	cbnz	r0, 8014726 <__lshift+0x3e>
 8014712:	4602      	mov	r2, r0
 8014714:	4b28      	ldr	r3, [pc, #160]	@ (80147b8 <__lshift+0xd0>)
 8014716:	4829      	ldr	r0, [pc, #164]	@ (80147bc <__lshift+0xd4>)
 8014718:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801471c:	f000 fd4c 	bl	80151b8 <__assert_func>
 8014720:	3101      	adds	r1, #1
 8014722:	005b      	lsls	r3, r3, #1
 8014724:	e7ee      	b.n	8014704 <__lshift+0x1c>
 8014726:	2300      	movs	r3, #0
 8014728:	f100 0114 	add.w	r1, r0, #20
 801472c:	f100 0210 	add.w	r2, r0, #16
 8014730:	4618      	mov	r0, r3
 8014732:	4553      	cmp	r3, sl
 8014734:	db33      	blt.n	801479e <__lshift+0xb6>
 8014736:	6920      	ldr	r0, [r4, #16]
 8014738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801473c:	f104 0314 	add.w	r3, r4, #20
 8014740:	f019 091f 	ands.w	r9, r9, #31
 8014744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801474c:	d02b      	beq.n	80147a6 <__lshift+0xbe>
 801474e:	f1c9 0e20 	rsb	lr, r9, #32
 8014752:	468a      	mov	sl, r1
 8014754:	2200      	movs	r2, #0
 8014756:	6818      	ldr	r0, [r3, #0]
 8014758:	fa00 f009 	lsl.w	r0, r0, r9
 801475c:	4310      	orrs	r0, r2
 801475e:	f84a 0b04 	str.w	r0, [sl], #4
 8014762:	f853 2b04 	ldr.w	r2, [r3], #4
 8014766:	459c      	cmp	ip, r3
 8014768:	fa22 f20e 	lsr.w	r2, r2, lr
 801476c:	d8f3      	bhi.n	8014756 <__lshift+0x6e>
 801476e:	ebac 0304 	sub.w	r3, ip, r4
 8014772:	3b15      	subs	r3, #21
 8014774:	f023 0303 	bic.w	r3, r3, #3
 8014778:	3304      	adds	r3, #4
 801477a:	f104 0015 	add.w	r0, r4, #21
 801477e:	4584      	cmp	ip, r0
 8014780:	bf38      	it	cc
 8014782:	2304      	movcc	r3, #4
 8014784:	50ca      	str	r2, [r1, r3]
 8014786:	b10a      	cbz	r2, 801478c <__lshift+0xa4>
 8014788:	f108 0602 	add.w	r6, r8, #2
 801478c:	3e01      	subs	r6, #1
 801478e:	4638      	mov	r0, r7
 8014790:	612e      	str	r6, [r5, #16]
 8014792:	4621      	mov	r1, r4
 8014794:	f7ff fdda 	bl	801434c <_Bfree>
 8014798:	4628      	mov	r0, r5
 801479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801479e:	f842 0f04 	str.w	r0, [r2, #4]!
 80147a2:	3301      	adds	r3, #1
 80147a4:	e7c5      	b.n	8014732 <__lshift+0x4a>
 80147a6:	3904      	subs	r1, #4
 80147a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80147ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80147b0:	459c      	cmp	ip, r3
 80147b2:	d8f9      	bhi.n	80147a8 <__lshift+0xc0>
 80147b4:	e7ea      	b.n	801478c <__lshift+0xa4>
 80147b6:	bf00      	nop
 80147b8:	08016190 	.word	0x08016190
 80147bc:	080161a1 	.word	0x080161a1

080147c0 <__mcmp>:
 80147c0:	690a      	ldr	r2, [r1, #16]
 80147c2:	4603      	mov	r3, r0
 80147c4:	6900      	ldr	r0, [r0, #16]
 80147c6:	1a80      	subs	r0, r0, r2
 80147c8:	b530      	push	{r4, r5, lr}
 80147ca:	d10e      	bne.n	80147ea <__mcmp+0x2a>
 80147cc:	3314      	adds	r3, #20
 80147ce:	3114      	adds	r1, #20
 80147d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80147d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80147d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80147dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80147e0:	4295      	cmp	r5, r2
 80147e2:	d003      	beq.n	80147ec <__mcmp+0x2c>
 80147e4:	d205      	bcs.n	80147f2 <__mcmp+0x32>
 80147e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147ea:	bd30      	pop	{r4, r5, pc}
 80147ec:	42a3      	cmp	r3, r4
 80147ee:	d3f3      	bcc.n	80147d8 <__mcmp+0x18>
 80147f0:	e7fb      	b.n	80147ea <__mcmp+0x2a>
 80147f2:	2001      	movs	r0, #1
 80147f4:	e7f9      	b.n	80147ea <__mcmp+0x2a>
	...

080147f8 <__mdiff>:
 80147f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147fc:	4689      	mov	r9, r1
 80147fe:	4606      	mov	r6, r0
 8014800:	4611      	mov	r1, r2
 8014802:	4648      	mov	r0, r9
 8014804:	4614      	mov	r4, r2
 8014806:	f7ff ffdb 	bl	80147c0 <__mcmp>
 801480a:	1e05      	subs	r5, r0, #0
 801480c:	d112      	bne.n	8014834 <__mdiff+0x3c>
 801480e:	4629      	mov	r1, r5
 8014810:	4630      	mov	r0, r6
 8014812:	f7ff fd5b 	bl	80142cc <_Balloc>
 8014816:	4602      	mov	r2, r0
 8014818:	b928      	cbnz	r0, 8014826 <__mdiff+0x2e>
 801481a:	4b3f      	ldr	r3, [pc, #252]	@ (8014918 <__mdiff+0x120>)
 801481c:	f240 2137 	movw	r1, #567	@ 0x237
 8014820:	483e      	ldr	r0, [pc, #248]	@ (801491c <__mdiff+0x124>)
 8014822:	f000 fcc9 	bl	80151b8 <__assert_func>
 8014826:	2301      	movs	r3, #1
 8014828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801482c:	4610      	mov	r0, r2
 801482e:	b003      	add	sp, #12
 8014830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014834:	bfbc      	itt	lt
 8014836:	464b      	movlt	r3, r9
 8014838:	46a1      	movlt	r9, r4
 801483a:	4630      	mov	r0, r6
 801483c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014840:	bfba      	itte	lt
 8014842:	461c      	movlt	r4, r3
 8014844:	2501      	movlt	r5, #1
 8014846:	2500      	movge	r5, #0
 8014848:	f7ff fd40 	bl	80142cc <_Balloc>
 801484c:	4602      	mov	r2, r0
 801484e:	b918      	cbnz	r0, 8014858 <__mdiff+0x60>
 8014850:	4b31      	ldr	r3, [pc, #196]	@ (8014918 <__mdiff+0x120>)
 8014852:	f240 2145 	movw	r1, #581	@ 0x245
 8014856:	e7e3      	b.n	8014820 <__mdiff+0x28>
 8014858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801485c:	6926      	ldr	r6, [r4, #16]
 801485e:	60c5      	str	r5, [r0, #12]
 8014860:	f109 0310 	add.w	r3, r9, #16
 8014864:	f109 0514 	add.w	r5, r9, #20
 8014868:	f104 0e14 	add.w	lr, r4, #20
 801486c:	f100 0b14 	add.w	fp, r0, #20
 8014870:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014874:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014878:	9301      	str	r3, [sp, #4]
 801487a:	46d9      	mov	r9, fp
 801487c:	f04f 0c00 	mov.w	ip, #0
 8014880:	9b01      	ldr	r3, [sp, #4]
 8014882:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014886:	f853 af04 	ldr.w	sl, [r3, #4]!
 801488a:	9301      	str	r3, [sp, #4]
 801488c:	fa1f f38a 	uxth.w	r3, sl
 8014890:	4619      	mov	r1, r3
 8014892:	b283      	uxth	r3, r0
 8014894:	1acb      	subs	r3, r1, r3
 8014896:	0c00      	lsrs	r0, r0, #16
 8014898:	4463      	add	r3, ip
 801489a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801489e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80148a8:	4576      	cmp	r6, lr
 80148aa:	f849 3b04 	str.w	r3, [r9], #4
 80148ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80148b2:	d8e5      	bhi.n	8014880 <__mdiff+0x88>
 80148b4:	1b33      	subs	r3, r6, r4
 80148b6:	3b15      	subs	r3, #21
 80148b8:	f023 0303 	bic.w	r3, r3, #3
 80148bc:	3415      	adds	r4, #21
 80148be:	3304      	adds	r3, #4
 80148c0:	42a6      	cmp	r6, r4
 80148c2:	bf38      	it	cc
 80148c4:	2304      	movcc	r3, #4
 80148c6:	441d      	add	r5, r3
 80148c8:	445b      	add	r3, fp
 80148ca:	461e      	mov	r6, r3
 80148cc:	462c      	mov	r4, r5
 80148ce:	4544      	cmp	r4, r8
 80148d0:	d30e      	bcc.n	80148f0 <__mdiff+0xf8>
 80148d2:	f108 0103 	add.w	r1, r8, #3
 80148d6:	1b49      	subs	r1, r1, r5
 80148d8:	f021 0103 	bic.w	r1, r1, #3
 80148dc:	3d03      	subs	r5, #3
 80148de:	45a8      	cmp	r8, r5
 80148e0:	bf38      	it	cc
 80148e2:	2100      	movcc	r1, #0
 80148e4:	440b      	add	r3, r1
 80148e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80148ea:	b191      	cbz	r1, 8014912 <__mdiff+0x11a>
 80148ec:	6117      	str	r7, [r2, #16]
 80148ee:	e79d      	b.n	801482c <__mdiff+0x34>
 80148f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80148f4:	46e6      	mov	lr, ip
 80148f6:	0c08      	lsrs	r0, r1, #16
 80148f8:	fa1c fc81 	uxtah	ip, ip, r1
 80148fc:	4471      	add	r1, lr
 80148fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014902:	b289      	uxth	r1, r1
 8014904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014908:	f846 1b04 	str.w	r1, [r6], #4
 801490c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014910:	e7dd      	b.n	80148ce <__mdiff+0xd6>
 8014912:	3f01      	subs	r7, #1
 8014914:	e7e7      	b.n	80148e6 <__mdiff+0xee>
 8014916:	bf00      	nop
 8014918:	08016190 	.word	0x08016190
 801491c:	080161a1 	.word	0x080161a1

08014920 <__d2b>:
 8014920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014924:	460f      	mov	r7, r1
 8014926:	2101      	movs	r1, #1
 8014928:	ec59 8b10 	vmov	r8, r9, d0
 801492c:	4616      	mov	r6, r2
 801492e:	f7ff fccd 	bl	80142cc <_Balloc>
 8014932:	4604      	mov	r4, r0
 8014934:	b930      	cbnz	r0, 8014944 <__d2b+0x24>
 8014936:	4602      	mov	r2, r0
 8014938:	4b23      	ldr	r3, [pc, #140]	@ (80149c8 <__d2b+0xa8>)
 801493a:	4824      	ldr	r0, [pc, #144]	@ (80149cc <__d2b+0xac>)
 801493c:	f240 310f 	movw	r1, #783	@ 0x30f
 8014940:	f000 fc3a 	bl	80151b8 <__assert_func>
 8014944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801494c:	b10d      	cbz	r5, 8014952 <__d2b+0x32>
 801494e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014952:	9301      	str	r3, [sp, #4]
 8014954:	f1b8 0300 	subs.w	r3, r8, #0
 8014958:	d023      	beq.n	80149a2 <__d2b+0x82>
 801495a:	4668      	mov	r0, sp
 801495c:	9300      	str	r3, [sp, #0]
 801495e:	f7ff fd7c 	bl	801445a <__lo0bits>
 8014962:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014966:	b1d0      	cbz	r0, 801499e <__d2b+0x7e>
 8014968:	f1c0 0320 	rsb	r3, r0, #32
 801496c:	fa02 f303 	lsl.w	r3, r2, r3
 8014970:	430b      	orrs	r3, r1
 8014972:	40c2      	lsrs	r2, r0
 8014974:	6163      	str	r3, [r4, #20]
 8014976:	9201      	str	r2, [sp, #4]
 8014978:	9b01      	ldr	r3, [sp, #4]
 801497a:	61a3      	str	r3, [r4, #24]
 801497c:	2b00      	cmp	r3, #0
 801497e:	bf0c      	ite	eq
 8014980:	2201      	moveq	r2, #1
 8014982:	2202      	movne	r2, #2
 8014984:	6122      	str	r2, [r4, #16]
 8014986:	b1a5      	cbz	r5, 80149b2 <__d2b+0x92>
 8014988:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801498c:	4405      	add	r5, r0
 801498e:	603d      	str	r5, [r7, #0]
 8014990:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014994:	6030      	str	r0, [r6, #0]
 8014996:	4620      	mov	r0, r4
 8014998:	b003      	add	sp, #12
 801499a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801499e:	6161      	str	r1, [r4, #20]
 80149a0:	e7ea      	b.n	8014978 <__d2b+0x58>
 80149a2:	a801      	add	r0, sp, #4
 80149a4:	f7ff fd59 	bl	801445a <__lo0bits>
 80149a8:	9b01      	ldr	r3, [sp, #4]
 80149aa:	6163      	str	r3, [r4, #20]
 80149ac:	3020      	adds	r0, #32
 80149ae:	2201      	movs	r2, #1
 80149b0:	e7e8      	b.n	8014984 <__d2b+0x64>
 80149b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80149ba:	6038      	str	r0, [r7, #0]
 80149bc:	6918      	ldr	r0, [r3, #16]
 80149be:	f7ff fd2d 	bl	801441c <__hi0bits>
 80149c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80149c6:	e7e5      	b.n	8014994 <__d2b+0x74>
 80149c8:	08016190 	.word	0x08016190
 80149cc:	080161a1 	.word	0x080161a1

080149d0 <__ssputs_r>:
 80149d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149d4:	688e      	ldr	r6, [r1, #8]
 80149d6:	461f      	mov	r7, r3
 80149d8:	42be      	cmp	r6, r7
 80149da:	680b      	ldr	r3, [r1, #0]
 80149dc:	4682      	mov	sl, r0
 80149de:	460c      	mov	r4, r1
 80149e0:	4690      	mov	r8, r2
 80149e2:	d82d      	bhi.n	8014a40 <__ssputs_r+0x70>
 80149e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80149e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80149ec:	d026      	beq.n	8014a3c <__ssputs_r+0x6c>
 80149ee:	6965      	ldr	r5, [r4, #20]
 80149f0:	6909      	ldr	r1, [r1, #16]
 80149f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80149f6:	eba3 0901 	sub.w	r9, r3, r1
 80149fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80149fe:	1c7b      	adds	r3, r7, #1
 8014a00:	444b      	add	r3, r9
 8014a02:	106d      	asrs	r5, r5, #1
 8014a04:	429d      	cmp	r5, r3
 8014a06:	bf38      	it	cc
 8014a08:	461d      	movcc	r5, r3
 8014a0a:	0553      	lsls	r3, r2, #21
 8014a0c:	d527      	bpl.n	8014a5e <__ssputs_r+0x8e>
 8014a0e:	4629      	mov	r1, r5
 8014a10:	f7fd feac 	bl	801276c <_malloc_r>
 8014a14:	4606      	mov	r6, r0
 8014a16:	b360      	cbz	r0, 8014a72 <__ssputs_r+0xa2>
 8014a18:	6921      	ldr	r1, [r4, #16]
 8014a1a:	464a      	mov	r2, r9
 8014a1c:	f7fe fdaf 	bl	801357e <memcpy>
 8014a20:	89a3      	ldrh	r3, [r4, #12]
 8014a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a2a:	81a3      	strh	r3, [r4, #12]
 8014a2c:	6126      	str	r6, [r4, #16]
 8014a2e:	6165      	str	r5, [r4, #20]
 8014a30:	444e      	add	r6, r9
 8014a32:	eba5 0509 	sub.w	r5, r5, r9
 8014a36:	6026      	str	r6, [r4, #0]
 8014a38:	60a5      	str	r5, [r4, #8]
 8014a3a:	463e      	mov	r6, r7
 8014a3c:	42be      	cmp	r6, r7
 8014a3e:	d900      	bls.n	8014a42 <__ssputs_r+0x72>
 8014a40:	463e      	mov	r6, r7
 8014a42:	6820      	ldr	r0, [r4, #0]
 8014a44:	4632      	mov	r2, r6
 8014a46:	4641      	mov	r1, r8
 8014a48:	f000 fb9c 	bl	8015184 <memmove>
 8014a4c:	68a3      	ldr	r3, [r4, #8]
 8014a4e:	1b9b      	subs	r3, r3, r6
 8014a50:	60a3      	str	r3, [r4, #8]
 8014a52:	6823      	ldr	r3, [r4, #0]
 8014a54:	4433      	add	r3, r6
 8014a56:	6023      	str	r3, [r4, #0]
 8014a58:	2000      	movs	r0, #0
 8014a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a5e:	462a      	mov	r2, r5
 8014a60:	f000 fbee 	bl	8015240 <_realloc_r>
 8014a64:	4606      	mov	r6, r0
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d1e0      	bne.n	8014a2c <__ssputs_r+0x5c>
 8014a6a:	6921      	ldr	r1, [r4, #16]
 8014a6c:	4650      	mov	r0, sl
 8014a6e:	f7ff fbe3 	bl	8014238 <_free_r>
 8014a72:	230c      	movs	r3, #12
 8014a74:	f8ca 3000 	str.w	r3, [sl]
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a7e:	81a3      	strh	r3, [r4, #12]
 8014a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a84:	e7e9      	b.n	8014a5a <__ssputs_r+0x8a>
	...

08014a88 <_svfiprintf_r>:
 8014a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8c:	4698      	mov	r8, r3
 8014a8e:	898b      	ldrh	r3, [r1, #12]
 8014a90:	061b      	lsls	r3, r3, #24
 8014a92:	b09d      	sub	sp, #116	@ 0x74
 8014a94:	4607      	mov	r7, r0
 8014a96:	460d      	mov	r5, r1
 8014a98:	4614      	mov	r4, r2
 8014a9a:	d510      	bpl.n	8014abe <_svfiprintf_r+0x36>
 8014a9c:	690b      	ldr	r3, [r1, #16]
 8014a9e:	b973      	cbnz	r3, 8014abe <_svfiprintf_r+0x36>
 8014aa0:	2140      	movs	r1, #64	@ 0x40
 8014aa2:	f7fd fe63 	bl	801276c <_malloc_r>
 8014aa6:	6028      	str	r0, [r5, #0]
 8014aa8:	6128      	str	r0, [r5, #16]
 8014aaa:	b930      	cbnz	r0, 8014aba <_svfiprintf_r+0x32>
 8014aac:	230c      	movs	r3, #12
 8014aae:	603b      	str	r3, [r7, #0]
 8014ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ab4:	b01d      	add	sp, #116	@ 0x74
 8014ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aba:	2340      	movs	r3, #64	@ 0x40
 8014abc:	616b      	str	r3, [r5, #20]
 8014abe:	2300      	movs	r3, #0
 8014ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ac2:	2320      	movs	r3, #32
 8014ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8014acc:	2330      	movs	r3, #48	@ 0x30
 8014ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014c6c <_svfiprintf_r+0x1e4>
 8014ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014ad6:	f04f 0901 	mov.w	r9, #1
 8014ada:	4623      	mov	r3, r4
 8014adc:	469a      	mov	sl, r3
 8014ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ae2:	b10a      	cbz	r2, 8014ae8 <_svfiprintf_r+0x60>
 8014ae4:	2a25      	cmp	r2, #37	@ 0x25
 8014ae6:	d1f9      	bne.n	8014adc <_svfiprintf_r+0x54>
 8014ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8014aec:	d00b      	beq.n	8014b06 <_svfiprintf_r+0x7e>
 8014aee:	465b      	mov	r3, fp
 8014af0:	4622      	mov	r2, r4
 8014af2:	4629      	mov	r1, r5
 8014af4:	4638      	mov	r0, r7
 8014af6:	f7ff ff6b 	bl	80149d0 <__ssputs_r>
 8014afa:	3001      	adds	r0, #1
 8014afc:	f000 80a7 	beq.w	8014c4e <_svfiprintf_r+0x1c6>
 8014b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b02:	445a      	add	r2, fp
 8014b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b06:	f89a 3000 	ldrb.w	r3, [sl]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	f000 809f 	beq.w	8014c4e <_svfiprintf_r+0x1c6>
 8014b10:	2300      	movs	r3, #0
 8014b12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b1a:	f10a 0a01 	add.w	sl, sl, #1
 8014b1e:	9304      	str	r3, [sp, #16]
 8014b20:	9307      	str	r3, [sp, #28]
 8014b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b28:	4654      	mov	r4, sl
 8014b2a:	2205      	movs	r2, #5
 8014b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b30:	484e      	ldr	r0, [pc, #312]	@ (8014c6c <_svfiprintf_r+0x1e4>)
 8014b32:	f7eb fb5d 	bl	80001f0 <memchr>
 8014b36:	9a04      	ldr	r2, [sp, #16]
 8014b38:	b9d8      	cbnz	r0, 8014b72 <_svfiprintf_r+0xea>
 8014b3a:	06d0      	lsls	r0, r2, #27
 8014b3c:	bf44      	itt	mi
 8014b3e:	2320      	movmi	r3, #32
 8014b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b44:	0711      	lsls	r1, r2, #28
 8014b46:	bf44      	itt	mi
 8014b48:	232b      	movmi	r3, #43	@ 0x2b
 8014b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8014b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b54:	d015      	beq.n	8014b82 <_svfiprintf_r+0xfa>
 8014b56:	9a07      	ldr	r2, [sp, #28]
 8014b58:	4654      	mov	r4, sl
 8014b5a:	2000      	movs	r0, #0
 8014b5c:	f04f 0c0a 	mov.w	ip, #10
 8014b60:	4621      	mov	r1, r4
 8014b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b66:	3b30      	subs	r3, #48	@ 0x30
 8014b68:	2b09      	cmp	r3, #9
 8014b6a:	d94b      	bls.n	8014c04 <_svfiprintf_r+0x17c>
 8014b6c:	b1b0      	cbz	r0, 8014b9c <_svfiprintf_r+0x114>
 8014b6e:	9207      	str	r2, [sp, #28]
 8014b70:	e014      	b.n	8014b9c <_svfiprintf_r+0x114>
 8014b72:	eba0 0308 	sub.w	r3, r0, r8
 8014b76:	fa09 f303 	lsl.w	r3, r9, r3
 8014b7a:	4313      	orrs	r3, r2
 8014b7c:	9304      	str	r3, [sp, #16]
 8014b7e:	46a2      	mov	sl, r4
 8014b80:	e7d2      	b.n	8014b28 <_svfiprintf_r+0xa0>
 8014b82:	9b03      	ldr	r3, [sp, #12]
 8014b84:	1d19      	adds	r1, r3, #4
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	9103      	str	r1, [sp, #12]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	bfbb      	ittet	lt
 8014b8e:	425b      	neglt	r3, r3
 8014b90:	f042 0202 	orrlt.w	r2, r2, #2
 8014b94:	9307      	strge	r3, [sp, #28]
 8014b96:	9307      	strlt	r3, [sp, #28]
 8014b98:	bfb8      	it	lt
 8014b9a:	9204      	strlt	r2, [sp, #16]
 8014b9c:	7823      	ldrb	r3, [r4, #0]
 8014b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014ba0:	d10a      	bne.n	8014bb8 <_svfiprintf_r+0x130>
 8014ba2:	7863      	ldrb	r3, [r4, #1]
 8014ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ba6:	d132      	bne.n	8014c0e <_svfiprintf_r+0x186>
 8014ba8:	9b03      	ldr	r3, [sp, #12]
 8014baa:	1d1a      	adds	r2, r3, #4
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	9203      	str	r2, [sp, #12]
 8014bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014bb4:	3402      	adds	r4, #2
 8014bb6:	9305      	str	r3, [sp, #20]
 8014bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014c7c <_svfiprintf_r+0x1f4>
 8014bbc:	7821      	ldrb	r1, [r4, #0]
 8014bbe:	2203      	movs	r2, #3
 8014bc0:	4650      	mov	r0, sl
 8014bc2:	f7eb fb15 	bl	80001f0 <memchr>
 8014bc6:	b138      	cbz	r0, 8014bd8 <_svfiprintf_r+0x150>
 8014bc8:	9b04      	ldr	r3, [sp, #16]
 8014bca:	eba0 000a 	sub.w	r0, r0, sl
 8014bce:	2240      	movs	r2, #64	@ 0x40
 8014bd0:	4082      	lsls	r2, r0
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	3401      	adds	r4, #1
 8014bd6:	9304      	str	r3, [sp, #16]
 8014bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bdc:	4824      	ldr	r0, [pc, #144]	@ (8014c70 <_svfiprintf_r+0x1e8>)
 8014bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014be2:	2206      	movs	r2, #6
 8014be4:	f7eb fb04 	bl	80001f0 <memchr>
 8014be8:	2800      	cmp	r0, #0
 8014bea:	d036      	beq.n	8014c5a <_svfiprintf_r+0x1d2>
 8014bec:	4b21      	ldr	r3, [pc, #132]	@ (8014c74 <_svfiprintf_r+0x1ec>)
 8014bee:	bb1b      	cbnz	r3, 8014c38 <_svfiprintf_r+0x1b0>
 8014bf0:	9b03      	ldr	r3, [sp, #12]
 8014bf2:	3307      	adds	r3, #7
 8014bf4:	f023 0307 	bic.w	r3, r3, #7
 8014bf8:	3308      	adds	r3, #8
 8014bfa:	9303      	str	r3, [sp, #12]
 8014bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bfe:	4433      	add	r3, r6
 8014c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c02:	e76a      	b.n	8014ada <_svfiprintf_r+0x52>
 8014c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c08:	460c      	mov	r4, r1
 8014c0a:	2001      	movs	r0, #1
 8014c0c:	e7a8      	b.n	8014b60 <_svfiprintf_r+0xd8>
 8014c0e:	2300      	movs	r3, #0
 8014c10:	3401      	adds	r4, #1
 8014c12:	9305      	str	r3, [sp, #20]
 8014c14:	4619      	mov	r1, r3
 8014c16:	f04f 0c0a 	mov.w	ip, #10
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c20:	3a30      	subs	r2, #48	@ 0x30
 8014c22:	2a09      	cmp	r2, #9
 8014c24:	d903      	bls.n	8014c2e <_svfiprintf_r+0x1a6>
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d0c6      	beq.n	8014bb8 <_svfiprintf_r+0x130>
 8014c2a:	9105      	str	r1, [sp, #20]
 8014c2c:	e7c4      	b.n	8014bb8 <_svfiprintf_r+0x130>
 8014c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c32:	4604      	mov	r4, r0
 8014c34:	2301      	movs	r3, #1
 8014c36:	e7f0      	b.n	8014c1a <_svfiprintf_r+0x192>
 8014c38:	ab03      	add	r3, sp, #12
 8014c3a:	9300      	str	r3, [sp, #0]
 8014c3c:	462a      	mov	r2, r5
 8014c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8014c78 <_svfiprintf_r+0x1f0>)
 8014c40:	a904      	add	r1, sp, #16
 8014c42:	4638      	mov	r0, r7
 8014c44:	f7fd febe 	bl	80129c4 <_printf_float>
 8014c48:	1c42      	adds	r2, r0, #1
 8014c4a:	4606      	mov	r6, r0
 8014c4c:	d1d6      	bne.n	8014bfc <_svfiprintf_r+0x174>
 8014c4e:	89ab      	ldrh	r3, [r5, #12]
 8014c50:	065b      	lsls	r3, r3, #25
 8014c52:	f53f af2d 	bmi.w	8014ab0 <_svfiprintf_r+0x28>
 8014c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c58:	e72c      	b.n	8014ab4 <_svfiprintf_r+0x2c>
 8014c5a:	ab03      	add	r3, sp, #12
 8014c5c:	9300      	str	r3, [sp, #0]
 8014c5e:	462a      	mov	r2, r5
 8014c60:	4b05      	ldr	r3, [pc, #20]	@ (8014c78 <_svfiprintf_r+0x1f0>)
 8014c62:	a904      	add	r1, sp, #16
 8014c64:	4638      	mov	r0, r7
 8014c66:	f7fe f945 	bl	8012ef4 <_printf_i>
 8014c6a:	e7ed      	b.n	8014c48 <_svfiprintf_r+0x1c0>
 8014c6c:	080162f8 	.word	0x080162f8
 8014c70:	08016302 	.word	0x08016302
 8014c74:	080129c5 	.word	0x080129c5
 8014c78:	080149d1 	.word	0x080149d1
 8014c7c:	080162fe 	.word	0x080162fe

08014c80 <__sfputc_r>:
 8014c80:	6893      	ldr	r3, [r2, #8]
 8014c82:	3b01      	subs	r3, #1
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	b410      	push	{r4}
 8014c88:	6093      	str	r3, [r2, #8]
 8014c8a:	da08      	bge.n	8014c9e <__sfputc_r+0x1e>
 8014c8c:	6994      	ldr	r4, [r2, #24]
 8014c8e:	42a3      	cmp	r3, r4
 8014c90:	db01      	blt.n	8014c96 <__sfputc_r+0x16>
 8014c92:	290a      	cmp	r1, #10
 8014c94:	d103      	bne.n	8014c9e <__sfputc_r+0x1e>
 8014c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c9a:	f000 b9df 	b.w	801505c <__swbuf_r>
 8014c9e:	6813      	ldr	r3, [r2, #0]
 8014ca0:	1c58      	adds	r0, r3, #1
 8014ca2:	6010      	str	r0, [r2, #0]
 8014ca4:	7019      	strb	r1, [r3, #0]
 8014ca6:	4608      	mov	r0, r1
 8014ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cac:	4770      	bx	lr

08014cae <__sfputs_r>:
 8014cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb0:	4606      	mov	r6, r0
 8014cb2:	460f      	mov	r7, r1
 8014cb4:	4614      	mov	r4, r2
 8014cb6:	18d5      	adds	r5, r2, r3
 8014cb8:	42ac      	cmp	r4, r5
 8014cba:	d101      	bne.n	8014cc0 <__sfputs_r+0x12>
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	e007      	b.n	8014cd0 <__sfputs_r+0x22>
 8014cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cc4:	463a      	mov	r2, r7
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f7ff ffda 	bl	8014c80 <__sfputc_r>
 8014ccc:	1c43      	adds	r3, r0, #1
 8014cce:	d1f3      	bne.n	8014cb8 <__sfputs_r+0xa>
 8014cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014cd4 <_vfiprintf_r>:
 8014cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd8:	460d      	mov	r5, r1
 8014cda:	b09d      	sub	sp, #116	@ 0x74
 8014cdc:	4614      	mov	r4, r2
 8014cde:	4698      	mov	r8, r3
 8014ce0:	4606      	mov	r6, r0
 8014ce2:	b118      	cbz	r0, 8014cec <_vfiprintf_r+0x18>
 8014ce4:	6a03      	ldr	r3, [r0, #32]
 8014ce6:	b90b      	cbnz	r3, 8014cec <_vfiprintf_r+0x18>
 8014ce8:	f7fe fab0 	bl	801324c <__sinit>
 8014cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014cee:	07d9      	lsls	r1, r3, #31
 8014cf0:	d405      	bmi.n	8014cfe <_vfiprintf_r+0x2a>
 8014cf2:	89ab      	ldrh	r3, [r5, #12]
 8014cf4:	059a      	lsls	r2, r3, #22
 8014cf6:	d402      	bmi.n	8014cfe <_vfiprintf_r+0x2a>
 8014cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014cfa:	f7fe fc36 	bl	801356a <__retarget_lock_acquire_recursive>
 8014cfe:	89ab      	ldrh	r3, [r5, #12]
 8014d00:	071b      	lsls	r3, r3, #28
 8014d02:	d501      	bpl.n	8014d08 <_vfiprintf_r+0x34>
 8014d04:	692b      	ldr	r3, [r5, #16]
 8014d06:	b99b      	cbnz	r3, 8014d30 <_vfiprintf_r+0x5c>
 8014d08:	4629      	mov	r1, r5
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	f000 f9e4 	bl	80150d8 <__swsetup_r>
 8014d10:	b170      	cbz	r0, 8014d30 <_vfiprintf_r+0x5c>
 8014d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d14:	07dc      	lsls	r4, r3, #31
 8014d16:	d504      	bpl.n	8014d22 <_vfiprintf_r+0x4e>
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d1c:	b01d      	add	sp, #116	@ 0x74
 8014d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d22:	89ab      	ldrh	r3, [r5, #12]
 8014d24:	0598      	lsls	r0, r3, #22
 8014d26:	d4f7      	bmi.n	8014d18 <_vfiprintf_r+0x44>
 8014d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d2a:	f7fe fc1f 	bl	801356c <__retarget_lock_release_recursive>
 8014d2e:	e7f3      	b.n	8014d18 <_vfiprintf_r+0x44>
 8014d30:	2300      	movs	r3, #0
 8014d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d34:	2320      	movs	r3, #32
 8014d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d3e:	2330      	movs	r3, #48	@ 0x30
 8014d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ef0 <_vfiprintf_r+0x21c>
 8014d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d48:	f04f 0901 	mov.w	r9, #1
 8014d4c:	4623      	mov	r3, r4
 8014d4e:	469a      	mov	sl, r3
 8014d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d54:	b10a      	cbz	r2, 8014d5a <_vfiprintf_r+0x86>
 8014d56:	2a25      	cmp	r2, #37	@ 0x25
 8014d58:	d1f9      	bne.n	8014d4e <_vfiprintf_r+0x7a>
 8014d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8014d5e:	d00b      	beq.n	8014d78 <_vfiprintf_r+0xa4>
 8014d60:	465b      	mov	r3, fp
 8014d62:	4622      	mov	r2, r4
 8014d64:	4629      	mov	r1, r5
 8014d66:	4630      	mov	r0, r6
 8014d68:	f7ff ffa1 	bl	8014cae <__sfputs_r>
 8014d6c:	3001      	adds	r0, #1
 8014d6e:	f000 80a7 	beq.w	8014ec0 <_vfiprintf_r+0x1ec>
 8014d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d74:	445a      	add	r2, fp
 8014d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d78:	f89a 3000 	ldrb.w	r3, [sl]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f000 809f 	beq.w	8014ec0 <_vfiprintf_r+0x1ec>
 8014d82:	2300      	movs	r3, #0
 8014d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d8c:	f10a 0a01 	add.w	sl, sl, #1
 8014d90:	9304      	str	r3, [sp, #16]
 8014d92:	9307      	str	r3, [sp, #28]
 8014d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8014d9a:	4654      	mov	r4, sl
 8014d9c:	2205      	movs	r2, #5
 8014d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014da2:	4853      	ldr	r0, [pc, #332]	@ (8014ef0 <_vfiprintf_r+0x21c>)
 8014da4:	f7eb fa24 	bl	80001f0 <memchr>
 8014da8:	9a04      	ldr	r2, [sp, #16]
 8014daa:	b9d8      	cbnz	r0, 8014de4 <_vfiprintf_r+0x110>
 8014dac:	06d1      	lsls	r1, r2, #27
 8014dae:	bf44      	itt	mi
 8014db0:	2320      	movmi	r3, #32
 8014db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014db6:	0713      	lsls	r3, r2, #28
 8014db8:	bf44      	itt	mi
 8014dba:	232b      	movmi	r3, #43	@ 0x2b
 8014dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8014dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dc6:	d015      	beq.n	8014df4 <_vfiprintf_r+0x120>
 8014dc8:	9a07      	ldr	r2, [sp, #28]
 8014dca:	4654      	mov	r4, sl
 8014dcc:	2000      	movs	r0, #0
 8014dce:	f04f 0c0a 	mov.w	ip, #10
 8014dd2:	4621      	mov	r1, r4
 8014dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dd8:	3b30      	subs	r3, #48	@ 0x30
 8014dda:	2b09      	cmp	r3, #9
 8014ddc:	d94b      	bls.n	8014e76 <_vfiprintf_r+0x1a2>
 8014dde:	b1b0      	cbz	r0, 8014e0e <_vfiprintf_r+0x13a>
 8014de0:	9207      	str	r2, [sp, #28]
 8014de2:	e014      	b.n	8014e0e <_vfiprintf_r+0x13a>
 8014de4:	eba0 0308 	sub.w	r3, r0, r8
 8014de8:	fa09 f303 	lsl.w	r3, r9, r3
 8014dec:	4313      	orrs	r3, r2
 8014dee:	9304      	str	r3, [sp, #16]
 8014df0:	46a2      	mov	sl, r4
 8014df2:	e7d2      	b.n	8014d9a <_vfiprintf_r+0xc6>
 8014df4:	9b03      	ldr	r3, [sp, #12]
 8014df6:	1d19      	adds	r1, r3, #4
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	9103      	str	r1, [sp, #12]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	bfbb      	ittet	lt
 8014e00:	425b      	neglt	r3, r3
 8014e02:	f042 0202 	orrlt.w	r2, r2, #2
 8014e06:	9307      	strge	r3, [sp, #28]
 8014e08:	9307      	strlt	r3, [sp, #28]
 8014e0a:	bfb8      	it	lt
 8014e0c:	9204      	strlt	r2, [sp, #16]
 8014e0e:	7823      	ldrb	r3, [r4, #0]
 8014e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e12:	d10a      	bne.n	8014e2a <_vfiprintf_r+0x156>
 8014e14:	7863      	ldrb	r3, [r4, #1]
 8014e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e18:	d132      	bne.n	8014e80 <_vfiprintf_r+0x1ac>
 8014e1a:	9b03      	ldr	r3, [sp, #12]
 8014e1c:	1d1a      	adds	r2, r3, #4
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	9203      	str	r2, [sp, #12]
 8014e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e26:	3402      	adds	r4, #2
 8014e28:	9305      	str	r3, [sp, #20]
 8014e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014f00 <_vfiprintf_r+0x22c>
 8014e2e:	7821      	ldrb	r1, [r4, #0]
 8014e30:	2203      	movs	r2, #3
 8014e32:	4650      	mov	r0, sl
 8014e34:	f7eb f9dc 	bl	80001f0 <memchr>
 8014e38:	b138      	cbz	r0, 8014e4a <_vfiprintf_r+0x176>
 8014e3a:	9b04      	ldr	r3, [sp, #16]
 8014e3c:	eba0 000a 	sub.w	r0, r0, sl
 8014e40:	2240      	movs	r2, #64	@ 0x40
 8014e42:	4082      	lsls	r2, r0
 8014e44:	4313      	orrs	r3, r2
 8014e46:	3401      	adds	r4, #1
 8014e48:	9304      	str	r3, [sp, #16]
 8014e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e4e:	4829      	ldr	r0, [pc, #164]	@ (8014ef4 <_vfiprintf_r+0x220>)
 8014e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e54:	2206      	movs	r2, #6
 8014e56:	f7eb f9cb 	bl	80001f0 <memchr>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	d03f      	beq.n	8014ede <_vfiprintf_r+0x20a>
 8014e5e:	4b26      	ldr	r3, [pc, #152]	@ (8014ef8 <_vfiprintf_r+0x224>)
 8014e60:	bb1b      	cbnz	r3, 8014eaa <_vfiprintf_r+0x1d6>
 8014e62:	9b03      	ldr	r3, [sp, #12]
 8014e64:	3307      	adds	r3, #7
 8014e66:	f023 0307 	bic.w	r3, r3, #7
 8014e6a:	3308      	adds	r3, #8
 8014e6c:	9303      	str	r3, [sp, #12]
 8014e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e70:	443b      	add	r3, r7
 8014e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e74:	e76a      	b.n	8014d4c <_vfiprintf_r+0x78>
 8014e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e7a:	460c      	mov	r4, r1
 8014e7c:	2001      	movs	r0, #1
 8014e7e:	e7a8      	b.n	8014dd2 <_vfiprintf_r+0xfe>
 8014e80:	2300      	movs	r3, #0
 8014e82:	3401      	adds	r4, #1
 8014e84:	9305      	str	r3, [sp, #20]
 8014e86:	4619      	mov	r1, r3
 8014e88:	f04f 0c0a 	mov.w	ip, #10
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e92:	3a30      	subs	r2, #48	@ 0x30
 8014e94:	2a09      	cmp	r2, #9
 8014e96:	d903      	bls.n	8014ea0 <_vfiprintf_r+0x1cc>
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d0c6      	beq.n	8014e2a <_vfiprintf_r+0x156>
 8014e9c:	9105      	str	r1, [sp, #20]
 8014e9e:	e7c4      	b.n	8014e2a <_vfiprintf_r+0x156>
 8014ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ea4:	4604      	mov	r4, r0
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e7f0      	b.n	8014e8c <_vfiprintf_r+0x1b8>
 8014eaa:	ab03      	add	r3, sp, #12
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	462a      	mov	r2, r5
 8014eb0:	4b12      	ldr	r3, [pc, #72]	@ (8014efc <_vfiprintf_r+0x228>)
 8014eb2:	a904      	add	r1, sp, #16
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	f7fd fd85 	bl	80129c4 <_printf_float>
 8014eba:	4607      	mov	r7, r0
 8014ebc:	1c78      	adds	r0, r7, #1
 8014ebe:	d1d6      	bne.n	8014e6e <_vfiprintf_r+0x19a>
 8014ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ec2:	07d9      	lsls	r1, r3, #31
 8014ec4:	d405      	bmi.n	8014ed2 <_vfiprintf_r+0x1fe>
 8014ec6:	89ab      	ldrh	r3, [r5, #12]
 8014ec8:	059a      	lsls	r2, r3, #22
 8014eca:	d402      	bmi.n	8014ed2 <_vfiprintf_r+0x1fe>
 8014ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ece:	f7fe fb4d 	bl	801356c <__retarget_lock_release_recursive>
 8014ed2:	89ab      	ldrh	r3, [r5, #12]
 8014ed4:	065b      	lsls	r3, r3, #25
 8014ed6:	f53f af1f 	bmi.w	8014d18 <_vfiprintf_r+0x44>
 8014eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014edc:	e71e      	b.n	8014d1c <_vfiprintf_r+0x48>
 8014ede:	ab03      	add	r3, sp, #12
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	462a      	mov	r2, r5
 8014ee4:	4b05      	ldr	r3, [pc, #20]	@ (8014efc <_vfiprintf_r+0x228>)
 8014ee6:	a904      	add	r1, sp, #16
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f7fe f803 	bl	8012ef4 <_printf_i>
 8014eee:	e7e4      	b.n	8014eba <_vfiprintf_r+0x1e6>
 8014ef0:	080162f8 	.word	0x080162f8
 8014ef4:	08016302 	.word	0x08016302
 8014ef8:	080129c5 	.word	0x080129c5
 8014efc:	08014caf 	.word	0x08014caf
 8014f00:	080162fe 	.word	0x080162fe

08014f04 <__sflush_r>:
 8014f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f0c:	0716      	lsls	r6, r2, #28
 8014f0e:	4605      	mov	r5, r0
 8014f10:	460c      	mov	r4, r1
 8014f12:	d454      	bmi.n	8014fbe <__sflush_r+0xba>
 8014f14:	684b      	ldr	r3, [r1, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	dc02      	bgt.n	8014f20 <__sflush_r+0x1c>
 8014f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	dd48      	ble.n	8014fb2 <__sflush_r+0xae>
 8014f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f22:	2e00      	cmp	r6, #0
 8014f24:	d045      	beq.n	8014fb2 <__sflush_r+0xae>
 8014f26:	2300      	movs	r3, #0
 8014f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014f2c:	682f      	ldr	r7, [r5, #0]
 8014f2e:	6a21      	ldr	r1, [r4, #32]
 8014f30:	602b      	str	r3, [r5, #0]
 8014f32:	d030      	beq.n	8014f96 <__sflush_r+0x92>
 8014f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	0759      	lsls	r1, r3, #29
 8014f3a:	d505      	bpl.n	8014f48 <__sflush_r+0x44>
 8014f3c:	6863      	ldr	r3, [r4, #4]
 8014f3e:	1ad2      	subs	r2, r2, r3
 8014f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014f42:	b10b      	cbz	r3, 8014f48 <__sflush_r+0x44>
 8014f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	2300      	movs	r3, #0
 8014f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014f4c:	6a21      	ldr	r1, [r4, #32]
 8014f4e:	4628      	mov	r0, r5
 8014f50:	47b0      	blx	r6
 8014f52:	1c43      	adds	r3, r0, #1
 8014f54:	89a3      	ldrh	r3, [r4, #12]
 8014f56:	d106      	bne.n	8014f66 <__sflush_r+0x62>
 8014f58:	6829      	ldr	r1, [r5, #0]
 8014f5a:	291d      	cmp	r1, #29
 8014f5c:	d82b      	bhi.n	8014fb6 <__sflush_r+0xb2>
 8014f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8015008 <__sflush_r+0x104>)
 8014f60:	410a      	asrs	r2, r1
 8014f62:	07d6      	lsls	r6, r2, #31
 8014f64:	d427      	bmi.n	8014fb6 <__sflush_r+0xb2>
 8014f66:	2200      	movs	r2, #0
 8014f68:	6062      	str	r2, [r4, #4]
 8014f6a:	04d9      	lsls	r1, r3, #19
 8014f6c:	6922      	ldr	r2, [r4, #16]
 8014f6e:	6022      	str	r2, [r4, #0]
 8014f70:	d504      	bpl.n	8014f7c <__sflush_r+0x78>
 8014f72:	1c42      	adds	r2, r0, #1
 8014f74:	d101      	bne.n	8014f7a <__sflush_r+0x76>
 8014f76:	682b      	ldr	r3, [r5, #0]
 8014f78:	b903      	cbnz	r3, 8014f7c <__sflush_r+0x78>
 8014f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014f7e:	602f      	str	r7, [r5, #0]
 8014f80:	b1b9      	cbz	r1, 8014fb2 <__sflush_r+0xae>
 8014f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f86:	4299      	cmp	r1, r3
 8014f88:	d002      	beq.n	8014f90 <__sflush_r+0x8c>
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f7ff f954 	bl	8014238 <_free_r>
 8014f90:	2300      	movs	r3, #0
 8014f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8014f94:	e00d      	b.n	8014fb2 <__sflush_r+0xae>
 8014f96:	2301      	movs	r3, #1
 8014f98:	4628      	mov	r0, r5
 8014f9a:	47b0      	blx	r6
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	1c50      	adds	r0, r2, #1
 8014fa0:	d1c9      	bne.n	8014f36 <__sflush_r+0x32>
 8014fa2:	682b      	ldr	r3, [r5, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d0c6      	beq.n	8014f36 <__sflush_r+0x32>
 8014fa8:	2b1d      	cmp	r3, #29
 8014faa:	d001      	beq.n	8014fb0 <__sflush_r+0xac>
 8014fac:	2b16      	cmp	r3, #22
 8014fae:	d11e      	bne.n	8014fee <__sflush_r+0xea>
 8014fb0:	602f      	str	r7, [r5, #0]
 8014fb2:	2000      	movs	r0, #0
 8014fb4:	e022      	b.n	8014ffc <__sflush_r+0xf8>
 8014fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fba:	b21b      	sxth	r3, r3
 8014fbc:	e01b      	b.n	8014ff6 <__sflush_r+0xf2>
 8014fbe:	690f      	ldr	r7, [r1, #16]
 8014fc0:	2f00      	cmp	r7, #0
 8014fc2:	d0f6      	beq.n	8014fb2 <__sflush_r+0xae>
 8014fc4:	0793      	lsls	r3, r2, #30
 8014fc6:	680e      	ldr	r6, [r1, #0]
 8014fc8:	bf08      	it	eq
 8014fca:	694b      	ldreq	r3, [r1, #20]
 8014fcc:	600f      	str	r7, [r1, #0]
 8014fce:	bf18      	it	ne
 8014fd0:	2300      	movne	r3, #0
 8014fd2:	eba6 0807 	sub.w	r8, r6, r7
 8014fd6:	608b      	str	r3, [r1, #8]
 8014fd8:	f1b8 0f00 	cmp.w	r8, #0
 8014fdc:	dde9      	ble.n	8014fb2 <__sflush_r+0xae>
 8014fde:	6a21      	ldr	r1, [r4, #32]
 8014fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014fe2:	4643      	mov	r3, r8
 8014fe4:	463a      	mov	r2, r7
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	47b0      	blx	r6
 8014fea:	2800      	cmp	r0, #0
 8014fec:	dc08      	bgt.n	8015000 <__sflush_r+0xfc>
 8014fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ff6:	81a3      	strh	r3, [r4, #12]
 8014ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015000:	4407      	add	r7, r0
 8015002:	eba8 0800 	sub.w	r8, r8, r0
 8015006:	e7e7      	b.n	8014fd8 <__sflush_r+0xd4>
 8015008:	dfbffffe 	.word	0xdfbffffe

0801500c <_fflush_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	690b      	ldr	r3, [r1, #16]
 8015010:	4605      	mov	r5, r0
 8015012:	460c      	mov	r4, r1
 8015014:	b913      	cbnz	r3, 801501c <_fflush_r+0x10>
 8015016:	2500      	movs	r5, #0
 8015018:	4628      	mov	r0, r5
 801501a:	bd38      	pop	{r3, r4, r5, pc}
 801501c:	b118      	cbz	r0, 8015026 <_fflush_r+0x1a>
 801501e:	6a03      	ldr	r3, [r0, #32]
 8015020:	b90b      	cbnz	r3, 8015026 <_fflush_r+0x1a>
 8015022:	f7fe f913 	bl	801324c <__sinit>
 8015026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d0f3      	beq.n	8015016 <_fflush_r+0xa>
 801502e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015030:	07d0      	lsls	r0, r2, #31
 8015032:	d404      	bmi.n	801503e <_fflush_r+0x32>
 8015034:	0599      	lsls	r1, r3, #22
 8015036:	d402      	bmi.n	801503e <_fflush_r+0x32>
 8015038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801503a:	f7fe fa96 	bl	801356a <__retarget_lock_acquire_recursive>
 801503e:	4628      	mov	r0, r5
 8015040:	4621      	mov	r1, r4
 8015042:	f7ff ff5f 	bl	8014f04 <__sflush_r>
 8015046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015048:	07da      	lsls	r2, r3, #31
 801504a:	4605      	mov	r5, r0
 801504c:	d4e4      	bmi.n	8015018 <_fflush_r+0xc>
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	059b      	lsls	r3, r3, #22
 8015052:	d4e1      	bmi.n	8015018 <_fflush_r+0xc>
 8015054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015056:	f7fe fa89 	bl	801356c <__retarget_lock_release_recursive>
 801505a:	e7dd      	b.n	8015018 <_fflush_r+0xc>

0801505c <__swbuf_r>:
 801505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505e:	460e      	mov	r6, r1
 8015060:	4614      	mov	r4, r2
 8015062:	4605      	mov	r5, r0
 8015064:	b118      	cbz	r0, 801506e <__swbuf_r+0x12>
 8015066:	6a03      	ldr	r3, [r0, #32]
 8015068:	b90b      	cbnz	r3, 801506e <__swbuf_r+0x12>
 801506a:	f7fe f8ef 	bl	801324c <__sinit>
 801506e:	69a3      	ldr	r3, [r4, #24]
 8015070:	60a3      	str	r3, [r4, #8]
 8015072:	89a3      	ldrh	r3, [r4, #12]
 8015074:	071a      	lsls	r2, r3, #28
 8015076:	d501      	bpl.n	801507c <__swbuf_r+0x20>
 8015078:	6923      	ldr	r3, [r4, #16]
 801507a:	b943      	cbnz	r3, 801508e <__swbuf_r+0x32>
 801507c:	4621      	mov	r1, r4
 801507e:	4628      	mov	r0, r5
 8015080:	f000 f82a 	bl	80150d8 <__swsetup_r>
 8015084:	b118      	cbz	r0, 801508e <__swbuf_r+0x32>
 8015086:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801508a:	4638      	mov	r0, r7
 801508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801508e:	6823      	ldr	r3, [r4, #0]
 8015090:	6922      	ldr	r2, [r4, #16]
 8015092:	1a98      	subs	r0, r3, r2
 8015094:	6963      	ldr	r3, [r4, #20]
 8015096:	b2f6      	uxtb	r6, r6
 8015098:	4283      	cmp	r3, r0
 801509a:	4637      	mov	r7, r6
 801509c:	dc05      	bgt.n	80150aa <__swbuf_r+0x4e>
 801509e:	4621      	mov	r1, r4
 80150a0:	4628      	mov	r0, r5
 80150a2:	f7ff ffb3 	bl	801500c <_fflush_r>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d1ed      	bne.n	8015086 <__swbuf_r+0x2a>
 80150aa:	68a3      	ldr	r3, [r4, #8]
 80150ac:	3b01      	subs	r3, #1
 80150ae:	60a3      	str	r3, [r4, #8]
 80150b0:	6823      	ldr	r3, [r4, #0]
 80150b2:	1c5a      	adds	r2, r3, #1
 80150b4:	6022      	str	r2, [r4, #0]
 80150b6:	701e      	strb	r6, [r3, #0]
 80150b8:	6962      	ldr	r2, [r4, #20]
 80150ba:	1c43      	adds	r3, r0, #1
 80150bc:	429a      	cmp	r2, r3
 80150be:	d004      	beq.n	80150ca <__swbuf_r+0x6e>
 80150c0:	89a3      	ldrh	r3, [r4, #12]
 80150c2:	07db      	lsls	r3, r3, #31
 80150c4:	d5e1      	bpl.n	801508a <__swbuf_r+0x2e>
 80150c6:	2e0a      	cmp	r6, #10
 80150c8:	d1df      	bne.n	801508a <__swbuf_r+0x2e>
 80150ca:	4621      	mov	r1, r4
 80150cc:	4628      	mov	r0, r5
 80150ce:	f7ff ff9d 	bl	801500c <_fflush_r>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d0d9      	beq.n	801508a <__swbuf_r+0x2e>
 80150d6:	e7d6      	b.n	8015086 <__swbuf_r+0x2a>

080150d8 <__swsetup_r>:
 80150d8:	b538      	push	{r3, r4, r5, lr}
 80150da:	4b29      	ldr	r3, [pc, #164]	@ (8015180 <__swsetup_r+0xa8>)
 80150dc:	4605      	mov	r5, r0
 80150de:	6818      	ldr	r0, [r3, #0]
 80150e0:	460c      	mov	r4, r1
 80150e2:	b118      	cbz	r0, 80150ec <__swsetup_r+0x14>
 80150e4:	6a03      	ldr	r3, [r0, #32]
 80150e6:	b90b      	cbnz	r3, 80150ec <__swsetup_r+0x14>
 80150e8:	f7fe f8b0 	bl	801324c <__sinit>
 80150ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150f0:	0719      	lsls	r1, r3, #28
 80150f2:	d422      	bmi.n	801513a <__swsetup_r+0x62>
 80150f4:	06da      	lsls	r2, r3, #27
 80150f6:	d407      	bmi.n	8015108 <__swsetup_r+0x30>
 80150f8:	2209      	movs	r2, #9
 80150fa:	602a      	str	r2, [r5, #0]
 80150fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015100:	81a3      	strh	r3, [r4, #12]
 8015102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015106:	e033      	b.n	8015170 <__swsetup_r+0x98>
 8015108:	0758      	lsls	r0, r3, #29
 801510a:	d512      	bpl.n	8015132 <__swsetup_r+0x5a>
 801510c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801510e:	b141      	cbz	r1, 8015122 <__swsetup_r+0x4a>
 8015110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015114:	4299      	cmp	r1, r3
 8015116:	d002      	beq.n	801511e <__swsetup_r+0x46>
 8015118:	4628      	mov	r0, r5
 801511a:	f7ff f88d 	bl	8014238 <_free_r>
 801511e:	2300      	movs	r3, #0
 8015120:	6363      	str	r3, [r4, #52]	@ 0x34
 8015122:	89a3      	ldrh	r3, [r4, #12]
 8015124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015128:	81a3      	strh	r3, [r4, #12]
 801512a:	2300      	movs	r3, #0
 801512c:	6063      	str	r3, [r4, #4]
 801512e:	6923      	ldr	r3, [r4, #16]
 8015130:	6023      	str	r3, [r4, #0]
 8015132:	89a3      	ldrh	r3, [r4, #12]
 8015134:	f043 0308 	orr.w	r3, r3, #8
 8015138:	81a3      	strh	r3, [r4, #12]
 801513a:	6923      	ldr	r3, [r4, #16]
 801513c:	b94b      	cbnz	r3, 8015152 <__swsetup_r+0x7a>
 801513e:	89a3      	ldrh	r3, [r4, #12]
 8015140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015148:	d003      	beq.n	8015152 <__swsetup_r+0x7a>
 801514a:	4621      	mov	r1, r4
 801514c:	4628      	mov	r0, r5
 801514e:	f000 f8eb 	bl	8015328 <__smakebuf_r>
 8015152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015156:	f013 0201 	ands.w	r2, r3, #1
 801515a:	d00a      	beq.n	8015172 <__swsetup_r+0x9a>
 801515c:	2200      	movs	r2, #0
 801515e:	60a2      	str	r2, [r4, #8]
 8015160:	6962      	ldr	r2, [r4, #20]
 8015162:	4252      	negs	r2, r2
 8015164:	61a2      	str	r2, [r4, #24]
 8015166:	6922      	ldr	r2, [r4, #16]
 8015168:	b942      	cbnz	r2, 801517c <__swsetup_r+0xa4>
 801516a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801516e:	d1c5      	bne.n	80150fc <__swsetup_r+0x24>
 8015170:	bd38      	pop	{r3, r4, r5, pc}
 8015172:	0799      	lsls	r1, r3, #30
 8015174:	bf58      	it	pl
 8015176:	6962      	ldrpl	r2, [r4, #20]
 8015178:	60a2      	str	r2, [r4, #8]
 801517a:	e7f4      	b.n	8015166 <__swsetup_r+0x8e>
 801517c:	2000      	movs	r0, #0
 801517e:	e7f7      	b.n	8015170 <__swsetup_r+0x98>
 8015180:	2000004c 	.word	0x2000004c

08015184 <memmove>:
 8015184:	4288      	cmp	r0, r1
 8015186:	b510      	push	{r4, lr}
 8015188:	eb01 0402 	add.w	r4, r1, r2
 801518c:	d902      	bls.n	8015194 <memmove+0x10>
 801518e:	4284      	cmp	r4, r0
 8015190:	4623      	mov	r3, r4
 8015192:	d807      	bhi.n	80151a4 <memmove+0x20>
 8015194:	1e43      	subs	r3, r0, #1
 8015196:	42a1      	cmp	r1, r4
 8015198:	d008      	beq.n	80151ac <memmove+0x28>
 801519a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801519e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151a2:	e7f8      	b.n	8015196 <memmove+0x12>
 80151a4:	4402      	add	r2, r0
 80151a6:	4601      	mov	r1, r0
 80151a8:	428a      	cmp	r2, r1
 80151aa:	d100      	bne.n	80151ae <memmove+0x2a>
 80151ac:	bd10      	pop	{r4, pc}
 80151ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151b6:	e7f7      	b.n	80151a8 <memmove+0x24>

080151b8 <__assert_func>:
 80151b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151ba:	4614      	mov	r4, r2
 80151bc:	461a      	mov	r2, r3
 80151be:	4b09      	ldr	r3, [pc, #36]	@ (80151e4 <__assert_func+0x2c>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	4605      	mov	r5, r0
 80151c4:	68d8      	ldr	r0, [r3, #12]
 80151c6:	b954      	cbnz	r4, 80151de <__assert_func+0x26>
 80151c8:	4b07      	ldr	r3, [pc, #28]	@ (80151e8 <__assert_func+0x30>)
 80151ca:	461c      	mov	r4, r3
 80151cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80151d0:	9100      	str	r1, [sp, #0]
 80151d2:	462b      	mov	r3, r5
 80151d4:	4905      	ldr	r1, [pc, #20]	@ (80151ec <__assert_func+0x34>)
 80151d6:	f000 f86f 	bl	80152b8 <fiprintf>
 80151da:	f000 f903 	bl	80153e4 <abort>
 80151de:	4b04      	ldr	r3, [pc, #16]	@ (80151f0 <__assert_func+0x38>)
 80151e0:	e7f4      	b.n	80151cc <__assert_func+0x14>
 80151e2:	bf00      	nop
 80151e4:	2000004c 	.word	0x2000004c
 80151e8:	0801634e 	.word	0x0801634e
 80151ec:	08016320 	.word	0x08016320
 80151f0:	08016313 	.word	0x08016313

080151f4 <_calloc_r>:
 80151f4:	b570      	push	{r4, r5, r6, lr}
 80151f6:	fba1 5402 	umull	r5, r4, r1, r2
 80151fa:	b93c      	cbnz	r4, 801520c <_calloc_r+0x18>
 80151fc:	4629      	mov	r1, r5
 80151fe:	f7fd fab5 	bl	801276c <_malloc_r>
 8015202:	4606      	mov	r6, r0
 8015204:	b928      	cbnz	r0, 8015212 <_calloc_r+0x1e>
 8015206:	2600      	movs	r6, #0
 8015208:	4630      	mov	r0, r6
 801520a:	bd70      	pop	{r4, r5, r6, pc}
 801520c:	220c      	movs	r2, #12
 801520e:	6002      	str	r2, [r0, #0]
 8015210:	e7f9      	b.n	8015206 <_calloc_r+0x12>
 8015212:	462a      	mov	r2, r5
 8015214:	4621      	mov	r1, r4
 8015216:	f7fe f8c4 	bl	80133a2 <memset>
 801521a:	e7f5      	b.n	8015208 <_calloc_r+0x14>

0801521c <__ascii_mbtowc>:
 801521c:	b082      	sub	sp, #8
 801521e:	b901      	cbnz	r1, 8015222 <__ascii_mbtowc+0x6>
 8015220:	a901      	add	r1, sp, #4
 8015222:	b142      	cbz	r2, 8015236 <__ascii_mbtowc+0x1a>
 8015224:	b14b      	cbz	r3, 801523a <__ascii_mbtowc+0x1e>
 8015226:	7813      	ldrb	r3, [r2, #0]
 8015228:	600b      	str	r3, [r1, #0]
 801522a:	7812      	ldrb	r2, [r2, #0]
 801522c:	1e10      	subs	r0, r2, #0
 801522e:	bf18      	it	ne
 8015230:	2001      	movne	r0, #1
 8015232:	b002      	add	sp, #8
 8015234:	4770      	bx	lr
 8015236:	4610      	mov	r0, r2
 8015238:	e7fb      	b.n	8015232 <__ascii_mbtowc+0x16>
 801523a:	f06f 0001 	mvn.w	r0, #1
 801523e:	e7f8      	b.n	8015232 <__ascii_mbtowc+0x16>

08015240 <_realloc_r>:
 8015240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015244:	4680      	mov	r8, r0
 8015246:	4615      	mov	r5, r2
 8015248:	460c      	mov	r4, r1
 801524a:	b921      	cbnz	r1, 8015256 <_realloc_r+0x16>
 801524c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015250:	4611      	mov	r1, r2
 8015252:	f7fd ba8b 	b.w	801276c <_malloc_r>
 8015256:	b92a      	cbnz	r2, 8015264 <_realloc_r+0x24>
 8015258:	f7fe ffee 	bl	8014238 <_free_r>
 801525c:	2400      	movs	r4, #0
 801525e:	4620      	mov	r0, r4
 8015260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015264:	f000 f8c5 	bl	80153f2 <_malloc_usable_size_r>
 8015268:	4285      	cmp	r5, r0
 801526a:	4606      	mov	r6, r0
 801526c:	d802      	bhi.n	8015274 <_realloc_r+0x34>
 801526e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015272:	d8f4      	bhi.n	801525e <_realloc_r+0x1e>
 8015274:	4629      	mov	r1, r5
 8015276:	4640      	mov	r0, r8
 8015278:	f7fd fa78 	bl	801276c <_malloc_r>
 801527c:	4607      	mov	r7, r0
 801527e:	2800      	cmp	r0, #0
 8015280:	d0ec      	beq.n	801525c <_realloc_r+0x1c>
 8015282:	42b5      	cmp	r5, r6
 8015284:	462a      	mov	r2, r5
 8015286:	4621      	mov	r1, r4
 8015288:	bf28      	it	cs
 801528a:	4632      	movcs	r2, r6
 801528c:	f7fe f977 	bl	801357e <memcpy>
 8015290:	4621      	mov	r1, r4
 8015292:	4640      	mov	r0, r8
 8015294:	f7fe ffd0 	bl	8014238 <_free_r>
 8015298:	463c      	mov	r4, r7
 801529a:	e7e0      	b.n	801525e <_realloc_r+0x1e>

0801529c <__ascii_wctomb>:
 801529c:	4603      	mov	r3, r0
 801529e:	4608      	mov	r0, r1
 80152a0:	b141      	cbz	r1, 80152b4 <__ascii_wctomb+0x18>
 80152a2:	2aff      	cmp	r2, #255	@ 0xff
 80152a4:	d904      	bls.n	80152b0 <__ascii_wctomb+0x14>
 80152a6:	228a      	movs	r2, #138	@ 0x8a
 80152a8:	601a      	str	r2, [r3, #0]
 80152aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152ae:	4770      	bx	lr
 80152b0:	700a      	strb	r2, [r1, #0]
 80152b2:	2001      	movs	r0, #1
 80152b4:	4770      	bx	lr
	...

080152b8 <fiprintf>:
 80152b8:	b40e      	push	{r1, r2, r3}
 80152ba:	b503      	push	{r0, r1, lr}
 80152bc:	4601      	mov	r1, r0
 80152be:	ab03      	add	r3, sp, #12
 80152c0:	4805      	ldr	r0, [pc, #20]	@ (80152d8 <fiprintf+0x20>)
 80152c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80152c6:	6800      	ldr	r0, [r0, #0]
 80152c8:	9301      	str	r3, [sp, #4]
 80152ca:	f7ff fd03 	bl	8014cd4 <_vfiprintf_r>
 80152ce:	b002      	add	sp, #8
 80152d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80152d4:	b003      	add	sp, #12
 80152d6:	4770      	bx	lr
 80152d8:	2000004c 	.word	0x2000004c

080152dc <__swhatbuf_r>:
 80152dc:	b570      	push	{r4, r5, r6, lr}
 80152de:	460c      	mov	r4, r1
 80152e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152e4:	2900      	cmp	r1, #0
 80152e6:	b096      	sub	sp, #88	@ 0x58
 80152e8:	4615      	mov	r5, r2
 80152ea:	461e      	mov	r6, r3
 80152ec:	da0d      	bge.n	801530a <__swhatbuf_r+0x2e>
 80152ee:	89a3      	ldrh	r3, [r4, #12]
 80152f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80152f4:	f04f 0100 	mov.w	r1, #0
 80152f8:	bf14      	ite	ne
 80152fa:	2340      	movne	r3, #64	@ 0x40
 80152fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015300:	2000      	movs	r0, #0
 8015302:	6031      	str	r1, [r6, #0]
 8015304:	602b      	str	r3, [r5, #0]
 8015306:	b016      	add	sp, #88	@ 0x58
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	466a      	mov	r2, sp
 801530c:	f000 f848 	bl	80153a0 <_fstat_r>
 8015310:	2800      	cmp	r0, #0
 8015312:	dbec      	blt.n	80152ee <__swhatbuf_r+0x12>
 8015314:	9901      	ldr	r1, [sp, #4]
 8015316:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801531a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801531e:	4259      	negs	r1, r3
 8015320:	4159      	adcs	r1, r3
 8015322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015326:	e7eb      	b.n	8015300 <__swhatbuf_r+0x24>

08015328 <__smakebuf_r>:
 8015328:	898b      	ldrh	r3, [r1, #12]
 801532a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801532c:	079d      	lsls	r5, r3, #30
 801532e:	4606      	mov	r6, r0
 8015330:	460c      	mov	r4, r1
 8015332:	d507      	bpl.n	8015344 <__smakebuf_r+0x1c>
 8015334:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015338:	6023      	str	r3, [r4, #0]
 801533a:	6123      	str	r3, [r4, #16]
 801533c:	2301      	movs	r3, #1
 801533e:	6163      	str	r3, [r4, #20]
 8015340:	b003      	add	sp, #12
 8015342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015344:	ab01      	add	r3, sp, #4
 8015346:	466a      	mov	r2, sp
 8015348:	f7ff ffc8 	bl	80152dc <__swhatbuf_r>
 801534c:	9f00      	ldr	r7, [sp, #0]
 801534e:	4605      	mov	r5, r0
 8015350:	4639      	mov	r1, r7
 8015352:	4630      	mov	r0, r6
 8015354:	f7fd fa0a 	bl	801276c <_malloc_r>
 8015358:	b948      	cbnz	r0, 801536e <__smakebuf_r+0x46>
 801535a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801535e:	059a      	lsls	r2, r3, #22
 8015360:	d4ee      	bmi.n	8015340 <__smakebuf_r+0x18>
 8015362:	f023 0303 	bic.w	r3, r3, #3
 8015366:	f043 0302 	orr.w	r3, r3, #2
 801536a:	81a3      	strh	r3, [r4, #12]
 801536c:	e7e2      	b.n	8015334 <__smakebuf_r+0xc>
 801536e:	89a3      	ldrh	r3, [r4, #12]
 8015370:	6020      	str	r0, [r4, #0]
 8015372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015376:	81a3      	strh	r3, [r4, #12]
 8015378:	9b01      	ldr	r3, [sp, #4]
 801537a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801537e:	b15b      	cbz	r3, 8015398 <__smakebuf_r+0x70>
 8015380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015384:	4630      	mov	r0, r6
 8015386:	f000 f81d 	bl	80153c4 <_isatty_r>
 801538a:	b128      	cbz	r0, 8015398 <__smakebuf_r+0x70>
 801538c:	89a3      	ldrh	r3, [r4, #12]
 801538e:	f023 0303 	bic.w	r3, r3, #3
 8015392:	f043 0301 	orr.w	r3, r3, #1
 8015396:	81a3      	strh	r3, [r4, #12]
 8015398:	89a3      	ldrh	r3, [r4, #12]
 801539a:	431d      	orrs	r5, r3
 801539c:	81a5      	strh	r5, [r4, #12]
 801539e:	e7cf      	b.n	8015340 <__smakebuf_r+0x18>

080153a0 <_fstat_r>:
 80153a0:	b538      	push	{r3, r4, r5, lr}
 80153a2:	4d07      	ldr	r5, [pc, #28]	@ (80153c0 <_fstat_r+0x20>)
 80153a4:	2300      	movs	r3, #0
 80153a6:	4604      	mov	r4, r0
 80153a8:	4608      	mov	r0, r1
 80153aa:	4611      	mov	r1, r2
 80153ac:	602b      	str	r3, [r5, #0]
 80153ae:	f7ed ffa1 	bl	80032f4 <_fstat>
 80153b2:	1c43      	adds	r3, r0, #1
 80153b4:	d102      	bne.n	80153bc <_fstat_r+0x1c>
 80153b6:	682b      	ldr	r3, [r5, #0]
 80153b8:	b103      	cbz	r3, 80153bc <_fstat_r+0x1c>
 80153ba:	6023      	str	r3, [r4, #0]
 80153bc:	bd38      	pop	{r3, r4, r5, pc}
 80153be:	bf00      	nop
 80153c0:	2000652c 	.word	0x2000652c

080153c4 <_isatty_r>:
 80153c4:	b538      	push	{r3, r4, r5, lr}
 80153c6:	4d06      	ldr	r5, [pc, #24]	@ (80153e0 <_isatty_r+0x1c>)
 80153c8:	2300      	movs	r3, #0
 80153ca:	4604      	mov	r4, r0
 80153cc:	4608      	mov	r0, r1
 80153ce:	602b      	str	r3, [r5, #0]
 80153d0:	f7ed ffa0 	bl	8003314 <_isatty>
 80153d4:	1c43      	adds	r3, r0, #1
 80153d6:	d102      	bne.n	80153de <_isatty_r+0x1a>
 80153d8:	682b      	ldr	r3, [r5, #0]
 80153da:	b103      	cbz	r3, 80153de <_isatty_r+0x1a>
 80153dc:	6023      	str	r3, [r4, #0]
 80153de:	bd38      	pop	{r3, r4, r5, pc}
 80153e0:	2000652c 	.word	0x2000652c

080153e4 <abort>:
 80153e4:	b508      	push	{r3, lr}
 80153e6:	2006      	movs	r0, #6
 80153e8:	f000 f834 	bl	8015454 <raise>
 80153ec:	2001      	movs	r0, #1
 80153ee:	f7ed ff31 	bl	8003254 <_exit>

080153f2 <_malloc_usable_size_r>:
 80153f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153f6:	1f18      	subs	r0, r3, #4
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	bfbc      	itt	lt
 80153fc:	580b      	ldrlt	r3, [r1, r0]
 80153fe:	18c0      	addlt	r0, r0, r3
 8015400:	4770      	bx	lr

08015402 <_raise_r>:
 8015402:	291f      	cmp	r1, #31
 8015404:	b538      	push	{r3, r4, r5, lr}
 8015406:	4605      	mov	r5, r0
 8015408:	460c      	mov	r4, r1
 801540a:	d904      	bls.n	8015416 <_raise_r+0x14>
 801540c:	2316      	movs	r3, #22
 801540e:	6003      	str	r3, [r0, #0]
 8015410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015414:	bd38      	pop	{r3, r4, r5, pc}
 8015416:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015418:	b112      	cbz	r2, 8015420 <_raise_r+0x1e>
 801541a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801541e:	b94b      	cbnz	r3, 8015434 <_raise_r+0x32>
 8015420:	4628      	mov	r0, r5
 8015422:	f000 f831 	bl	8015488 <_getpid_r>
 8015426:	4622      	mov	r2, r4
 8015428:	4601      	mov	r1, r0
 801542a:	4628      	mov	r0, r5
 801542c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015430:	f000 b818 	b.w	8015464 <_kill_r>
 8015434:	2b01      	cmp	r3, #1
 8015436:	d00a      	beq.n	801544e <_raise_r+0x4c>
 8015438:	1c59      	adds	r1, r3, #1
 801543a:	d103      	bne.n	8015444 <_raise_r+0x42>
 801543c:	2316      	movs	r3, #22
 801543e:	6003      	str	r3, [r0, #0]
 8015440:	2001      	movs	r0, #1
 8015442:	e7e7      	b.n	8015414 <_raise_r+0x12>
 8015444:	2100      	movs	r1, #0
 8015446:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801544a:	4620      	mov	r0, r4
 801544c:	4798      	blx	r3
 801544e:	2000      	movs	r0, #0
 8015450:	e7e0      	b.n	8015414 <_raise_r+0x12>
	...

08015454 <raise>:
 8015454:	4b02      	ldr	r3, [pc, #8]	@ (8015460 <raise+0xc>)
 8015456:	4601      	mov	r1, r0
 8015458:	6818      	ldr	r0, [r3, #0]
 801545a:	f7ff bfd2 	b.w	8015402 <_raise_r>
 801545e:	bf00      	nop
 8015460:	2000004c 	.word	0x2000004c

08015464 <_kill_r>:
 8015464:	b538      	push	{r3, r4, r5, lr}
 8015466:	4d07      	ldr	r5, [pc, #28]	@ (8015484 <_kill_r+0x20>)
 8015468:	2300      	movs	r3, #0
 801546a:	4604      	mov	r4, r0
 801546c:	4608      	mov	r0, r1
 801546e:	4611      	mov	r1, r2
 8015470:	602b      	str	r3, [r5, #0]
 8015472:	f7ed fedf 	bl	8003234 <_kill>
 8015476:	1c43      	adds	r3, r0, #1
 8015478:	d102      	bne.n	8015480 <_kill_r+0x1c>
 801547a:	682b      	ldr	r3, [r5, #0]
 801547c:	b103      	cbz	r3, 8015480 <_kill_r+0x1c>
 801547e:	6023      	str	r3, [r4, #0]
 8015480:	bd38      	pop	{r3, r4, r5, pc}
 8015482:	bf00      	nop
 8015484:	2000652c 	.word	0x2000652c

08015488 <_getpid_r>:
 8015488:	f7ed becc 	b.w	8003224 <_getpid>

0801548c <atan2>:
 801548c:	f000 b908 	b.w	80156a0 <__ieee754_atan2>

08015490 <sqrt>:
 8015490:	b538      	push	{r3, r4, r5, lr}
 8015492:	ed2d 8b02 	vpush	{d8}
 8015496:	ec55 4b10 	vmov	r4, r5, d0
 801549a:	f000 f825 	bl	80154e8 <__ieee754_sqrt>
 801549e:	4622      	mov	r2, r4
 80154a0:	462b      	mov	r3, r5
 80154a2:	4620      	mov	r0, r4
 80154a4:	4629      	mov	r1, r5
 80154a6:	eeb0 8a40 	vmov.f32	s16, s0
 80154aa:	eef0 8a60 	vmov.f32	s17, s1
 80154ae:	f7eb fb4d 	bl	8000b4c <__aeabi_dcmpun>
 80154b2:	b990      	cbnz	r0, 80154da <sqrt+0x4a>
 80154b4:	2200      	movs	r2, #0
 80154b6:	2300      	movs	r3, #0
 80154b8:	4620      	mov	r0, r4
 80154ba:	4629      	mov	r1, r5
 80154bc:	f7eb fb1e 	bl	8000afc <__aeabi_dcmplt>
 80154c0:	b158      	cbz	r0, 80154da <sqrt+0x4a>
 80154c2:	f7fe f827 	bl	8013514 <__errno>
 80154c6:	2321      	movs	r3, #33	@ 0x21
 80154c8:	6003      	str	r3, [r0, #0]
 80154ca:	2200      	movs	r2, #0
 80154cc:	2300      	movs	r3, #0
 80154ce:	4610      	mov	r0, r2
 80154d0:	4619      	mov	r1, r3
 80154d2:	f7eb f9cb 	bl	800086c <__aeabi_ddiv>
 80154d6:	ec41 0b18 	vmov	d8, r0, r1
 80154da:	eeb0 0a48 	vmov.f32	s0, s16
 80154de:	eef0 0a68 	vmov.f32	s1, s17
 80154e2:	ecbd 8b02 	vpop	{d8}
 80154e6:	bd38      	pop	{r3, r4, r5, pc}

080154e8 <__ieee754_sqrt>:
 80154e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ec:	4a68      	ldr	r2, [pc, #416]	@ (8015690 <__ieee754_sqrt+0x1a8>)
 80154ee:	ec55 4b10 	vmov	r4, r5, d0
 80154f2:	43aa      	bics	r2, r5
 80154f4:	462b      	mov	r3, r5
 80154f6:	4621      	mov	r1, r4
 80154f8:	d110      	bne.n	801551c <__ieee754_sqrt+0x34>
 80154fa:	4622      	mov	r2, r4
 80154fc:	4620      	mov	r0, r4
 80154fe:	4629      	mov	r1, r5
 8015500:	f7eb f88a 	bl	8000618 <__aeabi_dmul>
 8015504:	4602      	mov	r2, r0
 8015506:	460b      	mov	r3, r1
 8015508:	4620      	mov	r0, r4
 801550a:	4629      	mov	r1, r5
 801550c:	f7ea fece 	bl	80002ac <__adddf3>
 8015510:	4604      	mov	r4, r0
 8015512:	460d      	mov	r5, r1
 8015514:	ec45 4b10 	vmov	d0, r4, r5
 8015518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551c:	2d00      	cmp	r5, #0
 801551e:	dc0e      	bgt.n	801553e <__ieee754_sqrt+0x56>
 8015520:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015524:	4322      	orrs	r2, r4
 8015526:	d0f5      	beq.n	8015514 <__ieee754_sqrt+0x2c>
 8015528:	b19d      	cbz	r5, 8015552 <__ieee754_sqrt+0x6a>
 801552a:	4622      	mov	r2, r4
 801552c:	4620      	mov	r0, r4
 801552e:	4629      	mov	r1, r5
 8015530:	f7ea feba 	bl	80002a8 <__aeabi_dsub>
 8015534:	4602      	mov	r2, r0
 8015536:	460b      	mov	r3, r1
 8015538:	f7eb f998 	bl	800086c <__aeabi_ddiv>
 801553c:	e7e8      	b.n	8015510 <__ieee754_sqrt+0x28>
 801553e:	152a      	asrs	r2, r5, #20
 8015540:	d115      	bne.n	801556e <__ieee754_sqrt+0x86>
 8015542:	2000      	movs	r0, #0
 8015544:	e009      	b.n	801555a <__ieee754_sqrt+0x72>
 8015546:	0acb      	lsrs	r3, r1, #11
 8015548:	3a15      	subs	r2, #21
 801554a:	0549      	lsls	r1, r1, #21
 801554c:	2b00      	cmp	r3, #0
 801554e:	d0fa      	beq.n	8015546 <__ieee754_sqrt+0x5e>
 8015550:	e7f7      	b.n	8015542 <__ieee754_sqrt+0x5a>
 8015552:	462a      	mov	r2, r5
 8015554:	e7fa      	b.n	801554c <__ieee754_sqrt+0x64>
 8015556:	005b      	lsls	r3, r3, #1
 8015558:	3001      	adds	r0, #1
 801555a:	02dc      	lsls	r4, r3, #11
 801555c:	d5fb      	bpl.n	8015556 <__ieee754_sqrt+0x6e>
 801555e:	1e44      	subs	r4, r0, #1
 8015560:	1b12      	subs	r2, r2, r4
 8015562:	f1c0 0420 	rsb	r4, r0, #32
 8015566:	fa21 f404 	lsr.w	r4, r1, r4
 801556a:	4323      	orrs	r3, r4
 801556c:	4081      	lsls	r1, r0
 801556e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015572:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801557a:	07d2      	lsls	r2, r2, #31
 801557c:	bf5c      	itt	pl
 801557e:	005b      	lslpl	r3, r3, #1
 8015580:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015584:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015588:	bf58      	it	pl
 801558a:	0049      	lslpl	r1, r1, #1
 801558c:	2600      	movs	r6, #0
 801558e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015592:	106d      	asrs	r5, r5, #1
 8015594:	0049      	lsls	r1, r1, #1
 8015596:	2016      	movs	r0, #22
 8015598:	4632      	mov	r2, r6
 801559a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801559e:	1917      	adds	r7, r2, r4
 80155a0:	429f      	cmp	r7, r3
 80155a2:	bfde      	ittt	le
 80155a4:	193a      	addle	r2, r7, r4
 80155a6:	1bdb      	suble	r3, r3, r7
 80155a8:	1936      	addle	r6, r6, r4
 80155aa:	0fcf      	lsrs	r7, r1, #31
 80155ac:	3801      	subs	r0, #1
 80155ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80155b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80155b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80155ba:	d1f0      	bne.n	801559e <__ieee754_sqrt+0xb6>
 80155bc:	4604      	mov	r4, r0
 80155be:	2720      	movs	r7, #32
 80155c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80155c4:	429a      	cmp	r2, r3
 80155c6:	eb00 0e0c 	add.w	lr, r0, ip
 80155ca:	db02      	blt.n	80155d2 <__ieee754_sqrt+0xea>
 80155cc:	d113      	bne.n	80155f6 <__ieee754_sqrt+0x10e>
 80155ce:	458e      	cmp	lr, r1
 80155d0:	d811      	bhi.n	80155f6 <__ieee754_sqrt+0x10e>
 80155d2:	f1be 0f00 	cmp.w	lr, #0
 80155d6:	eb0e 000c 	add.w	r0, lr, ip
 80155da:	da42      	bge.n	8015662 <__ieee754_sqrt+0x17a>
 80155dc:	2800      	cmp	r0, #0
 80155de:	db40      	blt.n	8015662 <__ieee754_sqrt+0x17a>
 80155e0:	f102 0801 	add.w	r8, r2, #1
 80155e4:	1a9b      	subs	r3, r3, r2
 80155e6:	458e      	cmp	lr, r1
 80155e8:	bf88      	it	hi
 80155ea:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80155ee:	eba1 010e 	sub.w	r1, r1, lr
 80155f2:	4464      	add	r4, ip
 80155f4:	4642      	mov	r2, r8
 80155f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80155fa:	3f01      	subs	r7, #1
 80155fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015600:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015604:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015608:	d1dc      	bne.n	80155c4 <__ieee754_sqrt+0xdc>
 801560a:	4319      	orrs	r1, r3
 801560c:	d01b      	beq.n	8015646 <__ieee754_sqrt+0x15e>
 801560e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015694 <__ieee754_sqrt+0x1ac>
 8015612:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015698 <__ieee754_sqrt+0x1b0>
 8015616:	e9da 0100 	ldrd	r0, r1, [sl]
 801561a:	e9db 2300 	ldrd	r2, r3, [fp]
 801561e:	f7ea fe43 	bl	80002a8 <__aeabi_dsub>
 8015622:	e9da 8900 	ldrd	r8, r9, [sl]
 8015626:	4602      	mov	r2, r0
 8015628:	460b      	mov	r3, r1
 801562a:	4640      	mov	r0, r8
 801562c:	4649      	mov	r1, r9
 801562e:	f7eb fa6f 	bl	8000b10 <__aeabi_dcmple>
 8015632:	b140      	cbz	r0, 8015646 <__ieee754_sqrt+0x15e>
 8015634:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8015638:	e9da 0100 	ldrd	r0, r1, [sl]
 801563c:	e9db 2300 	ldrd	r2, r3, [fp]
 8015640:	d111      	bne.n	8015666 <__ieee754_sqrt+0x17e>
 8015642:	3601      	adds	r6, #1
 8015644:	463c      	mov	r4, r7
 8015646:	1072      	asrs	r2, r6, #1
 8015648:	0863      	lsrs	r3, r4, #1
 801564a:	07f1      	lsls	r1, r6, #31
 801564c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015650:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015654:	bf48      	it	mi
 8015656:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801565a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801565e:	4618      	mov	r0, r3
 8015660:	e756      	b.n	8015510 <__ieee754_sqrt+0x28>
 8015662:	4690      	mov	r8, r2
 8015664:	e7be      	b.n	80155e4 <__ieee754_sqrt+0xfc>
 8015666:	f7ea fe21 	bl	80002ac <__adddf3>
 801566a:	e9da 8900 	ldrd	r8, r9, [sl]
 801566e:	4602      	mov	r2, r0
 8015670:	460b      	mov	r3, r1
 8015672:	4640      	mov	r0, r8
 8015674:	4649      	mov	r1, r9
 8015676:	f7eb fa41 	bl	8000afc <__aeabi_dcmplt>
 801567a:	b120      	cbz	r0, 8015686 <__ieee754_sqrt+0x19e>
 801567c:	1ca0      	adds	r0, r4, #2
 801567e:	bf08      	it	eq
 8015680:	3601      	addeq	r6, #1
 8015682:	3402      	adds	r4, #2
 8015684:	e7df      	b.n	8015646 <__ieee754_sqrt+0x15e>
 8015686:	1c63      	adds	r3, r4, #1
 8015688:	f023 0401 	bic.w	r4, r3, #1
 801568c:	e7db      	b.n	8015646 <__ieee754_sqrt+0x15e>
 801568e:	bf00      	nop
 8015690:	7ff00000 	.word	0x7ff00000
 8015694:	20000210 	.word	0x20000210
 8015698:	20000208 	.word	0x20000208
 801569c:	00000000 	.word	0x00000000

080156a0 <__ieee754_atan2>:
 80156a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156a4:	ec57 6b11 	vmov	r6, r7, d1
 80156a8:	4273      	negs	r3, r6
 80156aa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8015828 <__ieee754_atan2+0x188>
 80156ae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80156b2:	4333      	orrs	r3, r6
 80156b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80156b8:	4543      	cmp	r3, r8
 80156ba:	ec51 0b10 	vmov	r0, r1, d0
 80156be:	4635      	mov	r5, r6
 80156c0:	d809      	bhi.n	80156d6 <__ieee754_atan2+0x36>
 80156c2:	4244      	negs	r4, r0
 80156c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80156c8:	4304      	orrs	r4, r0
 80156ca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80156ce:	4544      	cmp	r4, r8
 80156d0:	468e      	mov	lr, r1
 80156d2:	4681      	mov	r9, r0
 80156d4:	d907      	bls.n	80156e6 <__ieee754_atan2+0x46>
 80156d6:	4632      	mov	r2, r6
 80156d8:	463b      	mov	r3, r7
 80156da:	f7ea fde7 	bl	80002ac <__adddf3>
 80156de:	ec41 0b10 	vmov	d0, r0, r1
 80156e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156e6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80156ea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80156ee:	4334      	orrs	r4, r6
 80156f0:	d103      	bne.n	80156fa <__ieee754_atan2+0x5a>
 80156f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156f6:	f000 b89b 	b.w	8015830 <atan>
 80156fa:	17bc      	asrs	r4, r7, #30
 80156fc:	f004 0402 	and.w	r4, r4, #2
 8015700:	ea53 0909 	orrs.w	r9, r3, r9
 8015704:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015708:	d107      	bne.n	801571a <__ieee754_atan2+0x7a>
 801570a:	2c02      	cmp	r4, #2
 801570c:	d05f      	beq.n	80157ce <__ieee754_atan2+0x12e>
 801570e:	2c03      	cmp	r4, #3
 8015710:	d1e5      	bne.n	80156de <__ieee754_atan2+0x3e>
 8015712:	a141      	add	r1, pc, #260	@ (adr r1, 8015818 <__ieee754_atan2+0x178>)
 8015714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015718:	e7e1      	b.n	80156de <__ieee754_atan2+0x3e>
 801571a:	4315      	orrs	r5, r2
 801571c:	d106      	bne.n	801572c <__ieee754_atan2+0x8c>
 801571e:	f1be 0f00 	cmp.w	lr, #0
 8015722:	da5f      	bge.n	80157e4 <__ieee754_atan2+0x144>
 8015724:	a13e      	add	r1, pc, #248	@ (adr r1, 8015820 <__ieee754_atan2+0x180>)
 8015726:	e9d1 0100 	ldrd	r0, r1, [r1]
 801572a:	e7d8      	b.n	80156de <__ieee754_atan2+0x3e>
 801572c:	4542      	cmp	r2, r8
 801572e:	d10f      	bne.n	8015750 <__ieee754_atan2+0xb0>
 8015730:	4293      	cmp	r3, r2
 8015732:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8015736:	d107      	bne.n	8015748 <__ieee754_atan2+0xa8>
 8015738:	2c02      	cmp	r4, #2
 801573a:	d84c      	bhi.n	80157d6 <__ieee754_atan2+0x136>
 801573c:	4b34      	ldr	r3, [pc, #208]	@ (8015810 <__ieee754_atan2+0x170>)
 801573e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015746:	e7ca      	b.n	80156de <__ieee754_atan2+0x3e>
 8015748:	2c02      	cmp	r4, #2
 801574a:	d848      	bhi.n	80157de <__ieee754_atan2+0x13e>
 801574c:	4b31      	ldr	r3, [pc, #196]	@ (8015814 <__ieee754_atan2+0x174>)
 801574e:	e7f6      	b.n	801573e <__ieee754_atan2+0x9e>
 8015750:	4543      	cmp	r3, r8
 8015752:	d0e4      	beq.n	801571e <__ieee754_atan2+0x7e>
 8015754:	1a9b      	subs	r3, r3, r2
 8015756:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801575a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801575e:	da1e      	bge.n	801579e <__ieee754_atan2+0xfe>
 8015760:	2f00      	cmp	r7, #0
 8015762:	da01      	bge.n	8015768 <__ieee754_atan2+0xc8>
 8015764:	323c      	adds	r2, #60	@ 0x3c
 8015766:	db1e      	blt.n	80157a6 <__ieee754_atan2+0x106>
 8015768:	4632      	mov	r2, r6
 801576a:	463b      	mov	r3, r7
 801576c:	f7eb f87e 	bl	800086c <__aeabi_ddiv>
 8015770:	ec41 0b10 	vmov	d0, r0, r1
 8015774:	f000 f9f4 	bl	8015b60 <fabs>
 8015778:	f000 f85a 	bl	8015830 <atan>
 801577c:	ec51 0b10 	vmov	r0, r1, d0
 8015780:	2c01      	cmp	r4, #1
 8015782:	d013      	beq.n	80157ac <__ieee754_atan2+0x10c>
 8015784:	2c02      	cmp	r4, #2
 8015786:	d015      	beq.n	80157b4 <__ieee754_atan2+0x114>
 8015788:	2c00      	cmp	r4, #0
 801578a:	d0a8      	beq.n	80156de <__ieee754_atan2+0x3e>
 801578c:	a318      	add	r3, pc, #96	@ (adr r3, 80157f0 <__ieee754_atan2+0x150>)
 801578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015792:	f7ea fd89 	bl	80002a8 <__aeabi_dsub>
 8015796:	a318      	add	r3, pc, #96	@ (adr r3, 80157f8 <__ieee754_atan2+0x158>)
 8015798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579c:	e014      	b.n	80157c8 <__ieee754_atan2+0x128>
 801579e:	a118      	add	r1, pc, #96	@ (adr r1, 8015800 <__ieee754_atan2+0x160>)
 80157a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157a4:	e7ec      	b.n	8015780 <__ieee754_atan2+0xe0>
 80157a6:	2000      	movs	r0, #0
 80157a8:	2100      	movs	r1, #0
 80157aa:	e7e9      	b.n	8015780 <__ieee754_atan2+0xe0>
 80157ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80157b0:	4619      	mov	r1, r3
 80157b2:	e794      	b.n	80156de <__ieee754_atan2+0x3e>
 80157b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80157f0 <__ieee754_atan2+0x150>)
 80157b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ba:	f7ea fd75 	bl	80002a8 <__aeabi_dsub>
 80157be:	4602      	mov	r2, r0
 80157c0:	460b      	mov	r3, r1
 80157c2:	a10d      	add	r1, pc, #52	@ (adr r1, 80157f8 <__ieee754_atan2+0x158>)
 80157c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157c8:	f7ea fd6e 	bl	80002a8 <__aeabi_dsub>
 80157cc:	e787      	b.n	80156de <__ieee754_atan2+0x3e>
 80157ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80157f8 <__ieee754_atan2+0x158>)
 80157d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157d4:	e783      	b.n	80156de <__ieee754_atan2+0x3e>
 80157d6:	a10c      	add	r1, pc, #48	@ (adr r1, 8015808 <__ieee754_atan2+0x168>)
 80157d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157dc:	e77f      	b.n	80156de <__ieee754_atan2+0x3e>
 80157de:	2000      	movs	r0, #0
 80157e0:	2100      	movs	r1, #0
 80157e2:	e77c      	b.n	80156de <__ieee754_atan2+0x3e>
 80157e4:	a106      	add	r1, pc, #24	@ (adr r1, 8015800 <__ieee754_atan2+0x160>)
 80157e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157ea:	e778      	b.n	80156de <__ieee754_atan2+0x3e>
 80157ec:	f3af 8000 	nop.w
 80157f0:	33145c07 	.word	0x33145c07
 80157f4:	3ca1a626 	.word	0x3ca1a626
 80157f8:	54442d18 	.word	0x54442d18
 80157fc:	400921fb 	.word	0x400921fb
 8015800:	54442d18 	.word	0x54442d18
 8015804:	3ff921fb 	.word	0x3ff921fb
 8015808:	54442d18 	.word	0x54442d18
 801580c:	3fe921fb 	.word	0x3fe921fb
 8015810:	08016468 	.word	0x08016468
 8015814:	08016450 	.word	0x08016450
 8015818:	54442d18 	.word	0x54442d18
 801581c:	c00921fb 	.word	0xc00921fb
 8015820:	54442d18 	.word	0x54442d18
 8015824:	bff921fb 	.word	0xbff921fb
 8015828:	7ff00000 	.word	0x7ff00000
 801582c:	00000000 	.word	0x00000000

08015830 <atan>:
 8015830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015834:	ec55 4b10 	vmov	r4, r5, d0
 8015838:	4bbf      	ldr	r3, [pc, #764]	@ (8015b38 <atan+0x308>)
 801583a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801583e:	429e      	cmp	r6, r3
 8015840:	46ab      	mov	fp, r5
 8015842:	d918      	bls.n	8015876 <atan+0x46>
 8015844:	4bbd      	ldr	r3, [pc, #756]	@ (8015b3c <atan+0x30c>)
 8015846:	429e      	cmp	r6, r3
 8015848:	d801      	bhi.n	801584e <atan+0x1e>
 801584a:	d109      	bne.n	8015860 <atan+0x30>
 801584c:	b144      	cbz	r4, 8015860 <atan+0x30>
 801584e:	4622      	mov	r2, r4
 8015850:	462b      	mov	r3, r5
 8015852:	4620      	mov	r0, r4
 8015854:	4629      	mov	r1, r5
 8015856:	f7ea fd29 	bl	80002ac <__adddf3>
 801585a:	4604      	mov	r4, r0
 801585c:	460d      	mov	r5, r1
 801585e:	e006      	b.n	801586e <atan+0x3e>
 8015860:	f1bb 0f00 	cmp.w	fp, #0
 8015864:	f340 812b 	ble.w	8015abe <atan+0x28e>
 8015868:	a597      	add	r5, pc, #604	@ (adr r5, 8015ac8 <atan+0x298>)
 801586a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801586e:	ec45 4b10 	vmov	d0, r4, r5
 8015872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015876:	4bb2      	ldr	r3, [pc, #712]	@ (8015b40 <atan+0x310>)
 8015878:	429e      	cmp	r6, r3
 801587a:	d813      	bhi.n	80158a4 <atan+0x74>
 801587c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8015880:	429e      	cmp	r6, r3
 8015882:	d80c      	bhi.n	801589e <atan+0x6e>
 8015884:	a392      	add	r3, pc, #584	@ (adr r3, 8015ad0 <atan+0x2a0>)
 8015886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588a:	4620      	mov	r0, r4
 801588c:	4629      	mov	r1, r5
 801588e:	f7ea fd0d 	bl	80002ac <__adddf3>
 8015892:	4bac      	ldr	r3, [pc, #688]	@ (8015b44 <atan+0x314>)
 8015894:	2200      	movs	r2, #0
 8015896:	f7eb f94f 	bl	8000b38 <__aeabi_dcmpgt>
 801589a:	2800      	cmp	r0, #0
 801589c:	d1e7      	bne.n	801586e <atan+0x3e>
 801589e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80158a2:	e029      	b.n	80158f8 <atan+0xc8>
 80158a4:	f000 f95c 	bl	8015b60 <fabs>
 80158a8:	4ba7      	ldr	r3, [pc, #668]	@ (8015b48 <atan+0x318>)
 80158aa:	429e      	cmp	r6, r3
 80158ac:	ec55 4b10 	vmov	r4, r5, d0
 80158b0:	f200 80bc 	bhi.w	8015a2c <atan+0x1fc>
 80158b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80158b8:	429e      	cmp	r6, r3
 80158ba:	f200 809e 	bhi.w	80159fa <atan+0x1ca>
 80158be:	4622      	mov	r2, r4
 80158c0:	462b      	mov	r3, r5
 80158c2:	4620      	mov	r0, r4
 80158c4:	4629      	mov	r1, r5
 80158c6:	f7ea fcf1 	bl	80002ac <__adddf3>
 80158ca:	4b9e      	ldr	r3, [pc, #632]	@ (8015b44 <atan+0x314>)
 80158cc:	2200      	movs	r2, #0
 80158ce:	f7ea fceb 	bl	80002a8 <__aeabi_dsub>
 80158d2:	2200      	movs	r2, #0
 80158d4:	4606      	mov	r6, r0
 80158d6:	460f      	mov	r7, r1
 80158d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80158dc:	4620      	mov	r0, r4
 80158de:	4629      	mov	r1, r5
 80158e0:	f7ea fce4 	bl	80002ac <__adddf3>
 80158e4:	4602      	mov	r2, r0
 80158e6:	460b      	mov	r3, r1
 80158e8:	4630      	mov	r0, r6
 80158ea:	4639      	mov	r1, r7
 80158ec:	f7ea ffbe 	bl	800086c <__aeabi_ddiv>
 80158f0:	f04f 0a00 	mov.w	sl, #0
 80158f4:	4604      	mov	r4, r0
 80158f6:	460d      	mov	r5, r1
 80158f8:	4622      	mov	r2, r4
 80158fa:	462b      	mov	r3, r5
 80158fc:	4620      	mov	r0, r4
 80158fe:	4629      	mov	r1, r5
 8015900:	f7ea fe8a 	bl	8000618 <__aeabi_dmul>
 8015904:	4602      	mov	r2, r0
 8015906:	460b      	mov	r3, r1
 8015908:	4680      	mov	r8, r0
 801590a:	4689      	mov	r9, r1
 801590c:	f7ea fe84 	bl	8000618 <__aeabi_dmul>
 8015910:	a371      	add	r3, pc, #452	@ (adr r3, 8015ad8 <atan+0x2a8>)
 8015912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015916:	4606      	mov	r6, r0
 8015918:	460f      	mov	r7, r1
 801591a:	f7ea fe7d 	bl	8000618 <__aeabi_dmul>
 801591e:	a370      	add	r3, pc, #448	@ (adr r3, 8015ae0 <atan+0x2b0>)
 8015920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015924:	f7ea fcc2 	bl	80002ac <__adddf3>
 8015928:	4632      	mov	r2, r6
 801592a:	463b      	mov	r3, r7
 801592c:	f7ea fe74 	bl	8000618 <__aeabi_dmul>
 8015930:	a36d      	add	r3, pc, #436	@ (adr r3, 8015ae8 <atan+0x2b8>)
 8015932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015936:	f7ea fcb9 	bl	80002ac <__adddf3>
 801593a:	4632      	mov	r2, r6
 801593c:	463b      	mov	r3, r7
 801593e:	f7ea fe6b 	bl	8000618 <__aeabi_dmul>
 8015942:	a36b      	add	r3, pc, #428	@ (adr r3, 8015af0 <atan+0x2c0>)
 8015944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015948:	f7ea fcb0 	bl	80002ac <__adddf3>
 801594c:	4632      	mov	r2, r6
 801594e:	463b      	mov	r3, r7
 8015950:	f7ea fe62 	bl	8000618 <__aeabi_dmul>
 8015954:	a368      	add	r3, pc, #416	@ (adr r3, 8015af8 <atan+0x2c8>)
 8015956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595a:	f7ea fca7 	bl	80002ac <__adddf3>
 801595e:	4632      	mov	r2, r6
 8015960:	463b      	mov	r3, r7
 8015962:	f7ea fe59 	bl	8000618 <__aeabi_dmul>
 8015966:	a366      	add	r3, pc, #408	@ (adr r3, 8015b00 <atan+0x2d0>)
 8015968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596c:	f7ea fc9e 	bl	80002ac <__adddf3>
 8015970:	4642      	mov	r2, r8
 8015972:	464b      	mov	r3, r9
 8015974:	f7ea fe50 	bl	8000618 <__aeabi_dmul>
 8015978:	a363      	add	r3, pc, #396	@ (adr r3, 8015b08 <atan+0x2d8>)
 801597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801597e:	4680      	mov	r8, r0
 8015980:	4689      	mov	r9, r1
 8015982:	4630      	mov	r0, r6
 8015984:	4639      	mov	r1, r7
 8015986:	f7ea fe47 	bl	8000618 <__aeabi_dmul>
 801598a:	a361      	add	r3, pc, #388	@ (adr r3, 8015b10 <atan+0x2e0>)
 801598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015990:	f7ea fc8a 	bl	80002a8 <__aeabi_dsub>
 8015994:	4632      	mov	r2, r6
 8015996:	463b      	mov	r3, r7
 8015998:	f7ea fe3e 	bl	8000618 <__aeabi_dmul>
 801599c:	a35e      	add	r3, pc, #376	@ (adr r3, 8015b18 <atan+0x2e8>)
 801599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a2:	f7ea fc81 	bl	80002a8 <__aeabi_dsub>
 80159a6:	4632      	mov	r2, r6
 80159a8:	463b      	mov	r3, r7
 80159aa:	f7ea fe35 	bl	8000618 <__aeabi_dmul>
 80159ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8015b20 <atan+0x2f0>)
 80159b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b4:	f7ea fc78 	bl	80002a8 <__aeabi_dsub>
 80159b8:	4632      	mov	r2, r6
 80159ba:	463b      	mov	r3, r7
 80159bc:	f7ea fe2c 	bl	8000618 <__aeabi_dmul>
 80159c0:	a359      	add	r3, pc, #356	@ (adr r3, 8015b28 <atan+0x2f8>)
 80159c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c6:	f7ea fc6f 	bl	80002a8 <__aeabi_dsub>
 80159ca:	4632      	mov	r2, r6
 80159cc:	463b      	mov	r3, r7
 80159ce:	f7ea fe23 	bl	8000618 <__aeabi_dmul>
 80159d2:	4602      	mov	r2, r0
 80159d4:	460b      	mov	r3, r1
 80159d6:	4640      	mov	r0, r8
 80159d8:	4649      	mov	r1, r9
 80159da:	f7ea fc67 	bl	80002ac <__adddf3>
 80159de:	4622      	mov	r2, r4
 80159e0:	462b      	mov	r3, r5
 80159e2:	f7ea fe19 	bl	8000618 <__aeabi_dmul>
 80159e6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80159ea:	4602      	mov	r2, r0
 80159ec:	460b      	mov	r3, r1
 80159ee:	d148      	bne.n	8015a82 <atan+0x252>
 80159f0:	4620      	mov	r0, r4
 80159f2:	4629      	mov	r1, r5
 80159f4:	f7ea fc58 	bl	80002a8 <__aeabi_dsub>
 80159f8:	e72f      	b.n	801585a <atan+0x2a>
 80159fa:	4b52      	ldr	r3, [pc, #328]	@ (8015b44 <atan+0x314>)
 80159fc:	2200      	movs	r2, #0
 80159fe:	4620      	mov	r0, r4
 8015a00:	4629      	mov	r1, r5
 8015a02:	f7ea fc51 	bl	80002a8 <__aeabi_dsub>
 8015a06:	4b4f      	ldr	r3, [pc, #316]	@ (8015b44 <atan+0x314>)
 8015a08:	4606      	mov	r6, r0
 8015a0a:	460f      	mov	r7, r1
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	4620      	mov	r0, r4
 8015a10:	4629      	mov	r1, r5
 8015a12:	f7ea fc4b 	bl	80002ac <__adddf3>
 8015a16:	4602      	mov	r2, r0
 8015a18:	460b      	mov	r3, r1
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	4639      	mov	r1, r7
 8015a1e:	f7ea ff25 	bl	800086c <__aeabi_ddiv>
 8015a22:	f04f 0a01 	mov.w	sl, #1
 8015a26:	4604      	mov	r4, r0
 8015a28:	460d      	mov	r5, r1
 8015a2a:	e765      	b.n	80158f8 <atan+0xc8>
 8015a2c:	4b47      	ldr	r3, [pc, #284]	@ (8015b4c <atan+0x31c>)
 8015a2e:	429e      	cmp	r6, r3
 8015a30:	d21c      	bcs.n	8015a6c <atan+0x23c>
 8015a32:	4b47      	ldr	r3, [pc, #284]	@ (8015b50 <atan+0x320>)
 8015a34:	2200      	movs	r2, #0
 8015a36:	4620      	mov	r0, r4
 8015a38:	4629      	mov	r1, r5
 8015a3a:	f7ea fc35 	bl	80002a8 <__aeabi_dsub>
 8015a3e:	4b44      	ldr	r3, [pc, #272]	@ (8015b50 <atan+0x320>)
 8015a40:	4606      	mov	r6, r0
 8015a42:	460f      	mov	r7, r1
 8015a44:	2200      	movs	r2, #0
 8015a46:	4620      	mov	r0, r4
 8015a48:	4629      	mov	r1, r5
 8015a4a:	f7ea fde5 	bl	8000618 <__aeabi_dmul>
 8015a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8015b44 <atan+0x314>)
 8015a50:	2200      	movs	r2, #0
 8015a52:	f7ea fc2b 	bl	80002ac <__adddf3>
 8015a56:	4602      	mov	r2, r0
 8015a58:	460b      	mov	r3, r1
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	4639      	mov	r1, r7
 8015a5e:	f7ea ff05 	bl	800086c <__aeabi_ddiv>
 8015a62:	f04f 0a02 	mov.w	sl, #2
 8015a66:	4604      	mov	r4, r0
 8015a68:	460d      	mov	r5, r1
 8015a6a:	e745      	b.n	80158f8 <atan+0xc8>
 8015a6c:	4622      	mov	r2, r4
 8015a6e:	462b      	mov	r3, r5
 8015a70:	4938      	ldr	r1, [pc, #224]	@ (8015b54 <atan+0x324>)
 8015a72:	2000      	movs	r0, #0
 8015a74:	f7ea fefa 	bl	800086c <__aeabi_ddiv>
 8015a78:	f04f 0a03 	mov.w	sl, #3
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	460d      	mov	r5, r1
 8015a80:	e73a      	b.n	80158f8 <atan+0xc8>
 8015a82:	4b35      	ldr	r3, [pc, #212]	@ (8015b58 <atan+0x328>)
 8015a84:	4e35      	ldr	r6, [pc, #212]	@ (8015b5c <atan+0x32c>)
 8015a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8e:	f7ea fc0b 	bl	80002a8 <__aeabi_dsub>
 8015a92:	4622      	mov	r2, r4
 8015a94:	462b      	mov	r3, r5
 8015a96:	f7ea fc07 	bl	80002a8 <__aeabi_dsub>
 8015a9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015aa6:	f7ea fbff 	bl	80002a8 <__aeabi_dsub>
 8015aaa:	f1bb 0f00 	cmp.w	fp, #0
 8015aae:	4604      	mov	r4, r0
 8015ab0:	460d      	mov	r5, r1
 8015ab2:	f6bf aedc 	bge.w	801586e <atan+0x3e>
 8015ab6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015aba:	461d      	mov	r5, r3
 8015abc:	e6d7      	b.n	801586e <atan+0x3e>
 8015abe:	a51c      	add	r5, pc, #112	@ (adr r5, 8015b30 <atan+0x300>)
 8015ac0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015ac4:	e6d3      	b.n	801586e <atan+0x3e>
 8015ac6:	bf00      	nop
 8015ac8:	54442d18 	.word	0x54442d18
 8015acc:	3ff921fb 	.word	0x3ff921fb
 8015ad0:	8800759c 	.word	0x8800759c
 8015ad4:	7e37e43c 	.word	0x7e37e43c
 8015ad8:	e322da11 	.word	0xe322da11
 8015adc:	3f90ad3a 	.word	0x3f90ad3a
 8015ae0:	24760deb 	.word	0x24760deb
 8015ae4:	3fa97b4b 	.word	0x3fa97b4b
 8015ae8:	a0d03d51 	.word	0xa0d03d51
 8015aec:	3fb10d66 	.word	0x3fb10d66
 8015af0:	c54c206e 	.word	0xc54c206e
 8015af4:	3fb745cd 	.word	0x3fb745cd
 8015af8:	920083ff 	.word	0x920083ff
 8015afc:	3fc24924 	.word	0x3fc24924
 8015b00:	5555550d 	.word	0x5555550d
 8015b04:	3fd55555 	.word	0x3fd55555
 8015b08:	2c6a6c2f 	.word	0x2c6a6c2f
 8015b0c:	bfa2b444 	.word	0xbfa2b444
 8015b10:	52defd9a 	.word	0x52defd9a
 8015b14:	3fadde2d 	.word	0x3fadde2d
 8015b18:	af749a6d 	.word	0xaf749a6d
 8015b1c:	3fb3b0f2 	.word	0x3fb3b0f2
 8015b20:	fe231671 	.word	0xfe231671
 8015b24:	3fbc71c6 	.word	0x3fbc71c6
 8015b28:	9998ebc4 	.word	0x9998ebc4
 8015b2c:	3fc99999 	.word	0x3fc99999
 8015b30:	54442d18 	.word	0x54442d18
 8015b34:	bff921fb 	.word	0xbff921fb
 8015b38:	440fffff 	.word	0x440fffff
 8015b3c:	7ff00000 	.word	0x7ff00000
 8015b40:	3fdbffff 	.word	0x3fdbffff
 8015b44:	3ff00000 	.word	0x3ff00000
 8015b48:	3ff2ffff 	.word	0x3ff2ffff
 8015b4c:	40038000 	.word	0x40038000
 8015b50:	3ff80000 	.word	0x3ff80000
 8015b54:	bff00000 	.word	0xbff00000
 8015b58:	08016480 	.word	0x08016480
 8015b5c:	080164a0 	.word	0x080164a0

08015b60 <fabs>:
 8015b60:	ec51 0b10 	vmov	r0, r1, d0
 8015b64:	4602      	mov	r2, r0
 8015b66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015b6a:	ec43 2b10 	vmov	d0, r2, r3
 8015b6e:	4770      	bx	lr

08015b70 <_init>:
 8015b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b72:	bf00      	nop
 8015b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b76:	bc08      	pop	{r3}
 8015b78:	469e      	mov	lr, r3
 8015b7a:	4770      	bx	lr

08015b7c <_fini>:
 8015b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b7e:	bf00      	nop
 8015b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b82:	bc08      	pop	{r3}
 8015b84:	469e      	mov	lr, r3
 8015b86:	4770      	bx	lr
