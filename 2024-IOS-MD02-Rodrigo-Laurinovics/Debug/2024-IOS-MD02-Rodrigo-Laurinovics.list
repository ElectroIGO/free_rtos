
2024-IOS-MD02-Rodrigo-Laurinovics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dfc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08011f8c  08011f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801227c  0801227c  0001409c  2**0
                  CONTENTS
  4 .ARM          00000008  0801227c  0801227c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012284  08012284  0001409c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012284  08012284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012288  08012288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0801228c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001409c  2**0
                  CONTENTS
 10 .bss          0000b400  2000009c  2000009c  0001409c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b49c  2000b49c  0001409c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001409c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d36f  00000000  00000000  000140cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006402  00000000  00000000  0004143b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002468  00000000  00000000  00047840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c3b  00000000  00000000  00049ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0b0  00000000  00000000  0004b8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d3b0  00000000  00000000  00075993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9b68  00000000  00000000  000a2d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018c8ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2f0  00000000  00000000  0018c8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00196be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f74 	.word	0x08011f74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08011f74 	.word	0x08011f74

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80005a4:	2200      	movs	r2, #0
 80005a6:	2108      	movs	r1, #8
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <LIS3DSH_WriteIO+0x4c>)
 80005aa:	f002 fbff 	bl	8002dac <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80005ae:	f107 010f 	add.w	r1, r7, #15
 80005b2:	230a      	movs	r3, #10
 80005b4:	2201      	movs	r2, #1
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <LIS3DSH_WriteIO+0x50>)
 80005b8:	f006 fba7 	bl	8006d0a <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	230a      	movs	r3, #10
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <LIS3DSH_WriteIO+0x50>)
 80005c6:	f006 fba0 	bl	8006d0a <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80005ca:	2201      	movs	r2, #1
 80005cc:	2108      	movs	r1, #8
 80005ce:	4803      	ldr	r0, [pc, #12]	@ (80005dc <LIS3DSH_WriteIO+0x4c>)
 80005d0:	f002 fbec 	bl	8002dac <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	200000b8 	.word	0x200000b8

080005e4 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80005fe:	2200      	movs	r2, #0
 8000600:	2108      	movs	r1, #8
 8000602:	4818      	ldr	r0, [pc, #96]	@ (8000664 <LIS3DSH_ReadIO+0x80>)
 8000604:	f002 fbd2 	bl	8002dac <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000608:	f107 0108 	add.w	r1, r7, #8
 800060c:	230a      	movs	r3, #10
 800060e:	2201      	movs	r2, #1
 8000610:	4815      	ldr	r0, [pc, #84]	@ (8000668 <LIS3DSH_ReadIO+0x84>)
 8000612:	f006 fb7a 	bl	8006d0a <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	b29a      	uxth	r2, r3
 800061a:	f107 0108 	add.w	r1, r7, #8
 800061e:	230a      	movs	r3, #10
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <LIS3DSH_ReadIO+0x84>)
 8000622:	f006 fcb5 	bl	8006f90 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000626:	2201      	movs	r2, #1
 8000628:	2108      	movs	r1, #8
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <LIS3DSH_ReadIO+0x80>)
 800062c:	f002 fbbe 	bl	8002dac <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e00b      	b.n	800064e <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000636:	7bfa      	ldrb	r2, [r7, #15]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	6839      	ldr	r1, [r7, #0]
 800063c:	440b      	add	r3, r1
 800063e:	3210      	adds	r2, #16
 8000640:	443a      	add	r2, r7
 8000642:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000646:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	3301      	adds	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	7bfa      	ldrb	r2, [r7, #15]
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	429a      	cmp	r2, r3
 8000658:	dbed      	blt.n	8000636 <LIS3DSH_ReadIO+0x52>
	}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	200000b8 	.word	0x200000b8

0800066c <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 800067a:	2258      	movs	r2, #88	@ 0x58
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	485b      	ldr	r0, [pc, #364]	@ (80007ec <LIS3DSH_Init+0x180>)
 8000680:	f010 ffb9 	bl	80115f6 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	b25a      	sxtb	r2, r3
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b25b      	sxtb	r3, r3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	f023 030f 	bic.w	r3, r3, #15
 80006a6:	b25a      	sxtb	r2, r3
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80006b4:	f107 030f 	add.w	r3, r7, #15
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	2020      	movs	r0, #32
 80006be:	f7ff ff67 	bl	8000590 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80006d0:	b25a      	sxtb	r2, r3
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80006f6:	f107 030f 	add.w	r3, r7, #15
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	2024      	movs	r0, #36	@ 0x24
 8000700:	f7ff ff46 	bl	8000590 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d008      	beq.n	800071e <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 800070c:	2388      	movs	r3, #136	@ 0x88
 800070e:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000710:	f107 030f 	add.w	r3, r7, #15
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	2023      	movs	r0, #35	@ 0x23
 800071a:	f7ff ff39 	bl	8000590 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	2b20      	cmp	r3, #32
 8000724:	d858      	bhi.n	80007d8 <LIS3DSH_Init+0x16c>
 8000726:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <LIS3DSH_Init+0xc0>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	080007b1 	.word	0x080007b1
 8000730:	080007d9 	.word	0x080007d9
 8000734:	080007d9 	.word	0x080007d9
 8000738:	080007d9 	.word	0x080007d9
 800073c:	080007d9 	.word	0x080007d9
 8000740:	080007d9 	.word	0x080007d9
 8000744:	080007d9 	.word	0x080007d9
 8000748:	080007d9 	.word	0x080007d9
 800074c:	080007b9 	.word	0x080007b9
 8000750:	080007d9 	.word	0x080007d9
 8000754:	080007d9 	.word	0x080007d9
 8000758:	080007d9 	.word	0x080007d9
 800075c:	080007d9 	.word	0x080007d9
 8000760:	080007d9 	.word	0x080007d9
 8000764:	080007d9 	.word	0x080007d9
 8000768:	080007d9 	.word	0x080007d9
 800076c:	080007c1 	.word	0x080007c1
 8000770:	080007d9 	.word	0x080007d9
 8000774:	080007d9 	.word	0x080007d9
 8000778:	080007d9 	.word	0x080007d9
 800077c:	080007d9 	.word	0x080007d9
 8000780:	080007d9 	.word	0x080007d9
 8000784:	080007d9 	.word	0x080007d9
 8000788:	080007d9 	.word	0x080007d9
 800078c:	080007c9 	.word	0x080007c9
 8000790:	080007d9 	.word	0x080007d9
 8000794:	080007d9 	.word	0x080007d9
 8000798:	080007d9 	.word	0x080007d9
 800079c:	080007d9 	.word	0x080007d9
 80007a0:	080007d9 	.word	0x080007d9
 80007a4:	080007d9 	.word	0x080007d9
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	080007d1 	.word	0x080007d1
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <LIS3DSH_Init+0x184>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <LIS3DSH_Init+0x188>)
 80007b4:	601a      	str	r2, [r3, #0]
			break;
 80007b6:	e00f      	b.n	80007d8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <LIS3DSH_Init+0x184>)
 80007ba:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <LIS3DSH_Init+0x18c>)
 80007bc:	601a      	str	r2, [r3, #0]
			break;
 80007be:	e00b      	b.n	80007d8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <LIS3DSH_Init+0x184>)
 80007c2:	4a0e      	ldr	r2, [pc, #56]	@ (80007fc <LIS3DSH_Init+0x190>)
 80007c4:	601a      	str	r2, [r3, #0]
			break;
 80007c6:	e007      	b.n	80007d8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <LIS3DSH_Init+0x184>)
 80007ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000800 <LIS3DSH_Init+0x194>)
 80007cc:	601a      	str	r2, [r3, #0]
			break;
 80007ce:	e003      	b.n	80007d8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <LIS3DSH_Init+0x184>)
 80007d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <LIS3DSH_Init+0x198>)
 80007d4:	601a      	str	r2, [r3, #0]
			break;
 80007d6:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80007d8:	2201      	movs	r2, #1
 80007da:	2108      	movs	r1, #8
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <LIS3DSH_Init+0x19c>)
 80007de:	f002 fae5 	bl	8002dac <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b8 	.word	0x200000b8
 80007f0:	20000000 	.word	0x20000000
 80007f4:	3d75c28f 	.word	0x3d75c28f
 80007f8:	3df5c28f 	.word	0x3df5c28f
 80007fc:	3e3851ec 	.word	0x3e3851ec
 8000800:	3e75c28f 	.word	0x3e75c28f
 8000804:	3f3ae148 	.word	0x3f3ae148
 8000808:	40021000 	.word	0x40021000

0800080c <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2202      	movs	r2, #2
 800081a:	4619      	mov	r1, r3
 800081c:	2028      	movs	r0, #40	@ 0x28
 800081e:	f7ff fee1 	bl	80005e4 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8000822:	7d7b      	ldrb	r3, [r7, #21]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	7d3a      	ldrb	r2, [r7, #20]
 800082a:	4413      	add	r3, r2
 800082c:	b29b      	uxth	r3, r3
 800082e:	b21b      	sxth	r3, r3
 8000830:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2202      	movs	r2, #2
 8000838:	4619      	mov	r1, r3
 800083a:	202a      	movs	r0, #42	@ 0x2a
 800083c:	f7ff fed2 	bl	80005e4 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000840:	7d7b      	ldrb	r3, [r7, #21]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b29b      	uxth	r3, r3
 8000846:	7d3a      	ldrb	r2, [r7, #20]
 8000848:	4413      	add	r3, r2
 800084a:	b29b      	uxth	r3, r3
 800084c:	b21b      	sxth	r3, r3
 800084e:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2202      	movs	r2, #2
 8000856:	4619      	mov	r1, r3
 8000858:	202c      	movs	r0, #44	@ 0x2c
 800085a:	f7ff fec3 	bl	80005e4 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800085e:	7d7b      	ldrb	r3, [r7, #21]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	7d3a      	ldrb	r2, [r7, #20]
 8000866:	4413      	add	r3, r2
 8000868:	b29b      	uxth	r3, r3
 800086a:	b21b      	sxth	r3, r3
 800086c:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	461a      	mov	r2, r3
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	6010      	str	r0, [r2, #0]
 800087a:	889b      	ldrh	r3, [r3, #4]
 800087c:	8093      	strh	r3, [r2, #4]

}
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	@ 0x30
 800088c:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffba 	bl	800080c <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8000898:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <LIS3DSH_GetDataScaled+0xe4>)
 80008a6:	edd3 7a00 	vldr	s15, [r3]
 80008aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ae:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <LIS3DSH_GetDataScaled+0xe8>)
 80008b0:	edd3 7a00 	vldr	s15, [r3]
 80008b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000974 <LIS3DSH_GetDataScaled+0xec>
 80008bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80008c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <LIS3DSH_GetDataScaled+0xf0>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ca:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80008ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <LIS3DSH_GetDataScaled+0xe4>)
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008e4:	4b25      	ldr	r3, [pc, #148]	@ (800097c <LIS3DSH_GetDataScaled+0xf4>)
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ee:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000974 <LIS3DSH_GetDataScaled+0xec>
 80008f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80008f6:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <LIS3DSH_GetDataScaled+0xf8>)
 80008f8:	edd3 7a00 	vldr	s15, [r3]
 80008fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000900:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8000904:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000908:	ee07 3a90 	vmov	s15, r3
 800090c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <LIS3DSH_GetDataScaled+0xe4>)
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <LIS3DSH_GetDataScaled+0xfc>)
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000924:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000974 <LIS3DSH_GetDataScaled+0xec>
 8000928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <LIS3DSH_GetDataScaled+0x100>)
 800092e:	edd3 7a00 	vldr	s15, [r3]
 8000932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000936:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 800093a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093e:	f107 0210 	add.w	r2, r7, #16
 8000942:	ca07      	ldmia	r2, {r0, r1, r2}
 8000944:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800094a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094e:	ee06 1a90 	vmov	s13, r1
 8000952:	ee07 2a10 	vmov	s14, r2
 8000956:	ee07 3a90 	vmov	s15, r3
}
 800095a:	eeb0 0a66 	vmov.f32	s0, s13
 800095e:	eef0 0a47 	vmov.f32	s1, s14
 8000962:	eeb0 1a67 	vmov.f32	s2, s15
 8000966:	3730      	adds	r7, #48	@ 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000004 	.word	0x20000004
 8000974:	00000000 	.word	0x00000000
 8000978:	20000110 	.word	0x20000110
 800097c:	20000008 	.word	0x20000008
 8000980:	20000114 	.word	0x20000114
 8000984:	2000000c 	.word	0x2000000c
 8000988:	20000118 	.word	0x20000118

0800098c <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009a6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d013      	beq.n	80009da <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009b6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80009ba:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00b      	beq.n	80009da <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009c2:	e000      	b.n	80009c6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009c4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009c6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009da:	687b      	ldr	r3, [r7, #4]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f001 faf8 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f8c4 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f000 fb1a 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 80009f8:	f000 faf8 	bl	8000fec <MX_DMA_Init>
  MX_I2C1_Init();
 80009fc:	f000 f92a 	bl	8000c54 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a00:	f000 f956 	bl	8000cb0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a04:	f000 f9aa 	bl	8000d5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a08:	f000 fac6 	bl	8000f98 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000a0c:	f000 f980 	bl	8000d10 <MX_RTC_Init>
  MX_TIM3_Init();
 8000a10:	f000 fa28 	bl	8000e64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a14:	f000 fa72 	bl	8000efc <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a18:	f000 f9d6 	bl	8000dc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a1c:	4836      	ldr	r0, [pc, #216]	@ (8000af8 <main+0x110>)
 8000a1e:	f006 ff11 	bl	8007844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a22:	4836      	ldr	r0, [pc, #216]	@ (8000afc <main+0x114>)
 8000a24:	f006 ff0e 	bl	8007844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a28:	4835      	ldr	r0, [pc, #212]	@ (8000b00 <main+0x118>)
 8000a2a:	f006 ff0b 	bl	8007844 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_Buf, RXBUFF_SIZE);
 8000a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a32:	4934      	ldr	r1, [pc, #208]	@ (8000b04 <main+0x11c>)
 8000a34:	4834      	ldr	r0, [pc, #208]	@ (8000b08 <main+0x120>)
 8000a36:	f007 fb7b 	bl	8008130 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <main+0x124>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b32      	ldr	r3, [pc, #200]	@ (8000b0c <main+0x124>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0208 	bic.w	r2, r2, #8
 8000a48:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a4a:	f00c f8e7 	bl	800cc1c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LIS3DSH_DataScaled */
  LIS3DSH_DataScaledHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_DataScaled_attributes);
 8000a4e:	4a30      	ldr	r2, [pc, #192]	@ (8000b10 <main+0x128>)
 8000a50:	210c      	movs	r1, #12
 8000a52:	2003      	movs	r0, #3
 8000a54:	f00c faa8 	bl	800cfa8 <osMessageQueueNew>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <main+0x12c>)
 8000a5c:	6013      	str	r3, [r2, #0]

  /* creation of LIS3DSH_ProcessedData */
  LIS3DSH_ProcessedDataHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_ProcessedData_attributes);
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b18 <main+0x130>)
 8000a60:	210c      	movs	r1, #12
 8000a62:	2003      	movs	r0, #3
 8000a64:	f00c faa0 	bl	800cfa8 <osMessageQueueNew>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <main+0x134>)
 8000a6c:	6013      	str	r3, [r2, #0]

  /* creation of RTC_Data */
  RTC_DataHandle = osMessageQueueNew (3, sizeof(My_RTC_Data), &RTC_Data_attributes);
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b20 <main+0x138>)
 8000a70:	2118      	movs	r1, #24
 8000a72:	2003      	movs	r0, #3
 8000a74:	f00c fa98 	bl	800cfa8 <osMessageQueueNew>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b24 <main+0x13c>)
 8000a7c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myUserMsg */
  myUserMsgHandle = osThreadNew(MY_User_Message, NULL, &myUserMsg_attributes);
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b28 <main+0x140>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	482a      	ldr	r0, [pc, #168]	@ (8000b2c <main+0x144>)
 8000a84:	f00c f914 	bl	800ccb0 <osThreadNew>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a29      	ldr	r2, [pc, #164]	@ (8000b30 <main+0x148>)
 8000a8c:	6013      	str	r3, [r2, #0]

  /* creation of myRTCTime */
  myRTCTimeHandle = osThreadNew(MY_RTC_Time, NULL, &myRTCTime_attributes);
 8000a8e:	4a29      	ldr	r2, [pc, #164]	@ (8000b34 <main+0x14c>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4829      	ldr	r0, [pc, #164]	@ (8000b38 <main+0x150>)
 8000a94:	f00c f90c 	bl	800ccb0 <osThreadNew>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a28      	ldr	r2, [pc, #160]	@ (8000b3c <main+0x154>)
 8000a9c:	6013      	str	r3, [r2, #0]

  /* creation of myGetAccData */
  myGetAccDataHandle = osThreadNew(MY_Get_Acc_Data, NULL, &myGetAccData_attributes);
 8000a9e:	4a28      	ldr	r2, [pc, #160]	@ (8000b40 <main+0x158>)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4828      	ldr	r0, [pc, #160]	@ (8000b44 <main+0x15c>)
 8000aa4:	f00c f904 	bl	800ccb0 <osThreadNew>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a27      	ldr	r2, [pc, #156]	@ (8000b48 <main+0x160>)
 8000aac:	6013      	str	r3, [r2, #0]

  /* creation of myIntTask */
  myIntTaskHandle = osThreadNew(my_Int_Task, NULL, &myIntTask_attributes);
 8000aae:	4a27      	ldr	r2, [pc, #156]	@ (8000b4c <main+0x164>)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4827      	ldr	r0, [pc, #156]	@ (8000b50 <main+0x168>)
 8000ab4:	f00c f8fc 	bl	800ccb0 <osThreadNew>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <main+0x16c>)
 8000abc:	6013      	str	r3, [r2, #0]

  /* creation of myfreeRTOSManager */
  myfreeRTOSManagerHandle = osThreadNew(MY_freeRTOS_Task_Manager, NULL, &myfreeRTOSManager_attributes);
 8000abe:	4a26      	ldr	r2, [pc, #152]	@ (8000b58 <main+0x170>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4826      	ldr	r0, [pc, #152]	@ (8000b5c <main+0x174>)
 8000ac4:	f00c f8f4 	bl	800ccb0 <osThreadNew>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a25      	ldr	r2, [pc, #148]	@ (8000b60 <main+0x178>)
 8000acc:	6013      	str	r3, [r2, #0]

  /* creation of myProcessAccData */
  myProcessAccDataHandle = osThreadNew(MY_Process_AccData, NULL, &myProcessAccData_attributes);
 8000ace:	4a25      	ldr	r2, [pc, #148]	@ (8000b64 <main+0x17c>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4825      	ldr	r0, [pc, #148]	@ (8000b68 <main+0x180>)
 8000ad4:	f00c f8ec 	bl	800ccb0 <osThreadNew>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a24      	ldr	r2, [pc, #144]	@ (8000b6c <main+0x184>)
 8000adc:	6013      	str	r3, [r2, #0]

  /* creation of myProcessCMD */
  myProcessCMDHandle = osThreadNew(MY_Process_CMD, NULL, &myProcessCMD_attributes);
 8000ade:	4a24      	ldr	r2, [pc, #144]	@ (8000b70 <main+0x188>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4824      	ldr	r0, [pc, #144]	@ (8000b74 <main+0x18c>)
 8000ae4:	f00c f8e4 	bl	800ccb0 <osThreadNew>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <main+0x190>)
 8000aec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000aee:	f00c f8b9 	bl	800cc64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af2:	bf00      	nop
 8000af4:	e7fd      	b.n	8000af2 <main+0x10a>
 8000af6:	bf00      	nop
 8000af8:	20000230 	.word	0x20000230
 8000afc:	20000278 	.word	0x20000278
 8000b00:	200002c0 	.word	0x200002c0
 8000b04:	200056f8 	.word	0x200056f8
 8000b08:	20000308 	.word	0x20000308
 8000b0c:	20000350 	.word	0x20000350
 8000b10:	080121e0 	.word	0x080121e0
 8000b14:	200003cc 	.word	0x200003cc
 8000b18:	080121f8 	.word	0x080121f8
 8000b1c:	200003d0 	.word	0x200003d0
 8000b20:	08012210 	.word	0x08012210
 8000b24:	200003d4 	.word	0x200003d4
 8000b28:	080120e4 	.word	0x080120e4
 8000b2c:	080013bd 	.word	0x080013bd
 8000b30:	200003b0 	.word	0x200003b0
 8000b34:	08012108 	.word	0x08012108
 8000b38:	080013f9 	.word	0x080013f9
 8000b3c:	200003b4 	.word	0x200003b4
 8000b40:	0801212c 	.word	0x0801212c
 8000b44:	08001449 	.word	0x08001449
 8000b48:	200003b8 	.word	0x200003b8
 8000b4c:	08012150 	.word	0x08012150
 8000b50:	080014c9 	.word	0x080014c9
 8000b54:	200003bc 	.word	0x200003bc
 8000b58:	08012174 	.word	0x08012174
 8000b5c:	080014d9 	.word	0x080014d9
 8000b60:	200003c0 	.word	0x200003c0
 8000b64:	08012198 	.word	0x08012198
 8000b68:	08001511 	.word	0x08001511
 8000b6c:	200003c4 	.word	0x200003c4
 8000b70:	080121bc 	.word	0x080121bc
 8000b74:	080016f5 	.word	0x080016f5
 8000b78:	200003c8 	.word	0x200003c8

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	@ 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	2230      	movs	r2, #48	@ 0x30
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f010 fc4a 	bl	8011424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b29      	ldr	r3, [pc, #164]	@ (8000c4c <SystemClock_Config+0xd0>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	4a28      	ldr	r2, [pc, #160]	@ (8000c4c <SystemClock_Config+0xd0>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb0:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <SystemClock_Config+0xd0>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <SystemClock_Config+0xd4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	@ (8000c50 <SystemClock_Config+0xd4>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <SystemClock_Config+0xd4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bd8:	2309      	movs	r3, #9
 8000bda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bf4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 f81a 	bl	8005c40 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c12:	f000 fde3 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2105      	movs	r1, #5
 8000c34:	4618      	mov	r0, r3
 8000c36:	f005 fa7b 	bl	8006130 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c40:	f000 fdcc 	bl	80017dc <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	@ 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <MX_I2C1_Init+0x54>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <MX_I2C1_Init+0x58>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c92:	f004 f9f1 	bl	8005078 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 fd9e 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000011c 	.word	0x2000011c
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	000186a0 	.word	0x000186a0

08000cb0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cb6:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <MX_I2S3_Init+0x58>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cd4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d0c <MX_I2S3_Init+0x5c>)
 8000cda:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_I2S3_Init+0x54>)
 8000cf0:	f004 fb06 	bl	8005300 <HAL_I2S_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000cfa:	f000 fd6f 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000170 	.word	0x20000170
 8000d08:	40003c00 	.word	0x40003c00
 8000d0c:	00017700 	.word	0x00017700

08000d10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <MX_RTC_Init+0x48>)
 8000d18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d22:	227f      	movs	r2, #127	@ 0x7f
 8000d24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d28:	22ff      	movs	r2, #255	@ 0xff
 8000d2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_RTC_Init+0x44>)
 8000d40:	f005 fd8a 	bl	8006858 <HAL_RTC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d4a:	f000 fd47 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001b8 	.word	0x200001b8
 8000d58:	40002800 	.word	0x40002800

08000d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2228      	movs	r2, #40	@ 0x28
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f005 ff23 	bl	8006bf8 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 fd10 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001d8 	.word	0x200001d8
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000de6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000dee:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000dfc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e0e:	4814      	ldr	r0, [pc, #80]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000e10:	f006 fcc8 	bl	80077a4 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e1a:	f000 fcdf 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000e2c:	f006 fe6a 	bl	8007b04 <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e36:	f000 fcd1 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <MX_TIM2_Init+0x98>)
 8000e48:	f007 f892 	bl	8007f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e52:	f000 fcc3 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000230 	.word	0x20000230

08000e64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000e82:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef8 <MX_TIM3_Init+0x94>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000e88:	2254      	movs	r2, #84	@ 0x54
 8000e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000e94:	2264      	movs	r2, #100	@ 0x64
 8000e96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ea4:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000ea6:	f006 fc7d 	bl	80077a4 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000eb0:	f000 fc94 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000ec2:	f006 fe1f 	bl	8007b04 <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000ecc:	f000 fc86 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_TIM3_Init+0x90>)
 8000ede:	f007 f847 	bl	8007f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000ee8:	f000 fc78 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000278 	.word	0x20000278
 8000ef8:	40000400 	.word	0x40000400

08000efc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <MX_TIM4_Init+0x98>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f20:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000f24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000f32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f40:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f42:	f006 fc2f 	bl	80077a4 <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f4c:	f000 fc46 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f5e:	f006 fdd1 	bl	8007b04 <HAL_TIM_ConfigClockSource>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f68:	f000 fc38 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_TIM4_Init+0x94>)
 8000f7a:	f006 fff9 	bl	8007f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f84:	f000 fc2a 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200002c0 	.word	0x200002c0
 8000f94:	40000800 	.word	0x40000800

08000f98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <MX_USART2_UART_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	f007 f85e 	bl	8008090 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f000 fbff 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000308 	.word	0x20000308
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_DMA_Init+0x3c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <MX_DMA_Init+0x3c>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_DMA_Init+0x3c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2010      	movs	r0, #16
 8001014:	f001 f902 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001018:	2010      	movs	r0, #16
 800101a:	f001 f91b 	bl	8002254 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	@ 0x30
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	4b76      	ldr	r3, [pc, #472]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a75      	ldr	r2, [pc, #468]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b73      	ldr	r3, [pc, #460]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4b6f      	ldr	r3, [pc, #444]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a6e      	ldr	r2, [pc, #440]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b68      	ldr	r3, [pc, #416]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a67      	ldr	r2, [pc, #412]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b65      	ldr	r3, [pc, #404]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b61      	ldr	r3, [pc, #388]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a60      	ldr	r2, [pc, #384]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a59      	ldr	r2, [pc, #356]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b53      	ldr	r3, [pc, #332]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a52      	ldr	r2, [pc, #328]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <MX_GPIO_Init+0x1f4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2108      	movs	r1, #8
 80010ee:	484d      	ldr	r0, [pc, #308]	@ (8001224 <MX_GPIO_Init+0x1f8>)
 80010f0:	f001 fe5c 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2101      	movs	r1, #1
 80010f8:	484b      	ldr	r0, [pc, #300]	@ (8001228 <MX_GPIO_Init+0x1fc>)
 80010fa:	f001 fe57 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010fe:	2200      	movs	r2, #0
 8001100:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001104:	4849      	ldr	r0, [pc, #292]	@ (800122c <MX_GPIO_Init+0x200>)
 8001106:	f001 fe51 	bl	8002dac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800110a:	2308      	movs	r3, #8
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4840      	ldr	r0, [pc, #256]	@ (8001224 <MX_GPIO_Init+0x1f8>)
 8001122:	f001 fca7 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	483a      	ldr	r0, [pc, #232]	@ (8001228 <MX_GPIO_Init+0x1fc>)
 800113e:	f001 fc99 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001142:	2308      	movs	r3, #8
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001152:	2305      	movs	r3, #5
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4832      	ldr	r0, [pc, #200]	@ (8001228 <MX_GPIO_Init+0x1fc>)
 800115e:	f001 fc89 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001162:	2304      	movs	r3, #4
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	482e      	ldr	r0, [pc, #184]	@ (8001230 <MX_GPIO_Init+0x204>)
 8001176:	f001 fc7d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800117a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118c:	2305      	movs	r3, #5
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4826      	ldr	r0, [pc, #152]	@ (8001230 <MX_GPIO_Init+0x204>)
 8001198:	f001 fc6c 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800119c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80011a0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	481d      	ldr	r0, [pc, #116]	@ (800122c <MX_GPIO_Init+0x200>)
 80011b6:	f001 fc5d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011ba:	2320      	movs	r3, #32
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4817      	ldr	r0, [pc, #92]	@ (800122c <MX_GPIO_Init+0x200>)
 80011ce:	f001 fc51 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	480f      	ldr	r0, [pc, #60]	@ (8001224 <MX_GPIO_Init+0x1f8>)
 80011e8:	f001 fc44 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4808      	ldr	r0, [pc, #32]	@ (8001224 <MX_GPIO_Init+0x1f8>)
 8001202:	f001 fc37 	bl	8002a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2105      	movs	r1, #5
 800120a:	2006      	movs	r0, #6
 800120c:	f001 f806 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001210:	2006      	movs	r0, #6
 8001212:	f001 f81f 	bl	8002254 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	@ 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40021000 	.word	0x40021000
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
//	if(GPIO_Pin == B1_Pin){
//		BaseType_t checkifYieldRequired = xTaskResumeFromISR(myIntTaskHandle);
//		portYIELD_FROM_ISR(checkifYieldRequired);
//	}
	if(GPIO_Pin == MEMS_INT1_Pin){
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10a      	bne.n	800125a <HAL_GPIO_EXTI_Callback+0x26>
		osThreadFlagsSet(myGetAccDataHandle, 0x0001);
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HAL_GPIO_EXTI_Callback+0x30>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f00b fdc2 	bl	800cdd4 <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001250:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <HAL_GPIO_EXTI_Callback+0x34>)
 8001256:	f001 fdc2 	bl	8002dde <HAL_GPIO_TogglePin>
	}
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200003b8 	.word	0x200003b8
 8001268:	40020c00 	.word	0x40020c00

0800126c <__io_putchar>:

int __io_putchar(int ch) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fb8f 	bl	800099a <ITM_SendChar>
    return ch;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_UARTEx_RxEventCallback>:
//        ITM_SendChar(*ptr++);
//
//    return len;
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a3f      	ldr	r2, [pc, #252]	@ (8001398 <HAL_UARTEx_RxEventCallback+0x110>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d14d      	bne.n	800133a <HAL_UARTEx_RxEventCallback+0xb2>
		oldPos = newPos;  // Update the last position before copying new data
 800129e:	4b3f      	ldr	r3, [pc, #252]	@ (800139c <HAL_UARTEx_RxEventCallback+0x114>)
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012a4:	801a      	strh	r2, [r3, #0]
		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
	// If the current position + new data size is greater than the main buffer
		if (oldPos+Size > MAINBUFF_SIZE){
 80012a6:	4b3e      	ldr	r3, [pc, #248]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4413      	add	r3, r2
 80012b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012b4:	dd22      	ble.n	80012fc <HAL_UARTEx_RxEventCallback+0x74>
			uint16_t datatocopy = MAINBUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 80012b6:	4b3a      	ldr	r3, [pc, #232]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012be:	817b      	strh	r3, [r7, #10]
			memcpy ((uint8_t *)Main_Buf+oldPos, Rx_Buf, datatocopy);  // copy data in that remaining space
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_UARTEx_RxEventCallback+0x11c>)
 80012c8:	4413      	add	r3, r2
 80012ca:	897a      	ldrh	r2, [r7, #10]
 80012cc:	4936      	ldr	r1, [pc, #216]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f010 f991 	bl	80115f6 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80012d4:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)Main_Buf, (uint8_t *)Rx_Buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 80012de:	1899      	adds	r1, r3, r2
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	897b      	ldrh	r3, [r7, #10]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	482e      	ldr	r0, [pc, #184]	@ (80013a4 <HAL_UARTEx_RxEventCallback+0x11c>)
 80012ea:	f010 f984 	bl	80115f6 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	897b      	ldrh	r3, [r7, #10]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b29      	ldr	r3, [pc, #164]	@ (800139c <HAL_UARTEx_RxEventCallback+0x114>)
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	e010      	b.n	800131e <HAL_UARTEx_RxEventCallback+0x96>
		} else {
			/* if the current position + new data size is less than the main buffer
			 * we will simply copy the data into the buffer and update the position
			 */
			memcpy ((uint8_t *)Main_Buf+oldPos, Rx_Buf, Size);
 80012fc:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001304:	4413      	add	r3, r2
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	4927      	ldr	r1, [pc, #156]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 800130a:	4618      	mov	r0, r3
 800130c:	f010 f973 	bl	80115f6 <memcpy>
			newPos = Size+oldPos;
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x118>)
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4413      	add	r3, r2
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <HAL_UARTEx_RxEventCallback+0x114>)
 800131c:	801a      	strh	r2, [r3, #0]
		}


		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) Rx_Buf, RXBUFF_SIZE);
 800131e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001322:	4921      	ldr	r1, [pc, #132]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001324:	4821      	ldr	r0, [pc, #132]	@ (80013ac <HAL_UARTEx_RxEventCallback+0x124>)
 8001326:	f006 ff03 	bl	8008130 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_UARTEx_RxEventCallback+0x128>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <HAL_UARTEx_RxEventCallback+0x128>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0208 	bic.w	r2, r2, #8
 8001338:	601a      	str	r2, [r3, #0]
	}
	// check for *OK to indicate the end of the command
	for (int i = 0; i < Size; i++){
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e022      	b.n	8001386 <HAL_UARTEx_RxEventCallback+0xfe>
		if((Rx_Buf[i] == '*') && (Rx_Buf[i + 1] == 'O') && (Rx_Buf[i + 2] == 'K')){
 8001340:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b2a      	cmp	r3, #42	@ 0x2a
 800134a:	d119      	bne.n	8001380 <HAL_UARTEx_RxEventCallback+0xf8>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	2b4f      	cmp	r3, #79	@ 0x4f
 8001356:	d113      	bne.n	8001380 <HAL_UARTEx_RxEventCallback+0xf8>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3302      	adds	r3, #2
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x120>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	2b4b      	cmp	r3, #75	@ 0x4b
 8001362:	d10d      	bne.n	8001380 <HAL_UARTEx_RxEventCallback+0xf8>
			newPos = 0;
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <HAL_UARTEx_RxEventCallback+0x114>)
 8001366:	2200      	movs	r2, #0
 8001368:	801a      	strh	r2, [r3, #0]
			osThreadFlagsSet(myProcessCMDHandle, 0x0001);
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_UARTEx_RxEventCallback+0x12c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2101      	movs	r1, #1
 8001370:	4618      	mov	r0, r3
 8001372:	f00b fd2f 	bl	800cdd4 <osThreadFlagsSet>
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001376:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800137a:	480f      	ldr	r0, [pc, #60]	@ (80013b8 <HAL_UARTEx_RxEventCallback+0x130>)
 800137c:	f001 fd2f 	bl	8002dde <HAL_GPIO_TogglePin>
	for (int i = 0; i < Size; i++){
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbd8      	blt.n	8001340 <HAL_UARTEx_RxEventCallback+0xb8>
		}
	}

}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40004400 	.word	0x40004400
 800139c:	200060fa 	.word	0x200060fa
 80013a0:	200060f8 	.word	0x200060f8
 80013a4:	200058f8 	.word	0x200058f8
 80013a8:	200056f8 	.word	0x200056f8
 80013ac:	20000308 	.word	0x20000308
 80013b0:	20000350 	.word	0x20000350
 80013b4:	200003c8 	.word	0x200003c8
 80013b8:	40020c00 	.word	0x40020c00

080013bc <MY_User_Message>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MY_User_Message */
void MY_User_Message(void *argument)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	@ 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80013c4:	f00f fa54 	bl	8010870 <MX_USB_HOST_Init>
  LIS3DSH_DataScaled myLIS3DSH;
  My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MY_User_Message+0x34>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d4:	2200      	movs	r2, #0
 80013d6:	f00b febb 	bl	800d150 <osMessageQueueGet>
	osMessageQueueGet(RTC_DataHandle, &RTC_data, NULL, osWaitForever);
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MY_User_Message+0x38>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f107 010c 	add.w	r1, r7, #12
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e6:	2200      	movs	r2, #0
 80013e8:	f00b feb2 	bl	800d150 <osMessageQueueGet>
    osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 80013ec:	bf00      	nop
 80013ee:	e7eb      	b.n	80013c8 <MY_User_Message+0xc>
 80013f0:	200003d0 	.word	0x200003d0
 80013f4:	200003d4 	.word	0x200003d4

080013f8 <MY_RTC_Time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_RTC_Time */
void MY_RTC_Time(void *argument)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_RTC_Time */
  My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001404:	2101      	movs	r1, #1
 8001406:	2001      	movs	r0, #1
 8001408:	f00b fd32 	bl	800ce70 <osThreadFlagsWait>
	HAL_RTC_GetTime(&hrtc, &RTC_data.sTime, RTC_FORMAT_BCD);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	3304      	adds	r3, #4
 8001412:	2201      	movs	r2, #1
 8001414:	4619      	mov	r1, r3
 8001416:	480a      	ldr	r0, [pc, #40]	@ (8001440 <MY_RTC_Time+0x48>)
 8001418:	f005 faa1 	bl	800695e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_data.sDate, RTC_FORMAT_BCD);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	4806      	ldr	r0, [pc, #24]	@ (8001440 <MY_RTC_Time+0x48>)
 8001426:	f005 faf8 	bl	8006a1a <HAL_RTC_GetDate>
	osMessageQueuePut(RTC_DataHandle, &RTC_data, 10, 1);
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MY_RTC_Time+0x4c>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f107 0108 	add.w	r1, r7, #8
 8001432:	2301      	movs	r3, #1
 8001434:	220a      	movs	r2, #10
 8001436:	f00b fe2b 	bl	800d090 <osMessageQueuePut>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 800143a:	bf00      	nop
 800143c:	e7e0      	b.n	8001400 <MY_RTC_Time+0x8>
 800143e:	bf00      	nop
 8001440:	200001b8 	.word	0x200001b8
 8001444:	200003d4 	.word	0x200003d4

08001448 <MY_Get_Acc_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Get_Acc_Data */
void MY_Get_Acc_Data(void *argument)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Get_Acc_Data */
	LIS3DSH_InitTypeDef MY_LIS3DSH_Configuration;
	MY_LIS3DSH_Configuration.dataRate = LIS3DSH_DATARATE_1600;
 8001450:	2390      	movs	r3, #144	@ 0x90
 8001452:	763b      	strb	r3, [r7, #24]
	MY_LIS3DSH_Configuration.fullScale = LIS3DSH_FULLSCALE_4;
 8001454:	2308      	movs	r3, #8
 8001456:	767b      	strb	r3, [r7, #25]
	MY_LIS3DSH_Configuration.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001458:	23c0      	movs	r3, #192	@ 0xc0
 800145a:	76bb      	strb	r3, [r7, #26]
	MY_LIS3DSH_Configuration.enableAxes = LIS3DSH_XYZ_ENABLE;
 800145c:	2307      	movs	r3, #7
 800145e:	76fb      	strb	r3, [r7, #27]
	MY_LIS3DSH_Configuration.interruptEnable = true;
 8001460:	2301      	movs	r3, #1
 8001462:	773b      	strb	r3, [r7, #28]
	LIS3DSH_Init(&hspi1, &MY_LIS3DSH_Configuration);
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4619      	mov	r1, r3
 800146a:	4814      	ldr	r0, [pc, #80]	@ (80014bc <MY_Get_Acc_Data+0x74>)
 800146c:	f7ff f8fe 	bl	800066c <LIS3DSH_Init>
	LIS3DSH_DataScaled myLIS3DSH;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001474:	2101      	movs	r1, #1
 8001476:	2001      	movs	r0, #1
 8001478:	f00b fcfa 	bl	800ce70 <osThreadFlagsWait>
	  myLIS3DSH = LIS3DSH_GetDataScaled();
 800147c:	f7ff fa04 	bl	8000888 <LIS3DSH_GetDataScaled>
 8001480:	eef0 6a40 	vmov.f32	s13, s0
 8001484:	eeb0 7a60 	vmov.f32	s14, s1
 8001488:	eef0 7a41 	vmov.f32	s15, s2
 800148c:	edc7 6a03 	vstr	s13, [r7, #12]
 8001490:	ed87 7a04 	vstr	s14, [r7, #16]
 8001494:	edc7 7a05 	vstr	s15, [r7, #20]
	  g_myLIS3DSH = myLIS3DSH;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MY_Get_Acc_Data+0x78>)
 800149a:	461c      	mov	r4, r3
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osMessageQueuePut(LIS3DSH_DataScaledHandle, &myLIS3DSH, 10, 1);
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MY_Get_Acc_Data+0x7c>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 010c 	add.w	r1, r7, #12
 80014b0:	2301      	movs	r3, #1
 80014b2:	220a      	movs	r2, #10
 80014b4:	f00b fdec 	bl	800d090 <osMessageQueuePut>
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80014b8:	bf00      	nop
 80014ba:	e7d9      	b.n	8001470 <MY_Get_Acc_Data+0x28>
 80014bc:	200001d8 	.word	0x200001d8
 80014c0:	20000be0 	.word	0x20000be0
 80014c4:	200003cc 	.word	0x200003cc

080014c8 <my_Int_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_my_Int_Task */
void my_Int_Task(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN my_Int_Task */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f00c ff99 	bl	800e408 <vTaskSuspend>
 80014d6:	e7fb      	b.n	80014d0 <my_Int_Task+0x8>

080014d8 <MY_freeRTOS_Task_Manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_freeRTOS_Task_Manager */
void MY_freeRTOS_Task_Manager(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_freeRTOS_Task_Manager */
  /* Infinite loop */
  for(;;)
  {
	  task_manager.freemem = xPortGetFreeHeapSize();
 80014e0:	f00f f8fe 	bl	80106e0 <xPortGetFreeHeapSize>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MY_freeRTOS_Task_Manager+0x2c>)
 80014ea:	601a      	str	r2, [r3, #0]
	  vTaskList(task_manager.taskListBuffer);
 80014ec:	4806      	ldr	r0, [pc, #24]	@ (8001508 <MY_freeRTOS_Task_Manager+0x30>)
 80014ee:	f00d fea3 	bl	800f238 <vTaskList>
	  vTaskGetRunTimeStats(task_manager.taskTimingBuffer);
 80014f2:	4806      	ldr	r0, [pc, #24]	@ (800150c <MY_freeRTOS_Task_Manager+0x34>)
 80014f4:	f00d ff36 	bl	800f364 <vTaskGetRunTimeStats>
	  osDelay(1000);
 80014f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014fc:	f00b fd39 	bl	800cf72 <osDelay>
	  task_manager.freemem = xPortGetFreeHeapSize();
 8001500:	bf00      	nop
 8001502:	e7ed      	b.n	80014e0 <MY_freeRTOS_Task_Manager+0x8>
 8001504:	200003dc 	.word	0x200003dc
 8001508:	200003e0 	.word	0x200003e0
 800150c:	200007e0 	.word	0x200007e0

08001510 <MY_Process_AccData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_AccData */
void MY_Process_AccData(void *argument)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b08f      	sub	sp, #60	@ 0x3c
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Process_AccData */
	float avg[3] = {0};
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
	LIS3DSH_DataScaled myLIS3DSH;
	LIS3DSH_DataScaled myLIS3DSH_after_filter;
	uint16_t fill = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 8001528:	4b6d      	ldr	r3, [pc, #436]	@ (80016e0 <MY_Process_AccData+0x1d0>)
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	f107 0114 	add.w	r1, r7, #20
 8001530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001534:	2200      	movs	r2, #0
 8001536:	f00b fe0b 	bl	800d150 <osMessageQueueGet>
	if(fill < sampling_rate){
 800153a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800153c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001540:	d219      	bcs.n	8001576 <MY_Process_AccData+0x66>
		moving_avg[0][fill] = myLIS3DSH.x;
 8001542:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4967      	ldr	r1, [pc, #412]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	601a      	str	r2, [r3, #0]
		moving_avg[1][fill] = myLIS3DSH.y;
 800154e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4964      	ldr	r1, [pc, #400]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 8001554:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	601a      	str	r2, [r3, #0]
		moving_avg[2][fill] = myLIS3DSH.z;
 800155e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4960      	ldr	r1, [pc, #384]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 8001564:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
		fill++;
 800156e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001570:	3301      	adds	r3, #1
 8001572:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001574:	e7d8      	b.n	8001528 <MY_Process_AccData+0x18>
	} else {
		for(uint8_t i = 0; i < 3; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800157c:	e00d      	b.n	800159a <MY_Process_AccData+0x8a>
			avg[i] = 0;
 800157e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	3338      	adds	r3, #56	@ 0x38
 8001586:	443b      	add	r3, r7
 8001588:	3b18      	subs	r3, #24
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 3; i++)
 8001590:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001594:	3301      	adds	r3, #1
 8001596:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800159a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d9ed      	bls.n	800157e <MY_Process_AccData+0x6e>
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
 80015a2:	f240 633f 	movw	r3, #1599	@ 0x63f
 80015a6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80015a8:	e027      	b.n	80015fa <MY_Process_AccData+0xea>
			moving_avg[0][j] = moving_avg[0][j - 1];
 80015aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015b0:	494c      	ldr	r1, [pc, #304]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	440a      	add	r2, r1
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	494a      	ldr	r1, [pc, #296]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	601a      	str	r2, [r3, #0]
			moving_avg[1][j] = moving_avg[0][j - 1];
 80015c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015c6:	4947      	ldr	r1, [pc, #284]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	440a      	add	r2, r1
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4945      	ldr	r1, [pc, #276]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 80015d0:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	601a      	str	r2, [r3, #0]
			moving_avg[2][j] = moving_avg[0][j - 1];
 80015da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015e0:	4940      	ldr	r1, [pc, #256]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	440a      	add	r2, r1
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	493e      	ldr	r1, [pc, #248]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 80015ea:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	601a      	str	r2, [r3, #0]
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
 80015f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015f6:	3b01      	subs	r3, #1
 80015f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80015fa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1d4      	bne.n	80015aa <MY_Process_AccData+0x9a>
		}
		moving_avg[0][0] = myLIS3DSH.x;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	4a38      	ldr	r2, [pc, #224]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 8001604:	6013      	str	r3, [r2, #0]
		moving_avg[1][0] = myLIS3DSH.y;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 800160a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001612:	601a      	str	r2, [r3, #0]
		moving_avg[2][0] = myLIS3DSH.z;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4a33      	ldr	r2, [pc, #204]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 8001618:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800161c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
		for(uint8_t i = 0; i < 3; i++){
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001626:	e02d      	b.n	8001684 <MY_Process_AccData+0x174>
			for(uint16_t j = 0; j < sampling_rate; j++)
 8001628:	2300      	movs	r3, #0
 800162a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800162c:	e021      	b.n	8001672 <MY_Process_AccData+0x162>
				avg[i] += moving_avg[i][j];
 800162e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	3338      	adds	r3, #56	@ 0x38
 8001636:	443b      	add	r3, r7
 8001638:	3b18      	subs	r3, #24
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001642:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001644:	4927      	ldr	r1, [pc, #156]	@ (80016e4 <MY_Process_AccData+0x1d4>)
 8001646:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800164a:	fb00 f202 	mul.w	r2, r0, r2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	3338      	adds	r3, #56	@ 0x38
 8001664:	443b      	add	r3, r7
 8001666:	3b18      	subs	r3, #24
 8001668:	edc3 7a00 	vstr	s15, [r3]
			for(uint16_t j = 0; j < sampling_rate; j++)
 800166c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800166e:	3301      	adds	r3, #1
 8001670:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001672:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001674:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001678:	d3d9      	bcc.n	800162e <MY_Process_AccData+0x11e>
		for(uint8_t i = 0; i < 3; i++){
 800167a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800167e:	3301      	adds	r3, #1
 8001680:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001684:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001688:	2b02      	cmp	r3, #2
 800168a:	d9cd      	bls.n	8001628 <MY_Process_AccData+0x118>
		}
		myLIS3DSH_after_filter.x = avg[0] / sampling_rate;
 800168c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001690:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80016e8 <MY_Process_AccData+0x1d8>
 8001694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001698:	edc7 7a02 	vstr	s15, [r7, #8]
		myLIS3DSH_after_filter.y = avg[1] / sampling_rate;
 800169c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016a0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80016e8 <MY_Process_AccData+0x1d8>
 80016a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a8:	edc7 7a03 	vstr	s15, [r7, #12]
		myLIS3DSH_after_filter.z = avg[2] / sampling_rate;
 80016ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80016b0:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80016e8 <MY_Process_AccData+0x1d8>
 80016b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b8:	edc7 7a04 	vstr	s15, [r7, #16]
		sg_myLIS3DSH = myLIS3DSH_after_filter;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MY_Process_AccData+0x1dc>)
 80016be:	461c      	mov	r4, r3
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		osMessageQueuePut(LIS3DSH_ProcessedDataHandle, &myLIS3DSH_after_filter, 10, 1);
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <MY_Process_AccData+0x1e0>)
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	f107 0108 	add.w	r1, r7, #8
 80016d4:	2301      	movs	r3, #1
 80016d6:	220a      	movs	r2, #10
 80016d8:	f00b fcda 	bl	800d090 <osMessageQueuePut>
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 80016dc:	e724      	b.n	8001528 <MY_Process_AccData+0x18>
 80016de:	bf00      	nop
 80016e0:	200003cc 	.word	0x200003cc
 80016e4:	20000bf8 	.word	0x20000bf8
 80016e8:	44c80000 	.word	0x44c80000
 80016ec:	20000bec 	.word	0x20000bec
 80016f0:	200003d0 	.word	0x200003d0

080016f4 <MY_Process_CMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_CMD */
void MY_Process_CMD(void *argument)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Process_CMD */

  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001700:	2101      	movs	r1, #1
 8001702:	2001      	movs	r0, #1
 8001704:	f00b fbb4 	bl	800ce70 <osThreadFlagsWait>
	if(strcmp((char*) Main_Buf, "GET_RTC*OK") == 0){
 8001708:	4912      	ldr	r1, [pc, #72]	@ (8001754 <MY_Process_CMD+0x60>)
 800170a:	4813      	ldr	r0, [pc, #76]	@ (8001758 <MY_Process_CMD+0x64>)
 800170c:	f7fe fd60 	bl	80001d0 <strcmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <MY_Process_CMD+0x2a>
		printf("RTC TIME\n");
 8001716:	4811      	ldr	r0, [pc, #68]	@ (800175c <MY_Process_CMD+0x68>)
 8001718:	f00f fd84 	bl	8011224 <puts>
 800171c:	e7ee      	b.n	80016fc <MY_Process_CMD+0x8>
	} else if (strcmp((char*) Main_Buf, "GET_ACC*OK") == 0){
 800171e:	4910      	ldr	r1, [pc, #64]	@ (8001760 <MY_Process_CMD+0x6c>)
 8001720:	480d      	ldr	r0, [pc, #52]	@ (8001758 <MY_Process_CMD+0x64>)
 8001722:	f7fe fd55 	bl	80001d0 <strcmp>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <MY_Process_CMD+0x40>
		printf("ACC DATA\n");
 800172c:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MY_Process_CMD+0x70>)
 800172e:	f00f fd79 	bl	8011224 <puts>
 8001732:	e7e3      	b.n	80016fc <MY_Process_CMD+0x8>
	} else if (strcmp((char*) Main_Buf, "LOVE*OK") == 0){
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <MY_Process_CMD+0x74>)
 8001736:	4808      	ldr	r0, [pc, #32]	@ (8001758 <MY_Process_CMD+0x64>)
 8001738:	f7fe fd4a 	bl	80001d0 <strcmp>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <MY_Process_CMD+0x56>
		printf("LOVE YOU AS WELL\n");
 8001742:	480a      	ldr	r0, [pc, #40]	@ (800176c <MY_Process_CMD+0x78>)
 8001744:	f00f fd6e 	bl	8011224 <puts>
 8001748:	e7d8      	b.n	80016fc <MY_Process_CMD+0x8>
	} else {
		printf("COMMAND DOES NOT EXIST\n");
 800174a:	4809      	ldr	r0, [pc, #36]	@ (8001770 <MY_Process_CMD+0x7c>)
 800174c:	f00f fd6a 	bl	8011224 <puts>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001750:	e7d4      	b.n	80016fc <MY_Process_CMD+0x8>
 8001752:	bf00      	nop
 8001754:	08012030 	.word	0x08012030
 8001758:	200058f8 	.word	0x200058f8
 800175c:	0801203c 	.word	0x0801203c
 8001760:	08012048 	.word	0x08012048
 8001764:	08012054 	.word	0x08012054
 8001768:	08012060 	.word	0x08012060
 800176c:	08012068 	.word	0x08012068
 8001770:	0801207c 	.word	0x0801207c

08001774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d104      	bne.n	8001790 <HAL_TIM_PeriodElapsedCallback+0x1c>
		ulHighFrequencyTimerTicks++;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x58>)
 800178e:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM2){
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001798:	d10a      	bne.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		osThreadFlagsSet(myRTCTimeHandle, 0x0001);
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00b fb17 	bl	800cdd4 <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80017a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017aa:	480a      	ldr	r0, [pc, #40]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017ac:	f001 fb17 	bl	8002dde <HAL_GPIO_TogglePin>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 80017ba:	f000 fc33 	bl	8002024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40000400 	.word	0x40000400
 80017cc:	200003d8 	.word	0x200003d8
 80017d0:	200003b4 	.word	0x200003b4
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40001000 	.word	0x40001000

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <Error_Handler+0x8>

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_MspInit+0x54>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_MspInit+0x54>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_MspInit+0x54>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_MspInit+0x54>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <HAL_MspInit+0x54>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_MspInit+0x54>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	210f      	movs	r1, #15
 800182a:	f06f 0001 	mvn.w	r0, #1
 800182e:	f000 fcf5 	bl	800221c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <HAL_I2C_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <HAL_I2C_MspInit+0x88>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_I2C_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800187e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001890:	2304      	movs	r3, #4
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	@ (80018cc <HAL_I2C_MspInit+0x8c>)
 800189c:	f001 f8ea 	bl	8002a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_I2C_MspInit+0x88>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	4a07      	ldr	r2, [pc, #28]	@ (80018c8 <HAL_I2C_MspInit+0x88>)
 80018aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_I2C_MspInit+0x88>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a31      	ldr	r2, [pc, #196]	@ (80019c0 <HAL_I2S_MspInit+0xf0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d15a      	bne.n	80019b6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001904:	23c0      	movs	r3, #192	@ 0xc0
 8001906:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001908:	2302      	movs	r3, #2
 800190a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fe5f 	bl	80065d4 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800191c:	f7ff ff5e 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	4a26      	ldr	r2, [pc, #152]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 800192a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001930:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	4a1f      	ldr	r2, [pc, #124]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6313      	str	r3, [r2, #48]	@ 0x30
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6313      	str	r3, [r2, #48]	@ 0x30
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_I2S_MspInit+0xf4>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001974:	2310      	movs	r3, #16
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001984:	2306      	movs	r3, #6
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	480e      	ldr	r0, [pc, #56]	@ (80019c8 <HAL_I2S_MspInit+0xf8>)
 8001990:	f001 f870 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001994:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a6:	2306      	movs	r3, #6
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4806      	ldr	r0, [pc, #24]	@ (80019cc <HAL_I2S_MspInit+0xfc>)
 80019b2:	f001 f85f 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3738      	adds	r7, #56	@ 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40003c00 	.word	0x40003c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020800 	.word	0x40020800

080019d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_RTC_MspInit+0x4c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d111      	bne.n	8001a14 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019f0:	2302      	movs	r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fde8 	bl	80065d4 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a0a:	f7ff fee7 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a0e:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <HAL_RTC_MspInit+0x50>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40002800 	.word	0x40002800
 8001a20:	42470e3c 	.word	0x42470e3c

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <HAL_SPI_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12b      	bne.n	8001a9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	4a17      	ldr	r2, [pc, #92]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_SPI_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a7e:	23e0      	movs	r3, #224	@ 0xe0
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a9a:	f000 ffeb 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	@ 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40013000 	.word	0x40013000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac4:	d116      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a23      	ldr	r2, [pc, #140]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	201c      	movs	r0, #28
 8001ae8:	f000 fb98 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aec:	201c      	movs	r0, #28
 8001aee:	f000 fbb1 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001af2:	e02e      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_TIM_Base_MspInit+0xac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d116      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	201d      	movs	r0, #29
 8001b20:	f000 fb7c 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b24:	201d      	movs	r0, #29
 8001b26:	f000 fb95 	bl	8002254 <HAL_NVIC_EnableIRQ>
}
 8001b2a:	e012      	b.n	8001b52 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <HAL_TIM_Base_MspInit+0xb0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10d      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_TIM_Base_MspInit+0xa8>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	@ 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a34      	ldr	r2, [pc, #208]	@ (8001c58 <HAL_UART_MspInit+0xf0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d161      	bne.n	8001c4e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <HAL_UART_MspInit+0xf4>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a32      	ldr	r2, [pc, #200]	@ (8001c5c <HAL_UART_MspInit+0xf4>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <HAL_UART_MspInit+0xf4>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <HAL_UART_MspInit+0xf4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <HAL_UART_MspInit+0xf4>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_UART_MspInit+0xf4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4820      	ldr	r0, [pc, #128]	@ (8001c60 <HAL_UART_MspInit+0xf8>)
 8001bde:	f000 ff49 	bl	8002a74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001be2:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001be4:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <HAL_UART_MspInit+0x100>)
 8001be6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c22:	4810      	ldr	r0, [pc, #64]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c24:	f000 fb24 	bl	8002270 <HAL_DMA_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001c2e:	f7ff fdd5 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c38:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <HAL_UART_MspInit+0xfc>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2105      	movs	r1, #5
 8001c42:	2026      	movs	r0, #38	@ 0x26
 8001c44:	f000 faea 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c48:	2026      	movs	r0, #38	@ 0x26
 8001c4a:	f000 fb03 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	@ 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40004400 	.word	0x40004400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	20000350 	.word	0x20000350
 8001c68:	40026088 	.word	0x40026088

08001c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	@ 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <HAL_InitTick+0xe4>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <HAL_InitTick+0xe4>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8c:	4b30      	ldr	r3, [pc, #192]	@ (8001d50 <HAL_InitTick+0xe4>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c98:	f107 0210 	add.w	r2, r7, #16
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fc64 	bl	8006570 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cb2:	f004 fc35 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8001cb6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cb8:	e004      	b.n	8001cc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cba:	f004 fc31 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc6:	4a23      	ldr	r2, [pc, #140]	@ (8001d54 <HAL_InitTick+0xe8>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_InitTick+0xec>)
 8001cd4:	4a21      	ldr	r2, [pc, #132]	@ (8001d5c <HAL_InitTick+0xf0>)
 8001cd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <HAL_InitTick+0xec>)
 8001cda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d58 <HAL_InitTick+0xec>)
 8001ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_InitTick+0xec>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_InitTick+0xec>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_InitTick+0xec>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cf8:	4817      	ldr	r0, [pc, #92]	@ (8001d58 <HAL_InitTick+0xec>)
 8001cfa:	f005 fd53 	bl	80077a4 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11b      	bne.n	8001d44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d0c:	4812      	ldr	r0, [pc, #72]	@ (8001d58 <HAL_InitTick+0xec>)
 8001d0e:	f005 fd99 	bl	8007844 <HAL_TIM_Base_Start_IT>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d111      	bne.n	8001d44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d20:	2036      	movs	r0, #54	@ 0x36
 8001d22:	f000 fa97 	bl	8002254 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d808      	bhi.n	8001d3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	2036      	movs	r0, #54	@ 0x36
 8001d32:	f000 fa73 	bl	800221c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_InitTick+0xf4>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e002      	b.n	8001d44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3738      	adds	r7, #56	@ 0x38
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	200060fc 	.word	0x200060fc
 8001d5c:	40001000 	.word	0x40001000
 8001d60:	20000014 	.word	0x20000014

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MEMS_INT1_Pin);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f001 f838 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <DMA1_Stream5_IRQHandler+0x10>)
 8001dae:	f000 fbf7 	bl	80025a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000350 	.word	0x20000350

08001dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <TIM2_IRQHandler+0x10>)
 8001dc2:	f005 fdaf 	bl	8007924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000230 	.word	0x20000230

08001dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <TIM3_IRQHandler+0x10>)
 8001dd6:	f005 fda5 	bl	8007924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000278 	.word	0x20000278

08001de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <USART2_IRQHandler+0x10>)
 8001dea:	f006 f9ff 	bl	80081ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000308 	.word	0x20000308

08001df8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <TIM6_DAC_IRQHandler+0x10>)
 8001dfe:	f005 fd91 	bl	8007924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200060fc 	.word	0x200060fc

08001e0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <OTG_FS_IRQHandler+0x10>)
 8001e12:	f001 faf7 	bl	8003404 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000af70 	.word	0x2000af70

08001e20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e00a      	b.n	8001e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e32:	f3af 8000 	nop.w
 8001e36:	4601      	mov	r1, r0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	60ba      	str	r2, [r7, #8]
 8001e3e:	b2ca      	uxtb	r2, r1
 8001e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf0      	blt.n	8001e32 <_read+0x12>
  }

  return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e009      	b.n	8001e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60ba      	str	r2, [r7, #8]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f9f9 	bl	800126c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf1      	blt.n	8001e6c <_write+0x12>
  }
  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_close>:

int _close(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eba:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_isatty>:

int _isatty(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f00f fb2e 	bl	801158c <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20020000 	.word	0x20020000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	20006144 	.word	0x20006144
 8001f64:	2000b4a0 	.word	0x2000b4a0

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f90:	f7ff ffea 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	@ (8001fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	@ (8001fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f00f faed 	bl	8011598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7fe fd13 	bl	80009e8 <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001fd0:	0801228c 	.word	0x0801228c
  ldr r2, =_sbss
 8001fd4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001fd8:	2000b49c 	.word	0x2000b49c

08001fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <HAL_Init+0x40>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_Init+0x40>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	@ (8002020 <HAL_Init+0x40>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f8fc 	bl	8002206 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	200f      	movs	r0, #15
 8002010:	f7ff fe2c 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff fbe8 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000018 	.word	0x20000018
 8002048:	20006148 	.word	0x20006148

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20006148 	.word	0x20006148

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff ffee 	bl	800204c <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_Delay+0x44>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffde 	bl	800204c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000018 	.word	0x20000018

080020ac <__NVIC_SetPriorityGrouping>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	@ (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	@ (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff4c 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222e:	f7ff ff61 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002232:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7ff ffb1 	bl	80021a0 <NVIC_EncodePriority>
 800223e:	4602      	mov	r2, r0
 8002240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff80 	bl	800214c <__NVIC_SetPriority>
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff54 	bl	8002110 <__NVIC_EnableIRQ>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fee6 	bl	800204c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e099      	b.n	80023c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e00f      	b.n	80022ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff fecd 	bl	800204c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d908      	bls.n	80022ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e078      	b.n	80023c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_DMA_Init+0x158>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4313      	orrs	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0307 	bic.w	r3, r3, #7
 800234e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	2b04      	cmp	r3, #4
 8002360:	d117      	bne.n	8002392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb01 	bl	800297c <DMA_CheckFifoParam>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800238e:	2301      	movs	r3, #1
 8002390:	e016      	b.n	80023c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fab8 	bl	8002910 <DMA_CalcBaseAndBitshift>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	f010803f 	.word	0xf010803f

080023cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Start_IT+0x26>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e040      	b.n	8002474 <HAL_DMA_Start_IT+0xa8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12f      	bne.n	8002466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa4a 	bl	80028b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	223f      	movs	r2, #63	@ 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0216 	orr.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248a:	f7ff fddf 	bl	800204c <HAL_GetTick>
 800248e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2280      	movs	r2, #128	@ 0x80
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e052      	b.n	8002554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_DMA_Abort+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	e013      	b.n	8002528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002500:	f7ff fda4 	bl	800204c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d90c      	bls.n	8002528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e015      	b.n	8002554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e4      	bne.n	8002500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	223f      	movs	r2, #63	@ 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d004      	beq.n	800257a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00c      	b.n	8002594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ac:	4b8e      	ldr	r3, [pc, #568]	@ (80027e8 <HAL_DMA_IRQHandler+0x248>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a8e      	ldr	r2, [pc, #568]	@ (80027ec <HAL_DMA_IRQHandler+0x24c>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a9b      	lsrs	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2208      	movs	r2, #8
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01a      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	2208      	movs	r2, #8
 80025fa:	409a      	lsls	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	2201      	movs	r2, #1
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2204      	movs	r2, #4
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2204      	movs	r2, #4
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2210      	movs	r2, #16
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d043      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03c      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2210      	movs	r2, #16
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d024      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
 80026ce:	e01f      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e016      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2220      	movs	r2, #32
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808f 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8087 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	2220      	movs	r2, #32
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b05      	cmp	r3, #5
 8002748:	d136      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0216 	bic.w	r2, r2, #22
 8002758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <HAL_DMA_IRQHandler+0x1da>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0208 	bic.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	223f      	movs	r2, #63	@ 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d07e      	beq.n	80028ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
        }
        return;
 80027b6:	e079      	b.n	80028ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d031      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e02c      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
 80027e6:	bf00      	nop
 80027e8:	20000010 	.word	0x20000010
 80027ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e01e      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0210 	bic.w	r2, r2, #16
 800281e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	2b00      	cmp	r3, #0
 8002846:	d032      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d022      	beq.n	800289a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3301      	adds	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	d307      	bcc.n	8002888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f2      	bne.n	800286c <HAL_DMA_IRQHandler+0x2cc>
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80028ac:	bf00      	nop
    }
  }
}
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d108      	bne.n	80028f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028f2:	e007      	b.n	8002904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	3b10      	subs	r3, #16
 8002920:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <DMA_CalcBaseAndBitshift+0x64>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800292a:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <DMA_CalcBaseAndBitshift+0x68>)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d909      	bls.n	8002952 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002950:	e007      	b.n	8002962 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	aaaaaaab 	.word	0xaaaaaaab
 8002978:	08012240 	.word	0x08012240

0800297c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11f      	bne.n	80029d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d856      	bhi.n	8002a4a <DMA_CheckFifoParam+0xce>
 800299c:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <DMA_CheckFifoParam+0x28>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029c7 	.word	0x080029c7
 80029ac:	080029b5 	.word	0x080029b5
 80029b0:	08002a4b 	.word	0x08002a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d046      	beq.n	8002a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c4:	e043      	b.n	8002a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029ce:	d140      	bne.n	8002a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e03d      	b.n	8002a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029de:	d121      	bne.n	8002a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d837      	bhi.n	8002a56 <DMA_CheckFifoParam+0xda>
 80029e6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <DMA_CheckFifoParam+0x70>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a03 	.word	0x08002a03
 80029f4:	080029fd 	.word	0x080029fd
 80029f8:	08002a15 	.word	0x08002a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e030      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d025      	beq.n	8002a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a12:	e022      	b.n	8002a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a1c:	d11f      	bne.n	8002a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a22:	e01c      	b.n	8002a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d903      	bls.n	8002a32 <DMA_CheckFifoParam+0xb6>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d003      	beq.n	8002a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a30:	e018      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      break;
 8002a36:	e015      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00e      	beq.n	8002a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e00b      	b.n	8002a62 <DMA_CheckFifoParam+0xe6>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e00a      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e008      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e006      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e004      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
    }
  } 
  
  return status; 
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e16b      	b.n	8002d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 815a 	bne.w	8002d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80b4 	beq.w	8002d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b60      	ldr	r3, [pc, #384]	@ (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a5b      	ldr	r2, [pc, #364]	@ (8002d84 <HAL_GPIO_Init+0x310>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_GPIO_Init+0x314>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a51      	ldr	r2, [pc, #324]	@ (8002d8c <HAL_GPIO_Init+0x318>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	@ (8002d90 <HAL_GPIO_Init+0x31c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4f      	ldr	r2, [pc, #316]	@ (8002d94 <HAL_GPIO_Init+0x320>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x21a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d98 <HAL_GPIO_Init+0x324>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x216>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4d      	ldr	r2, [pc, #308]	@ (8002d9c <HAL_GPIO_Init+0x328>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x212>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002da0 <HAL_GPIO_Init+0x32c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4b      	ldr	r2, [pc, #300]	@ (8002da4 <HAL_GPIO_Init+0x330>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x20a>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00e      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	@ (8002d84 <HAL_GPIO_Init+0x310>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cba:	4b3b      	ldr	r3, [pc, #236]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cde:	4a32      	ldr	r2, [pc, #200]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce4:	4b30      	ldr	r3, [pc, #192]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d08:	4a27      	ldr	r2, [pc, #156]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d0e:	4b26      	ldr	r3, [pc, #152]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d32:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d5c:	4a12      	ldr	r2, [pc, #72]	@ (8002da8 <HAL_GPIO_Init+0x334>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae90 	bls.w	8002a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	@ 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800
 8002da4:	40021c00 	.word	0x40021c00
 8002da8:	40013c00 	.word	0x40013c00

08002dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
 8002db8:	4613      	mov	r3, r2
 8002dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dbc:	787b      	ldrb	r3, [r7, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc8:	e003      	b.n	8002dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	041a      	lsls	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002df0:	887a      	ldrh	r2, [r7, #2]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4013      	ands	r3, r2
 8002df6:	041a      	lsls	r2, r3, #16
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	400b      	ands	r3, r1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	619a      	str	r2, [r3, #24]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e1e:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e2a:	4a05      	ldr	r2, [pc, #20]	@ (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f9fe 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40013c00 	.word	0x40013c00

08002e44 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e059      	b.n	8002f0a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f00d fd51 	bl	8010918 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e84:	d102      	bne.n	8002e8c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f006 faac 	bl	80093ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7c1a      	ldrb	r2, [r3, #16]
 8002e9e:	f88d 2000 	strb.w	r2, [sp]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea6:	f006 fa2d 	bl	8009304 <USB_CoreInit>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e026      	b.n	8002f0a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 faa4 	bl	8009410 <USB_SetCurrentMode>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e017      	b.n	8002f0a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7c1a      	ldrb	r2, [r3, #16]
 8002ee2:	f88d 2000 	strb.w	r2, [sp]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eea:	f006 fc47 	bl	800977c <USB_HostInit>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e004      	b.n	8002f0a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002f12:	b590      	push	{r4, r7, lr}
 8002f14:	b08b      	sub	sp, #44	@ 0x2c
 8002f16:	af04      	add	r7, sp, #16
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	4608      	mov	r0, r1
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4603      	mov	r3, r0
 8002f22:	70fb      	strb	r3, [r7, #3]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70bb      	strb	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002f2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002f2e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_HCD_HC_Init+0x2c>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e09d      	b.n	800307a <HAL_HCD_HC_Init+0x168>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3319      	adds	r3, #25
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3314      	adds	r3, #20
 8002f6a:	787a      	ldrb	r2, [r7, #1]
 8002f6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3315      	adds	r3, #21
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3326      	adds	r3, #38	@ 0x26
 8002f92:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa0:	b2d8      	uxtb	r0, r3
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3316      	adds	r3, #22
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fbc7 	bl	800374c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002fbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da0a      	bge.n	8002fdc <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3317      	adds	r3, #23
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e009      	b.n	8002ff0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3317      	adds	r3, #23
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 fd25 	bl	8009a44 <USB_GetHostSpeed>
 8002ffa:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002ffc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10b      	bne.n	800301c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003004:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_HCD_HC_Init+0x10a>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d104      	bne.n	800301c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2bbc      	cmp	r3, #188	@ 0xbc
 8003016:	d901      	bls.n	800301c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003018:	23bc      	movs	r3, #188	@ 0xbc
 800301a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3318      	adds	r3, #24
 800302c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003030:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	b298      	uxth	r0, r3
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3328      	adds	r3, #40	@ 0x28
 8003046:	4602      	mov	r2, r0
 8003048:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	b29b      	uxth	r3, r3
 8003052:	787c      	ldrb	r4, [r7, #1]
 8003054:	78ba      	ldrb	r2, [r7, #2]
 8003056:	78f9      	ldrb	r1, [r7, #3]
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4623      	mov	r3, r4
 8003068:	f006 fd14 	bl	8009a94 <USB_HC_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_HCD_HC_Halt+0x1e>
 800309c:	2302      	movs	r3, #2
 800309e:	e00f      	b.n	80030c0 <HAL_HCD_HC_Halt+0x3e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f007 f8a6 	bl	800a202 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	70fb      	strb	r3, [r7, #3]
 80030da:	460b      	mov	r3, r1
 80030dc:	70bb      	strb	r3, [r7, #2]
 80030de:	4613      	mov	r3, r2
 80030e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3317      	adds	r3, #23
 80030f2:	78ba      	ldrb	r2, [r7, #2]
 80030f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3326      	adds	r3, #38	@ 0x26
 8003106:	787a      	ldrb	r2, [r7, #1]
 8003108:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800310a:	7c3b      	ldrb	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d114      	bne.n	800313a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	332a      	adds	r3, #42	@ 0x2a
 8003120:	2203      	movs	r2, #3
 8003122:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3319      	adds	r3, #25
 8003134:	7f3a      	ldrb	r2, [r7, #28]
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e009      	b.n	800314e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	332a      	adds	r3, #42	@ 0x2a
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800314e:	787b      	ldrb	r3, [r7, #1]
 8003150:	2b03      	cmp	r3, #3
 8003152:	f200 8102 	bhi.w	800335a <HAL_HCD_HC_SubmitRequest+0x292>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003345 	.word	0x08003345
 8003164:	08003231 	.word	0x08003231
 8003168:	080032bb 	.word	0x080032bb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800316c:	7c3b      	ldrb	r3, [r7, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	f040 80f5 	bne.w	800335e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003174:	78bb      	ldrb	r3, [r7, #2]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d12d      	bne.n	80031d6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800317a:	8b3b      	ldrh	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	333d      	adds	r3, #61	@ 0x3d
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	333d      	adds	r3, #61	@ 0x3d
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	332a      	adds	r3, #42	@ 0x2a
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80031be:	e0ce      	b.n	800335e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	332a      	adds	r3, #42	@ 0x2a
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]
      break;
 80031d4:	e0c3      	b.n	800335e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	331a      	adds	r3, #26
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f040 80b8 	bne.w	800335e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	333c      	adds	r3, #60	@ 0x3c
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	332a      	adds	r3, #42	@ 0x2a
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
      break;
 8003218:	e0a1      	b.n	800335e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	332a      	adds	r3, #42	@ 0x2a
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
      break;
 800322e:	e096      	b.n	800335e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003230:	78bb      	ldrb	r3, [r7, #2]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d120      	bne.n	8003278 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	333d      	adds	r3, #61	@ 0x3d
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	332a      	adds	r3, #42	@ 0x2a
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003260:	e07e      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	332a      	adds	r3, #42	@ 0x2a
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
      break;
 8003276:	e073      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	333c      	adds	r3, #60	@ 0x3c
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	332a      	adds	r3, #42	@ 0x2a
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
      break;
 80032a2:	e05d      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	332a      	adds	r3, #42	@ 0x2a
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
      break;
 80032b8:	e052      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80032ba:	78bb      	ldrb	r3, [r7, #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d120      	bne.n	8003302 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	333d      	adds	r3, #61	@ 0x3d
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	332a      	adds	r3, #42	@ 0x2a
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032ea:	e039      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	332a      	adds	r3, #42	@ 0x2a
 80032fc:	2202      	movs	r2, #2
 80032fe:	701a      	strb	r2, [r3, #0]
      break;
 8003300:	e02e      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	333c      	adds	r3, #60	@ 0x3c
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	332a      	adds	r3, #42	@ 0x2a
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
      break;
 800332c:	e018      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	332a      	adds	r3, #42	@ 0x2a
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
      break;
 8003342:	e00d      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	332a      	adds	r3, #42	@ 0x2a
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
      break;
 8003358:	e002      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800335e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	332c      	adds	r3, #44	@ 0x2c
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	8b39      	ldrh	r1, [r7, #24]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	3334      	adds	r3, #52	@ 0x34
 8003386:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	@ 0x4c
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3338      	adds	r3, #56	@ 0x38
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3315      	adds	r3, #21
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	334d      	adds	r3, #77	@ 0x4d
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3310      	adds	r3, #16
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f006 fc7a 	bl	8009cec <USB_HC_StartXfer>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop

08003404 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f006 f96e 	bl	80096fc <USB_GetMode>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	f040 80fb 	bne.w	800361e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f006 f931 	bl	8009694 <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80f1 	beq.w	800361c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f006 f928 	bl	8009694 <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800344e:	d104      	bne.n	800345a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003458:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f006 f918 	bl	8009694 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800346e:	d104      	bne.n	800347a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003478:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f006 f908 	bl	8009694 <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800348a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800348e:	d104      	bne.n	800349a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003498:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f006 f8f8 	bl	8009694 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2202      	movs	r2, #2
 80034b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f006 f8ea 	bl	8009694 <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ca:	d120      	bne.n	800350e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80034d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d113      	bne.n	800350e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034e6:	2110      	movs	r1, #16
 80034e8:	6938      	ldr	r0, [r7, #16]
 80034ea:	f005 ffdd 	bl	80094a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034ee:	6938      	ldr	r0, [r7, #16]
 80034f0:	f006 f80c 	bl	800950c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7a5b      	ldrb	r3, [r3, #9]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d105      	bne.n	8003508 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	4618      	mov	r0, r3
 8003504:	f006 f9fe 	bl	8009904 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f00d fa83 	bl	8010a14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f006 f8be 	bl	8009694 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003522:	d102      	bne.n	800352a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 fd33 	bl	8004f90 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f006 f8b0 	bl	8009694 <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d106      	bne.n	800354c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f00d fa4c 	bl	80109dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2208      	movs	r2, #8
 800354a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f006 f89f 	bl	8009694 <USB_ReadInterrupts>
 8003556:	4603      	mov	r3, r0
 8003558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003560:	d139      	bne.n	80035d6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f006 fe3a 	bl	800a1e0 <USB_HC_ReadInterrupt>
 800356c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e025      	b.n	80035c0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d018      	beq.n	80035ba <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359e:	d106      	bne.n	80035ae <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f905 	bl	80037b6 <HCD_HC_IN_IRQHandler>
 80035ac:	e005      	b.n	80035ba <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 ff67 	bl	8004488 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	795b      	ldrb	r3, [r3, #5]
 80035c4:	461a      	mov	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d3d3      	bcc.n	8003574 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f006 f85a 	bl	8009694 <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d101      	bne.n	80035ee <HAL_HCD_IRQHandler+0x1ea>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_HCD_IRQHandler+0x1ec>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d014      	beq.n	800361e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0210 	bic.w	r2, r2, #16
 8003602:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f001 fbe4 	bl	8004dd2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699a      	ldr	r2, [r3, #24]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0210 	orr.w	r2, r2, #16
 8003618:	619a      	str	r2, [r3, #24]
 800361a:	e000      	b.n	800361e <HAL_HCD_IRQHandler+0x21a>
      return;
 800361c:	bf00      	nop
    }
  }
}
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_HCD_Start+0x16>
 8003636:	2302      	movs	r3, #2
 8003638:	e013      	b.n	8003662 <HAL_HCD_Start+0x3e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f006 f9c2 	bl	80099d2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f005 feba 	bl	80093cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_HCD_Stop+0x16>
 800367c:	2302      	movs	r3, #2
 800367e:	e00d      	b.n	800369c <HAL_HCD_Stop+0x32>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f006 ff15 	bl	800a4bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 f964 	bl	800997e <USB_ResetPort>
 80036b6:	4603      	mov	r3, r0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334c      	adds	r3, #76	@ 0x4c
 80036dc:	781b      	ldrb	r3, [r3, #0]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3338      	adds	r3, #56	@ 0x38
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f006 f9a6 	bl	8009a72 <USB_GetCurrentFrame>
 8003726:	4603      	mov	r3, r0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f006 f981 	bl	8009a44 <USB_GetHostSpeed>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	331a      	adds	r3, #26
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	331b      	adds	r3, #27
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	3325      	adds	r3, #37	@ 0x25
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	3324      	adds	r3, #36	@ 0x24
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b086      	sub	sp, #24
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f005 ff70 	bl	80096ba <USB_ReadChInterrupts>
 80037da:	4603      	mov	r3, r0
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11a      	bne.n	800381a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f0:	461a      	mov	r2, r3
 80037f2:	2304      	movs	r3, #4
 80037f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334d      	adds	r3, #77	@ 0x4d
 8003806:	2207      	movs	r2, #7
 8003808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f006 fcf5 	bl	800a202 <USB_HC_Halt>
 8003818:	e09e      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f005 ff49 	bl	80096ba <USB_ReadChInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003832:	d11b      	bne.n	800386c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003840:	461a      	mov	r2, r3
 8003842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003846:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	334d      	adds	r3, #77	@ 0x4d
 8003858:	2208      	movs	r2, #8
 800385a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f006 fccc 	bl	800a202 <USB_HC_Halt>
 800386a:	e075      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f005 ff20 	bl	80096ba <USB_ReadChInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b08      	cmp	r3, #8
 8003882:	d11a      	bne.n	80038ba <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	2308      	movs	r3, #8
 8003894:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334d      	adds	r3, #77	@ 0x4d
 80038a6:	2206      	movs	r2, #6
 80038a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f006 fca5 	bl	800a202 <USB_HC_Halt>
 80038b8:	e04e      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f005 fef9 	bl	80096ba <USB_ReadChInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d2:	d11b      	bne.n	800390c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	334d      	adds	r3, #77	@ 0x4d
 80038f8:	2209      	movs	r2, #9
 80038fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f006 fc7c 	bl	800a202 <USB_HC_Halt>
 800390a:	e025      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f005 fed0 	bl	80096ba <USB_ReadChInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003920:	2b80      	cmp	r3, #128	@ 0x80
 8003922:	d119      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	334d      	adds	r3, #77	@ 0x4d
 8003946:	2207      	movs	r2, #7
 8003948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f006 fc55 	bl	800a202 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f005 feaa 	bl	80096ba <USB_ReadChInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800396c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003970:	d112      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f006 fc41 	bl	800a202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398c:	461a      	mov	r2, r3
 800398e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	f000 bd75 	b.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f005 fe8a 	bl	80096ba <USB_ReadChInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	f040 8128 	bne.w	8003c02 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039be:	461a      	mov	r2, r3
 80039c0:	2320      	movs	r3, #32
 80039c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	331b      	adds	r3, #27
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d119      	bne.n	8003a0e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	331b      	adds	r3, #27
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	799b      	ldrb	r3, [r3, #6]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01b      	beq.n	8003a4e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3330      	adds	r3, #48	@ 0x30
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	1ac9      	subs	r1, r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4403      	add	r3, r0
 8003a4a:	3338      	adds	r3, #56	@ 0x38
 8003a4c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	@ 0x4d
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3344      	adds	r3, #68	@ 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a82:	461a      	mov	r2, r3
 8003a84:	2301      	movs	r3, #1
 8003a86:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3326      	adds	r3, #38	@ 0x26
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3326      	adds	r3, #38	@ 0x26
 8003aae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d110      	bne.n	8003ad6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f006 fba0 	bl	800a202 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	6093      	str	r3, [r2, #8]
 8003ad4:	e03d      	b.n	8003b52 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3326      	adds	r3, #38	@ 0x26
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d00a      	beq.n	8003b02 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3326      	adds	r3, #38	@ 0x26
 8003afc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d127      	bne.n	8003b52 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b20:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	334c      	adds	r3, #76	@ 0x4c
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334c      	adds	r3, #76	@ 0x4c
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f00c ff6f 	bl	8010a30 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	799b      	ldrb	r3, [r3, #6]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d13b      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3338      	adds	r3, #56	@ 0x38
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4403      	add	r3, r0
 8003b7a:	3328      	adds	r3, #40	@ 0x28
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	440b      	add	r3, r1
 8003b80:	1e59      	subs	r1, r3, #1
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4403      	add	r3, r0
 8003b90:	3328      	adds	r3, #40	@ 0x28
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8470 	beq.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	333c      	adds	r3, #60	@ 0x3c
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	f083 0301 	eor.w	r3, r3, #1
 8003bba:	b2d8      	uxtb	r0, r3
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	333c      	adds	r3, #60	@ 0x3c
 8003bca:	4602      	mov	r2, r0
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	f000 bc58 	b.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	333c      	adds	r3, #60	@ 0x3c
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2d8      	uxtb	r0, r3
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	333c      	adds	r3, #60	@ 0x3c
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	f000 bc40 	b.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f005 fd55 	bl	80096ba <USB_ReadChInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d131      	bne.n	8003c7e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	2320      	movs	r3, #32
 8003c2a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	331a      	adds	r3, #26
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 841f 	bne.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	331b      	adds	r3, #27
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	334d      	adds	r3, #77	@ 0x4d
 8003c68:	2203      	movs	r2, #3
 8003c6a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f006 fac4 	bl	800a202 <USB_HC_Halt>
 8003c7a:	f000 bc02 	b.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 fd17 	bl	80096ba <USB_ReadChInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	f040 8305 	bne.w	80042a2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	334d      	adds	r3, #77	@ 0x4d
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d114      	bne.n	8003cea <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	334d      	adds	r3, #77	@ 0x4d
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	334c      	adds	r3, #76	@ 0x4c
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e2cc      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	334d      	adds	r3, #77	@ 0x4d
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d114      	bne.n	8003d2a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	334d      	adds	r3, #77	@ 0x4d
 8003d10:	2202      	movs	r2, #2
 8003d12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334c      	adds	r3, #76	@ 0x4c
 8003d24:	2205      	movs	r2, #5
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e2ac      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	334d      	adds	r3, #77	@ 0x4d
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d00b      	beq.n	8003d58 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	f040 80a6 	bne.w	8003ea4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	334d      	adds	r3, #77	@ 0x4d
 8003d68:	2202      	movs	r2, #2
 8003d6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	3344      	adds	r3, #68	@ 0x44
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c59      	adds	r1, r3, #1
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4403      	add	r3, r0
 8003d8c:	3344      	adds	r3, #68	@ 0x44
 8003d8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3344      	adds	r3, #68	@ 0x44
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d943      	bls.n	8003e2e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3344      	adds	r3, #68	@ 0x44
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	331a      	adds	r3, #26
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d123      	bne.n	8003e18 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	331b      	adds	r3, #27
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	331c      	adds	r3, #28
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e16:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	334c      	adds	r3, #76	@ 0x4c
 8003e28:	2204      	movs	r2, #4
 8003e2a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e2c:	e229      	b.n	8004282 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	334c      	adds	r3, #76	@ 0x4c
 8003e3e:	2202      	movs	r2, #2
 8003e40:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3326      	adds	r3, #38	@ 0x26
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3326      	adds	r3, #38	@ 0x26
 8003e68:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	f040 8209 	bne.w	8004282 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e86:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e8e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ea2:	e1ee      	b.n	8004282 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	334d      	adds	r3, #77	@ 0x4d
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	f040 80c8 	bne.w	800404c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	334d      	adds	r3, #77	@ 0x4d
 8003ecc:	2202      	movs	r2, #2
 8003ece:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	331b      	adds	r3, #27
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	f040 81ce 	bne.w	8004284 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3326      	adds	r3, #38	@ 0x26
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d16b      	bne.n	8003fd6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3348      	adds	r3, #72	@ 0x48
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4403      	add	r3, r0
 8003f1e:	3348      	adds	r3, #72	@ 0x48
 8003f20:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3348      	adds	r3, #72	@ 0x48
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d943      	bls.n	8003fc0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3348      	adds	r3, #72	@ 0x48
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	331b      	adds	r3, #27
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3344      	adds	r3, #68	@ 0x44
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d809      	bhi.n	8003f8a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	331c      	adds	r3, #28
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334c      	adds	r3, #76	@ 0x4c
 8003fba:	2204      	movs	r2, #4
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e014      	b.n	8003fea <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	334c      	adds	r3, #76	@ 0x4c
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e009      	b.n	8003fea <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	334c      	adds	r3, #76	@ 0x4c
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3326      	adds	r3, #38	@ 0x26
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3326      	adds	r3, #38	@ 0x26
 8004010:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004012:	2b02      	cmp	r3, #2
 8004014:	f040 8136 	bne.w	8004284 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800402e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004036:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004044:	461a      	mov	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e11b      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	334d      	adds	r3, #77	@ 0x4d
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b03      	cmp	r3, #3
 8004060:	f040 8081 	bne.w	8004166 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	334d      	adds	r3, #77	@ 0x4d
 8004074:	2202      	movs	r2, #2
 8004076:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	331b      	adds	r3, #27
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	f040 80fa 	bne.w	8004284 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	334c      	adds	r3, #76	@ 0x4c
 80040a0:	2202      	movs	r2, #2
 80040a2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	78fa      	ldrb	r2, [r7, #3]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040fe:	f023 0320 	bic.w	r3, r3, #32
 8004102:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3326      	adds	r3, #38	@ 0x26
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3326      	adds	r3, #38	@ 0x26
 800412a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800412c:	2b02      	cmp	r3, #2
 800412e:	f040 80a9 	bne.w	8004284 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004148:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004150:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e08e      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	334d      	adds	r3, #77	@ 0x4d
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d143      	bne.n	8004204 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	334d      	adds	r3, #77	@ 0x4d
 800418c:	2202      	movs	r2, #2
 800418e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	334c      	adds	r3, #76	@ 0x4c
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3326      	adds	r3, #38	@ 0x26
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	3326      	adds	r3, #38	@ 0x26
 80041ca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d159      	bne.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041fc:	461a      	mov	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e03f      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334d      	adds	r3, #77	@ 0x4d
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b08      	cmp	r3, #8
 8004218:	d126      	bne.n	8004268 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	334d      	adds	r3, #77	@ 0x4d
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3344      	adds	r3, #68	@ 0x44
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	1c59      	adds	r1, r3, #1
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4403      	add	r3, r0
 800424e:	3344      	adds	r3, #68	@ 0x44
 8004250:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	334c      	adds	r3, #76	@ 0x4c
 8004262:	2204      	movs	r2, #4
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e00d      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	334d      	adds	r3, #77	@ 0x4d
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	f000 8100 	beq.w	8004480 <HCD_HC_IN_IRQHandler+0xcca>
 8004280:	e000      	b.n	8004284 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004282:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	334c      	adds	r3, #76	@ 0x4c
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f00c fbc8 	bl	8010a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042a0:	e0ef      	b.n	8004482 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f005 fa05 	bl	80096ba <USB_ReadChInterrupts>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d12f      	bne.n	800431a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2340      	movs	r3, #64	@ 0x40
 80042ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	334d      	adds	r3, #77	@ 0x4d
 80042dc:	2205      	movs	r2, #5
 80042de:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	331a      	adds	r3, #26
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3344      	adds	r3, #68	@ 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f005 ff75 	bl	800a202 <USB_HC_Halt>
 8004318:	e0b3      	b.n	8004482 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f005 f9c9 	bl	80096ba <USB_ReadChInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b10      	cmp	r3, #16
 8004330:	f040 80a7 	bne.w	8004482 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3326      	adds	r3, #38	@ 0x26
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d11b      	bne.n	8004382 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3344      	adds	r3, #68	@ 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	334d      	adds	r3, #77	@ 0x4d
 800436e:	2204      	movs	r2, #4
 8004370:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f005 ff41 	bl	800a202 <USB_HC_Halt>
 8004380:	e03f      	b.n	8004402 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3326      	adds	r3, #38	@ 0x26
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3326      	adds	r3, #38	@ 0x26
 80043a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d129      	bne.n	8004402 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3344      	adds	r3, #68	@ 0x44
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	799b      	ldrb	r3, [r3, #6]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HCD_HC_IN_IRQHandler+0xc2a>
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	331b      	adds	r3, #27
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d110      	bne.n	8004402 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	334d      	adds	r3, #77	@ 0x4d
 80043f0:	2204      	movs	r2, #4
 80043f2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 ff00 	bl	800a202 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	331b      	adds	r3, #27
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d129      	bne.n	800446c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	331b      	adds	r3, #27
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	440a      	add	r2, r1
 8004442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	440a      	add	r2, r1
 8004462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004466:	f043 0320 	orr.w	r3, r3, #32
 800446a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004478:	461a      	mov	r2, r3
 800447a:	2310      	movs	r3, #16
 800447c:	6093      	str	r3, [r2, #8]
 800447e:	e000      	b.n	8004482 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004480:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f005 f907 	bl	80096ba <USB_ReadChInterrupts>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d11b      	bne.n	80044ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	2304      	movs	r3, #4
 80044c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	334d      	adds	r3, #77	@ 0x4d
 80044d8:	2207      	movs	r2, #7
 80044da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f005 fe8c 	bl	800a202 <USB_HC_Halt>
 80044ea:	f000 bc6f 	b.w	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 f8df 	bl	80096ba <USB_ReadChInterrupts>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b20      	cmp	r3, #32
 8004504:	f040 8082 	bne.w	800460c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004514:	461a      	mov	r2, r3
 8004516:	2320      	movs	r3, #32
 8004518:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3319      	adds	r3, #25
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d124      	bne.n	800457a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	3319      	adds	r3, #25
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334c      	adds	r3, #76	@ 0x4c
 8004554:	2202      	movs	r2, #2
 8004556:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	334d      	adds	r3, #77	@ 0x4d
 8004568:	2203      	movs	r2, #3
 800456a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f005 fe44 	bl	800a202 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	331a      	adds	r3, #26
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	f040 841d 	bne.w	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	331b      	adds	r3, #27
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 8411 	bne.w	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3326      	adds	r3, #38	@ 0x26
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d009      	beq.n	80045d4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	331b      	adds	r3, #27
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	334d      	adds	r3, #77	@ 0x4d
 80045e4:	2203      	movs	r2, #3
 80045e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f005 fe06 	bl	800a202 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3344      	adds	r3, #68	@ 0x44
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e3df      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f005 f850 	bl	80096ba <USB_ReadChInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004624:	d111      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004632:	461a      	mov	r2, r3
 8004634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004638:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f005 fddd 	bl	800a202 <USB_HC_Halt>
 8004648:	e3c0      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f005 f831 	bl	80096ba <USB_ReadChInterrupts>
 8004658:	4603      	mov	r3, r0
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d168      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3344      	adds	r3, #68	@ 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f005 f81b 	bl	80096ba <USB_ReadChInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d112      	bne.n	80046b4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3319      	adds	r3, #25
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ae:	461a      	mov	r2, r3
 80046b0:	2340      	movs	r3, #64	@ 0x40
 80046b2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	331b      	adds	r3, #27
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d019      	beq.n	80046fe <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	331b      	adds	r3, #27
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2301      	movs	r3, #1
 800470e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	334d      	adds	r3, #77	@ 0x4d
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f005 fd68 	bl	800a202 <USB_HC_Halt>
 8004732:	e34b      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f004 ffbc 	bl	80096ba <USB_ReadChInterrupts>
 8004742:	4603      	mov	r3, r0
 8004744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d139      	bne.n	80047c0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	334d      	adds	r3, #77	@ 0x4d
 800475c:	2205      	movs	r2, #5
 800475e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	331a      	adds	r3, #26
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3319      	adds	r3, #25
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3344      	adds	r3, #68	@ 0x44
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f005 fd2b 	bl	800a202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	2340      	movs	r3, #64	@ 0x40
 80047bc:	6093      	str	r3, [r2, #8]
 80047be:	e305      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f004 ff76 	bl	80096ba <USB_ReadChInterrupts>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d11a      	bne.n	800480e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e4:	461a      	mov	r2, r3
 80047e6:	2308      	movs	r3, #8
 80047e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	334d      	adds	r3, #77	@ 0x4d
 80047fa:	2206      	movs	r2, #6
 80047fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f005 fcfb 	bl	800a202 <USB_HC_Halt>
 800480c:	e2de      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f004 ff4f 	bl	80096ba <USB_ReadChInterrupts>
 800481c:	4603      	mov	r3, r0
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d144      	bne.n	80048b0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3344      	adds	r3, #68	@ 0x44
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	334d      	adds	r3, #77	@ 0x4d
 800484a:	2204      	movs	r2, #4
 800484c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3319      	adds	r3, #25
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d114      	bne.n	800488e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	3318      	adds	r3, #24
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3319      	adds	r3, #25
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f005 fcb3 	bl	800a202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a8:	461a      	mov	r2, r3
 80048aa:	2310      	movs	r3, #16
 80048ac:	6093      	str	r3, [r2, #8]
 80048ae:	e28d      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f004 fefe 	bl	80096ba <USB_ReadChInterrupts>
 80048be:	4603      	mov	r3, r0
 80048c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c4:	2b80      	cmp	r3, #128	@ 0x80
 80048c6:	d169      	bne.n	800499c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	799b      	ldrb	r3, [r3, #6]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d111      	bne.n	80048f4 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	334d      	adds	r3, #77	@ 0x4d
 80048e0:	2207      	movs	r2, #7
 80048e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f005 fc88 	bl	800a202 <USB_HC_Halt>
 80048f2:	e049      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	3344      	adds	r3, #68	@ 0x44
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4403      	add	r3, r0
 8004914:	3344      	adds	r3, #68	@ 0x44
 8004916:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	3344      	adds	r3, #68	@ 0x44
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d922      	bls.n	8004974 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3344      	adds	r3, #68	@ 0x44
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334c      	adds	r3, #76	@ 0x4c
 8004952:	2204      	movs	r2, #4
 8004954:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	334c      	adds	r3, #76	@ 0x4c
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f00c f85f 	bl	8010a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004972:	e009      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	334c      	adds	r3, #76	@ 0x4c
 8004984:	2202      	movs	r2, #2
 8004986:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	2380      	movs	r3, #128	@ 0x80
 8004998:	6093      	str	r3, [r2, #8]
 800499a:	e217      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f004 fe88 	bl	80096ba <USB_ReadChInterrupts>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b4:	d11b      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	334d      	adds	r3, #77	@ 0x4d
 80049c6:	2209      	movs	r2, #9
 80049c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f005 fc15 	bl	800a202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e4:	461a      	mov	r2, r3
 80049e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ea:	6093      	str	r3, [r2, #8]
 80049ec:	e1ee      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 fe5f 	bl	80096ba <USB_ReadChInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	f040 81df 	bne.w	8004dc6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a14:	461a      	mov	r2, r3
 8004a16:	2302      	movs	r3, #2
 8004a18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	334d      	adds	r3, #77	@ 0x4d
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f040 8093 	bne.w	8004b58 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	334d      	adds	r3, #77	@ 0x4d
 8004a42:	2202      	movs	r2, #2
 8004a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	334c      	adds	r3, #76	@ 0x4c
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3326      	adds	r3, #38	@ 0x26
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d00b      	beq.n	8004a88 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3326      	adds	r3, #38	@ 0x26
 8004a80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	f040 8190 	bne.w	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	799b      	ldrb	r3, [r3, #6]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d115      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	333d      	adds	r3, #61	@ 0x3d
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	f083 0301 	eor.w	r3, r3, #1
 8004aa8:	b2d8      	uxtb	r0, r3
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	333d      	adds	r3, #61	@ 0x3d
 8004ab8:	4602      	mov	r2, r0
 8004aba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	799b      	ldrb	r3, [r3, #6]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	f040 8171 	bne.w	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	3334      	adds	r3, #52	@ 0x34
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8165 	beq.w	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	3334      	adds	r3, #52	@ 0x34
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4403      	add	r3, r0
 8004afe:	3328      	adds	r3, #40	@ 0x28
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	440b      	add	r3, r1
 8004b04:	1e59      	subs	r1, r3, #1
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4403      	add	r3, r0
 8004b14:	3328      	adds	r3, #40	@ 0x28
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b1c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 813f 	beq.w	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	333d      	adds	r3, #61	@ 0x3d
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	f083 0301 	eor.w	r3, r3, #1
 8004b42:	b2d8      	uxtb	r0, r3
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	333d      	adds	r3, #61	@ 0x3d
 8004b52:	4602      	mov	r2, r0
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e127      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	334d      	adds	r3, #77	@ 0x4d
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d120      	bne.n	8004bb0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	334d      	adds	r3, #77	@ 0x4d
 8004b7e:	2202      	movs	r2, #2
 8004b80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	331b      	adds	r3, #27
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	f040 8107 	bne.w	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	334c      	adds	r3, #76	@ 0x4c
 8004baa:	2202      	movs	r2, #2
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e0fb      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	334d      	adds	r3, #77	@ 0x4d
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d13a      	bne.n	8004c3c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	334d      	adds	r3, #77	@ 0x4d
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	334c      	adds	r3, #76	@ 0x4c
 8004bea:	2202      	movs	r2, #2
 8004bec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	331b      	adds	r3, #27
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 80d1 	bne.w	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	331b      	adds	r3, #27
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c38:	6053      	str	r3, [r2, #4]
 8004c3a:	e0b5      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	334d      	adds	r3, #77	@ 0x4d
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d114      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	334d      	adds	r3, #77	@ 0x4d
 8004c62:	2202      	movs	r2, #2
 8004c64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	334c      	adds	r3, #76	@ 0x4c
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e095      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	334d      	adds	r3, #77	@ 0x4d
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d114      	bne.n	8004cbc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	334d      	adds	r3, #77	@ 0x4d
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	334c      	adds	r3, #76	@ 0x4c
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e075      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	334d      	adds	r3, #77	@ 0x4d
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b07      	cmp	r3, #7
 8004cd0:	d00a      	beq.n	8004ce8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	334d      	adds	r3, #77	@ 0x4d
 8004ce2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	d170      	bne.n	8004dca <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	334d      	adds	r3, #77	@ 0x4d
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3344      	adds	r3, #68	@ 0x44
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4403      	add	r3, r0
 8004d1c:	3344      	adds	r3, #68	@ 0x44
 8004d1e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3344      	adds	r3, #68	@ 0x44
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d914      	bls.n	8004d60 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3344      	adds	r3, #68	@ 0x44
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	334c      	adds	r3, #76	@ 0x4c
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d5e:	e022      	b.n	8004da6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	334c      	adds	r3, #76	@ 0x4c
 8004d70:	2202      	movs	r2, #2
 8004d72:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004da6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	334c      	adds	r3, #76	@ 0x4c
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f00b fe36 	bl	8010a30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dc4:	e002      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004dca:	bf00      	nop
  }
}
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b08a      	sub	sp, #40	@ 0x28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	0c5b      	lsrs	r3, r3, #17
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e06:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d004      	beq.n	8004e18 <HCD_RXQLVL_IRQHandler+0x46>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	f000 80b6 	beq.w	8004f82 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e16:	e0b7      	b.n	8004f88 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80b3 	beq.w	8004f86 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4613      	mov	r3, r2
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	332c      	adds	r3, #44	@ 0x2c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80a7 	beq.w	8004f86 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3338      	adds	r3, #56	@ 0x38
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	18d1      	adds	r1, r2, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4403      	add	r3, r0
 8004e5c:	3334      	adds	r3, #52	@ 0x34
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4299      	cmp	r1, r3
 8004e62:	f200 8083 	bhi.w	8004f6c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	332c      	adds	r3, #44	@ 0x2c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f004 fbaf 	bl	80095e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	332c      	adds	r3, #44	@ 0x2c
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	18d1      	adds	r1, r2, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4403      	add	r3, r0
 8004eaa:	332c      	adds	r3, #44	@ 0x2c
 8004eac:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3338      	adds	r3, #56	@ 0x38
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	18d1      	adds	r1, r2, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4403      	add	r3, r0
 8004ed2:	3338      	adds	r3, #56	@ 0x38
 8004ed4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	0cdb      	lsrs	r3, r3, #19
 8004ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3328      	adds	r3, #40	@ 0x28
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d13f      	bne.n	8004f86 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d03c      	beq.n	8004f86 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f22:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f2a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	333c      	adds	r3, #60	@ 0x3c
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f083 0301 	eor.w	r3, r3, #1
 8004f54:	b2d8      	uxtb	r0, r3
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	333c      	adds	r3, #60	@ 0x3c
 8004f66:	4602      	mov	r2, r0
 8004f68:	701a      	strb	r2, [r3, #0]
      break;
 8004f6a:	e00c      	b.n	8004f86 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	334c      	adds	r3, #76	@ 0x4c
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	701a      	strb	r2, [r3, #0]
      break;
 8004f80:	e001      	b.n	8004f86 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004f86:	bf00      	nop
  }
}
 8004f88:	bf00      	nop
 8004f8a:	3728      	adds	r7, #40	@ 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004fbc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d10b      	bne.n	8004fe0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d102      	bne.n	8004fd8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f00b fd10 	bl	80109f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d132      	bne.n	8005050 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f043 0308 	orr.w	r3, r3, #8
 8004ff0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d126      	bne.n	800504a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	7a5b      	ldrb	r3, [r3, #9]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d113      	bne.n	800502c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800500a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800500e:	d106      	bne.n	800501e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2102      	movs	r1, #2
 8005016:	4618      	mov	r0, r3
 8005018:	f004 fc74 	bl	8009904 <USB_InitFSLSPClkSel>
 800501c:	e011      	b.n	8005042 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	4618      	mov	r0, r3
 8005026:	f004 fc6d 	bl	8009904 <USB_InitFSLSPClkSel>
 800502a:	e00a      	b.n	8005042 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	79db      	ldrb	r3, [r3, #7]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d106      	bne.n	8005042 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800503a:	461a      	mov	r2, r3
 800503c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005040:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f00b fd06 	bl	8010a54 <HAL_HCD_PortEnabled_Callback>
 8005048:	e002      	b.n	8005050 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f00b fd10 	bl	8010a70 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b20      	cmp	r3, #32
 8005058:	d103      	bne.n	8005062 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f043 0320 	orr.w	r3, r3, #32
 8005060:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005068:	461a      	mov	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6013      	str	r3, [r2, #0]
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e12b      	b.n	80052e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fbce 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	@ 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050dc:	f001 fa20 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 80050e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4a81      	ldr	r2, [pc, #516]	@ (80052ec <HAL_I2C_Init+0x274>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d807      	bhi.n	80050fc <HAL_I2C_Init+0x84>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a80      	ldr	r2, [pc, #512]	@ (80052f0 <HAL_I2C_Init+0x278>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bf94      	ite	ls
 80050f4:	2301      	movls	r3, #1
 80050f6:	2300      	movhi	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e006      	b.n	800510a <HAL_I2C_Init+0x92>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a7d      	ldr	r2, [pc, #500]	@ (80052f4 <HAL_I2C_Init+0x27c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	bf94      	ite	ls
 8005104:	2301      	movls	r3, #1
 8005106:	2300      	movhi	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0e7      	b.n	80052e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a78      	ldr	r2, [pc, #480]	@ (80052f8 <HAL_I2C_Init+0x280>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0c9b      	lsrs	r3, r3, #18
 800511c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a6a      	ldr	r2, [pc, #424]	@ (80052ec <HAL_I2C_Init+0x274>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <HAL_I2C_Init+0xd4>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3301      	adds	r3, #1
 800514a:	e009      	b.n	8005160 <HAL_I2C_Init+0xe8>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	4a69      	ldr	r2, [pc, #420]	@ (80052fc <HAL_I2C_Init+0x284>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	3301      	adds	r3, #1
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	430b      	orrs	r3, r1
 8005166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005172:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	495c      	ldr	r1, [pc, #368]	@ (80052ec <HAL_I2C_Init+0x274>)
 800517c:	428b      	cmp	r3, r1
 800517e:	d819      	bhi.n	80051b4 <HAL_I2C_Init+0x13c>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e59      	subs	r1, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	fbb1 f3f3 	udiv	r3, r1, r3
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005194:	400b      	ands	r3, r1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_I2C_Init+0x138>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1e59      	subs	r1, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	e051      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 80051b0:	2304      	movs	r3, #4
 80051b2:	e04f      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <HAL_I2C_Init+0x168>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1e58      	subs	r0, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	440b      	add	r3, r1
 80051ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ce:	3301      	adds	r3, #1
 80051d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e012      	b.n	8005206 <HAL_I2C_Init+0x18e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1e58      	subs	r0, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	0099      	lsls	r1, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Init+0x196>
 800520a:	2301      	movs	r3, #1
 800520c:	e022      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10e      	bne.n	8005234 <HAL_I2C_Init+0x1bc>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1e58      	subs	r0, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	440b      	add	r3, r1
 8005224:	fbb0 f3f3 	udiv	r3, r0, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005232:	e00f      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e58      	subs	r0, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	0099      	lsls	r1, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	fbb0 f3f3 	udiv	r3, r0, r3
 800524a:	3301      	adds	r3, #1
 800524c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005250:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6809      	ldr	r1, [r1, #0]
 8005258:	4313      	orrs	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005282:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6911      	ldr	r1, [r2, #16]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68d2      	ldr	r2, [r2, #12]
 800528e:	4311      	orrs	r1, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	430b      	orrs	r3, r1
 8005296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	000186a0 	.word	0x000186a0
 80052f0:	001e847f 	.word	0x001e847f
 80052f4:	003d08ff 	.word	0x003d08ff
 80052f8:	431bde83 	.word	0x431bde83
 80052fc:	10624dd3 	.word	0x10624dd3

08005300 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e128      	b.n	8005564 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a90      	ldr	r2, [pc, #576]	@ (800556c <HAL_I2S_Init+0x26c>)
 800532a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7fc facf 	bl	80018d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005348:	f023 030f 	bic.w	r3, r3, #15
 800534c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2202      	movs	r2, #2
 8005354:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d060      	beq.n	8005420 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005366:	2310      	movs	r3, #16
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e001      	b.n	8005370 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800536c:	2320      	movs	r3, #32
 800536e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b20      	cmp	r3, #32
 8005376:	d802      	bhi.n	800537e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800537e:	2001      	movs	r0, #1
 8005380:	f001 fa0a 	bl	8006798 <HAL_RCCEx_GetPeriphCLKFreq>
 8005384:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538e:	d125      	bne.n	80053dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	3305      	adds	r3, #5
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e01f      	b.n	80053fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	3305      	adds	r3, #5
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e00e      	b.n	80053fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	3305      	adds	r3, #5
 80053f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005570 <HAL_I2S_Init+0x270>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	08db      	lsrs	r3, r3, #3
 8005404:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e003      	b.n	8005428 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005420:	2302      	movs	r3, #2
 8005422:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d902      	bls.n	8005434 <HAL_I2S_Init+0x134>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2bff      	cmp	r3, #255	@ 0xff
 8005432:	d907      	bls.n	8005444 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	f043 0210 	orr.w	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e08f      	b.n	8005564 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	ea42 0103 	orr.w	r1, r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	430a      	orrs	r2, r1
 8005456:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005462:	f023 030f 	bic.w	r3, r3, #15
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6851      	ldr	r1, [r2, #4]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6892      	ldr	r2, [r2, #8]
 800546e:	4311      	orrs	r1, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68d2      	ldr	r2, [r2, #12]
 8005474:	4311      	orrs	r1, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6992      	ldr	r2, [r2, #24]
 800547a:	430a      	orrs	r2, r1
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005486:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d161      	bne.n	8005554 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a38      	ldr	r2, [pc, #224]	@ (8005574 <HAL_I2S_Init+0x274>)
 8005494:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a37      	ldr	r2, [pc, #220]	@ (8005578 <HAL_I2S_Init+0x278>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d101      	bne.n	80054a4 <HAL_I2S_Init+0x1a4>
 80054a0:	4b36      	ldr	r3, [pc, #216]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054a2:	e001      	b.n	80054a8 <HAL_I2S_Init+0x1a8>
 80054a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	4932      	ldr	r1, [pc, #200]	@ (8005578 <HAL_I2S_Init+0x278>)
 80054b0:	428a      	cmp	r2, r1
 80054b2:	d101      	bne.n	80054b8 <HAL_I2S_Init+0x1b8>
 80054b4:	4a31      	ldr	r2, [pc, #196]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054b6:	e001      	b.n	80054bc <HAL_I2S_Init+0x1bc>
 80054b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80054bc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054c0:	f023 030f 	bic.w	r3, r3, #15
 80054c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <HAL_I2S_Init+0x278>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_I2S_Init+0x1d4>
 80054d0:	4b2a      	ldr	r3, [pc, #168]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054d2:	e001      	b.n	80054d8 <HAL_I2S_Init+0x1d8>
 80054d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054d8:	2202      	movs	r2, #2
 80054da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <HAL_I2S_Init+0x278>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_I2S_Init+0x1ea>
 80054e6:	4b25      	ldr	r3, [pc, #148]	@ (800557c <HAL_I2S_Init+0x27c>)
 80054e8:	e001      	b.n	80054ee <HAL_I2S_Init+0x1ee>
 80054ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fa:	d003      	beq.n	8005504 <HAL_I2S_Init+0x204>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e001      	b.n	8005510 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800551a:	4313      	orrs	r3, r2
 800551c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005524:	4313      	orrs	r3, r2
 8005526:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800552e:	4313      	orrs	r3, r2
 8005530:	b29a      	uxth	r2, r3
 8005532:	897b      	ldrh	r3, [r7, #10]
 8005534:	4313      	orrs	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800553c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a0d      	ldr	r2, [pc, #52]	@ (8005578 <HAL_I2S_Init+0x278>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d101      	bne.n	800554c <HAL_I2S_Init+0x24c>
 8005548:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <HAL_I2S_Init+0x27c>)
 800554a:	e001      	b.n	8005550 <HAL_I2S_Init+0x250>
 800554c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005550:	897a      	ldrh	r2, [r7, #10]
 8005552:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	08005677 	.word	0x08005677
 8005570:	cccccccd 	.word	0xcccccccd
 8005574:	0800578d 	.word	0x0800578d
 8005578:	40003800 	.word	0x40003800
 800557c:	40003400 	.word	0x40003400

08005580 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	881a      	ldrh	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10e      	bne.n	8005610 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005600:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ffb8 	bl	8005580 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	b292      	uxth	r2, r2
 800562c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	1c9a      	adds	r2, r3, #2
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10e      	bne.n	800566e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800565e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff93 	bl	8005594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b04      	cmp	r3, #4
 8005690:	d13a      	bne.n	8005708 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d109      	bne.n	80056b0 <I2S_IRQHandler+0x3a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	d102      	bne.n	80056b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff ffb4 	bl	8005618 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b6:	2b40      	cmp	r3, #64	@ 0x40
 80056b8:	d126      	bne.n	8005708 <I2S_IRQHandler+0x92>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d11f      	bne.n	8005708 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	f043 0202 	orr.w	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ff50 	bl	80055a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b03      	cmp	r3, #3
 8005712:	d136      	bne.n	8005782 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d109      	bne.n	8005732 <I2S_IRQHandler+0xbc>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b80      	cmp	r3, #128	@ 0x80
 800572a:	d102      	bne.n	8005732 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ff45 	bl	80055bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d122      	bne.n	8005782 <I2S_IRQHandler+0x10c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d11b      	bne.n	8005782 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005758:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005774:	f043 0204 	orr.w	r2, r3, #4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff13 	bl	80055a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a92      	ldr	r2, [pc, #584]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80057a6:	4b92      	ldr	r3, [pc, #584]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057a8:	e001      	b.n	80057ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80057aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a8b      	ldr	r2, [pc, #556]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80057c4:	4b8a      	ldr	r3, [pc, #552]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057c6:	e001      	b.n	80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80057c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d8:	d004      	beq.n	80057e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 8099 	bne.w	8005916 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d107      	bne.n	80057fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f925 	bl	8005a48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9c8 	bl	8005ba8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581e:	2b40      	cmp	r3, #64	@ 0x40
 8005820:	d13a      	bne.n	8005898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d035      	beq.n	8005898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6e      	ldr	r2, [pc, #440]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005836:	4b6e      	ldr	r3, [pc, #440]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005838:	e001      	b.n	800583e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800583a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4969      	ldr	r1, [pc, #420]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005846:	428b      	cmp	r3, r1
 8005848:	d101      	bne.n	800584e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800584a:	4b69      	ldr	r3, [pc, #420]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800584c:	e001      	b.n	8005852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800584e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005852:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005856:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005866:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	f043 0202 	orr.w	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fe88 	bl	80055a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	f040 80c3 	bne.w	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80bd 	beq.w	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a49      	ldr	r2, [pc, #292]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80058ca:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058cc:	e001      	b.n	80058d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80058ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4944      	ldr	r1, [pc, #272]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058da:	428b      	cmp	r3, r1
 80058dc:	d101      	bne.n	80058e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80058de:	4b44      	ldr	r3, [pc, #272]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058e0:	e001      	b.n	80058e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80058e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058ec:	2300      	movs	r3, #0
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60bb      	str	r3, [r7, #8]
 80058f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	f043 0204 	orr.w	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fe4a 	bl	80055a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005914:	e089      	b.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d107      	bne.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8be 	bl	8005aac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d107      	bne.n	800594a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8fd 	bl	8005b44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005950:	2b40      	cmp	r3, #64	@ 0x40
 8005952:	d12f      	bne.n	80059b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d02a      	beq.n	80059b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800596c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d101      	bne.n	800597c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800597a:	e001      	b.n	8005980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800597c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4919      	ldr	r1, [pc, #100]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005988:	428b      	cmp	r3, r1
 800598a:	d101      	bne.n	8005990 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800598c:	4b18      	ldr	r3, [pc, #96]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800598e:	e001      	b.n	8005994 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005990:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005994:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005998:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	f043 0202 	orr.w	r2, r3, #2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fdfa 	bl	80055a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d136      	bne.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d031      	beq.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a07      	ldr	r2, [pc, #28]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80059d2:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059d4:	e001      	b.n	80059da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80059d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4902      	ldr	r1, [pc, #8]	@ (80059ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059e2:	428b      	cmp	r3, r1
 80059e4:	d106      	bne.n	80059f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80059e6:	4b02      	ldr	r3, [pc, #8]	@ (80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059e8:	e006      	b.n	80059f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80059ea:	bf00      	nop
 80059ec:	40003800 	.word	0x40003800
 80059f0:	40003400 	.word	0x40003400
 80059f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fdc0 	bl	80055a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a28:	e000      	b.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a2a:	bf00      	nop
}
 8005a2c:	bf00      	nop
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	1c99      	adds	r1, r3, #2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d113      	bne.n	8005aa2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ffc9 	bl	8005a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	1c99      	adds	r1, r3, #2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6251      	str	r1, [r2, #36]	@ 0x24
 8005abe:	8819      	ldrh	r1, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b3c <I2SEx_TxISR_I2SExt+0x90>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <I2SEx_TxISR_I2SExt+0x22>
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <I2SEx_TxISR_I2SExt+0x94>)
 8005acc:	e001      	b.n	8005ad2 <I2SEx_TxISR_I2SExt+0x26>
 8005ace:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d121      	bne.n	8005b32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a12      	ldr	r2, [pc, #72]	@ (8005b3c <I2SEx_TxISR_I2SExt+0x90>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <I2SEx_TxISR_I2SExt+0x50>
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <I2SEx_TxISR_I2SExt+0x94>)
 8005afa:	e001      	b.n	8005b00 <I2SEx_TxISR_I2SExt+0x54>
 8005afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	490d      	ldr	r1, [pc, #52]	@ (8005b3c <I2SEx_TxISR_I2SExt+0x90>)
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	d101      	bne.n	8005b10 <I2SEx_TxISR_I2SExt+0x64>
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <I2SEx_TxISR_I2SExt+0x94>)
 8005b0e:	e001      	b.n	8005b14 <I2SEx_TxISR_I2SExt+0x68>
 8005b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff81 	bl	8005a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40003800 	.word	0x40003800
 8005b40:	40003400 	.word	0x40003400

08005b44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68d8      	ldr	r0, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	1c99      	adds	r1, r3, #2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005b5c:	b282      	uxth	r2, r0
 8005b5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d113      	bne.n	8005ba0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff4a 	bl	8005a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a20      	ldr	r2, [pc, #128]	@ (8005c38 <I2SEx_RxISR_I2SExt+0x90>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d101      	bne.n	8005bbe <I2SEx_RxISR_I2SExt+0x16>
 8005bba:	4b20      	ldr	r3, [pc, #128]	@ (8005c3c <I2SEx_RxISR_I2SExt+0x94>)
 8005bbc:	e001      	b.n	8005bc2 <I2SEx_RxISR_I2SExt+0x1a>
 8005bbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bc2:	68d8      	ldr	r0, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	1c99      	adds	r1, r3, #2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005bce:	b282      	uxth	r2, r0
 8005bd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d121      	bne.n	8005c2e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a12      	ldr	r2, [pc, #72]	@ (8005c38 <I2SEx_RxISR_I2SExt+0x90>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d101      	bne.n	8005bf8 <I2SEx_RxISR_I2SExt+0x50>
 8005bf4:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <I2SEx_RxISR_I2SExt+0x94>)
 8005bf6:	e001      	b.n	8005bfc <I2SEx_RxISR_I2SExt+0x54>
 8005bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	490d      	ldr	r1, [pc, #52]	@ (8005c38 <I2SEx_RxISR_I2SExt+0x90>)
 8005c04:	428b      	cmp	r3, r1
 8005c06:	d101      	bne.n	8005c0c <I2SEx_RxISR_I2SExt+0x64>
 8005c08:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <I2SEx_RxISR_I2SExt+0x94>)
 8005c0a:	e001      	b.n	8005c10 <I2SEx_RxISR_I2SExt+0x68>
 8005c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c14:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff03 	bl	8005a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40003800 	.word	0x40003800
 8005c3c:	40003400 	.word	0x40003400

08005c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e267      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d075      	beq.n	8005d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c5e:	4b88      	ldr	r3, [pc, #544]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d00c      	beq.n	8005c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6a:	4b85      	ldr	r3, [pc, #532]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d112      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c76:	4b82      	ldr	r3, [pc, #520]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c82:	d10b      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c84:	4b7e      	ldr	r3, [pc, #504]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d05b      	beq.n	8005d48 <HAL_RCC_OscConfig+0x108>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d157      	bne.n	8005d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e242      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca4:	d106      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x74>
 8005ca6:	4b76      	ldr	r3, [pc, #472]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a75      	ldr	r2, [pc, #468]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e01d      	b.n	8005cf0 <HAL_RCC_OscConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x98>
 8005cbe:	4b70      	ldr	r3, [pc, #448]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b6d      	ldr	r3, [pc, #436]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6c      	ldr	r2, [pc, #432]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e00b      	b.n	8005cf0 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	4b69      	ldr	r3, [pc, #420]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a68      	ldr	r2, [pc, #416]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	4b66      	ldr	r3, [pc, #408]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a65      	ldr	r2, [pc, #404]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d013      	beq.n	8005d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf8:	f7fc f9a8 	bl	800204c <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d00:	f7fc f9a4 	bl	800204c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	@ 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e207      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	4b5b      	ldr	r3, [pc, #364]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0xc0>
 8005d1e:	e014      	b.n	8005d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d20:	f7fc f994 	bl	800204c <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d28:	f7fc f990 	bl	800204c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	@ 0x64
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1f3      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3a:	4b51      	ldr	r3, [pc, #324]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0xe8>
 8005d46:	e000      	b.n	8005d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d063      	beq.n	8005e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d56:	4b4a      	ldr	r3, [pc, #296]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d62:	4b47      	ldr	r3, [pc, #284]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d11c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d6e:	4b44      	ldr	r3, [pc, #272]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d116      	bne.n	8005da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7a:	4b41      	ldr	r3, [pc, #260]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCC_OscConfig+0x152>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e1c7      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d92:	4b3b      	ldr	r3, [pc, #236]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4937      	ldr	r1, [pc, #220]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da6:	e03a      	b.n	8005e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d020      	beq.n	8005df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db0:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <HAL_RCC_OscConfig+0x244>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7fc f949 	bl	800204c <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dbe:	f7fc f945 	bl	800204c <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e1a8      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ddc:	4b28      	ldr	r3, [pc, #160]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4925      	ldr	r1, [pc, #148]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	600b      	str	r3, [r1, #0]
 8005df0:	e015      	b.n	8005e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005df2:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_RCC_OscConfig+0x244>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fc f928 	bl	800204c <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e00:	f7fc f924 	bl	800204c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e187      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e12:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d036      	beq.n	8005e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e32:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <HAL_RCC_OscConfig+0x248>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fc f908 	bl	800204c <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e40:	f7fc f904 	bl	800204c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e167      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e52:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <HAL_RCC_OscConfig+0x240>)
 8005e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x200>
 8005e5e:	e01b      	b.n	8005e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e60:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <HAL_RCC_OscConfig+0x248>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e66:	f7fc f8f1 	bl	800204c <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e6c:	e00e      	b.n	8005e8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6e:	f7fc f8ed 	bl	800204c <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d907      	bls.n	8005e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e150      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
 8005e80:	40023800 	.word	0x40023800
 8005e84:	42470000 	.word	0x42470000
 8005e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8c:	4b88      	ldr	r3, [pc, #544]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1ea      	bne.n	8005e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8097 	beq.w	8005fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eaa:	4b81      	ldr	r3, [pc, #516]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	4b7d      	ldr	r3, [pc, #500]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed6:	4b77      	ldr	r3, [pc, #476]	@ (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d118      	bne.n	8005f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ee2:	4b74      	ldr	r3, [pc, #464]	@ (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a73      	ldr	r2, [pc, #460]	@ (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eee:	f7fc f8ad 	bl	800204c <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef6:	f7fc f8a9 	bl	800204c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e10c      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f08:	4b6a      	ldr	r3, [pc, #424]	@ (80060b4 <HAL_RCC_OscConfig+0x474>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCC_OscConfig+0x2ea>
 8005f1c:	4b64      	ldr	r3, [pc, #400]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f20:	4a63      	ldr	r2, [pc, #396]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f28:	e01c      	b.n	8005f64 <HAL_RCC_OscConfig+0x324>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x30c>
 8005f32:	4b5f      	ldr	r3, [pc, #380]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	4a5e      	ldr	r2, [pc, #376]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f38:	f043 0304 	orr.w	r3, r3, #4
 8005f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f42:	4a5b      	ldr	r2, [pc, #364]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f4a:	e00b      	b.n	8005f64 <HAL_RCC_OscConfig+0x324>
 8005f4c:	4b58      	ldr	r3, [pc, #352]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f50:	4a57      	ldr	r2, [pc, #348]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f52:	f023 0301 	bic.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f58:	4b55      	ldr	r3, [pc, #340]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5c:	4a54      	ldr	r2, [pc, #336]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f5e:	f023 0304 	bic.w	r3, r3, #4
 8005f62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6c:	f7fc f86e 	bl	800204c <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fc f86a 	bl	800204c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0cb      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8a:	4b49      	ldr	r3, [pc, #292]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ee      	beq.n	8005f74 <HAL_RCC_OscConfig+0x334>
 8005f96:	e014      	b.n	8005fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f98:	f7fc f858 	bl	800204c <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa0:	f7fc f854 	bl	800204c <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e0b5      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ee      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc8:	4b39      	ldr	r3, [pc, #228]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	4a38      	ldr	r2, [pc, #224]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80a1 	beq.w	8006120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fde:	4b34      	ldr	r3, [pc, #208]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d05c      	beq.n	80060a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d141      	bne.n	8006076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff2:	4b31      	ldr	r3, [pc, #196]	@ (80060b8 <HAL_RCC_OscConfig+0x478>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fc f828 	bl	800204c <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006000:	f7fc f824 	bl	800204c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e087      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006012:	4b27      	ldr	r3, [pc, #156]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	019b      	lsls	r3, r3, #6
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	3b01      	subs	r3, #1
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	491b      	ldr	r1, [pc, #108]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006048:	4b1b      	ldr	r3, [pc, #108]	@ (80060b8 <HAL_RCC_OscConfig+0x478>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604e:	f7fb fffd 	bl	800204c <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006056:	f7fb fff9 	bl	800204c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e05c      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006068:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCC_OscConfig+0x416>
 8006074:	e054      	b.n	8006120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006076:	4b10      	ldr	r3, [pc, #64]	@ (80060b8 <HAL_RCC_OscConfig+0x478>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607c:	f7fb ffe6 	bl	800204c <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006084:	f7fb ffe2 	bl	800204c <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e045      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006096:	4b06      	ldr	r3, [pc, #24]	@ (80060b0 <HAL_RCC_OscConfig+0x470>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x444>
 80060a2:	e03d      	b.n	8006120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d107      	bne.n	80060bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e038      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40007000 	.word	0x40007000
 80060b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060bc:	4b1b      	ldr	r3, [pc, #108]	@ (800612c <HAL_RCC_OscConfig+0x4ec>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d028      	beq.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d121      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d11a      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060ec:	4013      	ands	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d111      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	3b01      	subs	r3, #1
 8006106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d107      	bne.n	800611c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006118:	429a      	cmp	r2, r3
 800611a:	d001      	beq.n	8006120 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800

08006130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0cc      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006144:	4b68      	ldr	r3, [pc, #416]	@ (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d90c      	bls.n	800616c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b65      	ldr	r3, [pc, #404]	@ (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800615a:	4b63      	ldr	r3, [pc, #396]	@ (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d001      	beq.n	800616c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0b8      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d020      	beq.n	80061ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006184:	4b59      	ldr	r3, [pc, #356]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	4a58      	ldr	r2, [pc, #352]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800618e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800619c:	4b53      	ldr	r3, [pc, #332]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	4a52      	ldr	r2, [pc, #328]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a8:	4b50      	ldr	r3, [pc, #320]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	494d      	ldr	r1, [pc, #308]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d044      	beq.n	8006250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d107      	bne.n	80061de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ce:	4b47      	ldr	r3, [pc, #284]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d119      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e07f      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d003      	beq.n	80061ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ee:	4b3f      	ldr	r3, [pc, #252]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e06f      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fe:	4b3b      	ldr	r3, [pc, #236]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e067      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800620e:	4b37      	ldr	r3, [pc, #220]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 0203 	bic.w	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4934      	ldr	r1, [pc, #208]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006220:	f7fb ff14 	bl	800204c <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006226:	e00a      	b.n	800623e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006228:	f7fb ff10 	bl	800204c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e04f      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623e:	4b2b      	ldr	r3, [pc, #172]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 020c 	and.w	r2, r3, #12
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	429a      	cmp	r2, r3
 800624e:	d1eb      	bne.n	8006228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006250:	4b25      	ldr	r3, [pc, #148]	@ (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d20c      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625e:	4b22      	ldr	r3, [pc, #136]	@ (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	4b20      	ldr	r3, [pc, #128]	@ (80062e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e032      	b.n	80062de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006284:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4916      	ldr	r1, [pc, #88]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062a2:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	490e      	ldr	r1, [pc, #56]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062b6:	f000 f821 	bl	80062fc <HAL_RCC_GetSysClockFreq>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	490a      	ldr	r1, [pc, #40]	@ (80062f0 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	5ccb      	ldrb	r3, [r1, r3]
 80062ca:	fa22 f303 	lsr.w	r3, r2, r3
 80062ce:	4a09      	ldr	r2, [pc, #36]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062d2:	4b09      	ldr	r3, [pc, #36]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fb fcc8 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40023c00 	.word	0x40023c00
 80062ec:	40023800 	.word	0x40023800
 80062f0:	08012228 	.word	0x08012228
 80062f4:	20000010 	.word	0x20000010
 80062f8:	20000014 	.word	0x20000014

080062fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	b094      	sub	sp, #80	@ 0x50
 8006302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	647b      	str	r3, [r7, #68]	@ 0x44
 8006308:	2300      	movs	r3, #0
 800630a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800630c:	2300      	movs	r3, #0
 800630e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006314:	4b79      	ldr	r3, [pc, #484]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 030c 	and.w	r3, r3, #12
 800631c:	2b08      	cmp	r3, #8
 800631e:	d00d      	beq.n	800633c <HAL_RCC_GetSysClockFreq+0x40>
 8006320:	2b08      	cmp	r3, #8
 8006322:	f200 80e1 	bhi.w	80064e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_RCC_GetSysClockFreq+0x34>
 800632a:	2b04      	cmp	r3, #4
 800632c:	d003      	beq.n	8006336 <HAL_RCC_GetSysClockFreq+0x3a>
 800632e:	e0db      	b.n	80064e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b73      	ldr	r3, [pc, #460]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x204>)
 8006332:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006334:	e0db      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006336:	4b73      	ldr	r3, [pc, #460]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x208>)
 8006338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800633a:	e0d8      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800633c:	4b6f      	ldr	r3, [pc, #444]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x200>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006344:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006346:	4b6d      	ldr	r3, [pc, #436]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d063      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006352:	4b6a      	ldr	r3, [pc, #424]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	2200      	movs	r2, #0
 800635a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800635c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800635e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006364:	633b      	str	r3, [r7, #48]	@ 0x30
 8006366:	2300      	movs	r3, #0
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
 800636a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800636e:	4622      	mov	r2, r4
 8006370:	462b      	mov	r3, r5
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	0159      	lsls	r1, r3, #5
 800637c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006380:	0150      	lsls	r0, r2, #5
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4621      	mov	r1, r4
 8006388:	1a51      	subs	r1, r2, r1
 800638a:	6139      	str	r1, [r7, #16]
 800638c:	4629      	mov	r1, r5
 800638e:	eb63 0301 	sbc.w	r3, r3, r1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a0:	4659      	mov	r1, fp
 80063a2:	018b      	lsls	r3, r1, #6
 80063a4:	4651      	mov	r1, sl
 80063a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063aa:	4651      	mov	r1, sl
 80063ac:	018a      	lsls	r2, r1, #6
 80063ae:	4651      	mov	r1, sl
 80063b0:	ebb2 0801 	subs.w	r8, r2, r1
 80063b4:	4659      	mov	r1, fp
 80063b6:	eb63 0901 	sbc.w	r9, r3, r1
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ce:	4690      	mov	r8, r2
 80063d0:	4699      	mov	r9, r3
 80063d2:	4623      	mov	r3, r4
 80063d4:	eb18 0303 	adds.w	r3, r8, r3
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	462b      	mov	r3, r5
 80063dc:	eb49 0303 	adc.w	r3, r9, r3
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063ee:	4629      	mov	r1, r5
 80063f0:	024b      	lsls	r3, r1, #9
 80063f2:	4621      	mov	r1, r4
 80063f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063f8:	4621      	mov	r1, r4
 80063fa:	024a      	lsls	r2, r1, #9
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006402:	2200      	movs	r2, #0
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800640c:	f7f9 ff48 	bl	80002a0 <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4613      	mov	r3, r2
 8006416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006418:	e058      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b38      	ldr	r3, [pc, #224]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x200>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2200      	movs	r2, #0
 8006422:	4618      	mov	r0, r3
 8006424:	4611      	mov	r1, r2
 8006426:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006430:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	f04f 0000 	mov.w	r0, #0
 800643c:	f04f 0100 	mov.w	r1, #0
 8006440:	0159      	lsls	r1, r3, #5
 8006442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006446:	0150      	lsls	r0, r2, #5
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4641      	mov	r1, r8
 800644e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006452:	4649      	mov	r1, r9
 8006454:	eb63 0b01 	sbc.w	fp, r3, r1
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006464:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006468:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800646c:	ebb2 040a 	subs.w	r4, r2, sl
 8006470:	eb63 050b 	sbc.w	r5, r3, fp
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	00eb      	lsls	r3, r5, #3
 800647e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006482:	00e2      	lsls	r2, r4, #3
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	4643      	mov	r3, r8
 800648a:	18e3      	adds	r3, r4, r3
 800648c:	603b      	str	r3, [r7, #0]
 800648e:	464b      	mov	r3, r9
 8006490:	eb45 0303 	adc.w	r3, r5, r3
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064a2:	4629      	mov	r1, r5
 80064a4:	028b      	lsls	r3, r1, #10
 80064a6:	4621      	mov	r1, r4
 80064a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064ac:	4621      	mov	r1, r4
 80064ae:	028a      	lsls	r2, r1, #10
 80064b0:	4610      	mov	r0, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b6:	2200      	movs	r2, #0
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	61fa      	str	r2, [r7, #28]
 80064bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c0:	f7f9 feee 	bl	80002a0 <__aeabi_uldivmod>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4613      	mov	r3, r2
 80064ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064cc:	4b0b      	ldr	r3, [pc, #44]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x200>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	3301      	adds	r3, #1
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80064dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064e6:	e002      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064e8:	4b05      	ldr	r3, [pc, #20]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x204>)
 80064ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3750      	adds	r7, #80	@ 0x50
 80064f4:	46bd      	mov	sp, r7
 80064f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800
 8006500:	00f42400 	.word	0x00f42400
 8006504:	007a1200 	.word	0x007a1200

08006508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800650c:	4b03      	ldr	r3, [pc, #12]	@ (800651c <HAL_RCC_GetHCLKFreq+0x14>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000010 	.word	0x20000010

08006520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006524:	f7ff fff0 	bl	8006508 <HAL_RCC_GetHCLKFreq>
 8006528:	4602      	mov	r2, r0
 800652a:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	0a9b      	lsrs	r3, r3, #10
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	4903      	ldr	r1, [pc, #12]	@ (8006544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006536:	5ccb      	ldrb	r3, [r1, r3]
 8006538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800653c:	4618      	mov	r0, r3
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40023800 	.word	0x40023800
 8006544:	08012238 	.word	0x08012238

08006548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800654c:	f7ff ffdc 	bl	8006508 <HAL_RCC_GetHCLKFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	0b5b      	lsrs	r3, r3, #13
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	4903      	ldr	r1, [pc, #12]	@ (800656c <HAL_RCC_GetPCLK2Freq+0x24>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40023800 	.word	0x40023800
 800656c:	08012238 	.word	0x08012238

08006570 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	220f      	movs	r2, #15
 800657e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006580:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <HAL_RCC_GetClockConfig+0x5c>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0203 	and.w	r2, r3, #3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800658c:	4b0f      	ldr	r3, [pc, #60]	@ (80065cc <HAL_RCC_GetClockConfig+0x5c>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006598:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <HAL_RCC_GetClockConfig+0x5c>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065a4:	4b09      	ldr	r3, [pc, #36]	@ (80065cc <HAL_RCC_GetClockConfig+0x5c>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	08db      	lsrs	r3, r3, #3
 80065aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065b2:	4b07      	ldr	r3, [pc, #28]	@ (80065d0 <HAL_RCC_GetClockConfig+0x60>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0207 	and.w	r2, r3, #7
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40023800 	.word	0x40023800
 80065d0:	40023c00 	.word	0x40023c00

080065d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d035      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065fc:	4b62      	ldr	r3, [pc, #392]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006602:	f7fb fd23 	bl	800204c <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800660a:	f7fb fd1f 	bl	800204c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e0b0      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800661c:	4b5b      	ldr	r3, [pc, #364]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f0      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	019a      	lsls	r2, r3, #6
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	071b      	lsls	r3, r3, #28
 8006634:	4955      	ldr	r1, [pc, #340]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800663c:	4b52      	ldr	r3, [pc, #328]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006642:	f7fb fd03 	bl	800204c <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006648:	e008      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800664a:	f7fb fcff 	bl	800204c <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e090      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800665c:	4b4b      	ldr	r3, [pc, #300]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8083 	beq.w	800677c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	4b44      	ldr	r3, [pc, #272]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	4a43      	ldr	r2, [pc, #268]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006684:	6413      	str	r3, [r2, #64]	@ 0x40
 8006686:	4b41      	ldr	r3, [pc, #260]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006692:	4b3f      	ldr	r3, [pc, #252]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a3e      	ldr	r2, [pc, #248]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800669c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800669e:	f7fb fcd5 	bl	800204c <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066a6:	f7fb fcd1 	bl	800204c <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e062      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066b8:	4b35      	ldr	r3, [pc, #212]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066c4:	4b31      	ldr	r3, [pc, #196]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02f      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d028      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066e2:	4b2a      	ldr	r3, [pc, #168]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ec:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066f2:	4b28      	ldr	r3, [pc, #160]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066f8:	4a24      	ldr	r2, [pc, #144]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066fe:	4b23      	ldr	r3, [pc, #140]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d114      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800670a:	f7fb fc9f 	bl	800204c <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	e00a      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fb fc9b 	bl	800204c <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e02a      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006728:	4b18      	ldr	r3, [pc, #96]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ee      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800673c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006740:	d10d      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006742:	4b12      	ldr	r3, [pc, #72]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006756:	490d      	ldr	r1, [pc, #52]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006758:	4313      	orrs	r3, r2
 800675a:	608b      	str	r3, [r1, #8]
 800675c:	e005      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800675e:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4a0a      	ldr	r2, [pc, #40]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006764:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006768:	6093      	str	r3, [r2, #8]
 800676a:	4b08      	ldr	r3, [pc, #32]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800676c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006776:	4905      	ldr	r1, [pc, #20]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006778:	4313      	orrs	r3, r2
 800677a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	42470068 	.word	0x42470068
 800678c:	40023800 	.word	0x40023800
 8006790:	40007000 	.word	0x40007000
 8006794:	42470e40 	.word	0x42470e40

08006798 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d13f      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80067b6:	4b24      	ldr	r3, [pc, #144]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d006      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067cc:	d12f      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80067ce:	4b1f      	ldr	r3, [pc, #124]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067d0:	617b      	str	r3, [r7, #20]
          break;
 80067d2:	e02f      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067e0:	d108      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067e2:	4b19      	ldr	r3, [pc, #100]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ea:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	e007      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067f4:	4b14      	ldr	r3, [pc, #80]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067fc:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80067fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006802:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006804:	4b10      	ldr	r3, [pc, #64]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800680a:	099b      	lsrs	r3, r3, #6
 800680c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	fb02 f303 	mul.w	r3, r2, r3
 8006816:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006818:	4b0b      	ldr	r3, [pc, #44]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800681a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681e:	0f1b      	lsrs	r3, r3, #28
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	617b      	str	r3, [r7, #20]
          break;
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
          break;
 8006832:	bf00      	nop
        }
      }
      break;
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006836:	bf00      	nop
    }
  }
  return frequency;
 8006838:	697b      	ldr	r3, [r7, #20]
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40023800 	.word	0x40023800
 800684c:	00bb8000 	.word	0x00bb8000
 8006850:	007a1200 	.word	0x007a1200
 8006854:	00f42400 	.word	0x00f42400

08006858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e073      	b.n	8006956 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7f5b      	ldrb	r3, [r3, #29]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fb f8a6 	bl	80019d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d055      	beq.n	8006944 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	22ca      	movs	r2, #202	@ 0xca
 800689e:	625a      	str	r2, [r3, #36]	@ 0x24
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2253      	movs	r2, #83	@ 0x53
 80068a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f92b 	bl	8006b04 <RTC_EnterInitMode>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d12c      	bne.n	8006912 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80068c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6899      	ldr	r1, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68d2      	ldr	r2, [r2, #12]
 80068f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6919      	ldr	r1, [r3, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	041a      	lsls	r2, r3, #16
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f932 	bl	8006b72 <RTC_ExitInitMode>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d110      	bne.n	800693a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006926:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	22ff      	movs	r2, #255	@ 0xff
 8006940:	625a      	str	r2, [r3, #36]	@ 0x24
 8006942:	e001      	b.n	8006948 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006954:	7bfb      	ldrb	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006990:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006994:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	0c1b      	lsrs	r3, r3, #16
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	0d9b      	lsrs	r3, r3, #22
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d11a      	bne.n	8006a10 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f8ec 	bl	8006bbc <RTC_Bcd2ToByte>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 f8e3 	bl	8006bbc <RTC_Bcd2ToByte>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f8da 	bl	8006bbc <RTC_Bcd2ToByte>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	0b5b      	lsrs	r3, r3, #13
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11a      	bne.n	8006aae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 f89d 	bl	8006bbc <RTC_Bcd2ToByte>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f894 	bl	8006bbc <RTC_Bcd2ToByte>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	789b      	ldrb	r3, [r3, #2]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f88b 	bl	8006bbc <RTC_Bcd2ToByte>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8006b00 <HAL_RTC_WaitForSynchro+0x48>)
 8006aca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006acc:	f7fb fabe 	bl	800204c <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ad2:	e009      	b.n	8006ae8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ad4:	f7fb faba 	bl	800204c <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e007      	b.n	8006af8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ee      	beq.n	8006ad4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	00017f5f 	.word	0x00017f5f

08006b04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d122      	bne.n	8006b68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b32:	f7fb fa8b 	bl	800204c <HAL_GetTick>
 8006b36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b38:	e00c      	b.n	8006b54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b3a:	f7fb fa87 	bl	800204c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b48:	d904      	bls.n	8006b54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <RTC_EnterInitMode+0x64>
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d1e8      	bne.n	8006b3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff ff8b 	bl	8006ab8 <HAL_RTC_WaitForSynchro>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2204      	movs	r2, #4
 8006bac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	b2db      	uxtb	r3, r3
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e07b      	b.n	8006d02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d108      	bne.n	8006c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c1a:	d009      	beq.n	8006c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	61da      	str	r2, [r3, #28]
 8006c22:	e005      	b.n	8006c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fa feea 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb4:	ea42 0103 	orr.w	r1, r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	f003 0104 	and.w	r1, r3, #4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	f003 0210 	and.w	r2, r3, #16
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b088      	sub	sp, #32
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_SPI_Transmit+0x22>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e12d      	b.n	8006f88 <HAL_SPI_Transmit+0x27e>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d34:	f7fb f98a 	bl	800204c <HAL_GetTick>
 8006d38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d002      	beq.n	8006d50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d4e:	e116      	b.n	8006f7e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_SPI_Transmit+0x52>
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d60:	e10d      	b.n	8006f7e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2203      	movs	r2, #3
 8006d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da8:	d10f      	bne.n	8006dca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d007      	beq.n	8006de8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df0:	d14f      	bne.n	8006e92 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_SPI_Transmit+0xf6>
 8006dfa:	8afb      	ldrh	r3, [r7, #22]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d142      	bne.n	8006e86 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	1c9a      	adds	r2, r3, #2
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e24:	e02f      	b.n	8006e86 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d112      	bne.n	8006e5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	881a      	ldrh	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e58:	e015      	b.n	8006e86 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5a:	f7fb f8f7 	bl	800204c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <HAL_SPI_Transmit+0x168>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e70:	d102      	bne.n	8006e78 <HAL_SPI_Transmit+0x16e>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d106      	bne.n	8006e86 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006e84:	e07b      	b.n	8006f7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ca      	bne.n	8006e26 <HAL_SPI_Transmit+0x11c>
 8006e90:	e050      	b.n	8006f34 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_SPI_Transmit+0x196>
 8006e9a:	8afb      	ldrh	r3, [r7, #22]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d144      	bne.n	8006f2a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	7812      	ldrb	r2, [r2, #0]
 8006eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ec6:	e030      	b.n	8006f2a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d113      	bne.n	8006efe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006efc:	e015      	b.n	8006f2a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efe:	f7fb f8a5 	bl	800204c <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d803      	bhi.n	8006f16 <HAL_SPI_Transmit+0x20c>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f14:	d102      	bne.n	8006f1c <HAL_SPI_Transmit+0x212>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006f28:	e029      	b.n	8006f7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1c9      	bne.n	8006ec8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fbdf 	bl	80076fc <SPI_EndRxTxTransaction>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	77fb      	strb	r3, [r7, #31]
 8006f74:	e003      	b.n	8006f7e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d002      	beq.n	8006fb6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fb4:	e0fb      	b.n	80071ae <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fbe:	d112      	bne.n	8006fe6 <HAL_SPI_Receive+0x56>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10e      	bne.n	8006fe6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f8ef 	bl	80071c0 <HAL_SPI_TransmitReceive>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e0e8      	b.n	80071b8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_SPI_Receive+0x64>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e0e1      	b.n	80071b8 <HAL_SPI_Receive+0x228>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ffc:	f7fb f826 	bl	800204c <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_Receive+0x7e>
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007012:	e0cc      	b.n	80071ae <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2204      	movs	r2, #4
 8007018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	88fa      	ldrh	r2, [r7, #6]
 800702c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	88fa      	ldrh	r2, [r7, #6]
 8007032:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800705a:	d10f      	bne.n	800707c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800706a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800707a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007086:	2b40      	cmp	r3, #64	@ 0x40
 8007088:	d007      	beq.n	800709a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007098:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d16a      	bne.n	8007178 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070a2:	e032      	b.n	800710a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d115      	bne.n	80070de <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f103 020c 	add.w	r2, r3, #12
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070dc:	e015      	b.n	800710a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070de:	f7fa ffb5 	bl	800204c <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d803      	bhi.n	80070f6 <HAL_SPI_Receive+0x166>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_Receive+0x16c>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007108:	e051      	b.n	80071ae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1c7      	bne.n	80070a4 <HAL_SPI_Receive+0x114>
 8007114:	e035      	b.n	8007182 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b01      	cmp	r3, #1
 8007122:	d113      	bne.n	800714c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	b292      	uxth	r2, r2
 8007130:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	1c9a      	adds	r2, r3, #2
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800714a:	e015      	b.n	8007178 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800714c:	f7fa ff7e 	bl	800204c <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d803      	bhi.n	8007164 <HAL_SPI_Receive+0x1d4>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007162:	d102      	bne.n	800716a <HAL_SPI_Receive+0x1da>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007176:	e01a      	b.n	80071ae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1c9      	bne.n	8007116 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fa52 	bl	8007630 <SPI_EndRxTransaction>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
 80071a4:	e003      	b.n	80071ae <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08c      	sub	sp, #48	@ 0x30
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071ce:	2301      	movs	r3, #1
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_SPI_TransmitReceive+0x26>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e198      	b.n	8007518 <HAL_SPI_TransmitReceive+0x358>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ee:	f7fa ff2d 	bl	800204c <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007204:	887b      	ldrh	r3, [r7, #2]
 8007206:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800720c:	2b01      	cmp	r3, #1
 800720e:	d00f      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x70>
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007216:	d107      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x68>
 8007220:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007224:	2b04      	cmp	r3, #4
 8007226:	d003      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007228:	2302      	movs	r3, #2
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800722e:	e16d      	b.n	800750c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x82>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x82>
 800723c:	887b      	ldrh	r3, [r7, #2]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007248:	e160      	b.n	800750c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b04      	cmp	r3, #4
 8007254:	d003      	beq.n	800725e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2205      	movs	r2, #5
 800725a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	887a      	ldrh	r2, [r7, #2]
 800726e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	887a      	ldrh	r2, [r7, #2]
 8007274:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	887a      	ldrh	r2, [r7, #2]
 8007280:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	887a      	ldrh	r2, [r7, #2]
 8007286:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729e:	2b40      	cmp	r3, #64	@ 0x40
 80072a0:	d007      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072ba:	d17c      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x10a>
 80072c4:	8b7b      	ldrh	r3, [r7, #26]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d16a      	bne.n	80073a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	881a      	ldrh	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	1c9a      	adds	r2, r3, #2
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072ee:	e057      	b.n	80073a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d11b      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x176>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <HAL_SPI_TransmitReceive+0x176>
 8007308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730a:	2b01      	cmp	r3, #1
 800730c:	d113      	bne.n	8007336 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007312:	881a      	ldrh	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	1c9a      	adds	r2, r3, #2
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b01      	cmp	r3, #1
 8007342:	d119      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x1b8>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d014      	beq.n	8007378 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	b292      	uxth	r2, r2
 800735a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007374:	2301      	movs	r3, #1
 8007376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007378:	f7fa fe68 	bl	800204c <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007384:	429a      	cmp	r2, r3
 8007386:	d80b      	bhi.n	80073a0 <HAL_SPI_TransmitReceive+0x1e0>
 8007388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800738e:	d007      	beq.n	80073a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800739e:	e0b5      	b.n	800750c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1a2      	bne.n	80072f0 <HAL_SPI_TransmitReceive+0x130>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d19d      	bne.n	80072f0 <HAL_SPI_TransmitReceive+0x130>
 80073b4:	e080      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x204>
 80073be:	8b7b      	ldrh	r3, [r7, #26]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d16f      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ea:	e05b      	b.n	80074a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d11c      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x274>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d017      	beq.n	8007434 <HAL_SPI_TransmitReceive+0x274>
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d114      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	7812      	ldrb	r2, [r2, #0]
 8007416:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b01      	cmp	r3, #1
 8007440:	d119      	bne.n	8007476 <HAL_SPI_TransmitReceive+0x2b6>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d014      	beq.n	8007476 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007472:	2301      	movs	r3, #1
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007476:	f7fa fde9 	bl	800204c <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007482:	429a      	cmp	r2, r3
 8007484:	d803      	bhi.n	800748e <HAL_SPI_TransmitReceive+0x2ce>
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800748c:	d102      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x2d4>
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d107      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80074a2:	e033      	b.n	800750c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d19e      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x22c>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d199      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f91d 	bl	80076fc <SPI_EndRxTxTransaction>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80074d4:	e01a      	b.n	800750c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007502:	e003      	b.n	800750c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007514:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007518:	4618      	mov	r0, r3
 800751a:	3730      	adds	r7, #48	@ 0x30
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007530:	f7fa fd8c 	bl	800204c <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4413      	add	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007540:	f7fa fd84 	bl	800204c <HAL_GetTick>
 8007544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007546:	4b39      	ldr	r3, [pc, #228]	@ (800762c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	015b      	lsls	r3, r3, #5
 800754c:	0d1b      	lsrs	r3, r3, #20
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	fb02 f303 	mul.w	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007556:	e054      	b.n	8007602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800755e:	d050      	beq.n	8007602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007560:	f7fa fd74 	bl	800204c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	429a      	cmp	r2, r3
 800756e:	d902      	bls.n	8007576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d13d      	bne.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800758e:	d111      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007598:	d004      	beq.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a2:	d107      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075bc:	d10f      	bne.n	80075de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e017      	b.n	8007622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3b01      	subs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4013      	ands	r3, r2
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	bf0c      	ite	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	2300      	movne	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	429a      	cmp	r2, r3
 800761e:	d19b      	bne.n	8007558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000010 	.word	0x20000010

08007630 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007644:	d111      	bne.n	800766a <SPI_EndRxTransaction+0x3a>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800764e:	d004      	beq.n	800765a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007658:	d107      	bne.n	800766a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007668:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007672:	d12a      	bne.n	80076ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767c:	d012      	beq.n	80076a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff ff49 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d02d      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007698:	f043 0220 	orr.w	r2, r3, #32
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e026      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2101      	movs	r1, #1
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff ff36 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01a      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e013      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2101      	movs	r1, #1
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff23 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e000      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2201      	movs	r2, #1
 8007710:	2102      	movs	r1, #2
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff ff04 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f043 0220 	orr.w	r2, r3, #32
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e032      	b.n	8007794 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800772e:	4b1b      	ldr	r3, [pc, #108]	@ (800779c <SPI_EndRxTxTransaction+0xa0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <SPI_EndRxTxTransaction+0xa4>)
 8007734:	fba2 2303 	umull	r2, r3, r2, r3
 8007738:	0d5b      	lsrs	r3, r3, #21
 800773a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800774c:	d112      	bne.n	8007774 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	@ 0x80
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fee1 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007768:	f043 0220 	orr.w	r2, r3, #32
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e00f      	b.n	8007794 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	3b01      	subs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778a:	2b80      	cmp	r3, #128	@ 0x80
 800778c:	d0f2      	beq.n	8007774 <SPI_EndRxTxTransaction+0x78>
 800778e:	e000      	b.n	8007792 <SPI_EndRxTxTransaction+0x96>
        break;
 8007790:	bf00      	nop
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000010 	.word	0x20000010
 80077a0:	165e9f81 	.word	0x165e9f81

080077a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e041      	b.n	800783a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fa f972 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f000 fa7e 	bl	8007ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e04e      	b.n	80078fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a23      	ldr	r2, [pc, #140]	@ (8007908 <HAL_TIM_Base_Start_IT+0xc4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d022      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007886:	d01d      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1f      	ldr	r2, [pc, #124]	@ (800790c <HAL_TIM_Base_Start_IT+0xc8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1e      	ldr	r2, [pc, #120]	@ (8007910 <HAL_TIM_Base_Start_IT+0xcc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007914 <HAL_TIM_Base_Start_IT+0xd0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007918 <HAL_TIM_Base_Start_IT+0xd4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a19      	ldr	r2, [pc, #100]	@ (800791c <HAL_TIM_Base_Start_IT+0xd8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x80>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a18      	ldr	r2, [pc, #96]	@ (8007920 <HAL_TIM_Base_Start_IT+0xdc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d111      	bne.n	80078e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b06      	cmp	r3, #6
 80078d4:	d010      	beq.n	80078f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e6:	e007      	b.n	80078f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40010000 	.word	0x40010000
 800790c:	40000400 	.word	0x40000400
 8007910:	40000800 	.word	0x40000800
 8007914:	40000c00 	.word	0x40000c00
 8007918:	40010400 	.word	0x40010400
 800791c:	40014000 	.word	0x40014000
 8007920:	40001800 	.word	0x40001800

08007924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d020      	beq.n	8007988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0202 	mvn.w	r2, #2
 8007958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f999 	bl	8007ca6 <HAL_TIM_IC_CaptureCallback>
 8007974:	e005      	b.n	8007982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f98b 	bl	8007c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f99c 	bl	8007cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	d020      	beq.n	80079d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01b      	beq.n	80079d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0204 	mvn.w	r2, #4
 80079a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f973 	bl	8007ca6 <HAL_TIM_IC_CaptureCallback>
 80079c0:	e005      	b.n	80079ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f965 	bl	8007c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f976 	bl	8007cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d020      	beq.n	8007a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01b      	beq.n	8007a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0208 	mvn.w	r2, #8
 80079f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2204      	movs	r2, #4
 80079f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f94d 	bl	8007ca6 <HAL_TIM_IC_CaptureCallback>
 8007a0c:	e005      	b.n	8007a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f93f 	bl	8007c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f950 	bl	8007cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d020      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01b      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0210 	mvn.w	r2, #16
 8007a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2208      	movs	r2, #8
 8007a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f927 	bl	8007ca6 <HAL_TIM_IC_CaptureCallback>
 8007a58:	e005      	b.n	8007a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f919 	bl	8007c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f92a 	bl	8007cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00c      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0201 	mvn.w	r2, #1
 8007a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7f9 fe72 	bl	8001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fae4 	bl	800807c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8fb 	bl	8007cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0320 	and.w	r3, r3, #32
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0220 	mvn.w	r2, #32
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fab6 	bl	8008068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_TIM_ConfigClockSource+0x1c>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e0b4      	b.n	8007c8a <HAL_TIM_ConfigClockSource+0x186>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b58:	d03e      	beq.n	8007bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8007b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b5e:	f200 8087 	bhi.w	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b66:	f000 8086 	beq.w	8007c76 <HAL_TIM_ConfigClockSource+0x172>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6e:	d87f      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b70:	2b70      	cmp	r3, #112	@ 0x70
 8007b72:	d01a      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0xa6>
 8007b74:	2b70      	cmp	r3, #112	@ 0x70
 8007b76:	d87b      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b78:	2b60      	cmp	r3, #96	@ 0x60
 8007b7a:	d050      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0x11a>
 8007b7c:	2b60      	cmp	r3, #96	@ 0x60
 8007b7e:	d877      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b80:	2b50      	cmp	r3, #80	@ 0x50
 8007b82:	d03c      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0xfa>
 8007b84:	2b50      	cmp	r3, #80	@ 0x50
 8007b86:	d873      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b88:	2b40      	cmp	r3, #64	@ 0x40
 8007b8a:	d058      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0x13a>
 8007b8c:	2b40      	cmp	r3, #64	@ 0x40
 8007b8e:	d86f      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b30      	cmp	r3, #48	@ 0x30
 8007b92:	d064      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x15a>
 8007b94:	2b30      	cmp	r3, #48	@ 0x30
 8007b96:	d86b      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d060      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x15a>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d867      	bhi.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d05c      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x15a>
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d05a      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x15a>
 8007ba8:	e062      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bba:	f000 f9b9 	bl	8007f30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	609a      	str	r2, [r3, #8]
      break;
 8007bd6:	e04f      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007be8:	f000 f9a2 	bl	8007f30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bfa:	609a      	str	r2, [r3, #8]
      break;
 8007bfc:	e03c      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f000 f916 	bl	8007e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2150      	movs	r1, #80	@ 0x50
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f96f 	bl	8007efa <TIM_ITRx_SetConfig>
      break;
 8007c1c:	e02c      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f000 f935 	bl	8007e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2160      	movs	r1, #96	@ 0x60
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f95f 	bl	8007efa <TIM_ITRx_SetConfig>
      break;
 8007c3c:	e01c      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 f8f6 	bl	8007e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2140      	movs	r1, #64	@ 0x40
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f94f 	bl	8007efa <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e00c      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f000 f946 	bl	8007efa <TIM_ITRx_SetConfig>
      break;
 8007c6e:	e003      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
      break;
 8007c74:	e000      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a46      	ldr	r2, [pc, #280]	@ (8007e10 <TIM_Base_SetConfig+0x12c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d013      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d02:	d00f      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a43      	ldr	r2, [pc, #268]	@ (8007e14 <TIM_Base_SetConfig+0x130>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00b      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a42      	ldr	r2, [pc, #264]	@ (8007e18 <TIM_Base_SetConfig+0x134>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d007      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a41      	ldr	r2, [pc, #260]	@ (8007e1c <TIM_Base_SetConfig+0x138>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_Base_SetConfig+0x40>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a40      	ldr	r2, [pc, #256]	@ (8007e20 <TIM_Base_SetConfig+0x13c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d108      	bne.n	8007d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a35      	ldr	r2, [pc, #212]	@ (8007e10 <TIM_Base_SetConfig+0x12c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d02b      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d44:	d027      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a32      	ldr	r2, [pc, #200]	@ (8007e14 <TIM_Base_SetConfig+0x130>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d023      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a31      	ldr	r2, [pc, #196]	@ (8007e18 <TIM_Base_SetConfig+0x134>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d01f      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a30      	ldr	r2, [pc, #192]	@ (8007e1c <TIM_Base_SetConfig+0x138>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d01b      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a2f      	ldr	r2, [pc, #188]	@ (8007e20 <TIM_Base_SetConfig+0x13c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d017      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a2e      	ldr	r2, [pc, #184]	@ (8007e24 <TIM_Base_SetConfig+0x140>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a2d      	ldr	r2, [pc, #180]	@ (8007e28 <TIM_Base_SetConfig+0x144>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00f      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a2c      	ldr	r2, [pc, #176]	@ (8007e2c <TIM_Base_SetConfig+0x148>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2b      	ldr	r2, [pc, #172]	@ (8007e30 <TIM_Base_SetConfig+0x14c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2a      	ldr	r2, [pc, #168]	@ (8007e34 <TIM_Base_SetConfig+0x150>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_Base_SetConfig+0xb2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a29      	ldr	r2, [pc, #164]	@ (8007e38 <TIM_Base_SetConfig+0x154>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a10      	ldr	r2, [pc, #64]	@ (8007e10 <TIM_Base_SetConfig+0x12c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d003      	beq.n	8007ddc <TIM_Base_SetConfig+0xf8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a12      	ldr	r2, [pc, #72]	@ (8007e20 <TIM_Base_SetConfig+0x13c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d103      	bne.n	8007de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d105      	bne.n	8007e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	611a      	str	r2, [r3, #16]
  }
}
 8007e02:	bf00      	nop
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40014400 	.word	0x40014400
 8007e2c:	40014800 	.word	0x40014800
 8007e30:	40001800 	.word	0x40001800
 8007e34:	40001c00 	.word	0x40001c00
 8007e38:	40002000 	.word	0x40002000

08007e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f023 0201 	bic.w	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f023 030a 	bic.w	r3, r3, #10
 8007e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	f023 0210 	bic.w	r2, r3, #16
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	031b      	lsls	r3, r3, #12
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	621a      	str	r2, [r3, #32]
}
 8007eee:	bf00      	nop
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f043 0307 	orr.w	r3, r3, #7
 8007f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	609a      	str	r2, [r3, #8]
}
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	021a      	lsls	r2, r3, #8
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	609a      	str	r2, [r3, #8]
}
 8007f64:	bf00      	nop
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e05a      	b.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a21      	ldr	r2, [pc, #132]	@ (800804c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d022      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd4:	d01d      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1d      	ldr	r2, [pc, #116]	@ (8008050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d018      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8008054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1a      	ldr	r2, [pc, #104]	@ (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00e      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a18      	ldr	r2, [pc, #96]	@ (800805c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d009      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a17      	ldr	r2, [pc, #92]	@ (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d004      	beq.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a15      	ldr	r2, [pc, #84]	@ (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d10c      	bne.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	4313      	orrs	r3, r2
 8008022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40010400 	.word	0x40010400
 8008060:	40014000 	.word	0x40014000
 8008064:	40001800 	.word	0x40001800

08008068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e042      	b.n	8008128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7f9 fd56 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	@ 0x24
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fea1 	bl	8008e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695a      	ldr	r2, [r3, #20]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08c      	sub	sp, #48	@ 0x30
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b20      	cmp	r3, #32
 8008148:	d14a      	bne.n	80081e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e043      	b.n	80081e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	461a      	mov	r2, r3
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fbf5 	bl	800895c <UART_Start_Receive_DMA>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800817c:	2b00      	cmp	r3, #0
 800817e:	d12c      	bne.n	80081da <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008184:	2b01      	cmp	r3, #1
 8008186:	d125      	bne.n	80081d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	330c      	adds	r3, #12
 80081a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	617b      	str	r3, [r7, #20]
   return(result);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f043 0310 	orr.w	r3, r3, #16
 80081b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081be:	627a      	str	r2, [r7, #36]	@ 0x24
 80081c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6a39      	ldr	r1, [r7, #32]
 80081c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e5      	bne.n	800819e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80081d2:	e002      	b.n	80081da <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80081da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081de:	e000      	b.n	80081e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80081e0:	2302      	movs	r3, #2
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3730      	adds	r7, #48	@ 0x30
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b0ba      	sub	sp, #232	@ 0xe8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008212:	2300      	movs	r3, #0
 8008214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008218:	2300      	movs	r3, #0
 800821a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800822a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10f      	bne.n	8008252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <HAL_UART_IRQHandler+0x66>
 800823e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fd27 	bl	8008c9e <UART_Receive_IT>
      return;
 8008250:	e25b      	b.n	800870a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 80de 	beq.w	8008418 <HAL_UART_IRQHandler+0x22c>
 800825c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80d1 	beq.w	8008418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <HAL_UART_IRQHandler+0xae>
 8008282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008292:	f043 0201 	orr.w	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <HAL_UART_IRQHandler+0xd2>
 80082a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b6:	f043 0202 	orr.w	r2, r3, #2
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <HAL_UART_IRQHandler+0xf6>
 80082ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082da:	f043 0204 	orr.w	r2, r3, #4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d011      	beq.n	8008312 <HAL_UART_IRQHandler+0x126>
 80082ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830a:	f043 0208 	orr.w	r2, r3, #8
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 81f2 	beq.w	8008700 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_UART_IRQHandler+0x14e>
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fcb2 	bl	8008c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008344:	2b40      	cmp	r3, #64	@ 0x40
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <HAL_UART_IRQHandler+0x17a>
 800835e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008362:	2b00      	cmp	r3, #0
 8008364:	d04f      	beq.n	8008406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbba 	bl	8008ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008376:	2b40      	cmp	r3, #64	@ 0x40
 8008378:	d141      	bne.n	80083fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3314      	adds	r3, #20
 8008380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1d9      	bne.n	800837a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d013      	beq.n	80083f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d2:	4a7e      	ldr	r2, [pc, #504]	@ (80085cc <HAL_UART_IRQHandler+0x3e0>)
 80083d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fa f8be 	bl	800255c <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d016      	beq.n	8008414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	e00e      	b.n	8008414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f9a8 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	e00a      	b.n	8008414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f9a4 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	e006      	b.n	8008414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f9a0 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008412:	e175      	b.n	8008700 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008414:	bf00      	nop
    return;
 8008416:	e173      	b.n	8008700 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800841c:	2b01      	cmp	r3, #1
 800841e:	f040 814f 	bne.w	80086c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8148 	beq.w	80086c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8141 	beq.w	80086c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	f040 80b6 	bne.w	80085d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8145 	beq.w	8008704 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800847e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008482:	429a      	cmp	r2, r3
 8008484:	f080 813e 	bcs.w	8008704 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800848e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800849a:	f000 8088 	beq.w	80085ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	330c      	adds	r3, #12
 80084a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80084ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1d9      	bne.n	800849e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3314      	adds	r3, #20
 80084f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084fc:	f023 0301 	bic.w	r3, r3, #1
 8008500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3314      	adds	r3, #20
 800850a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800850e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008512:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008516:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e1      	bne.n	80084ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3314      	adds	r3, #20
 800852c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800853c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3314      	adds	r3, #20
 8008546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800854a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800854c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008550:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e3      	bne.n	8008526 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	330c      	adds	r3, #12
 8008572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800857c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857e:	f023 0310 	bic.w	r3, r3, #16
 8008582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	330c      	adds	r3, #12
 800858c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008590:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008592:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008594:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008596:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008598:	e841 2300 	strex	r3, r2, [r1]
 800859c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800859e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e3      	bne.n	800856c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7f9 ff67 	bl	800247c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7f8 fe5f 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085ca:	e09b      	b.n	8008704 <HAL_UART_IRQHandler+0x518>
 80085cc:	08008ba7 	.word	0x08008ba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 808e 	beq.w	8008708 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8089 	beq.w	8008708 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800860c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800861a:	647a      	str	r2, [r7, #68]	@ 0x44
 800861c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e3      	bne.n	80085f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	623b      	str	r3, [r7, #32]
   return(result);
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f023 0301 	bic.w	r3, r3, #1
 8008644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008652:	633a      	str	r2, [r7, #48]	@ 0x30
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e3      	bne.n	800862e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	60fb      	str	r3, [r7, #12]
   return(result);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0310 	bic.w	r3, r3, #16
 800868a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008698:	61fa      	str	r2, [r7, #28]
 800869a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	69b9      	ldr	r1, [r7, #24]
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	617b      	str	r3, [r7, #20]
   return(result);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e3      	bne.n	8008674 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7f8 fde5 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086be:	e023      	b.n	8008708 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d009      	beq.n	80086e0 <HAL_UART_IRQHandler+0x4f4>
 80086cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fa78 	bl	8008bce <UART_Transmit_IT>
    return;
 80086de:	e014      	b.n	800870a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00e      	beq.n	800870a <HAL_UART_IRQHandler+0x51e>
 80086ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d008      	beq.n	800870a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fab8 	bl	8008c6e <UART_EndTransmit_IT>
    return;
 80086fe:	e004      	b.n	800870a <HAL_UART_IRQHandler+0x51e>
    return;
 8008700:	bf00      	nop
 8008702:	e002      	b.n	800870a <HAL_UART_IRQHandler+0x51e>
      return;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <HAL_UART_IRQHandler+0x51e>
      return;
 8008708:	bf00      	nop
  }
}
 800870a:	37e8      	adds	r7, #232	@ 0xe8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b09c      	sub	sp, #112	@ 0x70
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d172      	bne.n	8008862 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800877c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800877e:	2200      	movs	r2, #0
 8008780:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	330c      	adds	r3, #12
 8008788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800879a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	330c      	adds	r3, #12
 80087a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80087a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80087a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e5      	bne.n	8008782 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3314      	adds	r3, #20
 80087bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80087ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3314      	adds	r3, #20
 80087d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80087d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80087d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e5      	bne.n	80087b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3314      	adds	r3, #20
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	623b      	str	r3, [r7, #32]
   return(result);
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008800:	663b      	str	r3, [r7, #96]	@ 0x60
 8008802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800880a:	633a      	str	r2, [r7, #48]	@ 0x30
 800880c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e5      	bne.n	80087ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800881e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008820:	2220      	movs	r2, #32
 8008822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882a:	2b01      	cmp	r3, #1
 800882c:	d119      	bne.n	8008862 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	330c      	adds	r3, #12
 8008834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	60fb      	str	r3, [r7, #12]
   return(result);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 0310 	bic.w	r3, r3, #16
 8008844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	330c      	adds	r3, #12
 800884c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800884e:	61fa      	str	r2, [r7, #28]
 8008850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	69b9      	ldr	r1, [r7, #24]
 8008854:	69fa      	ldr	r2, [r7, #28]
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	617b      	str	r3, [r7, #20]
   return(result);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e5      	bne.n	800882e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008864:	2200      	movs	r2, #0
 8008866:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800886a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886c:	2b01      	cmp	r3, #1
 800886e:	d106      	bne.n	800887e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008872:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008874:	4619      	mov	r1, r3
 8008876:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008878:	f7f8 fd06 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800887c:	e002      	b.n	8008884 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800887e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008880:	f7ff ff50 	bl	8008724 <HAL_UART_RxCpltCallback>
}
 8008884:	bf00      	nop
 8008886:	3770      	adds	r7, #112	@ 0x70
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008898:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d108      	bne.n	80088ba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	4619      	mov	r1, r3
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7f8 fce8 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088b8:	e002      	b.n	80088c0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff ff3c 	bl	8008738 <HAL_UART_RxHalfCpltCallback>
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e4:	2b80      	cmp	r3, #128	@ 0x80
 80088e6:	bf0c      	ite	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	2300      	movne	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b21      	cmp	r3, #33	@ 0x21
 80088fa:	d108      	bne.n	800890e <UART_DMAError+0x46>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008908:	68b8      	ldr	r0, [r7, #8]
 800890a:	f000 f8c1 	bl	8008a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008918:	2b40      	cmp	r3, #64	@ 0x40
 800891a:	bf0c      	ite	eq
 800891c:	2301      	moveq	r3, #1
 800891e:	2300      	movne	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b22      	cmp	r3, #34	@ 0x22
 800892e:	d108      	bne.n	8008942 <UART_DMAError+0x7a>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2200      	movs	r2, #0
 800893a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800893c:	68b8      	ldr	r0, [r7, #8]
 800893e:	f000 f8cf 	bl	8008ae0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008946:	f043 0210 	orr.w	r2, r3, #16
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800894e:	68b8      	ldr	r0, [r7, #8]
 8008950:	f7ff fefc 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b098      	sub	sp, #96	@ 0x60
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2222      	movs	r2, #34	@ 0x22
 8008980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008988:	4a3e      	ldr	r2, [pc, #248]	@ (8008a84 <UART_Start_Receive_DMA+0x128>)
 800898a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008990:	4a3d      	ldr	r2, [pc, #244]	@ (8008a88 <UART_Start_Receive_DMA+0x12c>)
 8008992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008998:	4a3c      	ldr	r2, [pc, #240]	@ (8008a8c <UART_Start_Receive_DMA+0x130>)
 800899a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a0:	2200      	movs	r2, #0
 80089a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089a4:	f107 0308 	add.w	r3, r7, #8
 80089a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3304      	adds	r3, #4
 80089b4:	4619      	mov	r1, r3
 80089b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	88fb      	ldrh	r3, [r7, #6]
 80089bc:	f7f9 fd06 	bl	80023cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d019      	beq.n	8008a12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	330c      	adds	r3, #12
 80089e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	330c      	adds	r3, #12
 80089fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008a04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e5      	bne.n	80089de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3314      	adds	r3, #20
 8008a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	f043 0301 	orr.w	r3, r3, #1
 8008a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3314      	adds	r3, #20
 8008a30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3314      	adds	r3, #20
 8008a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	617b      	str	r3, [r7, #20]
   return(result);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a66:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6a39      	ldr	r1, [r7, #32]
 8008a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3760      	adds	r7, #96	@ 0x60
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	08008761 	.word	0x08008761
 8008a88:	0800888d 	.word	0x0800888d
 8008a8c:	080088c9 	.word	0x080088c9

08008a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b089      	sub	sp, #36	@ 0x24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	61ba      	str	r2, [r7, #24]
 8008aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6979      	ldr	r1, [r7, #20]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e5      	bne.n	8008a98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008ad4:	bf00      	nop
 8008ad6:	3724      	adds	r7, #36	@ 0x24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b095      	sub	sp, #84	@ 0x54
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	330c      	adds	r3, #12
 8008aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	330c      	adds	r3, #12
 8008b06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b08:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e5      	bne.n	8008ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3314      	adds	r3, #20
 8008b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f023 0301 	bic.w	r3, r3, #1
 8008b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3314      	adds	r3, #20
 8008b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e5      	bne.n	8008b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d119      	bne.n	8008b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f023 0310 	bic.w	r3, r3, #16
 8008b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	330c      	adds	r3, #12
 8008b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b78:	61ba      	str	r2, [r7, #24]
 8008b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6979      	ldr	r1, [r7, #20]
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	613b      	str	r3, [r7, #16]
   return(result);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e5      	bne.n	8008b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b9a:	bf00      	nop
 8008b9c:	3754      	adds	r7, #84	@ 0x54
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7ff fdc3 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b21      	cmp	r3, #33	@ 0x21
 8008be0:	d13e      	bne.n	8008c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bea:	d114      	bne.n	8008c16 <UART_Transmit_IT+0x48>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d110      	bne.n	8008c16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	1c9a      	adds	r2, r3, #2
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	621a      	str	r2, [r3, #32]
 8008c14:	e008      	b.n	8008c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	1c59      	adds	r1, r3, #1
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6211      	str	r1, [r2, #32]
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	4619      	mov	r1, r3
 8008c36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10f      	bne.n	8008c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e000      	b.n	8008c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c60:	2302      	movs	r3, #2
  }
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff fd3e 	bl	8008710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b08c      	sub	sp, #48	@ 0x30
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b22      	cmp	r3, #34	@ 0x22
 8008cb0:	f040 80ae 	bne.w	8008e10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cbc:	d117      	bne.n	8008cee <UART_Receive_IT+0x50>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d113      	bne.n	8008cee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	1c9a      	adds	r2, r3, #2
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	629a      	str	r2, [r3, #40]	@ 0x28
 8008cec:	e026      	b.n	8008d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d00:	d007      	beq.n	8008d12 <UART_Receive_IT+0x74>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <UART_Receive_IT+0x82>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	e008      	b.n	8008d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d15d      	bne.n	8008e0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0220 	bic.w	r2, r2, #32
 8008d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	695a      	ldr	r2, [r3, #20]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0201 	bic.w	r2, r2, #1
 8008d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d135      	bne.n	8008e02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	330c      	adds	r3, #12
 8008da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f023 0310 	bic.w	r3, r3, #16
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	330c      	adds	r3, #12
 8008dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dbc:	623a      	str	r2, [r7, #32]
 8008dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	69f9      	ldr	r1, [r7, #28]
 8008dc2:	6a3a      	ldr	r2, [r7, #32]
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e5      	bne.n	8008d9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0310 	and.w	r3, r3, #16
 8008dda:	2b10      	cmp	r3, #16
 8008ddc:	d10a      	bne.n	8008df4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7f8 fa44 	bl	8001288 <HAL_UARTEx_RxEventCallback>
 8008e00:	e002      	b.n	8008e08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fc8e 	bl	8008724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e002      	b.n	8008e12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e000      	b.n	8008e12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e10:	2302      	movs	r3, #2
  }
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3730      	adds	r7, #48	@ 0x30
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e20:	b0c0      	sub	sp, #256	@ 0x100
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e38:	68d9      	ldr	r1, [r3, #12]
 8008e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	ea40 0301 	orr.w	r3, r0, r1
 8008e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e74:	f021 010c 	bic.w	r1, r1, #12
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e82:	430b      	orrs	r3, r1
 8008e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e96:	6999      	ldr	r1, [r3, #24]
 8008e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	ea40 0301 	orr.w	r3, r0, r1
 8008ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80090e8 <UART_SetConfig+0x2cc>)
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d005      	beq.n	8008ebc <UART_SetConfig+0xa0>
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80090ec <UART_SetConfig+0x2d0>)
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d104      	bne.n	8008ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ebc:	f7fd fb44 	bl	8006548 <HAL_RCC_GetPCLK2Freq>
 8008ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ec4:	e003      	b.n	8008ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ec6:	f7fd fb2b 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8008eca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ed8:	f040 810c 	bne.w	80090f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008eee:	4622      	mov	r2, r4
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	1891      	adds	r1, r2, r2
 8008ef4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ef6:	415b      	adcs	r3, r3
 8008ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008efe:	4621      	mov	r1, r4
 8008f00:	eb12 0801 	adds.w	r8, r2, r1
 8008f04:	4629      	mov	r1, r5
 8008f06:	eb43 0901 	adc.w	r9, r3, r1
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f1e:	4690      	mov	r8, r2
 8008f20:	4699      	mov	r9, r3
 8008f22:	4623      	mov	r3, r4
 8008f24:	eb18 0303 	adds.w	r3, r8, r3
 8008f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	eb49 0303 	adc.w	r3, r9, r3
 8008f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	18db      	adds	r3, r3, r3
 8008f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f50:	4613      	mov	r3, r2
 8008f52:	eb42 0303 	adc.w	r3, r2, r3
 8008f56:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f60:	f7f7 f99e 	bl	80002a0 <__aeabi_uldivmod>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4b61      	ldr	r3, [pc, #388]	@ (80090f0 <UART_SetConfig+0x2d4>)
 8008f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	011c      	lsls	r4, r3, #4
 8008f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	1891      	adds	r1, r2, r2
 8008f8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f8c:	415b      	adcs	r3, r3
 8008f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f94:	4641      	mov	r1, r8
 8008f96:	eb12 0a01 	adds.w	sl, r2, r1
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fb4:	4692      	mov	sl, r2
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	4643      	mov	r3, r8
 8008fba:	eb1a 0303 	adds.w	r3, sl, r3
 8008fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8008fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	18db      	adds	r3, r3, r3
 8008fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	eb42 0303 	adc.w	r3, r2, r3
 8008fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ff6:	f7f7 f953 	bl	80002a0 <__aeabi_uldivmod>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4611      	mov	r1, r2
 8009000:	4b3b      	ldr	r3, [pc, #236]	@ (80090f0 <UART_SetConfig+0x2d4>)
 8009002:	fba3 2301 	umull	r2, r3, r3, r1
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	2264      	movs	r2, #100	@ 0x64
 800900a:	fb02 f303 	mul.w	r3, r2, r3
 800900e:	1acb      	subs	r3, r1, r3
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009016:	4b36      	ldr	r3, [pc, #216]	@ (80090f0 <UART_SetConfig+0x2d4>)
 8009018:	fba3 2302 	umull	r2, r3, r3, r2
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009024:	441c      	add	r4, r3
 8009026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800902a:	2200      	movs	r2, #0
 800902c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009030:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009038:	4642      	mov	r2, r8
 800903a:	464b      	mov	r3, r9
 800903c:	1891      	adds	r1, r2, r2
 800903e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009040:	415b      	adcs	r3, r3
 8009042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009048:	4641      	mov	r1, r8
 800904a:	1851      	adds	r1, r2, r1
 800904c:	6339      	str	r1, [r7, #48]	@ 0x30
 800904e:	4649      	mov	r1, r9
 8009050:	414b      	adcs	r3, r1
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009060:	4659      	mov	r1, fp
 8009062:	00cb      	lsls	r3, r1, #3
 8009064:	4651      	mov	r1, sl
 8009066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800906a:	4651      	mov	r1, sl
 800906c:	00ca      	lsls	r2, r1, #3
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	4603      	mov	r3, r0
 8009074:	4642      	mov	r2, r8
 8009076:	189b      	adds	r3, r3, r2
 8009078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800907c:	464b      	mov	r3, r9
 800907e:	460a      	mov	r2, r1
 8009080:	eb42 0303 	adc.w	r3, r2, r3
 8009084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009094:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800909c:	460b      	mov	r3, r1
 800909e:	18db      	adds	r3, r3, r3
 80090a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090a2:	4613      	mov	r3, r2
 80090a4:	eb42 0303 	adc.w	r3, r2, r3
 80090a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090b2:	f7f7 f8f5 	bl	80002a0 <__aeabi_uldivmod>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4b0d      	ldr	r3, [pc, #52]	@ (80090f0 <UART_SetConfig+0x2d4>)
 80090bc:	fba3 1302 	umull	r1, r3, r3, r2
 80090c0:	095b      	lsrs	r3, r3, #5
 80090c2:	2164      	movs	r1, #100	@ 0x64
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	3332      	adds	r3, #50	@ 0x32
 80090ce:	4a08      	ldr	r2, [pc, #32]	@ (80090f0 <UART_SetConfig+0x2d4>)
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	095b      	lsrs	r3, r3, #5
 80090d6:	f003 0207 	and.w	r2, r3, #7
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4422      	add	r2, r4
 80090e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090e4:	e106      	b.n	80092f4 <UART_SetConfig+0x4d8>
 80090e6:	bf00      	nop
 80090e8:	40011000 	.word	0x40011000
 80090ec:	40011400 	.word	0x40011400
 80090f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009106:	4642      	mov	r2, r8
 8009108:	464b      	mov	r3, r9
 800910a:	1891      	adds	r1, r2, r2
 800910c:	6239      	str	r1, [r7, #32]
 800910e:	415b      	adcs	r3, r3
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
 8009112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009116:	4641      	mov	r1, r8
 8009118:	1854      	adds	r4, r2, r1
 800911a:	4649      	mov	r1, r9
 800911c:	eb43 0501 	adc.w	r5, r3, r1
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	f04f 0300 	mov.w	r3, #0
 8009128:	00eb      	lsls	r3, r5, #3
 800912a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800912e:	00e2      	lsls	r2, r4, #3
 8009130:	4614      	mov	r4, r2
 8009132:	461d      	mov	r5, r3
 8009134:	4643      	mov	r3, r8
 8009136:	18e3      	adds	r3, r4, r3
 8009138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800913c:	464b      	mov	r3, r9
 800913e:	eb45 0303 	adc.w	r3, r5, r3
 8009142:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009162:	4629      	mov	r1, r5
 8009164:	008b      	lsls	r3, r1, #2
 8009166:	4621      	mov	r1, r4
 8009168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800916c:	4621      	mov	r1, r4
 800916e:	008a      	lsls	r2, r1, #2
 8009170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009174:	f7f7 f894 	bl	80002a0 <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4b60      	ldr	r3, [pc, #384]	@ (8009300 <UART_SetConfig+0x4e4>)
 800917e:	fba3 2302 	umull	r2, r3, r3, r2
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	011c      	lsls	r4, r3, #4
 8009186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800918a:	2200      	movs	r2, #0
 800918c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009190:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	1891      	adds	r1, r2, r2
 800919e:	61b9      	str	r1, [r7, #24]
 80091a0:	415b      	adcs	r3, r3
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091a8:	4641      	mov	r1, r8
 80091aa:	1851      	adds	r1, r2, r1
 80091ac:	6139      	str	r1, [r7, #16]
 80091ae:	4649      	mov	r1, r9
 80091b0:	414b      	adcs	r3, r1
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	f04f 0200 	mov.w	r2, #0
 80091b8:	f04f 0300 	mov.w	r3, #0
 80091bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091c0:	4659      	mov	r1, fp
 80091c2:	00cb      	lsls	r3, r1, #3
 80091c4:	4651      	mov	r1, sl
 80091c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ca:	4651      	mov	r1, sl
 80091cc:	00ca      	lsls	r2, r1, #3
 80091ce:	4610      	mov	r0, r2
 80091d0:	4619      	mov	r1, r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	4642      	mov	r2, r8
 80091d6:	189b      	adds	r3, r3, r2
 80091d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091dc:	464b      	mov	r3, r9
 80091de:	460a      	mov	r2, r1
 80091e0:	eb42 0303 	adc.w	r3, r2, r3
 80091e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	f04f 0300 	mov.w	r3, #0
 80091fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009200:	4649      	mov	r1, r9
 8009202:	008b      	lsls	r3, r1, #2
 8009204:	4641      	mov	r1, r8
 8009206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800920a:	4641      	mov	r1, r8
 800920c:	008a      	lsls	r2, r1, #2
 800920e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009212:	f7f7 f845 	bl	80002a0 <__aeabi_uldivmod>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4611      	mov	r1, r2
 800921c:	4b38      	ldr	r3, [pc, #224]	@ (8009300 <UART_SetConfig+0x4e4>)
 800921e:	fba3 2301 	umull	r2, r3, r3, r1
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	2264      	movs	r2, #100	@ 0x64
 8009226:	fb02 f303 	mul.w	r3, r2, r3
 800922a:	1acb      	subs	r3, r1, r3
 800922c:	011b      	lsls	r3, r3, #4
 800922e:	3332      	adds	r3, #50	@ 0x32
 8009230:	4a33      	ldr	r2, [pc, #204]	@ (8009300 <UART_SetConfig+0x4e4>)
 8009232:	fba2 2303 	umull	r2, r3, r2, r3
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800923c:	441c      	add	r4, r3
 800923e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009242:	2200      	movs	r2, #0
 8009244:	673b      	str	r3, [r7, #112]	@ 0x70
 8009246:	677a      	str	r2, [r7, #116]	@ 0x74
 8009248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800924c:	4642      	mov	r2, r8
 800924e:	464b      	mov	r3, r9
 8009250:	1891      	adds	r1, r2, r2
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	415b      	adcs	r3, r3
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800925c:	4641      	mov	r1, r8
 800925e:	1851      	adds	r1, r2, r1
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	4649      	mov	r1, r9
 8009264:	414b      	adcs	r3, r1
 8009266:	607b      	str	r3, [r7, #4]
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009274:	4659      	mov	r1, fp
 8009276:	00cb      	lsls	r3, r1, #3
 8009278:	4651      	mov	r1, sl
 800927a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800927e:	4651      	mov	r1, sl
 8009280:	00ca      	lsls	r2, r1, #3
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	4603      	mov	r3, r0
 8009288:	4642      	mov	r2, r8
 800928a:	189b      	adds	r3, r3, r2
 800928c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800928e:	464b      	mov	r3, r9
 8009290:	460a      	mov	r2, r1
 8009292:	eb42 0303 	adc.w	r3, r2, r3
 8009296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80092a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092b0:	4649      	mov	r1, r9
 80092b2:	008b      	lsls	r3, r1, #2
 80092b4:	4641      	mov	r1, r8
 80092b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092ba:	4641      	mov	r1, r8
 80092bc:	008a      	lsls	r2, r1, #2
 80092be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092c2:	f7f6 ffed 	bl	80002a0 <__aeabi_uldivmod>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009300 <UART_SetConfig+0x4e4>)
 80092cc:	fba3 1302 	umull	r1, r3, r3, r2
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	2164      	movs	r1, #100	@ 0x64
 80092d4:	fb01 f303 	mul.w	r3, r1, r3
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	011b      	lsls	r3, r3, #4
 80092dc:	3332      	adds	r3, #50	@ 0x32
 80092de:	4a08      	ldr	r2, [pc, #32]	@ (8009300 <UART_SetConfig+0x4e4>)
 80092e0:	fba2 2303 	umull	r2, r3, r2, r3
 80092e4:	095b      	lsrs	r3, r3, #5
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4422      	add	r2, r4
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80092fa:	46bd      	mov	sp, r7
 80092fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009300:	51eb851f 	.word	0x51eb851f

08009304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009304:	b084      	sub	sp, #16
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	f107 001c 	add.w	r0, r7, #28
 8009312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009316:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800931a:	2b01      	cmp	r3, #1
 800931c:	d123      	bne.n	8009366 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009346:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800934a:	2b01      	cmp	r3, #1
 800934c:	d105      	bne.n	800935a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f9dc 	bl	8009718 <USB_CoreReset>
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
 8009364:	e01b      	b.n	800939e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9d0 	bl	8009718 <USB_CoreReset>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800937c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009390:	e005      	b.n	800939e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009396:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800939e:	7fbb      	ldrb	r3, [r7, #30]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d10b      	bne.n	80093bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f043 0206 	orr.w	r2, r3, #6
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f043 0220 	orr.w	r2, r3, #32
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093c8:	b004      	add	sp, #16
 80093ca:	4770      	bx	lr

080093cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f043 0201 	orr.w	r2, r3, #1
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f023 0201 	bic.w	r2, r3, #1
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d115      	bne.n	800945e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800943e:	200a      	movs	r0, #10
 8009440:	f7f8 fe10 	bl	8002064 <HAL_Delay>
      ms += 10U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	330a      	adds	r3, #10
 8009448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f956 	bl	80096fc <USB_GetMode>
 8009450:	4603      	mov	r3, r0
 8009452:	2b01      	cmp	r3, #1
 8009454:	d01e      	beq.n	8009494 <USB_SetCurrentMode+0x84>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2bc7      	cmp	r3, #199	@ 0xc7
 800945a:	d9f0      	bls.n	800943e <USB_SetCurrentMode+0x2e>
 800945c:	e01a      	b.n	8009494 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d115      	bne.n	8009490 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009470:	200a      	movs	r0, #10
 8009472:	f7f8 fdf7 	bl	8002064 <HAL_Delay>
      ms += 10U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	330a      	adds	r3, #10
 800947a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f93d 	bl	80096fc <USB_GetMode>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <USB_SetCurrentMode+0x84>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2bc7      	cmp	r3, #199	@ 0xc7
 800948c:	d9f0      	bls.n	8009470 <USB_SetCurrentMode+0x60>
 800948e:	e001      	b.n	8009494 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e005      	b.n	80094a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2bc8      	cmp	r3, #200	@ 0xc8
 8009498:	d101      	bne.n	800949e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3301      	adds	r3, #1
 80094ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094c2:	d901      	bls.n	80094c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e01b      	b.n	8009500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	daf2      	bge.n	80094b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	019b      	lsls	r3, r3, #6
 80094d8:	f043 0220 	orr.w	r2, r3, #32
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094ec:	d901      	bls.n	80094f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e006      	b.n	8009500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d0f0      	beq.n	80094e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009524:	d901      	bls.n	800952a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e018      	b.n	800955c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	daf2      	bge.n	8009518 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2210      	movs	r2, #16
 800953a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009548:	d901      	bls.n	800954e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e006      	b.n	800955c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f003 0310 	and.w	r3, r3, #16
 8009556:	2b10      	cmp	r3, #16
 8009558:	d0f0      	beq.n	800953c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009568:	b480      	push	{r7}
 800956a:	b089      	sub	sp, #36	@ 0x24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4611      	mov	r1, r2
 8009574:	461a      	mov	r2, r3
 8009576:	460b      	mov	r3, r1
 8009578:	71fb      	strb	r3, [r7, #7]
 800957a:	4613      	mov	r3, r2
 800957c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d123      	bne.n	80095d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800958e:	88bb      	ldrh	r3, [r7, #4]
 8009590:	3303      	adds	r3, #3
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009596:	2300      	movs	r3, #0
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	e018      	b.n	80095ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	031a      	lsls	r2, r3, #12
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095a8:	461a      	mov	r2, r3
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	3301      	adds	r3, #1
 80095b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	3301      	adds	r3, #1
 80095ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	3301      	adds	r3, #1
 80095c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	3301      	adds	r3, #1
 80095c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	3301      	adds	r3, #1
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d3e2      	bcc.n	800959c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3724      	adds	r7, #36	@ 0x24
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b08b      	sub	sp, #44	@ 0x2c
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	089b      	lsrs	r3, r3, #2
 80095fe:	b29b      	uxth	r3, r3
 8009600:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800960a:	2300      	movs	r3, #0
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	e014      	b.n	800963a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	601a      	str	r2, [r3, #0]
    pDest++;
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	3301      	adds	r3, #1
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	3301      	adds	r3, #1
 8009626:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	3301      	adds	r3, #1
 800962c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	3301      	adds	r3, #1
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	3301      	adds	r3, #1
 8009638:	623b      	str	r3, [r7, #32]
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	429a      	cmp	r2, r3
 8009640:	d3e6      	bcc.n	8009610 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009642:	8bfb      	ldrh	r3, [r7, #30]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01e      	beq.n	8009686 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009652:	461a      	mov	r2, r3
 8009654:	f107 0310 	add.w	r3, r7, #16
 8009658:	6812      	ldr	r2, [r2, #0]
 800965a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	fa22 f303 	lsr.w	r3, r2, r3
 8009668:	b2da      	uxtb	r2, r3
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	701a      	strb	r2, [r3, #0]
      i++;
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	3301      	adds	r3, #1
 8009672:	623b      	str	r3, [r7, #32]
      pDest++;
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	3301      	adds	r3, #1
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800967a:	8bfb      	ldrh	r3, [r7, #30]
 800967c:	3b01      	subs	r3, #1
 800967e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009680:	8bfb      	ldrh	r3, [r7, #30]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1ea      	bne.n	800965c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009688:	4618      	mov	r0, r3
 800968a:	372c      	adds	r7, #44	@ 0x2c
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4013      	ands	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096ac:	68fb      	ldr	r3, [r7, #12]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b085      	sub	sp, #20
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4013      	ands	r3, r2
 80096ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096ee:	68bb      	ldr	r3, [r7, #8]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	f003 0301 	and.w	r3, r3, #1
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009730:	d901      	bls.n	8009736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e01b      	b.n	800976e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	daf2      	bge.n	8009724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	f043 0201 	orr.w	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800975a:	d901      	bls.n	8009760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e006      	b.n	800976e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b01      	cmp	r3, #1
 800976a:	d0f0      	beq.n	800974e <USB_CoreReset+0x36>

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
	...

0800977c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800977c:	b084      	sub	sp, #16
 800977e:	b580      	push	{r7, lr}
 8009780:	b086      	sub	sp, #24
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800978a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800979c:	461a      	mov	r2, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d119      	bne.n	8009806 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80097d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d10a      	bne.n	80097f0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80097e8:	f043 0304 	orr.w	r3, r3, #4
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	e014      	b.n	800981a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80097fe:	f023 0304 	bic.w	r3, r3, #4
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	e009      	b.n	800981a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009814:	f023 0304 	bic.w	r3, r3, #4
 8009818:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800981a:	2110      	movs	r1, #16
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff fe43 	bl	80094a8 <USB_FlushTxFifo>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff fe6d 	bl	800950c <USB_FlushRxFifo>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800983c:	2300      	movs	r3, #0
 800983e:	613b      	str	r3, [r7, #16]
 8009840:	e015      	b.n	800986e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4413      	add	r3, r2
 800984a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800984e:	461a      	mov	r2, r3
 8009850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009854:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009862:	461a      	mov	r2, r3
 8009864:	2300      	movs	r3, #0
 8009866:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3301      	adds	r3, #1
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009872:	461a      	mov	r2, r3
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4293      	cmp	r3, r2
 8009878:	d3e3      	bcc.n	8009842 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009886:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a18      	ldr	r2, [pc, #96]	@ (80098ec <USB_HostInit+0x170>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d10b      	bne.n	80098a8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009896:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a15      	ldr	r2, [pc, #84]	@ (80098f0 <USB_HostInit+0x174>)
 800989c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a14      	ldr	r2, [pc, #80]	@ (80098f4 <USB_HostInit+0x178>)
 80098a2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80098a6:	e009      	b.n	80098bc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2280      	movs	r2, #128	@ 0x80
 80098ac:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a11      	ldr	r2, [pc, #68]	@ (80098f8 <USB_HostInit+0x17c>)
 80098b2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a11      	ldr	r2, [pc, #68]	@ (80098fc <USB_HostInit+0x180>)
 80098b8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	f043 0210 	orr.w	r2, r3, #16
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	699a      	ldr	r2, [r3, #24]
 80098d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009900 <USB_HostInit+0x184>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098e8:	b004      	add	sp, #16
 80098ea:	4770      	bx	lr
 80098ec:	40040000 	.word	0x40040000
 80098f0:	01000200 	.word	0x01000200
 80098f4:	00e00300 	.word	0x00e00300
 80098f8:	00600080 	.word	0x00600080
 80098fc:	004000e0 	.word	0x004000e0
 8009900:	a3200008 	.word	0xa3200008

08009904 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800993c:	4313      	orrs	r3, r2
 800993e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d107      	bne.n	8009956 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800994c:	461a      	mov	r2, r3
 800994e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009952:	6053      	str	r3, [r2, #4]
 8009954:	e00c      	b.n	8009970 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d107      	bne.n	800996c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009962:	461a      	mov	r2, r3
 8009964:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009968:	6053      	str	r3, [r2, #4]
 800996a:	e001      	b.n	8009970 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800999e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80099a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80099ae:	2064      	movs	r0, #100	@ 0x64
 80099b0:	f7f8 fb58 	bl	8002064 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80099bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80099c2:	200a      	movs	r0, #10
 80099c4:	f7f8 fb4e 	bl	8002064 <HAL_Delay>

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80099f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d109      	bne.n	8009a16 <USB_DriveVbus+0x44>
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d106      	bne.n	8009a16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009a14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a20:	d109      	bne.n	8009a36 <USB_DriveVbus+0x64>
 8009a22:	78fb      	ldrb	r3, [r7, #3]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d106      	bne.n	8009a36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	0c5b      	lsrs	r3, r3, #17
 8009a62:	f003 0303 	and.w	r3, r3, #3
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	b29b      	uxth	r3, r3
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	70fb      	strb	r3, [r7, #3]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70bb      	strb	r3, [r7, #2]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ac8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009aca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d87c      	bhi.n	8009bcc <USB_HC_Init+0x138>
 8009ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad8 <USB_HC_Init+0x44>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009b8f 	.word	0x08009b8f
 8009ae0:	08009ae9 	.word	0x08009ae9
 8009ae4:	08009b51 	.word	0x08009b51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009af4:	461a      	mov	r2, r3
 8009af6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009afa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009afc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	da10      	bge.n	8009b26 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	78fa      	ldrb	r2, [r7, #3]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b22:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009b24:	e055      	b.n	8009bd2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a6f      	ldr	r2, [pc, #444]	@ (8009ce8 <USB_HC_Init+0x254>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d151      	bne.n	8009bd2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	78fa      	ldrb	r2, [r7, #3]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009b4c:	60d3      	str	r3, [r2, #12]
      break;
 8009b4e:	e040      	b.n	8009bd2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	da34      	bge.n	8009bd6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b8c:	e023      	b.n	8009bd6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b8e:	78fb      	ldrb	r3, [r7, #3]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f240 2325 	movw	r3, #549	@ 0x225
 8009ba0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	da17      	bge.n	8009bda <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009baa:	78fb      	ldrb	r3, [r7, #3]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	78fa      	ldrb	r2, [r7, #3]
 8009bba:	0151      	lsls	r1, r2, #5
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009bc4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009bc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009bca:	e006      	b.n	8009bda <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	77fb      	strb	r3, [r7, #31]
      break;
 8009bd0:	e004      	b.n	8009bdc <USB_HC_Init+0x148>
      break;
 8009bd2:	bf00      	nop
 8009bd4:	e002      	b.n	8009bdc <USB_HC_Init+0x148>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e000      	b.n	8009bdc <USB_HC_Init+0x148>
      break;
 8009bda:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009be8:	461a      	mov	r2, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c08:	f043 0302 	orr.w	r3, r3, #2
 8009c0c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c22:	6939      	ldr	r1, [r7, #16]
 8009c24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009c38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	da03      	bge.n	8009c48 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009c40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c44:	61bb      	str	r3, [r7, #24]
 8009c46:	e001      	b.n	8009c4c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fef9 	bl	8009a44 <USB_GetHostSpeed>
 8009c52:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009c54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d106      	bne.n	8009c6a <USB_HC_Init+0x1d6>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d003      	beq.n	8009c6a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e001      	b.n	8009c6e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c6e:	787b      	ldrb	r3, [r7, #1]
 8009c70:	059b      	lsls	r3, r3, #22
 8009c72:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c76:	78bb      	ldrb	r3, [r7, #2]
 8009c78:	02db      	lsls	r3, r3, #11
 8009c7a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c7e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c84:	049b      	lsls	r3, r3, #18
 8009c86:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009c8c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c92:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009ca8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009cac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009cae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d003      	beq.n	8009cbe <USB_HC_Init+0x22a>
 8009cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d10f      	bne.n	8009cde <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	0151      	lsls	r1, r2, #5
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	440a      	add	r2, r1
 8009cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009cdc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3720      	adds	r7, #32
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	40040000 	.word	0x40040000

08009cec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	@ 0x30
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009d04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d08:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8009e84 <USB_HC_StartXfer+0x198>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d12f      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d11c      	bne.n	8009d52 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	7c9b      	ldrb	r3, [r3, #18]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <USB_HC_StartXfer+0x3c>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	7c9b      	ldrb	r3, [r3, #18]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d124      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	799b      	ldrb	r3, [r3, #6]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d120      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	6a3a      	ldr	r2, [r7, #32]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d4e:	60d3      	str	r3, [r2, #12]
 8009d50:	e00f      	b.n	8009d72 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	791b      	ldrb	r3, [r3, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	795b      	ldrb	r3, [r3, #5]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d107      	bne.n	8009d72 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	785b      	ldrb	r3, [r3, #1]
 8009d66:	4619      	mov	r1, r3
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 fb6b 	bl	800a444 <USB_DoPing>
        return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e232      	b.n	800a1d8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	799b      	ldrb	r3, [r3, #6]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d158      	bne.n	8009e2c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	78db      	ldrb	r3, [r3, #3]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d007      	beq.n	8009d96 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	8a92      	ldrh	r2, [r2, #20]
 8009d8c:	fb03 f202 	mul.w	r2, r3, r2
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	61da      	str	r2, [r3, #28]
 8009d94:	e07c      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7c9b      	ldrb	r3, [r3, #18]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d130      	bne.n	8009e00 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	2bbc      	cmp	r3, #188	@ 0xbc
 8009da4:	d918      	bls.n	8009dd8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	8a9b      	ldrh	r3, [r3, #20]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	69da      	ldr	r2, [r3, #28]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d003      	beq.n	8009dc8 <USB_HC_StartXfer+0xdc>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d103      	bne.n	8009dd0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	60da      	str	r2, [r3, #12]
 8009dce:	e05f      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	60da      	str	r2, [r3, #12]
 8009dd6:	e05b      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d007      	beq.n	8009df8 <USB_HC_StartXfer+0x10c>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d003      	beq.n	8009df8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2204      	movs	r2, #4
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	e04b      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2203      	movs	r2, #3
 8009dfc:	60da      	str	r2, [r3, #12]
 8009dfe:	e047      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d10d      	bne.n	8009e22 <USB_HC_StartXfer+0x136>
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	8a92      	ldrh	r2, [r2, #20]
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d907      	bls.n	8009e22 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009e12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	8a92      	ldrh	r2, [r2, #20]
 8009e18:	fb03 f202 	mul.w	r2, r3, r2
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	61da      	str	r2, [r3, #28]
 8009e20:	e036      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	6a1a      	ldr	r2, [r3, #32]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	61da      	str	r2, [r3, #28]
 8009e2a:	e031      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d018      	beq.n	8009e66 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	8a92      	ldrh	r2, [r2, #20]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	8a92      	ldrh	r2, [r2, #20]
 8009e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e48:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009e4a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009e4c:	8b7b      	ldrh	r3, [r7, #26]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d90b      	bls.n	8009e6a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009e52:	8b7b      	ldrh	r3, [r7, #26]
 8009e54:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009e56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	8a92      	ldrh	r2, [r2, #20]
 8009e5c:	fb03 f202 	mul.w	r2, r3, r2
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	61da      	str	r2, [r3, #28]
 8009e64:	e001      	b.n	8009e6a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009e66:	2301      	movs	r3, #1
 8009e68:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	78db      	ldrb	r3, [r3, #3]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009e72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	8a92      	ldrh	r2, [r2, #20]
 8009e78:	fb03 f202 	mul.w	r2, r3, r2
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	61da      	str	r2, [r3, #28]
 8009e80:	e006      	b.n	8009e90 <USB_HC_StartXfer+0x1a4>
 8009e82:	bf00      	nop
 8009e84:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6a1a      	ldr	r2, [r3, #32]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009e9a:	04d9      	lsls	r1, r3, #19
 8009e9c:	4ba3      	ldr	r3, [pc, #652]	@ (800a12c <USB_HC_StartXfer+0x440>)
 8009e9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009ea0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	7d9b      	ldrb	r3, [r3, #22]
 8009ea6:	075b      	lsls	r3, r3, #29
 8009ea8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009eac:	69f9      	ldr	r1, [r7, #28]
 8009eae:	0148      	lsls	r0, r1, #5
 8009eb0:	6a39      	ldr	r1, [r7, #32]
 8009eb2:	4401      	add	r1, r0
 8009eb4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009eb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009eba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6999      	ldr	r1, [r3, #24]
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	bf0c      	ite	eq
 8009ee6:	2301      	moveq	r3, #1
 8009ee8:	2300      	movne	r3, #0
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69fa      	ldr	r2, [r7, #28]
 8009efe:	0151      	lsls	r1, r2, #5
 8009f00:	6a3a      	ldr	r2, [r7, #32]
 8009f02:	440a      	add	r2, r1
 8009f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	7e7b      	ldrb	r3, [r7, #25]
 8009f1e:	075b      	lsls	r3, r3, #29
 8009f20:	69f9      	ldr	r1, [r7, #28]
 8009f22:	0148      	lsls	r0, r1, #5
 8009f24:	6a39      	ldr	r1, [r7, #32]
 8009f26:	4401      	add	r1, r0
 8009f28:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	799b      	ldrb	r3, [r3, #6]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	f040 80c3 	bne.w	800a0c0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	7c5b      	ldrb	r3, [r3, #17]
 8009f3e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009f44:	4313      	orrs	r3, r2
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	6a3a      	ldr	r2, [r7, #32]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009f56:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	6a3a      	ldr	r2, [r7, #32]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009f76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	79db      	ldrb	r3, [r3, #7]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d123      	bne.n	8009fc8 <USB_HC_StartXfer+0x2dc>
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	78db      	ldrb	r3, [r3, #3]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11f      	bne.n	8009fc8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	0151      	lsls	r1, r2, #5
 8009f9a:	6a3a      	ldr	r2, [r7, #32]
 8009f9c:	440a      	add	r2, r1
 8009f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fa6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	0151      	lsls	r1, r2, #5
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	440a      	add	r2, r1
 8009fbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fc6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	7c9b      	ldrb	r3, [r3, #18]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d003      	beq.n	8009fd8 <USB_HC_StartXfer+0x2ec>
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	7c9b      	ldrb	r3, [r3, #18]
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d117      	bne.n	800a008 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d113      	bne.n	800a008 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	78db      	ldrb	r3, [r3, #3]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d10f      	bne.n	800a008 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a006:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	7c9b      	ldrb	r3, [r3, #18]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d162      	bne.n	800a0d6 <USB_HC_StartXfer+0x3ea>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	78db      	ldrb	r3, [r3, #3]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d15e      	bne.n	800a0d6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d858      	bhi.n	800a0d4 <USB_HC_StartXfer+0x3e8>
 800a022:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <USB_HC_StartXfer+0x33c>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a05b 	.word	0x0800a05b
 800a030:	0800a07d 	.word	0x0800a07d
 800a034:	0800a09f 	.word	0x0800a09f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	6a3a      	ldr	r2, [r7, #32]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a056:	6053      	str	r3, [r2, #4]
          break;
 800a058:	e03d      	b.n	800a0d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	4413      	add	r3, r2
 800a062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	69fa      	ldr	r2, [r7, #28]
 800a06a:	0151      	lsls	r1, r2, #5
 800a06c:	6a3a      	ldr	r2, [r7, #32]
 800a06e:	440a      	add	r2, r1
 800a070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a074:	f043 030e 	orr.w	r3, r3, #14
 800a078:	6053      	str	r3, [r2, #4]
          break;
 800a07a:	e02c      	b.n	800a0d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	4413      	add	r3, r2
 800a084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	6a3a      	ldr	r2, [r7, #32]
 800a090:	440a      	add	r2, r1
 800a092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a09a:	6053      	str	r3, [r2, #4]
          break;
 800a09c:	e01b      	b.n	800a0d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	69fa      	ldr	r2, [r7, #28]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	6a3a      	ldr	r2, [r7, #32]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0bc:	6053      	str	r3, [r2, #4]
          break;
 800a0be:	e00a      	b.n	800a0d6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6053      	str	r3, [r2, #4]
 800a0d2:	e000      	b.n	800a0d6 <USB_HC_StartXfer+0x3ea>
          break;
 800a0d4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0ec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	78db      	ldrb	r3, [r3, #3]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0fc:	613b      	str	r3, [r7, #16]
 800a0fe:	e003      	b.n	800a108 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a106:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a10e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	4413      	add	r3, r2
 800a118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a11c:	461a      	mov	r2, r3
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	e055      	b.n	800a1d8 <USB_HC_StartXfer+0x4ec>
 800a12c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	78db      	ldrb	r3, [r3, #3]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d14e      	bne.n	800a1d6 <USB_HC_StartXfer+0x4ea>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d04a      	beq.n	800a1d6 <USB_HC_StartXfer+0x4ea>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	79db      	ldrb	r3, [r3, #7]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d146      	bne.n	800a1d6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	7c9b      	ldrb	r3, [r3, #18]
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d831      	bhi.n	800a1b4 <USB_HC_StartXfer+0x4c8>
 800a150:	a201      	add	r2, pc, #4	@ (adr r2, 800a158 <USB_HC_StartXfer+0x46c>)
 800a152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a156:	bf00      	nop
 800a158:	0800a169 	.word	0x0800a169
 800a15c:	0800a18d 	.word	0x0800a18d
 800a160:	0800a169 	.word	0x0800a169
 800a164:	0800a18d 	.word	0x0800a18d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	3303      	adds	r3, #3
 800a16e:	089b      	lsrs	r3, r3, #2
 800a170:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a172:	8afa      	ldrh	r2, [r7, #22]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a178:	b29b      	uxth	r3, r3
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d91c      	bls.n	800a1b8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f043 0220 	orr.w	r2, r3, #32
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	619a      	str	r2, [r3, #24]
        }
        break;
 800a18a:	e015      	b.n	800a1b8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	3303      	adds	r3, #3
 800a192:	089b      	lsrs	r3, r3, #2
 800a194:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a196:	8afa      	ldrh	r2, [r7, #22]
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90a      	bls.n	800a1bc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	619a      	str	r2, [r3, #24]
        }
        break;
 800a1b2:	e003      	b.n	800a1bc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a1b4:	bf00      	nop
 800a1b6:	e002      	b.n	800a1be <USB_HC_StartXfer+0x4d2>
        break;
 800a1b8:	bf00      	nop
 800a1ba:	e000      	b.n	800a1be <USB_HC_StartXfer+0x4d2>
        break;
 800a1bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6999      	ldr	r1, [r3, #24]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	785a      	ldrb	r2, [r3, #1]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	9000      	str	r0, [sp, #0]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7ff f9c9 	bl	8009568 <USB_WritePacket>
  }

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3728      	adds	r7, #40	@ 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	b29b      	uxth	r3, r3
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a202:	b480      	push	{r7}
 800a204:	b089      	sub	sp, #36	@ 0x24
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a212:	78fb      	ldrb	r3, [r7, #3]
 800a214:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	4413      	add	r3, r2
 800a222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	0c9b      	lsrs	r3, r3, #18
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	0fdb      	lsrs	r3, r3, #31
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	0fdb      	lsrs	r3, r3, #31
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b20      	cmp	r3, #32
 800a266:	d10d      	bne.n	800a284 <USB_HC_Halt+0x82>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <USB_HC_Halt+0x82>
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d005      	beq.n	800a280 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d002      	beq.n	800a280 <USB_HC_Halt+0x7e>
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b03      	cmp	r3, #3
 800a27e:	d101      	bne.n	800a284 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	e0d8      	b.n	800a436 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <USB_HC_Halt+0x8e>
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d173      	bne.n	800a378 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f003 0320 	and.w	r3, r3, #32
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d14a      	bne.n	800a352 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d133      	bne.n	800a330 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	0151      	lsls	r1, r2, #5
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	440a      	add	r2, r1
 800a2de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	69fa      	ldr	r2, [r7, #28]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a302:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a306:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	3301      	adds	r3, #1
 800a30c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a314:	d82e      	bhi.n	800a374 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a32c:	d0ec      	beq.n	800a308 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a32e:	e081      	b.n	800a434 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	4413      	add	r3, r2
 800a338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	440a      	add	r2, r1
 800a346:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a34a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a34e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a350:	e070      	b.n	800a434 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	0151      	lsls	r1, r2, #5
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	440a      	add	r2, r1
 800a368:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a36c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a370:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a372:	e05f      	b.n	800a434 <USB_HC_Halt+0x232>
            break;
 800a374:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a376:	e05d      	b.n	800a434 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	015a      	lsls	r2, r3, #5
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	4413      	add	r3, r2
 800a380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a392:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a396:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d133      	bne.n	800a410 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	0151      	lsls	r1, r2, #5
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	440a      	add	r2, r1
 800a3de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a3e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3f4:	d81d      	bhi.n	800a432 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a40c:	d0ec      	beq.n	800a3e8 <USB_HC_Halt+0x1e6>
 800a40e:	e011      	b.n	800a434 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	4413      	add	r3, r2
 800a418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	440a      	add	r2, r1
 800a426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a42a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e000      	b.n	800a434 <USB_HC_Halt+0x232>
          break;
 800a432:	bf00      	nop
    }
  }

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3724      	adds	r7, #36	@ 0x24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
	...

0800a444 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a458:	2301      	movs	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	04da      	lsls	r2, r3, #19
 800a460:	4b15      	ldr	r3, [pc, #84]	@ (800a4b8 <USB_DoPing+0x74>)
 800a462:	4013      	ands	r3, r2
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	0151      	lsls	r1, r2, #5
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	440a      	add	r2, r1
 800a46c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a474:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a48c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a494:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	1ff80000 	.word	0x1ff80000

0800a4bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fe ff8c 	bl	80093ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a4d6:	2110      	movs	r1, #16
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe ffe5 	bl	80094a8 <USB_FlushTxFifo>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff f80f 	bl	800950c <USB_FlushRxFifo>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61bb      	str	r3, [r7, #24]
 800a4fc:	e01f      	b.n	800a53e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	4413      	add	r3, r2
 800a506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a514:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a51c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a524:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a532:	461a      	mov	r2, r3
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	3301      	adds	r3, #1
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b0f      	cmp	r3, #15
 800a542:	d9dc      	bls.n	800a4fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a544:	2300      	movs	r3, #0
 800a546:	61bb      	str	r3, [r7, #24]
 800a548:	e034      	b.n	800a5b4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	4413      	add	r3, r2
 800a552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a560:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a568:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a570:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a57e:	461a      	mov	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3301      	adds	r3, #1
 800a588:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a590:	d80c      	bhi.n	800a5ac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5a8:	d0ec      	beq.n	800a584 <USB_StopHost+0xc8>
 800a5aa:	e000      	b.n	800a5ae <USB_StopHost+0xf2>
        break;
 800a5ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	61bb      	str	r3, [r7, #24]
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	d9c7      	bls.n	800a54a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a5c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7fe fefb 	bl	80093cc <USB_EnableGlobalInt>

  return ret;
 800a5d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b089      	sub	sp, #36	@ 0x24
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	2102      	movs	r1, #2
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fcd1 	bl	800af96 <USBH_FindInterface>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	2bff      	cmp	r3, #255	@ 0xff
 800a5fc:	d002      	beq.n	800a604 <USBH_CDC_InterfaceInit+0x24>
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d901      	bls.n	800a608 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a604:	2302      	movs	r3, #2
 800a606:	e13d      	b.n	800a884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fca6 	bl	800af5e <USBH_SelectInterface>
 800a612:	4603      	mov	r3, r0
 800a614:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a616:	7bbb      	ldrb	r3, [r7, #14]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a61c:	2302      	movs	r3, #2
 800a61e:	e131      	b.n	800a884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a626:	2050      	movs	r0, #80	@ 0x50
 800a628:	f006 fc26 	bl	8010e78 <malloc>
 800a62c:	4603      	mov	r3, r0
 800a62e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a640:	2302      	movs	r3, #2
 800a642:	e11f      	b.n	800a884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a644:	2250      	movs	r2, #80	@ 0x50
 800a646:	2100      	movs	r1, #0
 800a648:	68b8      	ldr	r0, [r7, #8]
 800a64a:	f006 feeb 	bl	8011424 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	211a      	movs	r1, #26
 800a654:	fb01 f303 	mul.w	r3, r1, r3
 800a658:	4413      	add	r3, r2
 800a65a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	b25b      	sxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	da15      	bge.n	800a692 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	211a      	movs	r1, #26
 800a66c:	fb01 f303 	mul.w	r3, r1, r3
 800a670:	4413      	add	r3, r2
 800a672:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a676:	781a      	ldrb	r2, [r3, #0]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	211a      	movs	r1, #26
 800a682:	fb01 f303 	mul.w	r3, r1, r3
 800a686:	4413      	add	r3, r2
 800a688:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a68c:	881a      	ldrh	r2, [r3, #0]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f002 fa18 	bl	800cace <USBH_AllocPipe>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	7819      	ldrb	r1, [r3, #0]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	7858      	ldrb	r0, [r3, #1]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	8952      	ldrh	r2, [r2, #10]
 800a6be:	9202      	str	r2, [sp, #8]
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	9201      	str	r2, [sp, #4]
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	4623      	mov	r3, r4
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f002 f9d0 	bl	800ca70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f006 fb47 	bl	8010d6c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a6de:	2300      	movs	r3, #0
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	210a      	movs	r1, #10
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fc56 	bl	800af96 <USBH_FindInterface>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2bff      	cmp	r3, #255	@ 0xff
 800a6f2:	d002      	beq.n	800a6fa <USBH_CDC_InterfaceInit+0x11a>
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d901      	bls.n	800a6fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e0c2      	b.n	800a884 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	211a      	movs	r1, #26
 800a704:	fb01 f303 	mul.w	r3, r1, r3
 800a708:	4413      	add	r3, r2
 800a70a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	b25b      	sxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	da16      	bge.n	800a744 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	211a      	movs	r1, #26
 800a71c:	fb01 f303 	mul.w	r3, r1, r3
 800a720:	4413      	add	r3, r2
 800a722:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a726:	781a      	ldrb	r2, [r3, #0]
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	211a      	movs	r1, #26
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	4413      	add	r3, r2
 800a738:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a73c:	881a      	ldrh	r2, [r3, #0]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	835a      	strh	r2, [r3, #26]
 800a742:	e015      	b.n	800a770 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	211a      	movs	r1, #26
 800a74a:	fb01 f303 	mul.w	r3, r1, r3
 800a74e:	4413      	add	r3, r2
 800a750:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a754:	781a      	ldrb	r2, [r3, #0]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	211a      	movs	r1, #26
 800a760:	fb01 f303 	mul.w	r3, r1, r3
 800a764:	4413      	add	r3, r2
 800a766:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a76a:	881a      	ldrh	r2, [r3, #0]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	211a      	movs	r1, #26
 800a776:	fb01 f303 	mul.w	r3, r1, r3
 800a77a:	4413      	add	r3, r2
 800a77c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b25b      	sxtb	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	da16      	bge.n	800a7b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	211a      	movs	r1, #26
 800a78e:	fb01 f303 	mul.w	r3, r1, r3
 800a792:	4413      	add	r3, r2
 800a794:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a798:	781a      	ldrb	r2, [r3, #0]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	211a      	movs	r1, #26
 800a7a4:	fb01 f303 	mul.w	r3, r1, r3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a7ae:	881a      	ldrh	r2, [r3, #0]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	835a      	strh	r2, [r3, #26]
 800a7b4:	e015      	b.n	800a7e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	211a      	movs	r1, #26
 800a7bc:	fb01 f303 	mul.w	r3, r1, r3
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a7c6:	781a      	ldrb	r2, [r3, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	211a      	movs	r1, #26
 800a7d2:	fb01 f303 	mul.w	r3, r1, r3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a7dc:	881a      	ldrh	r2, [r3, #0]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	7b9b      	ldrb	r3, [r3, #14]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f002 f970 	bl	800cace <USBH_AllocPipe>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	7bdb      	ldrb	r3, [r3, #15]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f002 f966 	bl	800cace <USBH_AllocPipe>
 800a802:	4603      	mov	r3, r0
 800a804:	461a      	mov	r2, r3
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	7b59      	ldrb	r1, [r3, #13]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	7b98      	ldrb	r0, [r3, #14]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	8b12      	ldrh	r2, [r2, #24]
 800a822:	9202      	str	r2, [sp, #8]
 800a824:	2202      	movs	r2, #2
 800a826:	9201      	str	r2, [sp, #4]
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	4623      	mov	r3, r4
 800a82c:	4602      	mov	r2, r0
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f002 f91e 	bl	800ca70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	7b19      	ldrb	r1, [r3, #12]
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	7bd8      	ldrb	r0, [r3, #15]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	8b52      	ldrh	r2, [r2, #26]
 800a84c:	9202      	str	r2, [sp, #8]
 800a84e:	2202      	movs	r2, #2
 800a850:	9201      	str	r2, [sp, #4]
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	4623      	mov	r3, r4
 800a856:	4602      	mov	r2, r0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f002 f909 	bl	800ca70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	7b5b      	ldrb	r3, [r3, #13]
 800a86a:	2200      	movs	r2, #0
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f006 fa7c 	bl	8010d6c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	7b1b      	ldrb	r3, [r3, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f006 fa75 	bl	8010d6c <USBH_LL_SetToggle>

  return USBH_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd90      	pop	{r4, r7, pc}

0800a88c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00e      	beq.n	800a8c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f002 f8fe 	bl	800caae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f002 f929 	bl	800cb10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	7b1b      	ldrb	r3, [r3, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00e      	beq.n	800a8ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	7b1b      	ldrb	r3, [r3, #12]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f002 f8eb 	bl	800caae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	7b1b      	ldrb	r3, [r3, #12]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f002 f916 	bl	800cb10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	7b5b      	ldrb	r3, [r3, #13]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00e      	beq.n	800a910 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	7b5b      	ldrb	r3, [r3, #13]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f002 f8d8 	bl	800caae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7b5b      	ldrb	r3, [r3, #13]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f002 f903 	bl	800cb10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00b      	beq.n	800a934 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	4618      	mov	r0, r3
 800a926:	f006 faaf 	bl	8010e88 <free>
    phost->pActiveClass->pData = 0U;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a930:	2200      	movs	r2, #0
 800a932:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3340      	adds	r3, #64	@ 0x40
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f8b1 	bl	800aabe <GetLineCoding>
 800a95c:	4603      	mov	r3, r0
 800a95e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a960:	7afb      	ldrb	r3, [r7, #11]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d105      	bne.n	800a972 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a96c:	2102      	movs	r1, #2
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a972:	7afb      	ldrb	r3, [r7, #11]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a984:	2301      	movs	r3, #1
 800a986:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d877      	bhi.n	800aa90 <USBH_CDC_Process+0x114>
 800a9a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a8 <USBH_CDC_Process+0x2c>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9bd 	.word	0x0800a9bd
 800a9ac:	0800a9c3 	.word	0x0800a9c3
 800a9b0:	0800a9f3 	.word	0x0800a9f3
 800a9b4:	0800aa67 	.word	0x0800aa67
 800a9b8:	0800aa75 	.word	0x0800aa75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c0:	e06d      	b.n	800aa9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f897 	bl	800aafc <SetLineCoding>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a9e0:	e058      	b.n	800aa94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d055      	beq.n	800aa94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a9f0:	e050      	b.n	800aa94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	3340      	adds	r3, #64	@ 0x40
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f860 	bl	800aabe <GetLineCoding>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d126      	bne.n	800aa56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa1a:	791b      	ldrb	r3, [r3, #4]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d13b      	bne.n	800aa98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d133      	bne.n	800aa98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d12b      	bne.n	800aa98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d124      	bne.n	800aa98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f982 	bl	800ad58 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800aa54:	e020      	b.n	800aa98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d01d      	beq.n	800aa98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2204      	movs	r2, #4
 800aa60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800aa64:	e018      	b.n	800aa98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f867 	bl	800ab3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f8f6 	bl	800ac5e <CDC_ProcessReception>
      break;
 800aa72:	e014      	b.n	800aa9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800aa74:	2100      	movs	r1, #0
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 f984 	bl	800bd84 <USBH_ClrFeature>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10a      	bne.n	800aa9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800aa8e:	e005      	b.n	800aa9c <USBH_CDC_Process+0x120>

    default:
      break;
 800aa90:	bf00      	nop
 800aa92:	e004      	b.n	800aa9e <USBH_CDC_Process+0x122>
      break;
 800aa94:	bf00      	nop
 800aa96:	e002      	b.n	800aa9e <USBH_CDC_Process+0x122>
      break;
 800aa98:	bf00      	nop
 800aa9a:	e000      	b.n	800aa9e <USBH_CDC_Process+0x122>
      break;
 800aa9c:	bf00      	nop

  }

  return status;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	22a1      	movs	r2, #161	@ 0xa1
 800aacc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2221      	movs	r2, #33	@ 0x21
 800aad2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2207      	movs	r2, #7
 800aae4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2207      	movs	r2, #7
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fc7e 	bl	800c3ee <USBH_CtlReq>
 800aaf2:	4603      	mov	r3, r0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2221      	movs	r2, #33	@ 0x21
 800ab0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2207      	movs	r2, #7
 800ab22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2207      	movs	r2, #7
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 fc5f 	bl	800c3ee <USBH_CtlReq>
 800ab30:	4603      	mov	r3, r0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b086      	sub	sp, #24
 800ab3e:	af02      	add	r7, sp, #8
 800ab40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d002      	beq.n	800ab60 <CDC_ProcessTransmission+0x26>
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d023      	beq.n	800aba6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ab5e:	e07a      	b.n	800ac56 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	8b12      	ldrh	r2, [r2, #24]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d90b      	bls.n	800ab84 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	69d9      	ldr	r1, [r3, #28]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8b1a      	ldrh	r2, [r3, #24]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	7b5b      	ldrb	r3, [r3, #13]
 800ab78:	2001      	movs	r0, #1
 800ab7a:	9000      	str	r0, [sp, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 ff34 	bl	800c9ea <USBH_BulkSendData>
 800ab82:	e00b      	b.n	800ab9c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	7b5b      	ldrb	r3, [r3, #13]
 800ab92:	2001      	movs	r0, #1
 800ab94:	9000      	str	r0, [sp, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f001 ff27 	bl	800c9ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800aba4:	e057      	b.n	800ac56 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	7b5b      	ldrb	r3, [r3, #13]
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f006 f8b3 	bl	8010d18 <USBH_LL_GetURBState>
 800abb2:	4603      	mov	r3, r0
 800abb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800abb6:	7afb      	ldrb	r3, [r7, #11]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d136      	bne.n	800ac2a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	8b12      	ldrh	r2, [r2, #24]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d90e      	bls.n	800abe6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	8b12      	ldrh	r2, [r2, #24]
 800abd0:	1a9a      	subs	r2, r3, r2
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	8b12      	ldrh	r2, [r2, #24]
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	61da      	str	r2, [r3, #28]
 800abe4:	e002      	b.n	800abec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800abfc:	e006      	b.n	800ac0c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f892 	bl	800ad30 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2204      	movs	r2, #4
 800ac10:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ac20:	2300      	movs	r3, #0
 800ac22:	2200      	movs	r2, #0
 800ac24:	f002 fa34 	bl	800d090 <osMessageQueuePut>
      break;
 800ac28:	e014      	b.n	800ac54 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800ac2a:	7afb      	ldrb	r3, [r7, #11]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d111      	bne.n	800ac54 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f002 fa1e 	bl	800d090 <osMessageQueuePut>
      break;
 800ac54:	bf00      	nop
  }
}
 800ac56:	bf00      	nop
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d002      	beq.n	800ac84 <CDC_ProcessReception+0x26>
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d00e      	beq.n	800aca0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ac82:	e051      	b.n	800ad28 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	6a19      	ldr	r1, [r3, #32]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	8b5a      	ldrh	r2, [r3, #26]
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	7b1b      	ldrb	r3, [r3, #12]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f001 fecf 	bl	800ca34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ac9e:	e043      	b.n	800ad28 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	7b1b      	ldrb	r3, [r3, #12]
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f006 f836 	bl	8010d18 <USBH_LL_GetURBState>
 800acac:	4603      	mov	r3, r0
 800acae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800acb0:	7cfb      	ldrb	r3, [r7, #19]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d137      	bne.n	800ad26 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	7b1b      	ldrb	r3, [r3, #12]
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f005 ff99 	bl	8010bf4 <USBH_LL_GetLastXferSize>
 800acc2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	429a      	cmp	r2, r3
 800accc:	d016      	beq.n	800acfc <CDC_ProcessReception+0x9e>
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	8b5b      	ldrh	r3, [r3, #26]
 800acd2:	461a      	mov	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d910      	bls.n	800acfc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	1ad2      	subs	r2, r2, r3
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	6a1a      	ldr	r2, [r3, #32]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	441a      	add	r2, r3
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2203      	movs	r2, #3
 800acf6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800acfa:	e006      	b.n	800ad0a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f81d 	bl	800ad44 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	2200      	movs	r2, #0
 800ad22:	f002 f9b5 	bl	800d090 <osMessageQueuePut>
      break;
 800ad26:	bf00      	nop
  }
}
 800ad28:	bf00      	nop
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	4613      	mov	r3, r2
 800ad78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ad80:	2302      	movs	r3, #2
 800ad82:	e044      	b.n	800ae0e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	79fa      	ldrb	r2, [r7, #7]
 800ad88:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f000 f841 	bl	800ae24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800add0:	2200      	movs	r2, #0
 800add2:	2104      	movs	r1, #4
 800add4:	2010      	movs	r0, #16
 800add6:	f002 f8e7 	bl	800cfa8 <osMessageQueueNew>
 800adda:	4602      	mov	r2, r0
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800ade2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae18 <USBH_Init+0xac>)
 800ade4:	4a0d      	ldr	r2, [pc, #52]	@ (800ae1c <USBH_Init+0xb0>)
 800ade6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800ade8:	4b0b      	ldr	r3, [pc, #44]	@ (800ae18 <USBH_Init+0xac>)
 800adea:	2280      	movs	r2, #128	@ 0x80
 800adec:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800adee:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <USBH_Init+0xac>)
 800adf0:	2218      	movs	r2, #24
 800adf2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800adf4:	4a08      	ldr	r2, [pc, #32]	@ (800ae18 <USBH_Init+0xac>)
 800adf6:	68f9      	ldr	r1, [r7, #12]
 800adf8:	4809      	ldr	r0, [pc, #36]	@ (800ae20 <USBH_Init+0xb4>)
 800adfa:	f001 ff59 	bl	800ccb0 <osThreadNew>
 800adfe:	4602      	mov	r2, r0
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f005 fe40 	bl	8010a8c <USBH_LL_Init>

  return USBH_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	2000614c 	.word	0x2000614c
 800ae1c:	08012098 	.word	0x08012098
 800ae20:	0800bad5 	.word	0x0800bad5

0800ae24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e009      	b.n	800ae4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	33e0      	adds	r3, #224	@ 0xe0
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	2200      	movs	r2, #0
 800ae42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b0f      	cmp	r3, #15
 800ae4e:	d9f2      	bls.n	800ae36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	e009      	b.n	800ae6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae60:	2200      	movs	r2, #0
 800ae62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3301      	adds	r3, #1
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae70:	d3f1      	bcc.n	800ae56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2240      	movs	r2, #64	@ 0x40
 800ae96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	331c      	adds	r3, #28
 800aec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aec6:	2100      	movs	r1, #0
 800aec8:	4618      	mov	r0, r3
 800aeca:	f006 faab 	bl	8011424 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aed8:	2100      	movs	r1, #0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f006 faa2 	bl	8011424 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800aee6:	2212      	movs	r2, #18
 800aee8:	2100      	movs	r1, #0
 800aeea:	4618      	mov	r0, r3
 800aeec:	f006 fa9a 	bl	8011424 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aef6:	223e      	movs	r2, #62	@ 0x3e
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f006 fa92 	bl	8011424 <memset>

  return USBH_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d016      	beq.n	800af4c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800af24:	2b00      	cmp	r3, #0
 800af26:	d10e      	bne.n	800af46 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800af2e:	1c59      	adds	r1, r3, #1
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	33de      	adds	r3, #222	@ 0xde
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]
 800af44:	e004      	b.n	800af50 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800af46:	2302      	movs	r3, #2
 800af48:	73fb      	strb	r3, [r7, #15]
 800af4a:	e001      	b.n	800af50 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800af4c:	2302      	movs	r3, #2
 800af4e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	460b      	mov	r3, r1
 800af68:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800af74:	78fa      	ldrb	r2, [r7, #3]
 800af76:	429a      	cmp	r2, r3
 800af78:	d204      	bcs.n	800af84 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	78fa      	ldrb	r2, [r7, #3]
 800af7e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800af82:	e001      	b.n	800af88 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800af84:	2302      	movs	r3, #2
 800af86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af88:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800af96:	b480      	push	{r7}
 800af98:	b087      	sub	sp, #28
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	461a      	mov	r2, r3
 800afa4:	4603      	mov	r3, r0
 800afa6:	70fb      	strb	r3, [r7, #3]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70bb      	strb	r3, [r7, #2]
 800afac:	4613      	mov	r3, r2
 800afae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800afb4:	2300      	movs	r3, #0
 800afb6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800afbe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800afc0:	e025      	b.n	800b00e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	221a      	movs	r2, #26
 800afc6:	fb02 f303 	mul.w	r3, r2, r3
 800afca:	3308      	adds	r3, #8
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	4413      	add	r3, r2
 800afd0:	3302      	adds	r3, #2
 800afd2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	795b      	ldrb	r3, [r3, #5]
 800afd8:	78fa      	ldrb	r2, [r7, #3]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d002      	beq.n	800afe4 <USBH_FindInterface+0x4e>
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	2bff      	cmp	r3, #255	@ 0xff
 800afe2:	d111      	bne.n	800b008 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800afe8:	78ba      	ldrb	r2, [r7, #2]
 800afea:	429a      	cmp	r2, r3
 800afec:	d002      	beq.n	800aff4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800afee:	78bb      	ldrb	r3, [r7, #2]
 800aff0:	2bff      	cmp	r3, #255	@ 0xff
 800aff2:	d109      	bne.n	800b008 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aff8:	787a      	ldrb	r2, [r7, #1]
 800affa:	429a      	cmp	r2, r3
 800affc:	d002      	beq.n	800b004 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800affe:	787b      	ldrb	r3, [r7, #1]
 800b000:	2bff      	cmp	r3, #255	@ 0xff
 800b002:	d101      	bne.n	800b008 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	e006      	b.n	800b016 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	3301      	adds	r3, #1
 800b00c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d9d6      	bls.n	800afc2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b014:	23ff      	movs	r3, #255	@ 0xff
}
 800b016:	4618      	mov	r0, r3
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f005 fd6a 	bl	8010b04 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b030:	2101      	movs	r1, #1
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f005 fe83 	bl	8010d3e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af04      	add	r7, sp, #16
 800b04a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b04c:	2302      	movs	r3, #2
 800b04e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d102      	bne.n	800b066 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2203      	movs	r2, #3
 800b064:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b0b      	cmp	r3, #11
 800b06e:	f200 8244 	bhi.w	800b4fa <USBH_Process+0x4b6>
 800b072:	a201      	add	r2, pc, #4	@ (adr r2, 800b078 <USBH_Process+0x34>)
 800b074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b078:	0800b0a9 	.word	0x0800b0a9
 800b07c:	0800b0f7 	.word	0x0800b0f7
 800b080:	0800b17b 	.word	0x0800b17b
 800b084:	0800b479 	.word	0x0800b479
 800b088:	0800b4fb 	.word	0x0800b4fb
 800b08c:	0800b237 	.word	0x0800b237
 800b090:	0800b403 	.word	0x0800b403
 800b094:	0800b289 	.word	0x0800b289
 800b098:	0800b2c5 	.word	0x0800b2c5
 800b09c:	0800b2fd 	.word	0x0800b2fd
 800b0a0:	0800b35b 	.word	0x0800b35b
 800b0a4:	0800b461 	.word	0x0800b461
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 8224 	beq.w	800b4fe <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b0bc:	20c8      	movs	r0, #200	@ 0xc8
 800b0be:	f005 fe88 	bl	8010dd2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f005 fd7b 	bl	8010bbe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f001 ffce 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b0f4:	e203      	b.n	800b4fe <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d107      	bne.n	800b110 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	e025      	b.n	800b15c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b11a:	d914      	bls.n	800b146 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b122:	3301      	adds	r3, #1
 800b124:	b2da      	uxtb	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b132:	2b03      	cmp	r3, #3
 800b134:	d903      	bls.n	800b13e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	220d      	movs	r2, #13
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	e00e      	b.n	800b15c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e00a      	b.n	800b15c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b14c:	f103 020a 	add.w	r2, r3, #10
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b156:	200a      	movs	r0, #10
 800b158:	f005 fe3b 	bl	8010dd2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b170:	2300      	movs	r3, #0
 800b172:	2200      	movs	r2, #0
 800b174:	f001 ff8c 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b178:	e1c8      	b.n	800b50c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b18a:	2104      	movs	r1, #4
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b190:	2064      	movs	r0, #100	@ 0x64
 800b192:	f005 fe1e 	bl	8010dd2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f005 fcea 	bl	8010b70 <USBH_LL_GetSpeed>
 800b19c:	4603      	mov	r3, r0
 800b19e:	461a      	mov	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2205      	movs	r2, #5
 800b1aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 fc8d 	bl	800cace <USBH_AllocPipe>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b1bc:	2180      	movs	r1, #128	@ 0x80
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 fc85 	bl	800cace <USBH_AllocPipe>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	7919      	ldrb	r1, [r3, #4]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b1e0:	9202      	str	r2, [sp, #8]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	9201      	str	r2, [sp, #4]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2280      	movs	r2, #128	@ 0x80
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 fc3f 	bl	800ca70 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7959      	ldrb	r1, [r3, #5]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b206:	9202      	str	r2, [sp, #8]
 800b208:	2200      	movs	r2, #0
 800b20a:	9201      	str	r2, [sp, #4]
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4603      	mov	r3, r0
 800b210:	2200      	movs	r2, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f001 fc2c 	bl	800ca70 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b22c:	2300      	movs	r3, #0
 800b22e:	2200      	movs	r2, #0
 800b230:	f001 ff2e 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b234:	e16a      	b.n	800b50c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f96e 	bl	800b518 <USBH_HandleEnum>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b00      	cmp	r3, #0
 800b246:	f040 815c 	bne.w	800b502 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d103      	bne.n	800b264 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2208      	movs	r2, #8
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	e002      	b.n	800b26a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2207      	movs	r2, #7
 800b268:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2205      	movs	r2, #5
 800b26e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b27e:	2300      	movs	r3, #0
 800b280:	2200      	movs	r2, #0
 800b282:	f001 ff05 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b286:	e13c      	b.n	800b502 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 8139 	beq.w	800b506 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b29a:	2101      	movs	r1, #1
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2208      	movs	r2, #8
 800b2a4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2205      	movs	r2, #5
 800b2aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f001 fee7 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800b2c2:	e120      	b.n	800b506 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fd12 	bl	800bcf6 <USBH_SetCfg>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2209      	movs	r2, #9
 800b2dc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f001 fecb 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b2fa:	e107      	b.n	800b50c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b00      	cmp	r3, #0
 800b308:	d015      	beq.n	800b336 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b30a:	2101      	movs	r1, #1
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fd15 	bl	800bd3c <USBH_SetFeature>
 800b312:	4603      	mov	r3, r0
 800b314:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d103      	bne.n	800b326 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	220a      	movs	r2, #10
 800b322:	701a      	strb	r2, [r3, #0]
 800b324:	e00a      	b.n	800b33c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d106      	bne.n	800b33c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	220a      	movs	r2, #10
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	e002      	b.n	800b33c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	220a      	movs	r2, #10
 800b33a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b350:	2300      	movs	r3, #0
 800b352:	2200      	movs	r2, #0
 800b354:	f001 fe9c 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b358:	e0d8      	b.n	800b50c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b360:	2b00      	cmp	r3, #0
 800b362:	d03f      	beq.n	800b3e4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
 800b370:	e016      	b.n	800b3a0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b372:	7bfa      	ldrb	r2, [r7, #15]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	32de      	adds	r2, #222	@ 0xde
 800b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37c:	791a      	ldrb	r2, [r3, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b384:	429a      	cmp	r2, r3
 800b386:	d108      	bne.n	800b39a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b388:	7bfa      	ldrb	r2, [r7, #15]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	32de      	adds	r2, #222	@ 0xde
 800b38e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b398:	e005      	b.n	800b3a6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	3301      	adds	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0e5      	beq.n	800b372 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d016      	beq.n	800b3de <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	4798      	blx	r3
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d109      	bne.n	800b3d6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2206      	movs	r2, #6
 800b3c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b3ce:	2103      	movs	r1, #3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	4798      	blx	r3
 800b3d4:	e006      	b.n	800b3e4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	220d      	movs	r2, #13
 800b3da:	701a      	strb	r2, [r3, #0]
 800b3dc:	e002      	b.n	800b3e4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	220d      	movs	r2, #13
 800b3e2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2205      	movs	r2, #5
 800b3e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f001 fe48 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b400:	e084      	b.n	800b50c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d017      	beq.n	800b43c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	4798      	blx	r3
 800b418:	4603      	mov	r3, r0
 800b41a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d103      	bne.n	800b42c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	220b      	movs	r2, #11
 800b428:	701a      	strb	r2, [r3, #0]
 800b42a:	e00a      	b.n	800b442 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b02      	cmp	r3, #2
 800b432:	d106      	bne.n	800b442 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	220d      	movs	r2, #13
 800b438:	701a      	strb	r2, [r3, #0]
 800b43a:	e002      	b.n	800b442 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	220d      	movs	r2, #13
 800b440:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2205      	movs	r2, #5
 800b446:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b456:	2300      	movs	r3, #0
 800b458:	2200      	movs	r2, #0
 800b45a:	f001 fe19 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b45e:	e055      	b.n	800b50c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d04f      	beq.n	800b50a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
      }
      break;
 800b476:	e048      	b.n	800b50a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff fccf 	bl	800ae24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d009      	beq.n	800b4a4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d005      	beq.n	800b4ba <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b4b4:	2105      	movs	r1, #5
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d107      	bne.n	800b4d6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fda7 	bl	800b022 <USBH_Start>
 800b4d4:	e002      	b.n	800b4dc <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f005 fb14 	bl	8010b04 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f001 fdcc 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      break;
 800b4f8:	e008      	b.n	800b50c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800b4fa:	bf00      	nop
 800b4fc:	e006      	b.n	800b50c <USBH_Process+0x4c8>
      break;
 800b4fe:	bf00      	nop
 800b500:	e004      	b.n	800b50c <USBH_Process+0x4c8>
      break;
 800b502:	bf00      	nop
 800b504:	e002      	b.n	800b50c <USBH_Process+0x4c8>
    break;
 800b506:	bf00      	nop
 800b508:	e000      	b.n	800b50c <USBH_Process+0x4c8>
      break;
 800b50a:	bf00      	nop
  }
  return USBH_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop

0800b518 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af04      	add	r7, sp, #16
 800b51e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b520:	2301      	movs	r3, #1
 800b522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b524:	2301      	movs	r3, #1
 800b526:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	785b      	ldrb	r3, [r3, #1]
 800b52c:	2b07      	cmp	r3, #7
 800b52e:	f200 8204 	bhi.w	800b93a <USBH_HandleEnum+0x422>
 800b532:	a201      	add	r2, pc, #4	@ (adr r2, 800b538 <USBH_HandleEnum+0x20>)
 800b534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b538:	0800b559 	.word	0x0800b559
 800b53c:	0800b613 	.word	0x0800b613
 800b540:	0800b67d 	.word	0x0800b67d
 800b544:	0800b707 	.word	0x0800b707
 800b548:	0800b771 	.word	0x0800b771
 800b54c:	0800b7e1 	.word	0x0800b7e1
 800b550:	0800b87d 	.word	0x0800b87d
 800b554:	0800b8fb 	.word	0x0800b8fb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b558:	2108      	movs	r1, #8
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fae8 	bl	800bb30 <USBH_Get_DevDesc>
 800b560:	4603      	mov	r3, r0
 800b562:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d12e      	bne.n	800b5c8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	7919      	ldrb	r1, [r3, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b58e:	9202      	str	r2, [sp, #8]
 800b590:	2200      	movs	r2, #0
 800b592:	9201      	str	r2, [sp, #4]
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	4603      	mov	r3, r0
 800b598:	2280      	movs	r2, #128	@ 0x80
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 fa68 	bl	800ca70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	7959      	ldrb	r1, [r3, #5]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5b4:	9202      	str	r2, [sp, #8]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	9201      	str	r2, [sp, #4]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2200      	movs	r2, #0
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f001 fa55 	bl	800ca70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b5c6:	e1ba      	b.n	800b93e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	f040 81b7 	bne.w	800b93e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d903      	bls.n	800b5f2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	220d      	movs	r2, #13
 800b5ee:	701a      	strb	r2, [r3, #0]
      break;
 800b5f0:	e1a5      	b.n	800b93e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	795b      	ldrb	r3, [r3, #5]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 fa89 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	791b      	ldrb	r3, [r3, #4]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 fa83 	bl	800cb10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	701a      	strb	r2, [r3, #0]
      break;
 800b610:	e195      	b.n	800b93e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b612:	2112      	movs	r1, #18
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fa8b 	bl	800bb30 <USBH_Get_DevDesc>
 800b61a:	4603      	mov	r3, r0
 800b61c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d103      	bne.n	800b62c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b62a:	e18a      	b.n	800b942 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b03      	cmp	r3, #3
 800b630:	f040 8187 	bne.w	800b942 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b63a:	3301      	adds	r3, #1
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d903      	bls.n	800b656 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	220d      	movs	r2, #13
 800b652:	701a      	strb	r2, [r3, #0]
      break;
 800b654:	e175      	b.n	800b942 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	795b      	ldrb	r3, [r3, #5]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 fa57 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	791b      	ldrb	r3, [r3, #4]
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 fa51 	bl	800cb10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]
      break;
 800b67a:	e162      	b.n	800b942 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b67c:	2101      	movs	r1, #1
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fb15 	bl	800bcae <USBH_SetAddress>
 800b684:	4603      	mov	r3, r0
 800b686:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b688:	7bbb      	ldrb	r3, [r7, #14]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d130      	bne.n	800b6f0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b68e:	2002      	movs	r0, #2
 800b690:	f005 fb9f 	bl	8010dd2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2203      	movs	r2, #3
 800b6a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	7919      	ldrb	r1, [r3, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6b6:	9202      	str	r2, [sp, #8]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	9201      	str	r2, [sp, #4]
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2280      	movs	r2, #128	@ 0x80
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 f9d4 	bl	800ca70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7959      	ldrb	r1, [r3, #5]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6dc:	9202      	str	r2, [sp, #8]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	9201      	str	r2, [sp, #4]
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f001 f9c1 	bl	800ca70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b6ee:	e12a      	b.n	800b946 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6f0:	7bbb      	ldrb	r3, [r7, #14]
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	f040 8127 	bne.w	800b946 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	220d      	movs	r2, #13
 800b6fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	705a      	strb	r2, [r3, #1]
      break;
 800b704:	e11f      	b.n	800b946 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b706:	2109      	movs	r1, #9
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fa3d 	bl	800bb88 <USBH_Get_CfgDesc>
 800b70e:	4603      	mov	r3, r0
 800b710:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b712:	7bbb      	ldrb	r3, [r7, #14]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d103      	bne.n	800b720 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2204      	movs	r2, #4
 800b71c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b71e:	e114      	b.n	800b94a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b03      	cmp	r3, #3
 800b724:	f040 8111 	bne.w	800b94a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b72e:	3301      	adds	r3, #1
 800b730:	b2da      	uxtb	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b73e:	2b03      	cmp	r3, #3
 800b740:	d903      	bls.n	800b74a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	220d      	movs	r2, #13
 800b746:	701a      	strb	r2, [r3, #0]
      break;
 800b748:	e0ff      	b.n	800b94a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	795b      	ldrb	r3, [r3, #5]
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f001 f9dd 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	791b      	ldrb	r3, [r3, #4]
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f001 f9d7 	bl	800cb10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]
      break;
 800b76e:	e0ec      	b.n	800b94a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa05 	bl	800bb88 <USBH_Get_CfgDesc>
 800b77e:	4603      	mov	r3, r0
 800b780:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2205      	movs	r2, #5
 800b78c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b78e:	e0de      	b.n	800b94e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b03      	cmp	r3, #3
 800b794:	f040 80db 	bne.w	800b94e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b79e:	3301      	adds	r3, #1
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	d903      	bls.n	800b7ba <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	220d      	movs	r2, #13
 800b7b6:	701a      	strb	r2, [r3, #0]
      break;
 800b7b8:	e0c9      	b.n	800b94e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	795b      	ldrb	r3, [r3, #5]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 f9a5 	bl	800cb10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f001 f99f 	bl	800cb10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]
      break;
 800b7de:	e0b6      	b.n	800b94e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d036      	beq.n	800b858 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b7f6:	23ff      	movs	r3, #255	@ 0xff
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f9ef 	bl	800bbdc <USBH_Get_StringDesc>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d111      	bne.n	800b82c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2206      	movs	r2, #6
 800b80c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2205      	movs	r2, #5
 800b812:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	f001 fc33 	bl	800d090 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b82a:	e092      	b.n	800b952 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	f040 808f 	bne.w	800b952 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2206      	movs	r2, #6
 800b838:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2205      	movs	r2, #5
 800b83e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b84e:	2300      	movs	r3, #0
 800b850:	2200      	movs	r2, #0
 800b852:	f001 fc1d 	bl	800d090 <osMessageQueuePut>
      break;
 800b856:	e07c      	b.n	800b952 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2206      	movs	r2, #6
 800b85c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2205      	movs	r2, #5
 800b862:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b872:	2300      	movs	r3, #0
 800b874:	2200      	movs	r2, #0
 800b876:	f001 fc0b 	bl	800d090 <osMessageQueuePut>
      break;
 800b87a:	e06a      	b.n	800b952 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b882:	2b00      	cmp	r3, #0
 800b884:	d027      	beq.n	800b8d6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b892:	23ff      	movs	r3, #255	@ 0xff
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f9a1 	bl	800bbdc <USBH_Get_StringDesc>
 800b89a:	4603      	mov	r3, r0
 800b89c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d103      	bne.n	800b8ac <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2207      	movs	r2, #7
 800b8a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b8aa:	e054      	b.n	800b956 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d151      	bne.n	800b956 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2207      	movs	r2, #7
 800b8b6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2205      	movs	r2, #5
 800b8bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f001 fbde 	bl	800d090 <osMessageQueuePut>
      break;
 800b8d4:	e03f      	b.n	800b956 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2207      	movs	r2, #7
 800b8da:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2205      	movs	r2, #5
 800b8e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f001 fbcc 	bl	800d090 <osMessageQueuePut>
      break;
 800b8f8:	e02d      	b.n	800b956 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b900:	2b00      	cmp	r3, #0
 800b902:	d017      	beq.n	800b934 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b910:	23ff      	movs	r3, #255	@ 0xff
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f962 	bl	800bbdc <USBH_Get_StringDesc>
 800b918:	4603      	mov	r3, r0
 800b91a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b926:	e018      	b.n	800b95a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d115      	bne.n	800b95a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]
      break;
 800b932:	e012      	b.n	800b95a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
      break;
 800b938:	e00f      	b.n	800b95a <USBH_HandleEnum+0x442>

    default:
      break;
 800b93a:	bf00      	nop
 800b93c:	e00e      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b93e:	bf00      	nop
 800b940:	e00c      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b942:	bf00      	nop
 800b944:	e00a      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b946:	bf00      	nop
 800b948:	e008      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b94a:	bf00      	nop
 800b94c:	e006      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b94e:	bf00      	nop
 800b950:	e004      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b952:	bf00      	nop
 800b954:	e002      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b956:	bf00      	nop
 800b958:	e000      	b.n	800b95c <USBH_HandleEnum+0x444>
      break;
 800b95a:	bf00      	nop
  }
  return Status;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop

0800b968 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b97a:	bf00      	nop
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f804 	bl	800b9aa <USBH_HandleSof>
}
 800b9a2:	bf00      	nop
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b0b      	cmp	r3, #11
 800b9ba:	d10a      	bne.n	800b9d2 <USBH_HandleSof+0x28>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d005      	beq.n	800b9d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	4798      	blx	r3
  }
}
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2200      	movs	r2, #0
 800ba02:	f001 fb45 	bl	800d090 <osMessageQueuePut>
#endif
#endif

  return;
 800ba06:	bf00      	nop
}
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800ba1e:	bf00      	nop
}
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b082      	sub	sp, #8
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ba5e:	2300      	movs	r3, #0
 800ba60:	2200      	movs	r2, #0
 800ba62:	f001 fb15 	bl	800d090 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f005 f852 	bl	8010b3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	791b      	ldrb	r3, [r3, #4]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f001 f837 	bl	800cb10 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	795b      	ldrb	r3, [r3, #5]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 f831 	bl	800cb10 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bac2:	2300      	movs	r3, #0
 800bac4:	2200      	movs	r2, #0
 800bac6:	f001 fae3 	bl	800d090 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800baec:	2200      	movs	r2, #0
 800baee:	f001 fb2f 	bl	800d150 <osMessageQueueGet>
 800baf2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f0      	bne.n	800badc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff faa2 	bl	800b044 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb00:	e7ec      	b.n	800badc <USBH_Process_OS+0x8>

0800bb02 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2200      	movs	r2, #0
 800bb22:	f001 fab5 	bl	800d090 <osMessageQueuePut>
#endif

  return USBH_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bb3c:	887b      	ldrh	r3, [r7, #2]
 800bb3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb42:	d901      	bls.n	800bb48 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e01b      	b.n	800bb80 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bb4e:	887b      	ldrh	r3, [r7, #2]
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	4613      	mov	r3, r2
 800bb54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb58:	2100      	movs	r1, #0
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f872 	bl	800bc44 <USBH_GetDescriptor>
 800bb60:	4603      	mov	r3, r0
 800bb62:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d109      	bne.n	800bb7e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb70:	887a      	ldrh	r2, [r7, #2]
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f929 	bl	800bdcc <USBH_ParseDevDesc>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	331c      	adds	r3, #28
 800bb98:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bb9a:	887b      	ldrh	r3, [r7, #2]
 800bb9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bba0:	d901      	bls.n	800bba6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e016      	b.n	800bbd4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bba6:	887b      	ldrh	r3, [r7, #2]
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f846 	bl	800bc44 <USBH_GetDescriptor>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d107      	bne.n	800bbd2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bbc2:	887b      	ldrh	r3, [r7, #2]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f9af 	bl	800bf2c <USBH_ParseCfgDesc>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	607a      	str	r2, [r7, #4]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	460b      	mov	r3, r1
 800bbea:	72fb      	strb	r3, [r7, #11]
 800bbec:	4613      	mov	r3, r2
 800bbee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bbf0:	893b      	ldrh	r3, [r7, #8]
 800bbf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbf6:	d802      	bhi.n	800bbfe <USBH_Get_StringDesc+0x22>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e01c      	b.n	800bc3c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bc02:	7afb      	ldrb	r3, [r7, #11]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bc0a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bc12:	893b      	ldrh	r3, [r7, #8]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	460b      	mov	r3, r1
 800bc18:	2100      	movs	r1, #0
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 f812 	bl	800bc44 <USBH_GetDescriptor>
 800bc20:	4603      	mov	r3, r0
 800bc22:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d107      	bne.n	800bc3a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bc30:	893a      	ldrh	r2, [r7, #8]
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 fb8d 	bl	800c354 <USBH_ParseStringDesc>
  }

  return status;
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	607b      	str	r3, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	72fb      	strb	r3, [r7, #11]
 800bc52:	4613      	mov	r3, r2
 800bc54:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	789b      	ldrb	r3, [r3, #2]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d11c      	bne.n	800bc98 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc5e:	7afb      	ldrb	r3, [r7, #11]
 800bc60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2206      	movs	r2, #6
 800bc6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	893a      	ldrh	r2, [r7, #8]
 800bc74:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc76:	893b      	ldrh	r3, [r7, #8]
 800bc78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc80:	d104      	bne.n	800bc8c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f240 4209 	movw	r2, #1033	@ 0x409
 800bc88:	829a      	strh	r2, [r3, #20]
 800bc8a:	e002      	b.n	800bc92 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8b3a      	ldrh	r2, [r7, #24]
 800bc96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bc98:	8b3b      	ldrh	r3, [r7, #24]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f000 fba5 	bl	800c3ee <USBH_CtlReq>
 800bca4:	4603      	mov	r3, r0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	789b      	ldrb	r3, [r3, #2]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d10f      	bne.n	800bce2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2205      	movs	r2, #5
 800bccc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bcce:	78fb      	ldrb	r3, [r7, #3]
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bce2:	2200      	movs	r2, #0
 800bce4:	2100      	movs	r1, #0
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fb81 	bl	800c3ee <USBH_CtlReq>
 800bcec:	4603      	mov	r3, r0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	789b      	ldrb	r3, [r3, #2]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d10e      	bne.n	800bd28 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2209      	movs	r2, #9
 800bd14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	887a      	ldrh	r2, [r7, #2]
 800bd1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fb5e 	bl	800c3ee <USBH_CtlReq>
 800bd32:	4603      	mov	r3, r0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	789b      	ldrb	r3, [r3, #2]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10f      	bne.n	800bd70 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2203      	movs	r2, #3
 800bd5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd70:	2200      	movs	r2, #0
 800bd72:	2100      	movs	r1, #0
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fb3a 	bl	800c3ee <USBH_CtlReq>
 800bd7a:	4603      	mov	r3, r0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	789b      	ldrb	r3, [r3, #2]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d10f      	bne.n	800bdb8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bdaa:	78fb      	ldrb	r3, [r7, #3]
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2100      	movs	r1, #0
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fb16 	bl	800c3ee <USBH_CtlReq>
 800bdc2:	4603      	mov	r3, r0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bde0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bdec:	2302      	movs	r3, #2
 800bdee:	e094      	b.n	800bf1a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	781a      	ldrb	r2, [r3, #0]
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	785a      	ldrb	r2, [r3, #1]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3302      	adds	r3, #2
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	3303      	adds	r3, #3
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	021b      	lsls	r3, r3, #8
 800be10:	b29b      	uxth	r3, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	b29a      	uxth	r2, r3
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	791a      	ldrb	r2, [r3, #4]
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	795a      	ldrb	r2, [r3, #5]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	799a      	ldrb	r2, [r3, #6]
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	79da      	ldrb	r2, [r3, #7]
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be40:	2b00      	cmp	r3, #0
 800be42:	d004      	beq.n	800be4e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d11b      	bne.n	800be86 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	79db      	ldrb	r3, [r3, #7]
 800be52:	2b20      	cmp	r3, #32
 800be54:	dc0f      	bgt.n	800be76 <USBH_ParseDevDesc+0xaa>
 800be56:	2b08      	cmp	r3, #8
 800be58:	db0f      	blt.n	800be7a <USBH_ParseDevDesc+0xae>
 800be5a:	3b08      	subs	r3, #8
 800be5c:	4a32      	ldr	r2, [pc, #200]	@ (800bf28 <USBH_ParseDevDesc+0x15c>)
 800be5e:	fa22 f303 	lsr.w	r3, r2, r3
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b00      	cmp	r3, #0
 800be68:	bf14      	ite	ne
 800be6a:	2301      	movne	r3, #1
 800be6c:	2300      	moveq	r3, #0
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b00      	cmp	r3, #0
 800be72:	d106      	bne.n	800be82 <USBH_ParseDevDesc+0xb6>
 800be74:	e001      	b.n	800be7a <USBH_ParseDevDesc+0xae>
 800be76:	2b40      	cmp	r3, #64	@ 0x40
 800be78:	d003      	beq.n	800be82 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2208      	movs	r2, #8
 800be7e:	71da      	strb	r2, [r3, #7]
        break;
 800be80:	e000      	b.n	800be84 <USBH_ParseDevDesc+0xb8>
        break;
 800be82:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800be84:	e00e      	b.n	800bea4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d107      	bne.n	800bea0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	79db      	ldrb	r3, [r3, #7]
 800be94:	2b08      	cmp	r3, #8
 800be96:	d005      	beq.n	800bea4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2208      	movs	r2, #8
 800be9c:	71da      	strb	r2, [r3, #7]
 800be9e:	e001      	b.n	800bea4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bea0:	2303      	movs	r3, #3
 800bea2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bea4:	88fb      	ldrh	r3, [r7, #6]
 800bea6:	2b08      	cmp	r3, #8
 800bea8:	d936      	bls.n	800bf18 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	3308      	adds	r3, #8
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	461a      	mov	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	3309      	adds	r3, #9
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	021b      	lsls	r3, r3, #8
 800beba:	b29b      	uxth	r3, r3
 800bebc:	4313      	orrs	r3, r2
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	330a      	adds	r3, #10
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	330b      	adds	r3, #11
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4313      	orrs	r3, r2
 800bed8:	b29a      	uxth	r2, r3
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	330c      	adds	r3, #12
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	461a      	mov	r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	330d      	adds	r3, #13
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4313      	orrs	r3, r2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	7b9a      	ldrb	r2, [r3, #14]
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	7bda      	ldrb	r2, [r3, #15]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	7c1a      	ldrb	r2, [r3, #16]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	7c5a      	ldrb	r2, [r3, #17]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	371c      	adds	r7, #28
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	01000101 	.word	0x01000101

0800bf2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08c      	sub	sp, #48	@ 0x30
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bf40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e0da      	b.n	800c114 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	785a      	ldrb	r2, [r3, #1]
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	3302      	adds	r3, #2
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	3303      	adds	r3, #3
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	021b      	lsls	r3, r3, #8
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	4313      	orrs	r3, r2
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf8c:	bf28      	it	cs
 800bf8e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	791a      	ldrb	r2, [r3, #4]
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	795a      	ldrb	r2, [r3, #5]
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	799a      	ldrb	r2, [r3, #6]
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	79da      	ldrb	r2, [r3, #7]
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	7a1a      	ldrb	r2, [r3, #8]
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b09      	cmp	r3, #9
 800bfc6:	d002      	beq.n	800bfce <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	2209      	movs	r2, #9
 800bfcc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfce:	88fb      	ldrh	r3, [r7, #6]
 800bfd0:	2b09      	cmp	r3, #9
 800bfd2:	f240 809d 	bls.w	800c110 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfd6:	2309      	movs	r3, #9
 800bfd8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfde:	e081      	b.n	800c0e4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfe0:	f107 0316 	add.w	r3, r7, #22
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfe8:	f000 f9e7 	bl	800c3ba <USBH_GetNextDesc>
 800bfec:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff0:	785b      	ldrb	r3, [r3, #1]
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	d176      	bne.n	800c0e4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	2b09      	cmp	r3, #9
 800bffc:	d002      	beq.n	800c004 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c000:	2209      	movs	r2, #9
 800c002:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c008:	221a      	movs	r2, #26
 800c00a:	fb02 f303 	mul.w	r3, r2, r3
 800c00e:	3308      	adds	r3, #8
 800c010:	6a3a      	ldr	r2, [r7, #32]
 800c012:	4413      	add	r3, r2
 800c014:	3302      	adds	r3, #2
 800c016:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c01a:	69f8      	ldr	r0, [r7, #28]
 800c01c:	f000 f87e 	bl	800c11c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c026:	2300      	movs	r3, #0
 800c028:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c02a:	e043      	b.n	800c0b4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c02c:	f107 0316 	add.w	r3, r7, #22
 800c030:	4619      	mov	r1, r3
 800c032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c034:	f000 f9c1 	bl	800c3ba <USBH_GetNextDesc>
 800c038:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	2b05      	cmp	r3, #5
 800c040:	d138      	bne.n	800c0b4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	795b      	ldrb	r3, [r3, #5]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d113      	bne.n	800c072 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d003      	beq.n	800c05a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	799b      	ldrb	r3, [r3, #6]
 800c056:	2b03      	cmp	r3, #3
 800c058:	d10b      	bne.n	800c072 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	79db      	ldrb	r3, [r3, #7]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <USBH_ParseCfgDesc+0x14e>
 800c062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b09      	cmp	r3, #9
 800c068:	d007      	beq.n	800c07a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06c:	2209      	movs	r2, #9
 800c06e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c070:	e003      	b.n	800c07a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c074:	2207      	movs	r2, #7
 800c076:	701a      	strb	r2, [r3, #0]
 800c078:	e000      	b.n	800c07c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c07a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c07c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c080:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c084:	3201      	adds	r2, #1
 800c086:	00d2      	lsls	r2, r2, #3
 800c088:	211a      	movs	r1, #26
 800c08a:	fb01 f303 	mul.w	r3, r1, r3
 800c08e:	4413      	add	r3, r2
 800c090:	3308      	adds	r3, #8
 800c092:	6a3a      	ldr	r2, [r7, #32]
 800c094:	4413      	add	r3, r2
 800c096:	3304      	adds	r3, #4
 800c098:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c09a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c09c:	69b9      	ldr	r1, [r7, #24]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 f870 	bl	800c184 <USBH_ParseEPDesc>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c0aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	791b      	ldrb	r3, [r3, #4]
 800c0b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d204      	bcs.n	800c0ca <USBH_ParseCfgDesc+0x19e>
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	885a      	ldrh	r2, [r3, #2]
 800c0c4:	8afb      	ldrh	r3, [r7, #22]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d8b0      	bhi.n	800c02c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	791b      	ldrb	r3, [r3, #4]
 800c0ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d201      	bcs.n	800c0da <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e01c      	b.n	800c114 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800c0da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0de:	3301      	adds	r3, #1
 800c0e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d805      	bhi.n	800c0f8 <USBH_ParseCfgDesc+0x1cc>
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	885a      	ldrh	r2, [r3, #2]
 800c0f0:	8afb      	ldrh	r3, [r7, #22]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	f63f af74 	bhi.w	800bfe0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	791b      	ldrb	r3, [r3, #4]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	bf28      	it	cs
 800c100:	2302      	movcs	r3, #2
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c108:	429a      	cmp	r2, r3
 800c10a:	d201      	bcs.n	800c110 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e001      	b.n	800c114 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800c110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c114:	4618      	mov	r0, r3
 800c116:	3730      	adds	r7, #48	@ 0x30
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781a      	ldrb	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	785a      	ldrb	r2, [r3, #1]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	789a      	ldrb	r2, [r3, #2]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	78da      	ldrb	r2, [r3, #3]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	3304      	adds	r3, #4
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	bf28      	it	cs
 800c150:	2302      	movcs	r3, #2
 800c152:	b2da      	uxtb	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	795a      	ldrb	r2, [r3, #5]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	799a      	ldrb	r2, [r3, #6]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	79da      	ldrb	r2, [r3, #7]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	7a1a      	ldrb	r2, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	721a      	strb	r2, [r3, #8]
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c184:	b480      	push	{r7}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	781a      	ldrb	r2, [r3, #0]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	785a      	ldrb	r2, [r3, #1]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	789a      	ldrb	r2, [r3, #2]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	78da      	ldrb	r2, [r3, #3]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	3305      	adds	r3, #5
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	021b      	lsls	r3, r3, #8
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	799a      	ldrb	r2, [r3, #6]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	889b      	ldrh	r3, [r3, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d009      	beq.n	800c1f2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1e6:	d804      	bhi.n	800c1f2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1f0:	d901      	bls.n	800c1f6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d136      	bne.n	800c26e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	78db      	ldrb	r3, [r3, #3]
 800c204:	f003 0303 	and.w	r3, r3, #3
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d108      	bne.n	800c21e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	889b      	ldrh	r3, [r3, #4]
 800c210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c214:	f240 8097 	bls.w	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c218:	2303      	movs	r3, #3
 800c21a:	75fb      	strb	r3, [r7, #23]
 800c21c:	e093      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	78db      	ldrb	r3, [r3, #3]
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d107      	bne.n	800c23a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	889b      	ldrh	r3, [r3, #4]
 800c22e:	2b40      	cmp	r3, #64	@ 0x40
 800c230:	f240 8089 	bls.w	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c234:	2303      	movs	r3, #3
 800c236:	75fb      	strb	r3, [r7, #23]
 800c238:	e085      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	78db      	ldrb	r3, [r3, #3]
 800c23e:	f003 0303 	and.w	r3, r3, #3
 800c242:	2b01      	cmp	r3, #1
 800c244:	d005      	beq.n	800c252 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	78db      	ldrb	r3, [r3, #3]
 800c24a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d10a      	bne.n	800c268 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	799b      	ldrb	r3, [r3, #6]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <USBH_ParseEPDesc+0xde>
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	799b      	ldrb	r3, [r3, #6]
 800c25e:	2b10      	cmp	r3, #16
 800c260:	d970      	bls.n	800c344 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c262:	2303      	movs	r3, #3
 800c264:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c266:	e06d      	b.n	800c344 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c268:	2303      	movs	r3, #3
 800c26a:	75fb      	strb	r3, [r7, #23]
 800c26c:	e06b      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c274:	2b01      	cmp	r3, #1
 800c276:	d13c      	bne.n	800c2f2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	78db      	ldrb	r3, [r3, #3]
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	2b02      	cmp	r3, #2
 800c282:	d005      	beq.n	800c290 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	78db      	ldrb	r3, [r3, #3]
 800c288:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d106      	bne.n	800c29e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	889b      	ldrh	r3, [r3, #4]
 800c294:	2b40      	cmp	r3, #64	@ 0x40
 800c296:	d956      	bls.n	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c298:	2303      	movs	r3, #3
 800c29a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c29c:	e053      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	78db      	ldrb	r3, [r3, #3]
 800c2a2:	f003 0303 	and.w	r3, r3, #3
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d10e      	bne.n	800c2c8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	799b      	ldrb	r3, [r3, #6]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d007      	beq.n	800c2c2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c2b6:	2b10      	cmp	r3, #16
 800c2b8:	d803      	bhi.n	800c2c2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c2be:	2b40      	cmp	r3, #64	@ 0x40
 800c2c0:	d941      	bls.n	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	75fb      	strb	r3, [r7, #23]
 800c2c6:	e03e      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	78db      	ldrb	r3, [r3, #3]
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d10b      	bne.n	800c2ec <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	799b      	ldrb	r3, [r3, #6]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d004      	beq.n	800c2e6 <USBH_ParseEPDesc+0x162>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	889b      	ldrh	r3, [r3, #4]
 800c2e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2e4:	d32f      	bcc.n	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	75fb      	strb	r3, [r7, #23]
 800c2ea:	e02c      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	75fb      	strb	r3, [r7, #23]
 800c2f0:	e029      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d120      	bne.n	800c33e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	78db      	ldrb	r3, [r3, #3]
 800c300:	f003 0303 	and.w	r3, r3, #3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d106      	bne.n	800c316 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	889b      	ldrh	r3, [r3, #4]
 800c30c:	2b08      	cmp	r3, #8
 800c30e:	d01a      	beq.n	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c310:	2303      	movs	r3, #3
 800c312:	75fb      	strb	r3, [r7, #23]
 800c314:	e017      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	78db      	ldrb	r3, [r3, #3]
 800c31a:	f003 0303 	and.w	r3, r3, #3
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d10a      	bne.n	800c338 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	799b      	ldrb	r3, [r3, #6]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d003      	beq.n	800c332 <USBH_ParseEPDesc+0x1ae>
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	889b      	ldrh	r3, [r3, #4]
 800c32e:	2b08      	cmp	r3, #8
 800c330:	d909      	bls.n	800c346 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c332:	2303      	movs	r3, #3
 800c334:	75fb      	strb	r3, [r7, #23]
 800c336:	e006      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c338:	2303      	movs	r3, #3
 800c33a:	75fb      	strb	r3, [r7, #23]
 800c33c:	e003      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c33e:	2303      	movs	r3, #3
 800c340:	75fb      	strb	r3, [r7, #23]
 800c342:	e000      	b.n	800c346 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c344:	bf00      	nop
  }

  return status;
 800c346:	7dfb      	ldrb	r3, [r7, #23]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	371c      	adds	r7, #28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c354:	b480      	push	{r7}
 800c356:	b087      	sub	sp, #28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	4613      	mov	r3, r2
 800c360:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d120      	bne.n	800c3ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	1e9a      	subs	r2, r3, #2
 800c372:	88fb      	ldrh	r3, [r7, #6]
 800c374:	4293      	cmp	r3, r2
 800c376:	bf28      	it	cs
 800c378:	4613      	movcs	r3, r2
 800c37a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3302      	adds	r3, #2
 800c380:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c382:	2300      	movs	r3, #0
 800c384:	82fb      	strh	r3, [r7, #22]
 800c386:	e00b      	b.n	800c3a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c388:	8afb      	ldrh	r3, [r7, #22]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	4413      	add	r3, r2
 800c38e:	781a      	ldrb	r2, [r3, #0]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	3301      	adds	r3, #1
 800c398:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c39a:	8afb      	ldrh	r3, [r7, #22]
 800c39c:	3302      	adds	r3, #2
 800c39e:	82fb      	strh	r3, [r7, #22]
 800c3a0:	8afa      	ldrh	r2, [r7, #22]
 800c3a2:	8abb      	ldrh	r3, [r7, #20]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d3ef      	bcc.n	800c388 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	701a      	strb	r2, [r3, #0]
  }
}
 800c3ae:	bf00      	nop
 800c3b0:	371c      	adds	r7, #28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b086      	sub	sp, #24
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	60b9      	str	r1, [r7, #8]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	789b      	ldrb	r3, [r3, #2]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d002      	beq.n	800c40e <USBH_CtlReq+0x20>
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d01d      	beq.n	800c448 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c40c:	e043      	b.n	800c496 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	88fa      	ldrh	r2, [r7, #6]
 800c418:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2201      	movs	r2, #1
 800c41e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2202      	movs	r2, #2
 800c424:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c426:	2301      	movs	r3, #1
 800c428:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2203      	movs	r2, #3
 800c42e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c43e:	2300      	movs	r3, #0
 800c440:	2200      	movs	r2, #0
 800c442:	f000 fe25 	bl	800d090 <osMessageQueuePut>
      break;
 800c446:	e026      	b.n	800c496 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 f829 	bl	800c4a0 <USBH_HandleControl>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <USBH_CtlReq+0x70>
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d106      	bne.n	800c46c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2201      	movs	r2, #1
 800c462:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	761a      	strb	r2, [r3, #24]
 800c46a:	e005      	b.n	800c478 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d102      	bne.n	800c478 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2203      	movs	r2, #3
 800c47c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c48c:	2300      	movs	r3, #0
 800c48e:	2200      	movs	r2, #0
 800c490:	f000 fdfe 	bl	800d090 <osMessageQueuePut>
      break;
 800c494:	bf00      	nop
  }
  return status;
 800c496:	7dfb      	ldrb	r3, [r7, #23]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af02      	add	r7, sp, #8
 800c4a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7e1b      	ldrb	r3, [r3, #24]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	2b0a      	cmp	r3, #10
 800c4b8:	f200 8229 	bhi.w	800c90e <USBH_HandleControl+0x46e>
 800c4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c4 <USBH_HandleControl+0x24>)
 800c4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c2:	bf00      	nop
 800c4c4:	0800c4f1 	.word	0x0800c4f1
 800c4c8:	0800c50b 	.word	0x0800c50b
 800c4cc:	0800c5ad 	.word	0x0800c5ad
 800c4d0:	0800c5d3 	.word	0x0800c5d3
 800c4d4:	0800c65f 	.word	0x0800c65f
 800c4d8:	0800c689 	.word	0x0800c689
 800c4dc:	0800c74b 	.word	0x0800c74b
 800c4e0:	0800c76d 	.word	0x0800c76d
 800c4e4:	0800c7ff 	.word	0x0800c7ff
 800c4e8:	0800c825 	.word	0x0800c825
 800c4ec:	0800c8b7 	.word	0x0800c8b7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f103 0110 	add.w	r1, r3, #16
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	795b      	ldrb	r3, [r3, #5]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fa17 	bl	800c930 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2202      	movs	r2, #2
 800c506:	761a      	strb	r2, [r3, #24]
      break;
 800c508:	e20c      	b.n	800c924 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	795b      	ldrb	r3, [r3, #5]
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f004 fc01 	bl	8010d18 <USBH_LL_GetURBState>
 800c516:	4603      	mov	r3, r0
 800c518:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c51a:	7bbb      	ldrb	r3, [r7, #14]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d12c      	bne.n	800c57a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7c1b      	ldrb	r3, [r3, #16]
 800c524:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c528:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	8adb      	ldrh	r3, [r3, #22]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00a      	beq.n	800c548 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c532:	7b7b      	ldrb	r3, [r7, #13]
 800c534:	2b80      	cmp	r3, #128	@ 0x80
 800c536:	d103      	bne.n	800c540 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2203      	movs	r2, #3
 800c53c:	761a      	strb	r2, [r3, #24]
 800c53e:	e00d      	b.n	800c55c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2205      	movs	r2, #5
 800c544:	761a      	strb	r2, [r3, #24]
 800c546:	e009      	b.n	800c55c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c548:	7b7b      	ldrb	r3, [r7, #13]
 800c54a:	2b80      	cmp	r3, #128	@ 0x80
 800c54c:	d103      	bne.n	800c556 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2209      	movs	r2, #9
 800c552:	761a      	strb	r2, [r3, #24]
 800c554:	e002      	b.n	800c55c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2207      	movs	r2, #7
 800c55a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2203      	movs	r2, #3
 800c560:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c570:	2300      	movs	r3, #0
 800c572:	2200      	movs	r2, #0
 800c574:	f000 fd8c 	bl	800d090 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c578:	e1cb      	b.n	800c912 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	2b04      	cmp	r3, #4
 800c57e:	d003      	beq.n	800c588 <USBH_HandleControl+0xe8>
 800c580:	7bbb      	ldrb	r3, [r7, #14]
 800c582:	2b02      	cmp	r3, #2
 800c584:	f040 81c5 	bne.w	800c912 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	220b      	movs	r2, #11
 800c58c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2203      	movs	r2, #3
 800c592:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f000 fd73 	bl	800d090 <osMessageQueuePut>
      break;
 800c5aa:	e1b2      	b.n	800c912 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6899      	ldr	r1, [r3, #8]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	899a      	ldrh	r2, [r3, #12]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	791b      	ldrb	r3, [r3, #4]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f9f2 	bl	800c9ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2204      	movs	r2, #4
 800c5ce:	761a      	strb	r2, [r3, #24]
      break;
 800c5d0:	e1a8      	b.n	800c924 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	791b      	ldrb	r3, [r3, #4]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f004 fb9d 	bl	8010d18 <USBH_LL_GetURBState>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c5e2:	7bbb      	ldrb	r3, [r7, #14]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d110      	bne.n	800c60a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2209      	movs	r2, #9
 800c5ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2203      	movs	r2, #3
 800c5f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c602:	2300      	movs	r3, #0
 800c604:	2200      	movs	r2, #0
 800c606:	f000 fd43 	bl	800d090 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b05      	cmp	r3, #5
 800c60e:	d110      	bne.n	800c632 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c610:	2303      	movs	r3, #3
 800c612:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2203      	movs	r2, #3
 800c618:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c628:	2300      	movs	r3, #0
 800c62a:	2200      	movs	r2, #0
 800c62c:	f000 fd30 	bl	800d090 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c630:	e171      	b.n	800c916 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	2b04      	cmp	r3, #4
 800c636:	f040 816e 	bne.w	800c916 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	220b      	movs	r2, #11
 800c63e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2203      	movs	r2, #3
 800c644:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c654:	2300      	movs	r3, #0
 800c656:	2200      	movs	r2, #0
 800c658:	f000 fd1a 	bl	800d090 <osMessageQueuePut>
      break;
 800c65c:	e15b      	b.n	800c916 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6899      	ldr	r1, [r3, #8]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	899a      	ldrh	r2, [r3, #12]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	795b      	ldrb	r3, [r3, #5]
 800c66a:	2001      	movs	r0, #1
 800c66c:	9000      	str	r0, [sp, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 f978 	bl	800c964 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2206      	movs	r2, #6
 800c684:	761a      	strb	r2, [r3, #24]
      break;
 800c686:	e14d      	b.n	800c924 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	795b      	ldrb	r3, [r3, #5]
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f004 fb42 	bl	8010d18 <USBH_LL_GetURBState>
 800c694:	4603      	mov	r3, r0
 800c696:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d111      	bne.n	800c6c2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2207      	movs	r2, #7
 800c6a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2203      	movs	r2, #3
 800c6a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f000 fce8 	bl	800d090 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6c0:	e12b      	b.n	800c91a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c6c2:	7bbb      	ldrb	r3, [r7, #14]
 800c6c4:	2b05      	cmp	r3, #5
 800c6c6:	d113      	bne.n	800c6f0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	220c      	movs	r2, #12
 800c6cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2203      	movs	r2, #3
 800c6d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f000 fcd1 	bl	800d090 <osMessageQueuePut>
      break;
 800c6ee:	e114      	b.n	800c91a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c6f0:	7bbb      	ldrb	r3, [r7, #14]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d111      	bne.n	800c71a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2205      	movs	r2, #5
 800c6fa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2203      	movs	r2, #3
 800c700:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c710:	2300      	movs	r3, #0
 800c712:	2200      	movs	r2, #0
 800c714:	f000 fcbc 	bl	800d090 <osMessageQueuePut>
      break;
 800c718:	e0ff      	b.n	800c91a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c71a:	7bbb      	ldrb	r3, [r7, #14]
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	f040 80fc 	bne.w	800c91a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	220b      	movs	r2, #11
 800c726:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c728:	2302      	movs	r3, #2
 800c72a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2203      	movs	r2, #3
 800c730:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c740:	2300      	movs	r3, #0
 800c742:	2200      	movs	r2, #0
 800c744:	f000 fca4 	bl	800d090 <osMessageQueuePut>
      break;
 800c748:	e0e7      	b.n	800c91a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	791b      	ldrb	r3, [r3, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	2100      	movs	r1, #0
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f92b 	bl	800c9ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2208      	movs	r2, #8
 800c768:	761a      	strb	r2, [r3, #24]

      break;
 800c76a:	e0db      	b.n	800c924 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	791b      	ldrb	r3, [r3, #4]
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f004 fad0 	bl	8010d18 <USBH_LL_GetURBState>
 800c778:	4603      	mov	r3, r0
 800c77a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d113      	bne.n	800c7aa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	220d      	movs	r2, #13
 800c786:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c788:	2300      	movs	r3, #0
 800c78a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2203      	movs	r2, #3
 800c790:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f000 fc74 	bl	800d090 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c7a8:	e0b9      	b.n	800c91e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d111      	bne.n	800c7d4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	220b      	movs	r2, #11
 800c7b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2203      	movs	r2, #3
 800c7ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f000 fc5f 	bl	800d090 <osMessageQueuePut>
      break;
 800c7d2:	e0a4      	b.n	800c91e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
 800c7d6:	2b05      	cmp	r3, #5
 800c7d8:	f040 80a1 	bne.w	800c91e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f000 fc4a 	bl	800d090 <osMessageQueuePut>
      break;
 800c7fc:	e08f      	b.n	800c91e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	795b      	ldrb	r3, [r3, #5]
 800c802:	2201      	movs	r2, #1
 800c804:	9200      	str	r2, [sp, #0]
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f8aa 	bl	800c964 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	220a      	movs	r2, #10
 800c820:	761a      	strb	r2, [r3, #24]
      break;
 800c822:	e07f      	b.n	800c924 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	795b      	ldrb	r3, [r3, #5]
 800c828:	4619      	mov	r1, r3
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f004 fa74 	bl	8010d18 <USBH_LL_GetURBState>
 800c830:	4603      	mov	r3, r0
 800c832:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d113      	bne.n	800c862 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	220d      	movs	r2, #13
 800c842:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2203      	movs	r2, #3
 800c848:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c858:	2300      	movs	r3, #0
 800c85a:	2200      	movs	r2, #0
 800c85c:	f000 fc18 	bl	800d090 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c860:	e05f      	b.n	800c922 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c862:	7bbb      	ldrb	r3, [r7, #14]
 800c864:	2b02      	cmp	r3, #2
 800c866:	d111      	bne.n	800c88c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2209      	movs	r2, #9
 800c86c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2203      	movs	r2, #3
 800c872:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c882:	2300      	movs	r3, #0
 800c884:	2200      	movs	r2, #0
 800c886:	f000 fc03 	bl	800d090 <osMessageQueuePut>
      break;
 800c88a:	e04a      	b.n	800c922 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c88c:	7bbb      	ldrb	r3, [r7, #14]
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d147      	bne.n	800c922 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	220b      	movs	r2, #11
 800c896:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2203      	movs	r2, #3
 800c89c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f000 fbee 	bl	800d090 <osMessageQueuePut>
      break;
 800c8b4:	e035      	b.n	800c922 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	7e5b      	ldrb	r3, [r3, #25]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	765a      	strb	r2, [r3, #25]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	7e5b      	ldrb	r3, [r3, #25]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d806      	bhi.n	800c8d8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c8d6:	e025      	b.n	800c924 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c8de:	2106      	movs	r1, #6
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	795b      	ldrb	r3, [r3, #5]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f90d 	bl	800cb10 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	791b      	ldrb	r3, [r3, #4]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f907 	bl	800cb10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c908:	2302      	movs	r3, #2
 800c90a:	73fb      	strb	r3, [r7, #15]
      break;
 800c90c:	e00a      	b.n	800c924 <USBH_HandleControl+0x484>

    default:
      break;
 800c90e:	bf00      	nop
 800c910:	e008      	b.n	800c924 <USBH_HandleControl+0x484>
      break;
 800c912:	bf00      	nop
 800c914:	e006      	b.n	800c924 <USBH_HandleControl+0x484>
      break;
 800c916:	bf00      	nop
 800c918:	e004      	b.n	800c924 <USBH_HandleControl+0x484>
      break;
 800c91a:	bf00      	nop
 800c91c:	e002      	b.n	800c924 <USBH_HandleControl+0x484>
      break;
 800c91e:	bf00      	nop
 800c920:	e000      	b.n	800c924 <USBH_HandleControl+0x484>
      break;
 800c922:	bf00      	nop
  }

  return status;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop

0800c930 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af04      	add	r7, sp, #16
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4613      	mov	r3, r2
 800c93c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c93e:	79f9      	ldrb	r1, [r7, #7]
 800c940:	2300      	movs	r3, #0
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	2308      	movs	r3, #8
 800c946:	9302      	str	r3, [sp, #8]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	2300      	movs	r3, #0
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2300      	movs	r3, #0
 800c952:	2200      	movs	r2, #0
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f004 f9ae 	bl	8010cb6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af04      	add	r7, sp, #16
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4611      	mov	r1, r2
 800c970:	461a      	mov	r2, r3
 800c972:	460b      	mov	r3, r1
 800c974:	80fb      	strh	r3, [r7, #6]
 800c976:	4613      	mov	r3, r2
 800c978:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c984:	2300      	movs	r3, #0
 800c986:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c988:	7979      	ldrb	r1, [r7, #5]
 800c98a:	7e3b      	ldrb	r3, [r7, #24]
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	88fb      	ldrh	r3, [r7, #6]
 800c990:	9302      	str	r3, [sp, #8]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	2301      	movs	r3, #1
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	2300      	movs	r3, #0
 800c99c:	2200      	movs	r2, #0
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f004 f989 	bl	8010cb6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b088      	sub	sp, #32
 800c9b2:	af04      	add	r7, sp, #16
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	460b      	mov	r3, r1
 800c9be:	80fb      	strh	r3, [r7, #6]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c9c4:	7979      	ldrb	r1, [r7, #5]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	9303      	str	r3, [sp, #12]
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	9302      	str	r3, [sp, #8]
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	2201      	movs	r2, #1
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f004 f96b 	bl	8010cb6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c9e0:	2300      	movs	r3, #0

}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b088      	sub	sp, #32
 800c9ee:	af04      	add	r7, sp, #16
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	80fb      	strh	r3, [r7, #6]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca0e:	7979      	ldrb	r1, [r7, #5]
 800ca10:	7e3b      	ldrb	r3, [r7, #24]
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	88fb      	ldrh	r3, [r7, #6]
 800ca16:	9302      	str	r3, [sp, #8]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	9301      	str	r3, [sp, #4]
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	2302      	movs	r3, #2
 800ca22:	2200      	movs	r2, #0
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f004 f946 	bl	8010cb6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af04      	add	r7, sp, #16
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	461a      	mov	r2, r3
 800ca42:	460b      	mov	r3, r1
 800ca44:	80fb      	strh	r3, [r7, #6]
 800ca46:	4613      	mov	r3, r2
 800ca48:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca4a:	7979      	ldrb	r1, [r7, #5]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	88fb      	ldrh	r3, [r7, #6]
 800ca52:	9302      	str	r3, [sp, #8]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	2301      	movs	r3, #1
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	2201      	movs	r2, #1
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f004 f928 	bl	8010cb6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af04      	add	r7, sp, #16
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	4608      	mov	r0, r1
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4603      	mov	r3, r0
 800ca80:	70fb      	strb	r3, [r7, #3]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70bb      	strb	r3, [r7, #2]
 800ca86:	4613      	mov	r3, r2
 800ca88:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ca8a:	7878      	ldrb	r0, [r7, #1]
 800ca8c:	78ba      	ldrb	r2, [r7, #2]
 800ca8e:	78f9      	ldrb	r1, [r7, #3]
 800ca90:	8b3b      	ldrh	r3, [r7, #24]
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	7d3b      	ldrb	r3, [r7, #20]
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	7c3b      	ldrb	r3, [r7, #16]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f004 f8bb 	bl	8010c1a <USBH_LL_OpenPipe>

  return USBH_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	460b      	mov	r3, r1
 800cab8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f004 f8da 	bl	8010c78 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f836 	bl	800cb4c <USBH_GetFreePipe>
 800cae0:	4603      	mov	r3, r0
 800cae2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cae4:	89fb      	ldrh	r3, [r7, #14]
 800cae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800caea:	4293      	cmp	r3, r2
 800caec:	d00a      	beq.n	800cb04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800caee:	78fa      	ldrb	r2, [r7, #3]
 800caf0:	89fb      	ldrh	r3, [r7, #14]
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	33e0      	adds	r3, #224	@ 0xe0
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	440b      	add	r3, r1
 800cb02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cb04:	89fb      	ldrh	r3, [r7, #14]
 800cb06:	b2db      	uxtb	r3, r3
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	2b0f      	cmp	r3, #15
 800cb20:	d80d      	bhi.n	800cb3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	33e0      	adds	r3, #224	@ 0xe0
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	685a      	ldr	r2, [r3, #4]
 800cb2e:	78fb      	ldrb	r3, [r7, #3]
 800cb30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	33e0      	adds	r3, #224	@ 0xe0
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73fb      	strb	r3, [r7, #15]
 800cb5c:	e00f      	b.n	800cb7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	33e0      	adds	r3, #224	@ 0xe0
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cb72:	7bfb      	ldrb	r3, [r7, #15]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	e007      	b.n	800cb88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	73fb      	strb	r3, [r7, #15]
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	2b0f      	cmp	r3, #15
 800cb82:	d9ec      	bls.n	800cb5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cb84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <__NVIC_SetPriority>:
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	6039      	str	r1, [r7, #0]
 800cb9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	db0a      	blt.n	800cbbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	490c      	ldr	r1, [pc, #48]	@ (800cbe0 <__NVIC_SetPriority+0x4c>)
 800cbae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbb2:	0112      	lsls	r2, r2, #4
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	440b      	add	r3, r1
 800cbb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cbbc:	e00a      	b.n	800cbd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	4908      	ldr	r1, [pc, #32]	@ (800cbe4 <__NVIC_SetPriority+0x50>)
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	f003 030f 	and.w	r3, r3, #15
 800cbca:	3b04      	subs	r3, #4
 800cbcc:	0112      	lsls	r2, r2, #4
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	440b      	add	r3, r1
 800cbd2:	761a      	strb	r2, [r3, #24]
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	e000e100 	.word	0xe000e100
 800cbe4:	e000ed00 	.word	0xe000ed00

0800cbe8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cbec:	4b05      	ldr	r3, [pc, #20]	@ (800cc04 <SysTick_Handler+0x1c>)
 800cbee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cbf0:	f002 fa6e 	bl	800f0d0 <xTaskGetSchedulerState>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d001      	beq.n	800cbfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cbfa:	f003 fbad 	bl	8010358 <xPortSysTickHandler>
  }
}
 800cbfe:	bf00      	nop
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	e000e010 	.word	0xe000e010

0800cc08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	f06f 0004 	mvn.w	r0, #4
 800cc12:	f7ff ffbf 	bl	800cb94 <__NVIC_SetPriority>
#endif
}
 800cc16:	bf00      	nop
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc22:	f3ef 8305 	mrs	r3, IPSR
 800cc26:	603b      	str	r3, [r7, #0]
  return(result);
 800cc28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d003      	beq.n	800cc36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cc2e:	f06f 0305 	mvn.w	r3, #5
 800cc32:	607b      	str	r3, [r7, #4]
 800cc34:	e00c      	b.n	800cc50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc36:	4b0a      	ldr	r3, [pc, #40]	@ (800cc60 <osKernelInitialize+0x44>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d105      	bne.n	800cc4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc3e:	4b08      	ldr	r3, [pc, #32]	@ (800cc60 <osKernelInitialize+0x44>)
 800cc40:	2201      	movs	r2, #1
 800cc42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	607b      	str	r3, [r7, #4]
 800cc48:	e002      	b.n	800cc50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cc4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc50:	687b      	ldr	r3, [r7, #4]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	20006170 	.word	0x20006170

0800cc64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc6a:	f3ef 8305 	mrs	r3, IPSR
 800cc6e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cc76:	f06f 0305 	mvn.w	r3, #5
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	e010      	b.n	800cca0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ccac <osKernelStart+0x48>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d109      	bne.n	800cc9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc86:	f7ff ffbf 	bl	800cc08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc8a:	4b08      	ldr	r3, [pc, #32]	@ (800ccac <osKernelStart+0x48>)
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc90:	f001 fc30 	bl	800e4f4 <vTaskStartScheduler>
      stat = osOK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	607b      	str	r3, [r7, #4]
 800cc98:	e002      	b.n	800cca0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cc9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cca0:	687b      	ldr	r3, [r7, #4]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20006170 	.word	0x20006170

0800ccb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08e      	sub	sp, #56	@ 0x38
 800ccb4:	af04      	add	r7, sp, #16
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccc0:	f3ef 8305 	mrs	r3, IPSR
 800ccc4:	617b      	str	r3, [r7, #20]
  return(result);
 800ccc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d17e      	bne.n	800cdca <osThreadNew+0x11a>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d07b      	beq.n	800cdca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ccd2:	2380      	movs	r3, #128	@ 0x80
 800ccd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ccd6:	2318      	movs	r3, #24
 800ccd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ccde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cce2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d045      	beq.n	800cd76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <osThreadNew+0x48>
        name = attr->name;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	699b      	ldr	r3, [r3, #24]
 800cd04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d008      	beq.n	800cd1e <osThreadNew+0x6e>
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	2b38      	cmp	r3, #56	@ 0x38
 800cd10:	d805      	bhi.n	800cd1e <osThreadNew+0x6e>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <osThreadNew+0x72>
        return (NULL);
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e054      	b.n	800cdcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	089b      	lsrs	r3, r3, #2
 800cd30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00e      	beq.n	800cd58 <osThreadNew+0xa8>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	2bbb      	cmp	r3, #187	@ 0xbb
 800cd40:	d90a      	bls.n	800cd58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d006      	beq.n	800cd58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <osThreadNew+0xa8>
        mem = 1;
 800cd52:	2301      	movs	r3, #1
 800cd54:	61bb      	str	r3, [r7, #24]
 800cd56:	e010      	b.n	800cd7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10c      	bne.n	800cd7a <osThreadNew+0xca>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d108      	bne.n	800cd7a <osThreadNew+0xca>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <osThreadNew+0xca>
          mem = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	61bb      	str	r3, [r7, #24]
 800cd74:	e001      	b.n	800cd7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d110      	bne.n	800cda2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd88:	9202      	str	r2, [sp, #8]
 800cd8a:	9301      	str	r3, [sp, #4]
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	6a3a      	ldr	r2, [r7, #32]
 800cd94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f001 f8d8 	bl	800df4c <xTaskCreateStatic>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	613b      	str	r3, [r7, #16]
 800cda0:	e013      	b.n	800cdca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d110      	bne.n	800cdca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	f107 0310 	add.w	r3, r7, #16
 800cdb0:	9301      	str	r3, [sp, #4]
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f001 f926 	bl	800e00c <xTaskCreate>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d001      	beq.n	800cdca <osThreadNew+0x11a>
            hTask = NULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cdca:	693b      	ldr	r3, [r7, #16]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3728      	adds	r7, #40	@ 0x28
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af02      	add	r7, sp, #8
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <osThreadFlagsSet+0x1a>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	da03      	bge.n	800cdf6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800cdee:	f06f 0303 	mvn.w	r3, #3
 800cdf2:	60fb      	str	r3, [r7, #12]
 800cdf4:	e035      	b.n	800ce62 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cdf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdfc:	f3ef 8305 	mrs	r3, IPSR
 800ce00:	613b      	str	r3, [r7, #16]
  return(result);
 800ce02:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d01f      	beq.n	800ce48 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ce0c:	f107 0308 	add.w	r3, r7, #8
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	2300      	movs	r3, #0
 800ce14:	2201      	movs	r2, #1
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6978      	ldr	r0, [r7, #20]
 800ce1a:	f002 fc49 	bl	800f6b0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ce1e:	f107 030c 	add.w	r3, r7, #12
 800ce22:	2200      	movs	r2, #0
 800ce24:	9200      	str	r2, [sp, #0]
 800ce26:	2200      	movs	r2, #0
 800ce28:	2100      	movs	r1, #0
 800ce2a:	6978      	ldr	r0, [r7, #20]
 800ce2c:	f002 fc40 	bl	800f6b0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d015      	beq.n	800ce62 <osThreadFlagsSet+0x8e>
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <osThreadFlagsSet+0x98>)
 800ce38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	e00c      	b.n	800ce62 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ce48:	2300      	movs	r3, #0
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f002 fb6c 	bl	800f52c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ce54:	f107 030c 	add.w	r3, r7, #12
 800ce58:	2200      	movs	r2, #0
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	6978      	ldr	r0, [r7, #20]
 800ce5e:	f002 fb65 	bl	800f52c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ce62:	68fb      	ldr	r3, [r7, #12]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	e000ed04 	.word	0xe000ed04

0800ce70 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08c      	sub	sp, #48	@ 0x30
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce7c:	f3ef 8305 	mrs	r3, IPSR
 800ce80:	617b      	str	r3, [r7, #20]
  return(result);
 800ce82:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ce88:	f06f 0305 	mvn.w	r3, #5
 800ce8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce8e:	e06b      	b.n	800cf68 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da03      	bge.n	800ce9e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ce96:	f06f 0303 	mvn.w	r3, #3
 800ce9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce9c:	e064      	b.n	800cf68 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f003 0302 	and.w	r3, r3, #2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <osThreadFlagsWait+0x3e>
      clear = 0U;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ceac:	e001      	b.n	800ceb2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800ceba:	f001 fc3d 	bl	800e738 <xTaskGetTickCount>
 800cebe:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800cec0:	f107 0210 	add.w	r2, r7, #16
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cec8:	2000      	movs	r0, #0
 800ceca:	f002 facf 	bl	800f46c <xTaskNotifyWait>
 800cece:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d137      	bne.n	800cf46 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800ced6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	4013      	ands	r3, r2
 800cedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cee2:	4313      	orrs	r3, r2
 800cee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	f003 0301 	and.w	r3, r3, #1
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00c      	beq.n	800cf0a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef4:	4013      	ands	r3, r2
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d032      	beq.n	800cf62 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10f      	bne.n	800cf22 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cf02:	f06f 0302 	mvn.w	r3, #2
 800cf06:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cf08:	e02e      	b.n	800cf68 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0e:	4013      	ands	r3, r2
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d128      	bne.n	800cf66 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d103      	bne.n	800cf22 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cf1a:	f06f 0302 	mvn.w	r3, #2
 800cf1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cf20:	e022      	b.n	800cf68 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800cf22:	f001 fc09 	bl	800e738 <xTaskGetTickCount>
 800cf26:	4602      	mov	r2, r0
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800cf2e:	69ba      	ldr	r2, [r7, #24]
 800cf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d902      	bls.n	800cf3c <osThreadFlagsWait+0xcc>
          tout  = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf3a:	e00e      	b.n	800cf5a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800cf3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf44:	e009      	b.n	800cf5a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d103      	bne.n	800cf54 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800cf4c:	f06f 0302 	mvn.w	r3, #2
 800cf50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf52:	e002      	b.n	800cf5a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800cf54:	f06f 0301 	mvn.w	r3, #1
 800cf58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1af      	bne.n	800cec0 <osThreadFlagsWait+0x50>
 800cf60:	e002      	b.n	800cf68 <osThreadFlagsWait+0xf8>
            break;
 800cf62:	bf00      	nop
 800cf64:	e000      	b.n	800cf68 <osThreadFlagsWait+0xf8>
            break;
 800cf66:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800cf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3730      	adds	r7, #48	@ 0x30
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf7a:	f3ef 8305 	mrs	r3, IPSR
 800cf7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <osDelay+0x1c>
    stat = osErrorISR;
 800cf86:	f06f 0305 	mvn.w	r3, #5
 800cf8a:	60fb      	str	r3, [r7, #12]
 800cf8c:	e007      	b.n	800cf9e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <osDelay+0x2c>
      vTaskDelay(ticks);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f001 f997 	bl	800e2cc <vTaskDelay>
    }
  }

  return (stat);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08a      	sub	sp, #40	@ 0x28
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb8:	f3ef 8305 	mrs	r3, IPSR
 800cfbc:	613b      	str	r3, [r7, #16]
  return(result);
 800cfbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d15f      	bne.n	800d084 <osMessageQueueNew+0xdc>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d05c      	beq.n	800d084 <osMessageQueueNew+0xdc>
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d059      	beq.n	800d084 <osMessageQueueNew+0xdc>
    mem = -1;
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d029      	beq.n	800d030 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d012      	beq.n	800d00a <osMessageQueueNew+0x62>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	2b4f      	cmp	r3, #79	@ 0x4f
 800cfea:	d90e      	bls.n	800d00a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00a      	beq.n	800d00a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	695a      	ldr	r2, [r3, #20]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	fb01 f303 	mul.w	r3, r1, r3
 800d000:	429a      	cmp	r2, r3
 800d002:	d302      	bcc.n	800d00a <osMessageQueueNew+0x62>
        mem = 1;
 800d004:	2301      	movs	r3, #1
 800d006:	61bb      	str	r3, [r7, #24]
 800d008:	e014      	b.n	800d034 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d110      	bne.n	800d034 <osMessageQueueNew+0x8c>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10c      	bne.n	800d034 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d108      	bne.n	800d034 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d104      	bne.n	800d034 <osMessageQueueNew+0x8c>
          mem = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	61bb      	str	r3, [r7, #24]
 800d02e:	e001      	b.n	800d034 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d10b      	bne.n	800d052 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	691a      	ldr	r2, [r3, #16]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	2100      	movs	r1, #0
 800d044:	9100      	str	r1, [sp, #0]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 fa31 	bl	800d4b0 <xQueueGenericCreateStatic>
 800d04e:	61f8      	str	r0, [r7, #28]
 800d050:	e008      	b.n	800d064 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d105      	bne.n	800d064 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d058:	2200      	movs	r2, #0
 800d05a:	68b9      	ldr	r1, [r7, #8]
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f000 faa4 	bl	800d5aa <xQueueGenericCreate>
 800d062:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00c      	beq.n	800d084 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d003      	beq.n	800d078 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	e001      	b.n	800d07c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d07c:	6979      	ldr	r1, [r7, #20]
 800d07e:	69f8      	ldr	r0, [r7, #28]
 800d080:	f000 ff06 	bl	800de90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d084:	69fb      	ldr	r3, [r7, #28]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3720      	adds	r7, #32
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	603b      	str	r3, [r7, #0]
 800d09c:	4613      	mov	r3, r2
 800d09e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a8:	f3ef 8305 	mrs	r3, IPSR
 800d0ac:	617b      	str	r3, [r7, #20]
  return(result);
 800d0ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d028      	beq.n	800d106 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <osMessageQueuePut+0x36>
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <osMessageQueuePut+0x36>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d003      	beq.n	800d0ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d0c6:	f06f 0303 	mvn.w	r3, #3
 800d0ca:	61fb      	str	r3, [r7, #28]
 800d0cc:	e038      	b.n	800d140 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d0d2:	f107 0210 	add.w	r2, r7, #16
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	68b9      	ldr	r1, [r7, #8]
 800d0da:	69b8      	ldr	r0, [r7, #24]
 800d0dc:	f000 fbc6 	bl	800d86c <xQueueGenericSendFromISR>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d003      	beq.n	800d0ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d0e6:	f06f 0302 	mvn.w	r3, #2
 800d0ea:	61fb      	str	r3, [r7, #28]
 800d0ec:	e028      	b.n	800d140 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d025      	beq.n	800d140 <osMessageQueuePut+0xb0>
 800d0f4:	4b15      	ldr	r3, [pc, #84]	@ (800d14c <osMessageQueuePut+0xbc>)
 800d0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	e01c      	b.n	800d140 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <osMessageQueuePut+0x82>
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d103      	bne.n	800d11a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d112:	f06f 0303 	mvn.w	r3, #3
 800d116:	61fb      	str	r3, [r7, #28]
 800d118:	e012      	b.n	800d140 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d11a:	2300      	movs	r3, #0
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	68b9      	ldr	r1, [r7, #8]
 800d120:	69b8      	ldr	r0, [r7, #24]
 800d122:	f000 faa1 	bl	800d668 <xQueueGenericSend>
 800d126:	4603      	mov	r3, r0
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d009      	beq.n	800d140 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d003      	beq.n	800d13a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d132:	f06f 0301 	mvn.w	r3, #1
 800d136:	61fb      	str	r3, [r7, #28]
 800d138:	e002      	b.n	800d140 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d13a:	f06f 0302 	mvn.w	r3, #2
 800d13e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d140:	69fb      	ldr	r3, [r7, #28]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3720      	adds	r7, #32
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	e000ed04 	.word	0xe000ed04

0800d150 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d162:	2300      	movs	r3, #0
 800d164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d166:	f3ef 8305 	mrs	r3, IPSR
 800d16a:	617b      	str	r3, [r7, #20]
  return(result);
 800d16c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d028      	beq.n	800d1c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d005      	beq.n	800d184 <osMessageQueueGet+0x34>
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d002      	beq.n	800d184 <osMessageQueueGet+0x34>
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d003      	beq.n	800d18c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d184:	f06f 0303 	mvn.w	r3, #3
 800d188:	61fb      	str	r3, [r7, #28]
 800d18a:	e037      	b.n	800d1fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d18c:	2300      	movs	r3, #0
 800d18e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d190:	f107 0310 	add.w	r3, r7, #16
 800d194:	461a      	mov	r2, r3
 800d196:	68b9      	ldr	r1, [r7, #8]
 800d198:	69b8      	ldr	r0, [r7, #24]
 800d19a:	f000 fce7 	bl	800db6c <xQueueReceiveFromISR>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d003      	beq.n	800d1ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d1a4:	f06f 0302 	mvn.w	r3, #2
 800d1a8:	61fb      	str	r3, [r7, #28]
 800d1aa:	e027      	b.n	800d1fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d024      	beq.n	800d1fc <osMessageQueueGet+0xac>
 800d1b2:	4b15      	ldr	r3, [pc, #84]	@ (800d208 <osMessageQueueGet+0xb8>)
 800d1b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	e01b      	b.n	800d1fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <osMessageQueueGet+0x80>
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d103      	bne.n	800d1d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d1d0:	f06f 0303 	mvn.w	r3, #3
 800d1d4:	61fb      	str	r3, [r7, #28]
 800d1d6:	e011      	b.n	800d1fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	68b9      	ldr	r1, [r7, #8]
 800d1dc:	69b8      	ldr	r0, [r7, #24]
 800d1de:	f000 fbe3 	bl	800d9a8 <xQueueReceive>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d009      	beq.n	800d1fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d003      	beq.n	800d1f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d1ee:	f06f 0301 	mvn.w	r3, #1
 800d1f2:	61fb      	str	r3, [r7, #28]
 800d1f4:	e002      	b.n	800d1fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d1f6:	f06f 0302 	mvn.w	r3, #2
 800d1fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3720      	adds	r7, #32
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	e000ed04 	.word	0xe000ed04

0800d20c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	4a07      	ldr	r2, [pc, #28]	@ (800d238 <vApplicationGetIdleTaskMemory+0x2c>)
 800d21c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	4a06      	ldr	r2, [pc, #24]	@ (800d23c <vApplicationGetIdleTaskMemory+0x30>)
 800d222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2280      	movs	r2, #128	@ 0x80
 800d228:	601a      	str	r2, [r3, #0]
}
 800d22a:	bf00      	nop
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	20006174 	.word	0x20006174
 800d23c:	20006230 	.word	0x20006230

0800d240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4a07      	ldr	r2, [pc, #28]	@ (800d26c <vApplicationGetTimerTaskMemory+0x2c>)
 800d250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	4a06      	ldr	r2, [pc, #24]	@ (800d270 <vApplicationGetTimerTaskMemory+0x30>)
 800d256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d25e:	601a      	str	r2, [r3, #0]
}
 800d260:	bf00      	nop
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20006430 	.word	0x20006430
 800d270:	200064ec 	.word	0x200064ec

0800d274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f103 0208 	add.w	r2, r3, #8
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d28c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f103 0208 	add.w	r2, r3, #8
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f103 0208 	add.w	r2, r3, #8
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d2a8:	bf00      	nop
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b085      	sub	sp, #20
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	689a      	ldr	r2, [r3, #8]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	1c5a      	adds	r2, r3, #1
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
}
 800d30a:	bf00      	nop
 800d30c:	3714      	adds	r7, #20
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d316:	b480      	push	{r7}
 800d318:	b085      	sub	sp, #20
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d32c:	d103      	bne.n	800d336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	e00c      	b.n	800d350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	3308      	adds	r3, #8
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	e002      	b.n	800d344 <vListInsert+0x2e>
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d2f6      	bcs.n	800d33e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	685a      	ldr	r2, [r3, #4]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	601a      	str	r2, [r3, #0]
}
 800d37c:	bf00      	nop
 800d37e:	3714      	adds	r7, #20
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	6892      	ldr	r2, [r2, #8]
 800d39e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	6852      	ldr	r2, [r2, #4]
 800d3a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d103      	bne.n	800d3bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	689a      	ldr	r2, [r3, #8]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	1e5a      	subs	r2, r3, #1
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3714      	adds	r7, #20
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10b      	bne.n	800d408 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d402:	bf00      	nop
 800d404:	bf00      	nop
 800d406:	e7fd      	b.n	800d404 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d408:	f002 ff16 	bl	8010238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d414:	68f9      	ldr	r1, [r7, #12]
 800d416:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d418:	fb01 f303 	mul.w	r3, r1, r3
 800d41c:	441a      	add	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d438:	3b01      	subs	r3, #1
 800d43a:	68f9      	ldr	r1, [r7, #12]
 800d43c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d43e:	fb01 f303 	mul.w	r3, r1, r3
 800d442:	441a      	add	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	22ff      	movs	r2, #255	@ 0xff
 800d44c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	22ff      	movs	r2, #255	@ 0xff
 800d454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d114      	bne.n	800d488 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d01a      	beq.n	800d49c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3310      	adds	r3, #16
 800d46a:	4618      	mov	r0, r3
 800d46c:	f001 fb94 	bl	800eb98 <xTaskRemoveFromEventList>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d012      	beq.n	800d49c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d476:	4b0d      	ldr	r3, [pc, #52]	@ (800d4ac <xQueueGenericReset+0xd0>)
 800d478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	e009      	b.n	800d49c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	3310      	adds	r3, #16
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff fef1 	bl	800d274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3324      	adds	r3, #36	@ 0x24
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff feec 	bl	800d274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d49c:	f002 fefe 	bl	801029c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d4a0:	2301      	movs	r3, #1
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	e000ed04 	.word	0xe000ed04

0800d4b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b08e      	sub	sp, #56	@ 0x38
 800d4b4:	af02      	add	r7, sp, #8
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
 800d4bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10b      	bne.n	800d4dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4d6:	bf00      	nop
 800d4d8:	bf00      	nop
 800d4da:	e7fd      	b.n	800d4d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10b      	bne.n	800d4fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop
 800d4f8:	e7fd      	b.n	800d4f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <xQueueGenericCreateStatic+0x56>
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <xQueueGenericCreateStatic+0x5a>
 800d506:	2301      	movs	r3, #1
 800d508:	e000      	b.n	800d50c <xQueueGenericCreateStatic+0x5c>
 800d50a:	2300      	movs	r3, #0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10b      	bne.n	800d528 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	623b      	str	r3, [r7, #32]
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	e7fd      	b.n	800d524 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <xQueueGenericCreateStatic+0x84>
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <xQueueGenericCreateStatic+0x88>
 800d534:	2301      	movs	r3, #1
 800d536:	e000      	b.n	800d53a <xQueueGenericCreateStatic+0x8a>
 800d538:	2300      	movs	r3, #0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10b      	bne.n	800d556 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	61fb      	str	r3, [r7, #28]
}
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	e7fd      	b.n	800d552 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d556:	2350      	movs	r3, #80	@ 0x50
 800d558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2b50      	cmp	r3, #80	@ 0x50
 800d55e:	d00b      	beq.n	800d578 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	61bb      	str	r3, [r7, #24]
}
 800d572:	bf00      	nop
 800d574:	bf00      	nop
 800d576:	e7fd      	b.n	800d574 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d578:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00d      	beq.n	800d5a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d58c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4613      	mov	r3, r2
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	68b9      	ldr	r1, [r7, #8]
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f000 f840 	bl	800d620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3730      	adds	r7, #48	@ 0x30
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b08a      	sub	sp, #40	@ 0x28
 800d5ae:	af02      	add	r7, sp, #8
 800d5b0:	60f8      	str	r0, [r7, #12]
 800d5b2:	60b9      	str	r1, [r7, #8]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10b      	bne.n	800d5d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	613b      	str	r3, [r7, #16]
}
 800d5d0:	bf00      	nop
 800d5d2:	bf00      	nop
 800d5d4:	e7fd      	b.n	800d5d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	fb02 f303 	mul.w	r3, r2, r3
 800d5de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	3350      	adds	r3, #80	@ 0x50
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f002 ff49 	bl	801047c <pvPortMalloc>
 800d5ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d011      	beq.n	800d616 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	3350      	adds	r3, #80	@ 0x50
 800d5fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d604:	79fa      	ldrb	r2, [r7, #7]
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	4613      	mov	r3, r2
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 f805 	bl	800d620 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d616:	69bb      	ldr	r3, [r7, #24]
	}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d103      	bne.n	800d63c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	e002      	b.n	800d642 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d64e:	2101      	movs	r1, #1
 800d650:	69b8      	ldr	r0, [r7, #24]
 800d652:	f7ff fec3 	bl	800d3dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	78fa      	ldrb	r2, [r7, #3]
 800d65a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08e      	sub	sp, #56	@ 0x38
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d676:	2300      	movs	r3, #0
 800d678:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10b      	bne.n	800d69c <xQueueGenericSend+0x34>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d696:	bf00      	nop
 800d698:	bf00      	nop
 800d69a:	e7fd      	b.n	800d698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d103      	bne.n	800d6aa <xQueueGenericSend+0x42>
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <xQueueGenericSend+0x46>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e000      	b.n	800d6b0 <xQueueGenericSend+0x48>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10b      	bne.n	800d6cc <xQueueGenericSend+0x64>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6c6:	bf00      	nop
 800d6c8:	bf00      	nop
 800d6ca:	e7fd      	b.n	800d6c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d103      	bne.n	800d6da <xQueueGenericSend+0x72>
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d101      	bne.n	800d6de <xQueueGenericSend+0x76>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e000      	b.n	800d6e0 <xQueueGenericSend+0x78>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d10b      	bne.n	800d6fc <xQueueGenericSend+0x94>
	__asm volatile
 800d6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	623b      	str	r3, [r7, #32]
}
 800d6f6:	bf00      	nop
 800d6f8:	bf00      	nop
 800d6fa:	e7fd      	b.n	800d6f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6fc:	f001 fce8 	bl	800f0d0 <xTaskGetSchedulerState>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d102      	bne.n	800d70c <xQueueGenericSend+0xa4>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <xQueueGenericSend+0xa8>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e000      	b.n	800d712 <xQueueGenericSend+0xaa>
 800d710:	2300      	movs	r3, #0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10b      	bne.n	800d72e <xQueueGenericSend+0xc6>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	61fb      	str	r3, [r7, #28]
}
 800d728:	bf00      	nop
 800d72a:	bf00      	nop
 800d72c:	e7fd      	b.n	800d72a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d72e:	f002 fd83 	bl	8010238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d302      	bcc.n	800d744 <xQueueGenericSend+0xdc>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d129      	bne.n	800d798 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	68b9      	ldr	r1, [r7, #8]
 800d748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d74a:	f000 fa91 	bl	800dc70 <prvCopyDataToQueue>
 800d74e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d754:	2b00      	cmp	r3, #0
 800d756:	d010      	beq.n	800d77a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75a:	3324      	adds	r3, #36	@ 0x24
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 fa1b 	bl	800eb98 <xTaskRemoveFromEventList>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d013      	beq.n	800d790 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d768:	4b3f      	ldr	r3, [pc, #252]	@ (800d868 <xQueueGenericSend+0x200>)
 800d76a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	e00a      	b.n	800d790 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d780:	4b39      	ldr	r3, [pc, #228]	@ (800d868 <xQueueGenericSend+0x200>)
 800d782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d790:	f002 fd84 	bl	801029c <vPortExitCritical>
				return pdPASS;
 800d794:	2301      	movs	r3, #1
 800d796:	e063      	b.n	800d860 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d103      	bne.n	800d7a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d79e:	f002 fd7d 	bl	801029c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	e05c      	b.n	800d860 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7ac:	f107 0314 	add.w	r3, r7, #20
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f001 fa55 	bl	800ec60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7ba:	f002 fd6f 	bl	801029c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7be:	f000 ff0f 	bl	800e5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7c2:	f002 fd39 	bl	8010238 <vPortEnterCritical>
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7cc:	b25b      	sxtb	r3, r3
 800d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7d2:	d103      	bne.n	800d7dc <xQueueGenericSend+0x174>
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7e2:	b25b      	sxtb	r3, r3
 800d7e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7e8:	d103      	bne.n	800d7f2 <xQueueGenericSend+0x18a>
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7f2:	f002 fd53 	bl	801029c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7f6:	1d3a      	adds	r2, r7, #4
 800d7f8:	f107 0314 	add.w	r3, r7, #20
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fa44 	bl	800ec8c <xTaskCheckForTimeOut>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d124      	bne.n	800d854 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d80a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d80c:	f000 fb28 	bl	800de60 <prvIsQueueFull>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d018      	beq.n	800d848 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	3310      	adds	r3, #16
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f001 f968 	bl	800eaf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d824:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d826:	f000 fab3 	bl	800dd90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d82a:	f000 fee7 	bl	800e5fc <xTaskResumeAll>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	f47f af7c 	bne.w	800d72e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d836:	4b0c      	ldr	r3, [pc, #48]	@ (800d868 <xQueueGenericSend+0x200>)
 800d838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	e772      	b.n	800d72e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d84a:	f000 faa1 	bl	800dd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d84e:	f000 fed5 	bl	800e5fc <xTaskResumeAll>
 800d852:	e76c      	b.n	800d72e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d856:	f000 fa9b 	bl	800dd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d85a:	f000 fecf 	bl	800e5fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d85e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d860:	4618      	mov	r0, r3
 800d862:	3738      	adds	r7, #56	@ 0x38
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	e000ed04 	.word	0xe000ed04

0800d86c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b090      	sub	sp, #64	@ 0x40
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10b      	bne.n	800d89c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d896:	bf00      	nop
 800d898:	bf00      	nop
 800d89a:	e7fd      	b.n	800d898 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d103      	bne.n	800d8aa <xQueueGenericSendFromISR+0x3e>
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <xQueueGenericSendFromISR+0x42>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e000      	b.n	800d8b0 <xQueueGenericSendFromISR+0x44>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10b      	bne.n	800d8cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8c6:	bf00      	nop
 800d8c8:	bf00      	nop
 800d8ca:	e7fd      	b.n	800d8c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d103      	bne.n	800d8da <xQueueGenericSendFromISR+0x6e>
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d101      	bne.n	800d8de <xQueueGenericSendFromISR+0x72>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e000      	b.n	800d8e0 <xQueueGenericSendFromISR+0x74>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10b      	bne.n	800d8fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	623b      	str	r3, [r7, #32]
}
 800d8f6:	bf00      	nop
 800d8f8:	bf00      	nop
 800d8fa:	e7fd      	b.n	800d8f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8fc:	f002 fd7c 	bl	80103f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d900:	f3ef 8211 	mrs	r2, BASEPRI
 800d904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	61fa      	str	r2, [r7, #28]
 800d916:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d918:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d91a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d91e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d924:	429a      	cmp	r2, r3
 800d926:	d302      	bcc.n	800d92e <xQueueGenericSendFromISR+0xc2>
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d12f      	bne.n	800d98e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d93c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	68b9      	ldr	r1, [r7, #8]
 800d942:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d944:	f000 f994 	bl	800dc70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d948:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d94c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d950:	d112      	bne.n	800d978 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	d016      	beq.n	800d988 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95c:	3324      	adds	r3, #36	@ 0x24
 800d95e:	4618      	mov	r0, r3
 800d960:	f001 f91a 	bl	800eb98 <xTaskRemoveFromEventList>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00e      	beq.n	800d988 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00b      	beq.n	800d988 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	e007      	b.n	800d988 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d97c:	3301      	adds	r3, #1
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	b25a      	sxtb	r2, r3
 800d982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d988:	2301      	movs	r3, #1
 800d98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d98c:	e001      	b.n	800d992 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d98e:	2300      	movs	r3, #0
 800d990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d994:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d99c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3740      	adds	r7, #64	@ 0x40
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08c      	sub	sp, #48	@ 0x30
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10b      	bne.n	800d9da <xQueueReceive+0x32>
	__asm volatile
 800d9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	623b      	str	r3, [r7, #32]
}
 800d9d4:	bf00      	nop
 800d9d6:	bf00      	nop
 800d9d8:	e7fd      	b.n	800d9d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d103      	bne.n	800d9e8 <xQueueReceive+0x40>
 800d9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d101      	bne.n	800d9ec <xQueueReceive+0x44>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e000      	b.n	800d9ee <xQueueReceive+0x46>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10b      	bne.n	800da0a <xQueueReceive+0x62>
	__asm volatile
 800d9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f6:	f383 8811 	msr	BASEPRI, r3
 800d9fa:	f3bf 8f6f 	isb	sy
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	61fb      	str	r3, [r7, #28]
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop
 800da08:	e7fd      	b.n	800da06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da0a:	f001 fb61 	bl	800f0d0 <xTaskGetSchedulerState>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <xQueueReceive+0x72>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d101      	bne.n	800da1e <xQueueReceive+0x76>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e000      	b.n	800da20 <xQueueReceive+0x78>
 800da1e:	2300      	movs	r3, #0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <xQueueReceive+0x94>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	61bb      	str	r3, [r7, #24]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da3c:	f002 fbfc 	bl	8010238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d01f      	beq.n	800da8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da4c:	68b9      	ldr	r1, [r7, #8]
 800da4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da50:	f000 f978 	bl	800dd44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da56:	1e5a      	subs	r2, r3, #1
 800da58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00f      	beq.n	800da84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da66:	3310      	adds	r3, #16
 800da68:	4618      	mov	r0, r3
 800da6a:	f001 f895 	bl	800eb98 <xTaskRemoveFromEventList>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d007      	beq.n	800da84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da74:	4b3c      	ldr	r3, [pc, #240]	@ (800db68 <xQueueReceive+0x1c0>)
 800da76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da84:	f002 fc0a 	bl	801029c <vPortExitCritical>
				return pdPASS;
 800da88:	2301      	movs	r3, #1
 800da8a:	e069      	b.n	800db60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d103      	bne.n	800da9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da92:	f002 fc03 	bl	801029c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da96:	2300      	movs	r3, #0
 800da98:	e062      	b.n	800db60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d106      	bne.n	800daae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daa0:	f107 0310 	add.w	r3, r7, #16
 800daa4:	4618      	mov	r0, r3
 800daa6:	f001 f8db 	bl	800ec60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800daaa:	2301      	movs	r3, #1
 800daac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800daae:	f002 fbf5 	bl	801029c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dab2:	f000 fd95 	bl	800e5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dab6:	f002 fbbf 	bl	8010238 <vPortEnterCritical>
 800daba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dac0:	b25b      	sxtb	r3, r3
 800dac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dac6:	d103      	bne.n	800dad0 <xQueueReceive+0x128>
 800dac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dad6:	b25b      	sxtb	r3, r3
 800dad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dadc:	d103      	bne.n	800dae6 <xQueueReceive+0x13e>
 800dade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dae6:	f002 fbd9 	bl	801029c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daea:	1d3a      	adds	r2, r7, #4
 800daec:	f107 0310 	add.w	r3, r7, #16
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f001 f8ca 	bl	800ec8c <xTaskCheckForTimeOut>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d123      	bne.n	800db46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dafe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db00:	f000 f998 	bl	800de34 <prvIsQueueEmpty>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d017      	beq.n	800db3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0c:	3324      	adds	r3, #36	@ 0x24
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	4611      	mov	r1, r2
 800db12:	4618      	mov	r0, r3
 800db14:	f000 ffee 	bl	800eaf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db1a:	f000 f939 	bl	800dd90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db1e:	f000 fd6d 	bl	800e5fc <xTaskResumeAll>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d189      	bne.n	800da3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800db28:	4b0f      	ldr	r3, [pc, #60]	@ (800db68 <xQueueReceive+0x1c0>)
 800db2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	e780      	b.n	800da3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db3c:	f000 f928 	bl	800dd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db40:	f000 fd5c 	bl	800e5fc <xTaskResumeAll>
 800db44:	e77a      	b.n	800da3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db48:	f000 f922 	bl	800dd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db4c:	f000 fd56 	bl	800e5fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db52:	f000 f96f 	bl	800de34 <prvIsQueueEmpty>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f af6f 	beq.w	800da3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db60:	4618      	mov	r0, r3
 800db62:	3730      	adds	r7, #48	@ 0x30
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	e000ed04 	.word	0xe000ed04

0800db6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b08e      	sub	sp, #56	@ 0x38
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10b      	bne.n	800db9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	623b      	str	r3, [r7, #32]
}
 800db94:	bf00      	nop
 800db96:	bf00      	nop
 800db98:	e7fd      	b.n	800db96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d103      	bne.n	800dba8 <xQueueReceiveFromISR+0x3c>
 800dba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <xQueueReceiveFromISR+0x40>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <xQueueReceiveFromISR+0x42>
 800dbac:	2300      	movs	r3, #0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	61fb      	str	r3, [r7, #28]
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	e7fd      	b.n	800dbc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbca:	f002 fc15 	bl	80103f8 <vPortValidateInterruptPriority>
	__asm volatile
 800dbce:	f3ef 8211 	mrs	r2, BASEPRI
 800dbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	61ba      	str	r2, [r7, #24]
 800dbe4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dbe6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d02f      	beq.n	800dc56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc00:	68b9      	ldr	r1, [r7, #8]
 800dc02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc04:	f000 f89e 	bl	800dd44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0a:	1e5a      	subs	r2, r3, #1
 800dc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dc10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dc14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc18:	d112      	bne.n	800dc40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d016      	beq.n	800dc50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc24:	3310      	adds	r3, #16
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 ffb6 	bl	800eb98 <xTaskRemoveFromEventList>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00e      	beq.n	800dc50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00b      	beq.n	800dc50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	601a      	str	r2, [r3, #0]
 800dc3e:	e007      	b.n	800dc50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc44:	3301      	adds	r3, #1
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	b25a      	sxtb	r2, r3
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dc50:	2301      	movs	r3, #1
 800dc52:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc54:	e001      	b.n	800dc5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dc56:	2300      	movs	r3, #0
 800dc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f383 8811 	msr	BASEPRI, r3
}
 800dc64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3738      	adds	r7, #56	@ 0x38
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10d      	bne.n	800dcaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d14d      	bne.n	800dd32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f001 fa36 	bl	800f10c <xTaskPriorityDisinherit>
 800dca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	609a      	str	r2, [r3, #8]
 800dca8:	e043      	b.n	800dd32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d119      	bne.n	800dce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6858      	ldr	r0, [r3, #4]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb8:	461a      	mov	r2, r3
 800dcba:	68b9      	ldr	r1, [r7, #8]
 800dcbc:	f003 fc9b 	bl	80115f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	685a      	ldr	r2, [r3, #4]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcc8:	441a      	add	r2, r3
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	685a      	ldr	r2, [r3, #4]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d32b      	bcc.n	800dd32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	605a      	str	r2, [r3, #4]
 800dce2:	e026      	b.n	800dd32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	68d8      	ldr	r0, [r3, #12]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcec:	461a      	mov	r2, r3
 800dcee:	68b9      	ldr	r1, [r7, #8]
 800dcf0:	f003 fc81 	bl	80115f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	68da      	ldr	r2, [r3, #12]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcfc:	425b      	negs	r3, r3
 800dcfe:	441a      	add	r2, r3
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	68da      	ldr	r2, [r3, #12]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d207      	bcs.n	800dd20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	689a      	ldr	r2, [r3, #8]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd18:	425b      	negs	r3, r3
 800dd1a:	441a      	add	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d105      	bne.n	800dd32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dd3a:	697b      	ldr	r3, [r7, #20]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d018      	beq.n	800dd88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	68da      	ldr	r2, [r3, #12]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd5e:	441a      	add	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d303      	bcc.n	800dd78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68d9      	ldr	r1, [r3, #12]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd80:	461a      	mov	r2, r3
 800dd82:	6838      	ldr	r0, [r7, #0]
 800dd84:	f003 fc37 	bl	80115f6 <memcpy>
	}
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd98:	f002 fa4e 	bl	8010238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dda2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dda4:	e011      	b.n	800ddca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d012      	beq.n	800ddd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	3324      	adds	r3, #36	@ 0x24
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fef0 	bl	800eb98 <xTaskRemoveFromEventList>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ddbe:	f000 ffc9 	bl	800ed54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	dce9      	bgt.n	800dda6 <prvUnlockQueue+0x16>
 800ddd2:	e000      	b.n	800ddd6 <prvUnlockQueue+0x46>
					break;
 800ddd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	22ff      	movs	r2, #255	@ 0xff
 800ddda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ddde:	f002 fa5d 	bl	801029c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dde2:	f002 fa29 	bl	8010238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddee:	e011      	b.n	800de14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d012      	beq.n	800de1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	3310      	adds	r3, #16
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 fecb 	bl	800eb98 <xTaskRemoveFromEventList>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de08:	f000 ffa4 	bl	800ed54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de0c:	7bbb      	ldrb	r3, [r7, #14]
 800de0e:	3b01      	subs	r3, #1
 800de10:	b2db      	uxtb	r3, r3
 800de12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	dce9      	bgt.n	800ddf0 <prvUnlockQueue+0x60>
 800de1c:	e000      	b.n	800de20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	22ff      	movs	r2, #255	@ 0xff
 800de24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800de28:	f002 fa38 	bl	801029c <vPortExitCritical>
}
 800de2c:	bf00      	nop
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de3c:	f002 f9fc 	bl	8010238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de44:	2b00      	cmp	r3, #0
 800de46:	d102      	bne.n	800de4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de48:	2301      	movs	r3, #1
 800de4a:	60fb      	str	r3, [r7, #12]
 800de4c:	e001      	b.n	800de52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de52:	f002 fa23 	bl	801029c <vPortExitCritical>

	return xReturn;
 800de56:	68fb      	ldr	r3, [r7, #12]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de68:	f002 f9e6 	bl	8010238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de74:	429a      	cmp	r2, r3
 800de76:	d102      	bne.n	800de7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de78:	2301      	movs	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	e001      	b.n	800de82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de7e:	2300      	movs	r3, #0
 800de80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de82:	f002 fa0b 	bl	801029c <vPortExitCritical>

	return xReturn;
 800de86:	68fb      	ldr	r3, [r7, #12]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de90:	b480      	push	{r7}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de9a:	2300      	movs	r3, #0
 800de9c:	60fb      	str	r3, [r7, #12]
 800de9e:	e014      	b.n	800deca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dea0:	4a0f      	ldr	r2, [pc, #60]	@ (800dee0 <vQueueAddToRegistry+0x50>)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10b      	bne.n	800dec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800deac:	490c      	ldr	r1, [pc, #48]	@ (800dee0 <vQueueAddToRegistry+0x50>)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800deb6:	4a0a      	ldr	r2, [pc, #40]	@ (800dee0 <vQueueAddToRegistry+0x50>)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	4413      	add	r3, r2
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dec2:	e006      	b.n	800ded2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b07      	cmp	r3, #7
 800dece:	d9e7      	bls.n	800dea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	3714      	adds	r7, #20
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	200068ec 	.word	0x200068ec

0800dee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800def4:	f002 f9a0 	bl	8010238 <vPortEnterCritical>
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800defe:	b25b      	sxtb	r3, r3
 800df00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df04:	d103      	bne.n	800df0e <vQueueWaitForMessageRestricted+0x2a>
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df14:	b25b      	sxtb	r3, r3
 800df16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df1a:	d103      	bne.n	800df24 <vQueueWaitForMessageRestricted+0x40>
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df24:	f002 f9ba 	bl	801029c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	3324      	adds	r3, #36	@ 0x24
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	68b9      	ldr	r1, [r7, #8]
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fe01 	bl	800eb40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df3e:	6978      	ldr	r0, [r7, #20]
 800df40:	f7ff ff26 	bl	800dd90 <prvUnlockQueue>
	}
 800df44:	bf00      	nop
 800df46:	3718      	adds	r7, #24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08e      	sub	sp, #56	@ 0x38
 800df50:	af04      	add	r7, sp, #16
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10b      	bne.n	800df78 <xTaskCreateStatic+0x2c>
	__asm volatile
 800df60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	623b      	str	r3, [r7, #32]
}
 800df72:	bf00      	nop
 800df74:	bf00      	nop
 800df76:	e7fd      	b.n	800df74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10b      	bne.n	800df96 <xTaskCreateStatic+0x4a>
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	61fb      	str	r3, [r7, #28]
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	e7fd      	b.n	800df92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df96:	23bc      	movs	r3, #188	@ 0xbc
 800df98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	2bbc      	cmp	r3, #188	@ 0xbc
 800df9e:	d00b      	beq.n	800dfb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	61bb      	str	r3, [r7, #24]
}
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	e7fd      	b.n	800dfb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dfb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01e      	beq.n	800dffe <xTaskCreateStatic+0xb2>
 800dfc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d01b      	beq.n	800dffe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9303      	str	r3, [sp, #12]
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfde:	9302      	str	r3, [sp, #8]
 800dfe0:	f107 0314 	add.w	r3, r7, #20
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	68b9      	ldr	r1, [r7, #8]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 f851 	bl	800e098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dff8:	f000 f8f8 	bl	800e1ec <prvAddNewTaskToReadyList>
 800dffc:	e001      	b.n	800e002 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dffe:	2300      	movs	r3, #0
 800e000:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e002:	697b      	ldr	r3, [r7, #20]
	}
 800e004:	4618      	mov	r0, r3
 800e006:	3728      	adds	r7, #40	@ 0x28
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08c      	sub	sp, #48	@ 0x30
 800e010:	af04      	add	r7, sp, #16
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	4613      	mov	r3, r2
 800e01a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e01c:	88fb      	ldrh	r3, [r7, #6]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4618      	mov	r0, r3
 800e022:	f002 fa2b 	bl	801047c <pvPortMalloc>
 800e026:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00e      	beq.n	800e04c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e02e:	20bc      	movs	r0, #188	@ 0xbc
 800e030:	f002 fa24 	bl	801047c <pvPortMalloc>
 800e034:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	631a      	str	r2, [r3, #48]	@ 0x30
 800e042:	e005      	b.n	800e050 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e044:	6978      	ldr	r0, [r7, #20]
 800e046:	f002 fae7 	bl	8010618 <vPortFree>
 800e04a:	e001      	b.n	800e050 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e04c:	2300      	movs	r3, #0
 800e04e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d017      	beq.n	800e086 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	2200      	movs	r2, #0
 800e05a:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e05e:	88fa      	ldrh	r2, [r7, #6]
 800e060:	2300      	movs	r3, #0
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	9302      	str	r3, [sp, #8]
 800e068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06a:	9301      	str	r3, [sp, #4]
 800e06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	68b9      	ldr	r1, [r7, #8]
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f000 f80f 	bl	800e098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e07a:	69f8      	ldr	r0, [r7, #28]
 800e07c:	f000 f8b6 	bl	800e1ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e080:	2301      	movs	r3, #1
 800e082:	61bb      	str	r3, [r7, #24]
 800e084:	e002      	b.n	800e08c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e08a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e08c:	69bb      	ldr	r3, [r7, #24]
	}
 800e08e:	4618      	mov	r0, r3
 800e090:	3720      	adds	r7, #32
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
	...

0800e098 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
 800e0a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	21a5      	movs	r1, #165	@ 0xa5
 800e0b2:	f003 f9b7 	bl	8011424 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	f023 0307 	bic.w	r3, r3, #7
 800e0ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	f003 0307 	and.w	r3, r3, #7
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00b      	beq.n	800e0f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	617b      	str	r3, [r7, #20]
}
 800e0ec:	bf00      	nop
 800e0ee:	bf00      	nop
 800e0f0:	e7fd      	b.n	800e0ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d01f      	beq.n	800e138 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61fb      	str	r3, [r7, #28]
 800e0fc:	e012      	b.n	800e124 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	4413      	add	r3, r2
 800e104:	7819      	ldrb	r1, [r3, #0]
 800e106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	4413      	add	r3, r2
 800e10c:	3334      	adds	r3, #52	@ 0x34
 800e10e:	460a      	mov	r2, r1
 800e110:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	4413      	add	r3, r2
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d006      	beq.n	800e12c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	3301      	adds	r3, #1
 800e122:	61fb      	str	r3, [r7, #28]
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	2b1f      	cmp	r3, #31
 800e128:	d9e9      	bls.n	800e0fe <prvInitialiseNewTask+0x66>
 800e12a:	e000      	b.n	800e12e <prvInitialiseNewTask+0x96>
			{
				break;
 800e12c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e130:	2200      	movs	r2, #0
 800e132:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800e136:	e003      	b.n	800e140 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e142:	2b37      	cmp	r3, #55	@ 0x37
 800e144:	d901      	bls.n	800e14a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e146:	2337      	movs	r3, #55	@ 0x37
 800e148:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e14e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e154:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800e156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e158:	2200      	movs	r2, #0
 800e15a:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15e:	3304      	adds	r3, #4
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff f8a7 	bl	800d2b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	3318      	adds	r3, #24
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff f8a2 	bl	800d2b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e174:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e178:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e184:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	2200      	movs	r2, #0
 800e18a:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18e:	2200      	movs	r2, #0
 800e190:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e196:	2200      	movs	r2, #0
 800e198:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19e:	3368      	adds	r3, #104	@ 0x68
 800e1a0:	224c      	movs	r2, #76	@ 0x4c
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f003 f93d 	bl	8011424 <memset>
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ac:	4a0c      	ldr	r2, [pc, #48]	@ (800e1e0 <prvInitialiseNewTask+0x148>)
 800e1ae:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e1e4 <prvInitialiseNewTask+0x14c>)
 800e1b4:	671a      	str	r2, [r3, #112]	@ 0x70
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	4a0b      	ldr	r2, [pc, #44]	@ (800e1e8 <prvInitialiseNewTask+0x150>)
 800e1ba:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	68f9      	ldr	r1, [r7, #12]
 800e1c0:	69b8      	ldr	r0, [r7, #24]
 800e1c2:	f001 ff09 	bl	800ffd8 <pxPortInitialiseStack>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1d8:	bf00      	nop
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	2000b358 	.word	0x2000b358
 800e1e4:	2000b3c0 	.word	0x2000b3c0
 800e1e8:	2000b428 	.word	0x2000b428

0800e1ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1f4:	f002 f820 	bl	8010238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1f8:	4b2d      	ldr	r3, [pc, #180]	@ (800e2b0 <prvAddNewTaskToReadyList+0xc4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	4a2c      	ldr	r2, [pc, #176]	@ (800e2b0 <prvAddNewTaskToReadyList+0xc4>)
 800e200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e202:	4b2c      	ldr	r3, [pc, #176]	@ (800e2b4 <prvAddNewTaskToReadyList+0xc8>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d109      	bne.n	800e21e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e20a:	4a2a      	ldr	r2, [pc, #168]	@ (800e2b4 <prvAddNewTaskToReadyList+0xc8>)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e210:	4b27      	ldr	r3, [pc, #156]	@ (800e2b0 <prvAddNewTaskToReadyList+0xc4>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d110      	bne.n	800e23a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e218:	f000 fdc2 	bl	800eda0 <prvInitialiseTaskLists>
 800e21c:	e00d      	b.n	800e23a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e21e:	4b26      	ldr	r3, [pc, #152]	@ (800e2b8 <prvAddNewTaskToReadyList+0xcc>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d109      	bne.n	800e23a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e226:	4b23      	ldr	r3, [pc, #140]	@ (800e2b4 <prvAddNewTaskToReadyList+0xc8>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	429a      	cmp	r2, r3
 800e232:	d802      	bhi.n	800e23a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e234:	4a1f      	ldr	r2, [pc, #124]	@ (800e2b4 <prvAddNewTaskToReadyList+0xc8>)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e23a:	4b20      	ldr	r3, [pc, #128]	@ (800e2bc <prvAddNewTaskToReadyList+0xd0>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3301      	adds	r3, #1
 800e240:	4a1e      	ldr	r2, [pc, #120]	@ (800e2bc <prvAddNewTaskToReadyList+0xd0>)
 800e242:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e244:	4b1d      	ldr	r3, [pc, #116]	@ (800e2bc <prvAddNewTaskToReadyList+0xd0>)
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e250:	4b1b      	ldr	r3, [pc, #108]	@ (800e2c0 <prvAddNewTaskToReadyList+0xd4>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	429a      	cmp	r2, r3
 800e256:	d903      	bls.n	800e260 <prvAddNewTaskToReadyList+0x74>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e25c:	4a18      	ldr	r2, [pc, #96]	@ (800e2c0 <prvAddNewTaskToReadyList+0xd4>)
 800e25e:	6013      	str	r3, [r2, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e264:	4613      	mov	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4a15      	ldr	r2, [pc, #84]	@ (800e2c4 <prvAddNewTaskToReadyList+0xd8>)
 800e26e:	441a      	add	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3304      	adds	r3, #4
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	f7ff f829 	bl	800d2ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e27c:	f002 f80e 	bl	801029c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e280:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b8 <prvAddNewTaskToReadyList+0xcc>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00e      	beq.n	800e2a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e288:	4b0a      	ldr	r3, [pc, #40]	@ (800e2b4 <prvAddNewTaskToReadyList+0xc8>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e292:	429a      	cmp	r2, r3
 800e294:	d207      	bcs.n	800e2a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e296:	4b0c      	ldr	r3, [pc, #48]	@ (800e2c8 <prvAddNewTaskToReadyList+0xdc>)
 800e298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e29c:	601a      	str	r2, [r3, #0]
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2a6:	bf00      	nop
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20006e00 	.word	0x20006e00
 800e2b4:	2000692c 	.word	0x2000692c
 800e2b8:	20006e0c 	.word	0x20006e0c
 800e2bc:	20006e1c 	.word	0x20006e1c
 800e2c0:	20006e08 	.word	0x20006e08
 800e2c4:	20006930 	.word	0x20006930
 800e2c8:	e000ed04 	.word	0xe000ed04

0800e2cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d018      	beq.n	800e310 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2de:	4b14      	ldr	r3, [pc, #80]	@ (800e330 <vTaskDelay+0x64>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00b      	beq.n	800e2fe <vTaskDelay+0x32>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	60bb      	str	r3, [r7, #8]
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	e7fd      	b.n	800e2fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2fe:	f000 f96f 	bl	800e5e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e302:	2100      	movs	r1, #0
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f001 fab9 	bl	800f87c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e30a:	f000 f977 	bl	800e5fc <xTaskResumeAll>
 800e30e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d107      	bne.n	800e326 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e316:	4b07      	ldr	r3, [pc, #28]	@ (800e334 <vTaskDelay+0x68>)
 800e318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e326:	bf00      	nop
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	20006e28 	.word	0x20006e28
 800e334:	e000ed04 	.word	0xe000ed04

0800e338 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10b      	bne.n	800e362 <eTaskGetState+0x2a>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	60bb      	str	r3, [r7, #8]
}
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
 800e360:	e7fd      	b.n	800e35e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e362:	4b24      	ldr	r3, [pc, #144]	@ (800e3f4 <eTaskGetState+0xbc>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	69ba      	ldr	r2, [r7, #24]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d102      	bne.n	800e372 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e36c:	2300      	movs	r3, #0
 800e36e:	77fb      	strb	r3, [r7, #31]
 800e370:	e03a      	b.n	800e3e8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800e372:	f001 ff61 	bl	8010238 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e37c:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f8 <eTaskGetState+0xc0>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e382:	4b1e      	ldr	r3, [pc, #120]	@ (800e3fc <eTaskGetState+0xc4>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e388:	f001 ff88 	bl	801029c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	429a      	cmp	r2, r3
 800e392:	d003      	beq.n	800e39c <eTaskGetState+0x64>
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d102      	bne.n	800e3a2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e39c:	2302      	movs	r3, #2
 800e39e:	77fb      	strb	r3, [r7, #31]
 800e3a0:	e022      	b.n	800e3e8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	4a16      	ldr	r2, [pc, #88]	@ (800e400 <eTaskGetState+0xc8>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d112      	bne.n	800e3d0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10b      	bne.n	800e3ca <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d102      	bne.n	800e3c4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800e3be:	2302      	movs	r3, #2
 800e3c0:	77fb      	strb	r3, [r7, #31]
 800e3c2:	e011      	b.n	800e3e8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	77fb      	strb	r3, [r7, #31]
 800e3c8:	e00e      	b.n	800e3e8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e3ca:	2302      	movs	r3, #2
 800e3cc:	77fb      	strb	r3, [r7, #31]
 800e3ce:	e00b      	b.n	800e3e8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e404 <eTaskGetState+0xcc>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d002      	beq.n	800e3de <eTaskGetState+0xa6>
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d102      	bne.n	800e3e4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e3de:	2304      	movs	r3, #4
 800e3e0:	77fb      	strb	r3, [r7, #31]
 800e3e2:	e001      	b.n	800e3e8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e3e8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3720      	adds	r7, #32
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	2000692c 	.word	0x2000692c
 800e3f8:	20006db8 	.word	0x20006db8
 800e3fc:	20006dbc 	.word	0x20006dbc
 800e400:	20006dec 	.word	0x20006dec
 800e404:	20006dd4 	.word	0x20006dd4

0800e408 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e410:	f001 ff12 	bl	8010238 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <vTaskSuspend+0x18>
 800e41a:	4b30      	ldr	r3, [pc, #192]	@ (800e4dc <vTaskSuspend+0xd4>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	e000      	b.n	800e422 <vTaskSuspend+0x1a>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3304      	adds	r3, #4
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe ffad 	bl	800d388 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e432:	2b00      	cmp	r3, #0
 800e434:	d004      	beq.n	800e440 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	3318      	adds	r3, #24
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fe ffa4 	bl	800d388 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	3304      	adds	r3, #4
 800e444:	4619      	mov	r1, r3
 800e446:	4826      	ldr	r0, [pc, #152]	@ (800e4e0 <vTaskSuspend+0xd8>)
 800e448:	f7fe ff41 	bl	800d2ce <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b01      	cmp	r3, #1
 800e456:	d103      	bne.n	800e460 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e460:	f001 ff1c 	bl	801029c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e464:	4b1f      	ldr	r3, [pc, #124]	@ (800e4e4 <vTaskSuspend+0xdc>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e46c:	f001 fee4 	bl	8010238 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e470:	f000 fe0e 	bl	800f090 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e474:	f001 ff12 	bl	801029c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e478:	4b18      	ldr	r3, [pc, #96]	@ (800e4dc <vTaskSuspend+0xd4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d128      	bne.n	800e4d4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800e482:	4b18      	ldr	r3, [pc, #96]	@ (800e4e4 <vTaskSuspend+0xdc>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d018      	beq.n	800e4bc <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e48a:	4b17      	ldr	r3, [pc, #92]	@ (800e4e8 <vTaskSuspend+0xe0>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00b      	beq.n	800e4aa <vTaskSuspend+0xa2>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	60bb      	str	r3, [r7, #8]
}
 800e4a4:	bf00      	nop
 800e4a6:	bf00      	nop
 800e4a8:	e7fd      	b.n	800e4a6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800e4aa:	4b10      	ldr	r3, [pc, #64]	@ (800e4ec <vTaskSuspend+0xe4>)
 800e4ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4ba:	e00b      	b.n	800e4d4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e4bc:	4b08      	ldr	r3, [pc, #32]	@ (800e4e0 <vTaskSuspend+0xd8>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e4f0 <vTaskSuspend+0xe8>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d103      	bne.n	800e4d0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800e4c8:	4b04      	ldr	r3, [pc, #16]	@ (800e4dc <vTaskSuspend+0xd4>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	601a      	str	r2, [r3, #0]
	}
 800e4ce:	e001      	b.n	800e4d4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800e4d0:	f000 fa8c 	bl	800e9ec <vTaskSwitchContext>
	}
 800e4d4:	bf00      	nop
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	2000692c 	.word	0x2000692c
 800e4e0:	20006dec 	.word	0x20006dec
 800e4e4:	20006e0c 	.word	0x20006e0c
 800e4e8:	20006e28 	.word	0x20006e28
 800e4ec:	e000ed04 	.word	0xe000ed04
 800e4f0:	20006e00 	.word	0x20006e00

0800e4f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b08a      	sub	sp, #40	@ 0x28
 800e4f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4fe:	2300      	movs	r3, #0
 800e500:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e502:	463a      	mov	r2, r7
 800e504:	1d39      	adds	r1, r7, #4
 800e506:	f107 0308 	add.w	r3, r7, #8
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe fe7e 	bl	800d20c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	9202      	str	r2, [sp, #8]
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	2300      	movs	r3, #0
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	2300      	movs	r3, #0
 800e520:	460a      	mov	r2, r1
 800e522:	4926      	ldr	r1, [pc, #152]	@ (800e5bc <vTaskStartScheduler+0xc8>)
 800e524:	4826      	ldr	r0, [pc, #152]	@ (800e5c0 <vTaskStartScheduler+0xcc>)
 800e526:	f7ff fd11 	bl	800df4c <xTaskCreateStatic>
 800e52a:	4603      	mov	r3, r0
 800e52c:	4a25      	ldr	r2, [pc, #148]	@ (800e5c4 <vTaskStartScheduler+0xd0>)
 800e52e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e530:	4b24      	ldr	r3, [pc, #144]	@ (800e5c4 <vTaskStartScheduler+0xd0>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e538:	2301      	movs	r3, #1
 800e53a:	617b      	str	r3, [r7, #20]
 800e53c:	e001      	b.n	800e542 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e53e:	2300      	movs	r3, #0
 800e540:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d102      	bne.n	800e54e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e548:	f001 f9ec 	bl	800f924 <xTimerCreateTimerTask>
 800e54c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d11e      	bne.n	800e592 <vTaskStartScheduler+0x9e>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	613b      	str	r3, [r7, #16]
}
 800e566:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e568:	4b17      	ldr	r3, [pc, #92]	@ (800e5c8 <vTaskStartScheduler+0xd4>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3368      	adds	r3, #104	@ 0x68
 800e56e:	4a17      	ldr	r2, [pc, #92]	@ (800e5cc <vTaskStartScheduler+0xd8>)
 800e570:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e572:	4b17      	ldr	r3, [pc, #92]	@ (800e5d0 <vTaskStartScheduler+0xdc>)
 800e574:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e57a:	4b16      	ldr	r3, [pc, #88]	@ (800e5d4 <vTaskStartScheduler+0xe0>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e580:	4b15      	ldr	r3, [pc, #84]	@ (800e5d8 <vTaskStartScheduler+0xe4>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e586:	4b15      	ldr	r3, [pc, #84]	@ (800e5dc <vTaskStartScheduler+0xe8>)
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e58c:	f001 fdb0 	bl	80100f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e590:	e00f      	b.n	800e5b2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e598:	d10b      	bne.n	800e5b2 <vTaskStartScheduler+0xbe>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	60fb      	str	r3, [r7, #12]
}
 800e5ac:	bf00      	nop
 800e5ae:	bf00      	nop
 800e5b0:	e7fd      	b.n	800e5ae <vTaskStartScheduler+0xba>
}
 800e5b2:	bf00      	nop
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	080120a4 	.word	0x080120a4
 800e5c0:	0800ed6d 	.word	0x0800ed6d
 800e5c4:	20006e24 	.word	0x20006e24
 800e5c8:	2000692c 	.word	0x2000692c
 800e5cc:	2000004c 	.word	0x2000004c
 800e5d0:	20006e20 	.word	0x20006e20
 800e5d4:	20006e0c 	.word	0x20006e0c
 800e5d8:	20006e04 	.word	0x20006e04
 800e5dc:	200003d8 	.word	0x200003d8

0800e5e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e5e4:	4b04      	ldr	r3, [pc, #16]	@ (800e5f8 <vTaskSuspendAll+0x18>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	4a03      	ldr	r2, [pc, #12]	@ (800e5f8 <vTaskSuspendAll+0x18>)
 800e5ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e5ee:	bf00      	nop
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	20006e28 	.word	0x20006e28

0800e5fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e602:	2300      	movs	r3, #0
 800e604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e606:	2300      	movs	r3, #0
 800e608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e60a:	4b42      	ldr	r3, [pc, #264]	@ (800e714 <xTaskResumeAll+0x118>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10b      	bne.n	800e62a <xTaskResumeAll+0x2e>
	__asm volatile
 800e612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	603b      	str	r3, [r7, #0]
}
 800e624:	bf00      	nop
 800e626:	bf00      	nop
 800e628:	e7fd      	b.n	800e626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e62a:	f001 fe05 	bl	8010238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e62e:	4b39      	ldr	r3, [pc, #228]	@ (800e714 <xTaskResumeAll+0x118>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3b01      	subs	r3, #1
 800e634:	4a37      	ldr	r2, [pc, #220]	@ (800e714 <xTaskResumeAll+0x118>)
 800e636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e638:	4b36      	ldr	r3, [pc, #216]	@ (800e714 <xTaskResumeAll+0x118>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d162      	bne.n	800e706 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e640:	4b35      	ldr	r3, [pc, #212]	@ (800e718 <xTaskResumeAll+0x11c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d05e      	beq.n	800e706 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e648:	e02f      	b.n	800e6aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e64a:	4b34      	ldr	r3, [pc, #208]	@ (800e71c <xTaskResumeAll+0x120>)
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3318      	adds	r3, #24
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fe96 	bl	800d388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3304      	adds	r3, #4
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe fe91 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e66a:	4b2d      	ldr	r3, [pc, #180]	@ (800e720 <xTaskResumeAll+0x124>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d903      	bls.n	800e67a <xTaskResumeAll+0x7e>
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e676:	4a2a      	ldr	r2, [pc, #168]	@ (800e720 <xTaskResumeAll+0x124>)
 800e678:	6013      	str	r3, [r2, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e67e:	4613      	mov	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4a27      	ldr	r2, [pc, #156]	@ (800e724 <xTaskResumeAll+0x128>)
 800e688:	441a      	add	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3304      	adds	r3, #4
 800e68e:	4619      	mov	r1, r3
 800e690:	4610      	mov	r0, r2
 800e692:	f7fe fe1c 	bl	800d2ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e69a:	4b23      	ldr	r3, [pc, #140]	@ (800e728 <xTaskResumeAll+0x12c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d302      	bcc.n	800e6aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e6a4:	4b21      	ldr	r3, [pc, #132]	@ (800e72c <xTaskResumeAll+0x130>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e71c <xTaskResumeAll+0x120>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1cb      	bne.n	800e64a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d001      	beq.n	800e6bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e6b8:	f000 fcea 	bl	800f090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e730 <xTaskResumeAll+0x134>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d010      	beq.n	800e6ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e6c8:	f000 f8d6 	bl	800e878 <xTaskIncrementTick>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e6d2:	4b16      	ldr	r3, [pc, #88]	@ (800e72c <xTaskResumeAll+0x130>)
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1f1      	bne.n	800e6c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e6e4:	4b12      	ldr	r3, [pc, #72]	@ (800e730 <xTaskResumeAll+0x134>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e6ea:	4b10      	ldr	r3, [pc, #64]	@ (800e72c <xTaskResumeAll+0x130>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d009      	beq.n	800e706 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e734 <xTaskResumeAll+0x138>)
 800e6f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e706:	f001 fdc9 	bl	801029c <vPortExitCritical>

	return xAlreadyYielded;
 800e70a:	68bb      	ldr	r3, [r7, #8]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	20006e28 	.word	0x20006e28
 800e718:	20006e00 	.word	0x20006e00
 800e71c:	20006dc0 	.word	0x20006dc0
 800e720:	20006e08 	.word	0x20006e08
 800e724:	20006930 	.word	0x20006930
 800e728:	2000692c 	.word	0x2000692c
 800e72c:	20006e14 	.word	0x20006e14
 800e730:	20006e10 	.word	0x20006e10
 800e734:	e000ed04 	.word	0xe000ed04

0800e738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e73e:	4b05      	ldr	r3, [pc, #20]	@ (800e754 <xTaskGetTickCount+0x1c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e744:	687b      	ldr	r3, [r7, #4]
}
 800e746:	4618      	mov	r0, r3
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	20006e04 	.word	0x20006e04

0800e758 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e764:	2300      	movs	r3, #0
 800e766:	617b      	str	r3, [r7, #20]
 800e768:	2338      	movs	r3, #56	@ 0x38
 800e76a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800e76c:	f7ff ff38 	bl	800e5e0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e770:	4b3a      	ldr	r3, [pc, #232]	@ (800e85c <uxTaskGetSystemState+0x104>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	429a      	cmp	r2, r3
 800e778:	d369      	bcc.n	800e84e <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	3b01      	subs	r3, #1
 800e77e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e780:	697a      	ldr	r2, [r7, #20]
 800e782:	4613      	mov	r3, r2
 800e784:	00db      	lsls	r3, r3, #3
 800e786:	4413      	add	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	461a      	mov	r2, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	1898      	adds	r0, r3, r2
 800e790:	693a      	ldr	r2, [r7, #16]
 800e792:	4613      	mov	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4a31      	ldr	r2, [pc, #196]	@ (800e860 <uxTaskGetSystemState+0x108>)
 800e79c:	4413      	add	r3, r2
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	f000 fbd1 	bl	800ef48 <prvListTasksWithinSingleList>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e2      	bne.n	800e77a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	4413      	add	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	461a      	mov	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	4a27      	ldr	r2, [pc, #156]	@ (800e864 <uxTaskGetSystemState+0x10c>)
 800e7c6:	6811      	ldr	r1, [r2, #0]
 800e7c8:	2202      	movs	r2, #2
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 fbbc 	bl	800ef48 <prvListTasksWithinSingleList>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e7d8:	697a      	ldr	r2, [r7, #20]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	4a1f      	ldr	r2, [pc, #124]	@ (800e868 <uxTaskGetSystemState+0x110>)
 800e7ea:	6811      	ldr	r1, [r2, #0]
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 fbaa 	bl	800ef48 <prvListTasksWithinSingleList>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	4613      	mov	r3, r2
 800e800:	00db      	lsls	r3, r3, #3
 800e802:	4413      	add	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	461a      	mov	r2, r3
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	4413      	add	r3, r2
 800e80c:	2204      	movs	r2, #4
 800e80e:	4917      	ldr	r1, [pc, #92]	@ (800e86c <uxTaskGetSystemState+0x114>)
 800e810:	4618      	mov	r0, r3
 800e812:	f000 fb99 	bl	800ef48 <prvListTasksWithinSingleList>
 800e816:	4602      	mov	r2, r0
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	4413      	add	r3, r2
 800e81c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	4613      	mov	r3, r2
 800e822:	00db      	lsls	r3, r3, #3
 800e824:	4413      	add	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	461a      	mov	r2, r3
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	4413      	add	r3, r2
 800e82e:	2203      	movs	r2, #3
 800e830:	490f      	ldr	r1, [pc, #60]	@ (800e870 <uxTaskGetSystemState+0x118>)
 800e832:	4618      	mov	r0, r3
 800e834:	f000 fb88 	bl	800ef48 <prvListTasksWithinSingleList>
 800e838:	4602      	mov	r2, r0
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	4413      	add	r3, r2
 800e83e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d003      	beq.n	800e84e <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e846:	4b0b      	ldr	r3, [pc, #44]	@ (800e874 <uxTaskGetSystemState+0x11c>)
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800e84e:	f7ff fed5 	bl	800e5fc <xTaskResumeAll>

		return uxTask;
 800e852:	697b      	ldr	r3, [r7, #20]
	}
 800e854:	4618      	mov	r0, r3
 800e856:	3718      	adds	r7, #24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	20006e00 	.word	0x20006e00
 800e860:	20006930 	.word	0x20006930
 800e864:	20006db8 	.word	0x20006db8
 800e868:	20006dbc 	.word	0x20006dbc
 800e86c:	20006dd4 	.word	0x20006dd4
 800e870:	20006dec 	.word	0x20006dec
 800e874:	200003d8 	.word	0x200003d8

0800e878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e87e:	2300      	movs	r3, #0
 800e880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e882:	4b4f      	ldr	r3, [pc, #316]	@ (800e9c0 <xTaskIncrementTick+0x148>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	f040 8090 	bne.w	800e9ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e88c:	4b4d      	ldr	r3, [pc, #308]	@ (800e9c4 <xTaskIncrementTick+0x14c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	3301      	adds	r3, #1
 800e892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e894:	4a4b      	ldr	r2, [pc, #300]	@ (800e9c4 <xTaskIncrementTick+0x14c>)
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d121      	bne.n	800e8e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e8a0:	4b49      	ldr	r3, [pc, #292]	@ (800e9c8 <xTaskIncrementTick+0x150>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00b      	beq.n	800e8c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	603b      	str	r3, [r7, #0]
}
 800e8bc:	bf00      	nop
 800e8be:	bf00      	nop
 800e8c0:	e7fd      	b.n	800e8be <xTaskIncrementTick+0x46>
 800e8c2:	4b41      	ldr	r3, [pc, #260]	@ (800e9c8 <xTaskIncrementTick+0x150>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	60fb      	str	r3, [r7, #12]
 800e8c8:	4b40      	ldr	r3, [pc, #256]	@ (800e9cc <xTaskIncrementTick+0x154>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e9c8 <xTaskIncrementTick+0x150>)
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	4a3e      	ldr	r2, [pc, #248]	@ (800e9cc <xTaskIncrementTick+0x154>)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6013      	str	r3, [r2, #0]
 800e8d6:	4b3e      	ldr	r3, [pc, #248]	@ (800e9d0 <xTaskIncrementTick+0x158>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	4a3c      	ldr	r2, [pc, #240]	@ (800e9d0 <xTaskIncrementTick+0x158>)
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	f000 fbd6 	bl	800f090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e8e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e9d4 <xTaskIncrementTick+0x15c>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d349      	bcc.n	800e982 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8ee:	4b36      	ldr	r3, [pc, #216]	@ (800e9c8 <xTaskIncrementTick+0x150>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d104      	bne.n	800e902 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8f8:	4b36      	ldr	r3, [pc, #216]	@ (800e9d4 <xTaskIncrementTick+0x15c>)
 800e8fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e8fe:	601a      	str	r2, [r3, #0]
					break;
 800e900:	e03f      	b.n	800e982 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e902:	4b31      	ldr	r3, [pc, #196]	@ (800e9c8 <xTaskIncrementTick+0x150>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e912:	693a      	ldr	r2, [r7, #16]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d203      	bcs.n	800e922 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e91a:	4a2e      	ldr	r2, [pc, #184]	@ (800e9d4 <xTaskIncrementTick+0x15c>)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e920:	e02f      	b.n	800e982 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	3304      	adds	r3, #4
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe fd2e 	bl	800d388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	3318      	adds	r3, #24
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fe fd25 	bl	800d388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e942:	4b25      	ldr	r3, [pc, #148]	@ (800e9d8 <xTaskIncrementTick+0x160>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d903      	bls.n	800e952 <xTaskIncrementTick+0xda>
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e94e:	4a22      	ldr	r2, [pc, #136]	@ (800e9d8 <xTaskIncrementTick+0x160>)
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e956:	4613      	mov	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9dc <xTaskIncrementTick+0x164>)
 800e960:	441a      	add	r2, r3
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	3304      	adds	r3, #4
 800e966:	4619      	mov	r1, r3
 800e968:	4610      	mov	r0, r2
 800e96a:	f7fe fcb0 	bl	800d2ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e972:	4b1b      	ldr	r3, [pc, #108]	@ (800e9e0 <xTaskIncrementTick+0x168>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e978:	429a      	cmp	r2, r3
 800e97a:	d3b8      	bcc.n	800e8ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e97c:	2301      	movs	r3, #1
 800e97e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e980:	e7b5      	b.n	800e8ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e982:	4b17      	ldr	r3, [pc, #92]	@ (800e9e0 <xTaskIncrementTick+0x168>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e988:	4914      	ldr	r1, [pc, #80]	@ (800e9dc <xTaskIncrementTick+0x164>)
 800e98a:	4613      	mov	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	440b      	add	r3, r1
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d901      	bls.n	800e99e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e99a:	2301      	movs	r3, #1
 800e99c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e99e:	4b11      	ldr	r3, [pc, #68]	@ (800e9e4 <xTaskIncrementTick+0x16c>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d007      	beq.n	800e9b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	617b      	str	r3, [r7, #20]
 800e9aa:	e004      	b.n	800e9b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e9e8 <xTaskIncrementTick+0x170>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	4a0d      	ldr	r2, [pc, #52]	@ (800e9e8 <xTaskIncrementTick+0x170>)
 800e9b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e9b6:	697b      	ldr	r3, [r7, #20]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20006e28 	.word	0x20006e28
 800e9c4:	20006e04 	.word	0x20006e04
 800e9c8:	20006db8 	.word	0x20006db8
 800e9cc:	20006dbc 	.word	0x20006dbc
 800e9d0:	20006e18 	.word	0x20006e18
 800e9d4:	20006e20 	.word	0x20006e20
 800e9d8:	20006e08 	.word	0x20006e08
 800e9dc:	20006930 	.word	0x20006930
 800e9e0:	2000692c 	.word	0x2000692c
 800e9e4:	20006e14 	.word	0x20006e14
 800e9e8:	20006e10 	.word	0x20006e10

0800e9ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e9f2:	4b37      	ldr	r3, [pc, #220]	@ (800ead0 <vTaskSwitchContext+0xe4>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e9fa:	4b36      	ldr	r3, [pc, #216]	@ (800ead4 <vTaskSwitchContext+0xe8>)
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ea00:	e05f      	b.n	800eac2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800ea02:	4b34      	ldr	r3, [pc, #208]	@ (800ead4 <vTaskSwitchContext+0xe8>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ea08:	4b33      	ldr	r3, [pc, #204]	@ (800ead8 <vTaskSwitchContext+0xec>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a33      	ldr	r2, [pc, #204]	@ (800eadc <vTaskSwitchContext+0xf0>)
 800ea0e:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ea10:	4b32      	ldr	r3, [pc, #200]	@ (800eadc <vTaskSwitchContext+0xf0>)
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	4b32      	ldr	r3, [pc, #200]	@ (800eae0 <vTaskSwitchContext+0xf4>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d909      	bls.n	800ea30 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ea1c:	4b31      	ldr	r3, [pc, #196]	@ (800eae4 <vTaskSwitchContext+0xf8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800ea22:	4a2e      	ldr	r2, [pc, #184]	@ (800eadc <vTaskSwitchContext+0xf0>)
 800ea24:	6810      	ldr	r0, [r2, #0]
 800ea26:	4a2e      	ldr	r2, [pc, #184]	@ (800eae0 <vTaskSwitchContext+0xf4>)
 800ea28:	6812      	ldr	r2, [r2, #0]
 800ea2a:	1a82      	subs	r2, r0, r2
 800ea2c:	440a      	add	r2, r1
 800ea2e:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ea30:	4b2a      	ldr	r3, [pc, #168]	@ (800eadc <vTaskSwitchContext+0xf0>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a2a      	ldr	r2, [pc, #168]	@ (800eae0 <vTaskSwitchContext+0xf4>)
 800ea36:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea38:	4b2b      	ldr	r3, [pc, #172]	@ (800eae8 <vTaskSwitchContext+0xfc>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	60fb      	str	r3, [r7, #12]
 800ea3e:	e011      	b.n	800ea64 <vTaskSwitchContext+0x78>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d10b      	bne.n	800ea5e <vTaskSwitchContext+0x72>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	607b      	str	r3, [r7, #4]
}
 800ea58:	bf00      	nop
 800ea5a:	bf00      	nop
 800ea5c:	e7fd      	b.n	800ea5a <vTaskSwitchContext+0x6e>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	60fb      	str	r3, [r7, #12]
 800ea64:	4921      	ldr	r1, [pc, #132]	@ (800eaec <vTaskSwitchContext+0x100>)
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	4413      	add	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	440b      	add	r3, r1
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d0e3      	beq.n	800ea40 <vTaskSwitchContext+0x54>
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	4413      	add	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4a1a      	ldr	r2, [pc, #104]	@ (800eaec <vTaskSwitchContext+0x100>)
 800ea84:	4413      	add	r3, r2
 800ea86:	60bb      	str	r3, [r7, #8]
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	605a      	str	r2, [r3, #4]
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	685a      	ldr	r2, [r3, #4]
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	3308      	adds	r3, #8
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d104      	bne.n	800eaa8 <vTaskSwitchContext+0xbc>
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	685a      	ldr	r2, [r3, #4]
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	605a      	str	r2, [r3, #4]
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	4a0d      	ldr	r2, [pc, #52]	@ (800eae4 <vTaskSwitchContext+0xf8>)
 800eab0:	6013      	str	r3, [r2, #0]
 800eab2:	4a0d      	ldr	r2, [pc, #52]	@ (800eae8 <vTaskSwitchContext+0xfc>)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eab8:	4b0a      	ldr	r3, [pc, #40]	@ (800eae4 <vTaskSwitchContext+0xf8>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3368      	adds	r3, #104	@ 0x68
 800eabe:	4a0c      	ldr	r2, [pc, #48]	@ (800eaf0 <vTaskSwitchContext+0x104>)
 800eac0:	6013      	str	r3, [r2, #0]
}
 800eac2:	bf00      	nop
 800eac4:	3714      	adds	r7, #20
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	20006e28 	.word	0x20006e28
 800ead4:	20006e14 	.word	0x20006e14
 800ead8:	200003d8 	.word	0x200003d8
 800eadc:	20006e30 	.word	0x20006e30
 800eae0:	20006e2c 	.word	0x20006e2c
 800eae4:	2000692c 	.word	0x2000692c
 800eae8:	20006e08 	.word	0x20006e08
 800eaec:	20006930 	.word	0x20006930
 800eaf0:	2000004c 	.word	0x2000004c

0800eaf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10b      	bne.n	800eb1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800eb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	60fb      	str	r3, [r7, #12]
}
 800eb16:	bf00      	nop
 800eb18:	bf00      	nop
 800eb1a:	e7fd      	b.n	800eb18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb1c:	4b07      	ldr	r3, [pc, #28]	@ (800eb3c <vTaskPlaceOnEventList+0x48>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	3318      	adds	r3, #24
 800eb22:	4619      	mov	r1, r3
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7fe fbf6 	bl	800d316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	6838      	ldr	r0, [r7, #0]
 800eb2e:	f000 fea5 	bl	800f87c <prvAddCurrentTaskToDelayedList>
}
 800eb32:	bf00      	nop
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	2000692c 	.word	0x2000692c

0800eb40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10b      	bne.n	800eb6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	617b      	str	r3, [r7, #20]
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop
 800eb68:	e7fd      	b.n	800eb66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb6a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb94 <vTaskPlaceOnEventListRestricted+0x54>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3318      	adds	r3, #24
 800eb70:	4619      	mov	r1, r3
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f7fe fbab 	bl	800d2ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d002      	beq.n	800eb84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800eb7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eb84:	6879      	ldr	r1, [r7, #4]
 800eb86:	68b8      	ldr	r0, [r7, #8]
 800eb88:	f000 fe78 	bl	800f87c <prvAddCurrentTaskToDelayedList>
	}
 800eb8c:	bf00      	nop
 800eb8e:	3718      	adds	r7, #24
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	2000692c 	.word	0x2000692c

0800eb98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10b      	bne.n	800ebc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb2:	f383 8811 	msr	BASEPRI, r3
 800ebb6:	f3bf 8f6f 	isb	sy
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	60fb      	str	r3, [r7, #12]
}
 800ebc0:	bf00      	nop
 800ebc2:	bf00      	nop
 800ebc4:	e7fd      	b.n	800ebc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	3318      	adds	r3, #24
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fe fbdc 	bl	800d388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec48 <xTaskRemoveFromEventList+0xb0>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d11d      	bne.n	800ec14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	3304      	adds	r3, #4
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fe fbd3 	bl	800d388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebe6:	4b19      	ldr	r3, [pc, #100]	@ (800ec4c <xTaskRemoveFromEventList+0xb4>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d903      	bls.n	800ebf6 <xTaskRemoveFromEventList+0x5e>
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf2:	4a16      	ldr	r2, [pc, #88]	@ (800ec4c <xTaskRemoveFromEventList+0xb4>)
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	4413      	add	r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4a13      	ldr	r2, [pc, #76]	@ (800ec50 <xTaskRemoveFromEventList+0xb8>)
 800ec04:	441a      	add	r2, r3
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	3304      	adds	r3, #4
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f7fe fb5e 	bl	800d2ce <vListInsertEnd>
 800ec12:	e005      	b.n	800ec20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	3318      	adds	r3, #24
 800ec18:	4619      	mov	r1, r3
 800ec1a:	480e      	ldr	r0, [pc, #56]	@ (800ec54 <xTaskRemoveFromEventList+0xbc>)
 800ec1c:	f7fe fb57 	bl	800d2ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec24:	4b0c      	ldr	r3, [pc, #48]	@ (800ec58 <xTaskRemoveFromEventList+0xc0>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d905      	bls.n	800ec3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec32:	4b0a      	ldr	r3, [pc, #40]	@ (800ec5c <xTaskRemoveFromEventList+0xc4>)
 800ec34:	2201      	movs	r2, #1
 800ec36:	601a      	str	r2, [r3, #0]
 800ec38:	e001      	b.n	800ec3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec3e:	697b      	ldr	r3, [r7, #20]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	20006e28 	.word	0x20006e28
 800ec4c:	20006e08 	.word	0x20006e08
 800ec50:	20006930 	.word	0x20006930
 800ec54:	20006dc0 	.word	0x20006dc0
 800ec58:	2000692c 	.word	0x2000692c
 800ec5c:	20006e14 	.word	0x20006e14

0800ec60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec68:	4b06      	ldr	r3, [pc, #24]	@ (800ec84 <vTaskInternalSetTimeOutState+0x24>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec70:	4b05      	ldr	r3, [pc, #20]	@ (800ec88 <vTaskInternalSetTimeOutState+0x28>)
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	605a      	str	r2, [r3, #4]
}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr
 800ec84:	20006e18 	.word	0x20006e18
 800ec88:	20006e04 	.word	0x20006e04

0800ec8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b088      	sub	sp, #32
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10b      	bne.n	800ecb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ec9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	613b      	str	r3, [r7, #16]
}
 800ecae:	bf00      	nop
 800ecb0:	bf00      	nop
 800ecb2:	e7fd      	b.n	800ecb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10b      	bne.n	800ecd2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	60fb      	str	r3, [r7, #12]
}
 800eccc:	bf00      	nop
 800ecce:	bf00      	nop
 800ecd0:	e7fd      	b.n	800ecce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ecd2:	f001 fab1 	bl	8010238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ecd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ed4c <xTaskCheckForTimeOut+0xc0>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	69ba      	ldr	r2, [r7, #24]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecee:	d102      	bne.n	800ecf6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	61fb      	str	r3, [r7, #28]
 800ecf4:	e023      	b.n	800ed3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b15      	ldr	r3, [pc, #84]	@ (800ed50 <xTaskCheckForTimeOut+0xc4>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d007      	beq.n	800ed12 <xTaskCheckForTimeOut+0x86>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	69ba      	ldr	r2, [r7, #24]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d302      	bcc.n	800ed12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	61fb      	str	r3, [r7, #28]
 800ed10:	e015      	b.n	800ed3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d20b      	bcs.n	800ed34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	1ad2      	subs	r2, r2, r3
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7ff ff99 	bl	800ec60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	61fb      	str	r3, [r7, #28]
 800ed32:	e004      	b.n	800ed3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	2200      	movs	r2, #0
 800ed38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed3e:	f001 faad 	bl	801029c <vPortExitCritical>

	return xReturn;
 800ed42:	69fb      	ldr	r3, [r7, #28]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3720      	adds	r7, #32
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	20006e04 	.word	0x20006e04
 800ed50:	20006e18 	.word	0x20006e18

0800ed54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed54:	b480      	push	{r7}
 800ed56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed58:	4b03      	ldr	r3, [pc, #12]	@ (800ed68 <vTaskMissedYield+0x14>)
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	601a      	str	r2, [r3, #0]
}
 800ed5e:	bf00      	nop
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	20006e14 	.word	0x20006e14

0800ed6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed74:	f000 f854 	bl	800ee20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed78:	4b07      	ldr	r3, [pc, #28]	@ (800ed98 <prvIdleTask+0x2c>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d907      	bls.n	800ed90 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ed80:	4b06      	ldr	r3, [pc, #24]	@ (800ed9c <prvIdleTask+0x30>)
 800ed82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ed90:	f7f1 fdfc 	bl	800098c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ed94:	e7ee      	b.n	800ed74 <prvIdleTask+0x8>
 800ed96:	bf00      	nop
 800ed98:	20006930 	.word	0x20006930
 800ed9c:	e000ed04 	.word	0xe000ed04

0800eda0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eda6:	2300      	movs	r3, #0
 800eda8:	607b      	str	r3, [r7, #4]
 800edaa:	e00c      	b.n	800edc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	4613      	mov	r3, r2
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4a12      	ldr	r2, [pc, #72]	@ (800ee00 <prvInitialiseTaskLists+0x60>)
 800edb8:	4413      	add	r3, r2
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fe fa5a 	bl	800d274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3301      	adds	r3, #1
 800edc4:	607b      	str	r3, [r7, #4]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b37      	cmp	r3, #55	@ 0x37
 800edca:	d9ef      	bls.n	800edac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800edcc:	480d      	ldr	r0, [pc, #52]	@ (800ee04 <prvInitialiseTaskLists+0x64>)
 800edce:	f7fe fa51 	bl	800d274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800edd2:	480d      	ldr	r0, [pc, #52]	@ (800ee08 <prvInitialiseTaskLists+0x68>)
 800edd4:	f7fe fa4e 	bl	800d274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800edd8:	480c      	ldr	r0, [pc, #48]	@ (800ee0c <prvInitialiseTaskLists+0x6c>)
 800edda:	f7fe fa4b 	bl	800d274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800edde:	480c      	ldr	r0, [pc, #48]	@ (800ee10 <prvInitialiseTaskLists+0x70>)
 800ede0:	f7fe fa48 	bl	800d274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ede4:	480b      	ldr	r0, [pc, #44]	@ (800ee14 <prvInitialiseTaskLists+0x74>)
 800ede6:	f7fe fa45 	bl	800d274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800edea:	4b0b      	ldr	r3, [pc, #44]	@ (800ee18 <prvInitialiseTaskLists+0x78>)
 800edec:	4a05      	ldr	r2, [pc, #20]	@ (800ee04 <prvInitialiseTaskLists+0x64>)
 800edee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800edf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ee1c <prvInitialiseTaskLists+0x7c>)
 800edf2:	4a05      	ldr	r2, [pc, #20]	@ (800ee08 <prvInitialiseTaskLists+0x68>)
 800edf4:	601a      	str	r2, [r3, #0]
}
 800edf6:	bf00      	nop
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20006930 	.word	0x20006930
 800ee04:	20006d90 	.word	0x20006d90
 800ee08:	20006da4 	.word	0x20006da4
 800ee0c:	20006dc0 	.word	0x20006dc0
 800ee10:	20006dd4 	.word	0x20006dd4
 800ee14:	20006dec 	.word	0x20006dec
 800ee18:	20006db8 	.word	0x20006db8
 800ee1c:	20006dbc 	.word	0x20006dbc

0800ee20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee26:	e019      	b.n	800ee5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ee28:	f001 fa06 	bl	8010238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee2c:	4b10      	ldr	r3, [pc, #64]	@ (800ee70 <prvCheckTasksWaitingTermination+0x50>)
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	3304      	adds	r3, #4
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fe faa5 	bl	800d388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee74 <prvCheckTasksWaitingTermination+0x54>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	4a0b      	ldr	r2, [pc, #44]	@ (800ee74 <prvCheckTasksWaitingTermination+0x54>)
 800ee46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee48:	4b0b      	ldr	r3, [pc, #44]	@ (800ee78 <prvCheckTasksWaitingTermination+0x58>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ee78 <prvCheckTasksWaitingTermination+0x58>)
 800ee50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee52:	f001 fa23 	bl	801029c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f8e4 	bl	800f024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee5c:	4b06      	ldr	r3, [pc, #24]	@ (800ee78 <prvCheckTasksWaitingTermination+0x58>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1e1      	bne.n	800ee28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	20006dd4 	.word	0x20006dd4
 800ee74:	20006e00 	.word	0x20006e00
 800ee78:	20006de8 	.word	0x20006de8

0800ee7c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d102      	bne.n	800ee96 <vTaskGetInfo+0x1a>
 800ee90:	4b2c      	ldr	r3, [pc, #176]	@ (800ef44 <vTaskGetInfo+0xc8>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	e000      	b.n	800ee98 <vTaskGetInfo+0x1c>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	697a      	ldr	r2, [r7, #20]
 800ee9e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eed2:	78fb      	ldrb	r3, [r7, #3]
 800eed4:	2b05      	cmp	r3, #5
 800eed6:	d01a      	beq.n	800ef0e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800eed8:	4b1a      	ldr	r3, [pc, #104]	@ (800ef44 <vTaskGetInfo+0xc8>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	697a      	ldr	r2, [r7, #20]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d103      	bne.n	800eeea <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2200      	movs	r2, #0
 800eee6:	731a      	strb	r2, [r3, #12]
 800eee8:	e018      	b.n	800ef1c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	78fa      	ldrb	r2, [r7, #3]
 800eeee:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eef0:	78fb      	ldrb	r3, [r7, #3]
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d112      	bne.n	800ef1c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800eef6:	f7ff fb73 	bl	800e5e0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d002      	beq.n	800ef08 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	2202      	movs	r2, #2
 800ef06:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800ef08:	f7ff fb78 	bl	800e5fc <xTaskResumeAll>
 800ef0c:	e006      	b.n	800ef1c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800ef0e:	6978      	ldr	r0, [r7, #20]
 800ef10:	f7ff fa12 	bl	800e338 <eTaskGetState>
 800ef14:	4603      	mov	r3, r0
 800ef16:	461a      	mov	r2, r3
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d009      	beq.n	800ef36 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 f860 	bl	800efec <prvTaskCheckFreeStackSpace>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	461a      	mov	r2, r3
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800ef34:	e002      	b.n	800ef3c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	841a      	strh	r2, [r3, #32]
	}
 800ef3c:	bf00      	nop
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	2000692c 	.word	0x2000692c

0800ef48 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	@ 0x28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	4613      	mov	r3, r2
 800ef54:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d03f      	beq.n	800efe2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	623b      	str	r3, [r7, #32]
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	605a      	str	r2, [r3, #4]
 800ef70:	6a3b      	ldr	r3, [r7, #32]
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	3308      	adds	r3, #8
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d104      	bne.n	800ef86 <prvListTasksWithinSingleList+0x3e>
 800ef7c:	6a3b      	ldr	r3, [r7, #32]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	685a      	ldr	r2, [r3, #4]
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	605a      	str	r2, [r3, #4]
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	61bb      	str	r3, [r7, #24]
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	685a      	ldr	r2, [r3, #4]
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	605a      	str	r2, [r3, #4]
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	3308      	adds	r3, #8
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d104      	bne.n	800efb2 <prvListTasksWithinSingleList+0x6a>
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	605a      	str	r2, [r3, #4]
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800efba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efbc:	4613      	mov	r3, r2
 800efbe:	00db      	lsls	r3, r3, #3
 800efc0:	4413      	add	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	461a      	mov	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	1899      	adds	r1, r3, r2
 800efca:	79fb      	ldrb	r3, [r7, #7]
 800efcc:	2201      	movs	r2, #1
 800efce:	6978      	ldr	r0, [r7, #20]
 800efd0:	f7ff ff54 	bl	800ee7c <vTaskGetInfo>
				uxTask++;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd6:	3301      	adds	r3, #1
 800efd8:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d1d5      	bne.n	800ef8e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800efe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3728      	adds	r7, #40	@ 0x28
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800eff4:	2300      	movs	r3, #0
 800eff6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eff8:	e005      	b.n	800f006 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3301      	adds	r3, #1
 800effe:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3301      	adds	r3, #1
 800f004:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2ba5      	cmp	r3, #165	@ 0xa5
 800f00c:	d0f5      	beq.n	800effa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	089b      	lsrs	r3, r3, #2
 800f012:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	b29b      	uxth	r3, r3
	}
 800f018:	4618      	mov	r0, r3
 800f01a:	3714      	adds	r7, #20
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3368      	adds	r3, #104	@ 0x68
 800f030:	4618      	mov	r0, r3
 800f032:	f002 fa0f 	bl	8011454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d108      	bne.n	800f052 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f044:	4618      	mov	r0, r3
 800f046:	f001 fae7 	bl	8010618 <vPortFree>
				vPortFree( pxTCB );
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f001 fae4 	bl	8010618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f050:	e019      	b.n	800f086 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d103      	bne.n	800f064 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f001 fadb 	bl	8010618 <vPortFree>
	}
 800f062:	e010      	b.n	800f086 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d00b      	beq.n	800f086 <prvDeleteTCB+0x62>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	60fb      	str	r3, [r7, #12]
}
 800f080:	bf00      	nop
 800f082:	bf00      	nop
 800f084:	e7fd      	b.n	800f082 <prvDeleteTCB+0x5e>
	}
 800f086:	bf00      	nop
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f096:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c8 <prvResetNextTaskUnblockTime+0x38>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d104      	bne.n	800f0aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0cc <prvResetNextTaskUnblockTime+0x3c>)
 800f0a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f0a8:	e008      	b.n	800f0bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0aa:	4b07      	ldr	r3, [pc, #28]	@ (800f0c8 <prvResetNextTaskUnblockTime+0x38>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	4a04      	ldr	r2, [pc, #16]	@ (800f0cc <prvResetNextTaskUnblockTime+0x3c>)
 800f0ba:	6013      	str	r3, [r2, #0]
}
 800f0bc:	bf00      	nop
 800f0be:	370c      	adds	r7, #12
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr
 800f0c8:	20006db8 	.word	0x20006db8
 800f0cc:	20006e20 	.word	0x20006e20

0800f0d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f104 <xTaskGetSchedulerState+0x34>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d102      	bne.n	800f0e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	607b      	str	r3, [r7, #4]
 800f0e2:	e008      	b.n	800f0f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0e4:	4b08      	ldr	r3, [pc, #32]	@ (800f108 <xTaskGetSchedulerState+0x38>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d102      	bne.n	800f0f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	607b      	str	r3, [r7, #4]
 800f0f0:	e001      	b.n	800f0f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f0f6:	687b      	ldr	r3, [r7, #4]
	}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	20006e0c 	.word	0x20006e0c
 800f108:	20006e28 	.word	0x20006e28

0800f10c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b086      	sub	sp, #24
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f118:	2300      	movs	r3, #0
 800f11a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d058      	beq.n	800f1d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f122:	4b2f      	ldr	r3, [pc, #188]	@ (800f1e0 <xTaskPriorityDisinherit+0xd4>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	693a      	ldr	r2, [r7, #16]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d00b      	beq.n	800f144 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	60fb      	str	r3, [r7, #12]
}
 800f13e:	bf00      	nop
 800f140:	bf00      	nop
 800f142:	e7fd      	b.n	800f140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10b      	bne.n	800f164 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	60bb      	str	r3, [r7, #8]
}
 800f15e:	bf00      	nop
 800f160:	bf00      	nop
 800f162:	e7fd      	b.n	800f160 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f168:	1e5a      	subs	r2, r3, #1
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f176:	429a      	cmp	r2, r3
 800f178:	d02c      	beq.n	800f1d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d128      	bne.n	800f1d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	3304      	adds	r3, #4
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe f8fe 	bl	800d388 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f198:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800f1e4 <xTaskPriorityDisinherit+0xd8>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d903      	bls.n	800f1b4 <xTaskPriorityDisinherit+0xa8>
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b0:	4a0c      	ldr	r2, [pc, #48]	@ (800f1e4 <xTaskPriorityDisinherit+0xd8>)
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	4413      	add	r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4a09      	ldr	r2, [pc, #36]	@ (800f1e8 <xTaskPriorityDisinherit+0xdc>)
 800f1c2:	441a      	add	r2, r3
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	f7fe f87f 	bl	800d2ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f1d4:	697b      	ldr	r3, [r7, #20]
	}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3718      	adds	r7, #24
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	2000692c 	.word	0x2000692c
 800f1e4:	20006e08 	.word	0x20006e08
 800f1e8:	20006930 	.word	0x20006930

0800f1ec <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f1f6:	6839      	ldr	r1, [r7, #0]
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f002 f9f4 	bl	80115e6 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7f0 fff0 	bl	80001e4 <strlen>
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	e007      	b.n	800f218 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	4413      	add	r3, r2
 800f20e:	2220      	movs	r2, #32
 800f210:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3301      	adds	r3, #1
 800f216:	60fb      	str	r3, [r7, #12]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b1e      	cmp	r3, #30
 800f21c:	d9f4      	bls.n	800f208 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4413      	add	r3, r2
 800f224:	2200      	movs	r2, #0
 800f226:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	4413      	add	r3, r2
	}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
	...

0800f238 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f238:	b590      	push	{r4, r7, lr}
 800f23a:	b089      	sub	sp, #36	@ 0x24
 800f23c:	af02      	add	r7, sp, #8
 800f23e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f246:	4b45      	ldr	r3, [pc, #276]	@ (800f35c <vTaskList+0x124>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800f24c:	4b43      	ldr	r3, [pc, #268]	@ (800f35c <vTaskList+0x124>)
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	4613      	mov	r3, r2
 800f252:	00db      	lsls	r3, r3, #3
 800f254:	4413      	add	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4618      	mov	r0, r3
 800f25a:	f001 f90f 	bl	801047c <pvPortMalloc>
 800f25e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d076      	beq.n	800f354 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f266:	2200      	movs	r2, #0
 800f268:	68f9      	ldr	r1, [r7, #12]
 800f26a:	68b8      	ldr	r0, [r7, #8]
 800f26c:	f7ff fa74 	bl	800e758 <uxTaskGetSystemState>
 800f270:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f272:	2300      	movs	r3, #0
 800f274:	617b      	str	r3, [r7, #20]
 800f276:	e066      	b.n	800f346 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	4613      	mov	r3, r2
 800f27c:	00db      	lsls	r3, r3, #3
 800f27e:	4413      	add	r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	461a      	mov	r2, r3
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	4413      	add	r3, r2
 800f288:	7b1b      	ldrb	r3, [r3, #12]
 800f28a:	2b04      	cmp	r3, #4
 800f28c:	d81b      	bhi.n	800f2c6 <vTaskList+0x8e>
 800f28e:	a201      	add	r2, pc, #4	@ (adr r2, 800f294 <vTaskList+0x5c>)
 800f290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f294:	0800f2a9 	.word	0x0800f2a9
 800f298:	0800f2af 	.word	0x0800f2af
 800f29c:	0800f2b5 	.word	0x0800f2b5
 800f2a0:	0800f2bb 	.word	0x0800f2bb
 800f2a4:	0800f2c1 	.word	0x0800f2c1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800f2a8:	2358      	movs	r3, #88	@ 0x58
 800f2aa:	74fb      	strb	r3, [r7, #19]
										break;
 800f2ac:	e00e      	b.n	800f2cc <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800f2ae:	2352      	movs	r3, #82	@ 0x52
 800f2b0:	74fb      	strb	r3, [r7, #19]
										break;
 800f2b2:	e00b      	b.n	800f2cc <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f2b4:	2342      	movs	r3, #66	@ 0x42
 800f2b6:	74fb      	strb	r3, [r7, #19]
										break;
 800f2b8:	e008      	b.n	800f2cc <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f2ba:	2353      	movs	r3, #83	@ 0x53
 800f2bc:	74fb      	strb	r3, [r7, #19]
										break;
 800f2be:	e005      	b.n	800f2cc <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f2c0:	2344      	movs	r3, #68	@ 0x44
 800f2c2:	74fb      	strb	r3, [r7, #19]
										break;
 800f2c4:	e002      	b.n	800f2cc <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	74fb      	strb	r3, [r7, #19]
										break;
 800f2ca:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f2cc:	697a      	ldr	r2, [r7, #20]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	00db      	lsls	r3, r3, #3
 800f2d2:	4413      	add	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	4413      	add	r3, r2
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	4619      	mov	r1, r3
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff ff83 	bl	800f1ec <prvWriteNameToBuffer>
 800f2e6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f2e8:	7cf9      	ldrb	r1, [r7, #19]
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	00db      	lsls	r3, r3, #3
 800f2f0:	4413      	add	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	6918      	ldr	r0, [r3, #16]
 800f2fc:	697a      	ldr	r2, [r7, #20]
 800f2fe:	4613      	mov	r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	4413      	add	r3, r2
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	461a      	mov	r2, r3
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	4413      	add	r3, r2
 800f30c:	8c1b      	ldrh	r3, [r3, #32]
 800f30e:	461c      	mov	r4, r3
 800f310:	697a      	ldr	r2, [r7, #20]
 800f312:	4613      	mov	r3, r2
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	4413      	add	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	461a      	mov	r2, r3
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	4413      	add	r3, r2
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	9301      	str	r3, [sp, #4]
 800f324:	9400      	str	r4, [sp, #0]
 800f326:	4603      	mov	r3, r0
 800f328:	460a      	mov	r2, r1
 800f32a:	490d      	ldr	r1, [pc, #52]	@ (800f360 <vTaskList+0x128>)
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f001 ff81 	bl	8011234 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7f0 ff56 	bl	80001e4 <strlen>
 800f338:	4602      	mov	r2, r0
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4413      	add	r3, r2
 800f33e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	3301      	adds	r3, #1
 800f344:	617b      	str	r3, [r7, #20]
 800f346:	697a      	ldr	r2, [r7, #20]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d394      	bcc.n	800f278 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800f34e:	68b8      	ldr	r0, [r7, #8]
 800f350:	f001 f962 	bl	8010618 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f354:	bf00      	nop
 800f356:	371c      	adds	r7, #28
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd90      	pop	{r4, r7, pc}
 800f35c:	20006e00 	.word	0x20006e00
 800f360:	080120ac 	.word	0x080120ac

0800f364 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f364:	b580      	push	{r7, lr}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f372:	4b3a      	ldr	r3, [pc, #232]	@ (800f45c <vTaskGetRunTimeStats+0xf8>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800f378:	4b38      	ldr	r3, [pc, #224]	@ (800f45c <vTaskGetRunTimeStats+0xf8>)
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	4613      	mov	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	4413      	add	r3, r2
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	4618      	mov	r0, r3
 800f386:	f001 f879 	bl	801047c <pvPortMalloc>
 800f38a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d05f      	beq.n	800f452 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f392:	f107 030c 	add.w	r3, r7, #12
 800f396:	461a      	mov	r2, r3
 800f398:	69b9      	ldr	r1, [r7, #24]
 800f39a:	6978      	ldr	r0, [r7, #20]
 800f39c:	f7ff f9dc 	bl	800e758 <uxTaskGetSystemState>
 800f3a0:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	4a2e      	ldr	r2, [pc, #184]	@ (800f460 <vTaskGetRunTimeStats+0xfc>)
 800f3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f3aa:	095b      	lsrs	r3, r3, #5
 800f3ac:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d04b      	beq.n	800f44c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	61fb      	str	r3, [r7, #28]
 800f3b8:	e044      	b.n	800f444 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f3ba:	69fa      	ldr	r2, [r7, #28]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	4413      	add	r3, r2
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	699a      	ldr	r2, [r3, #24]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f3d4:	69fa      	ldr	r2, [r7, #28]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	00db      	lsls	r3, r3, #3
 800f3da:	4413      	add	r3, r2
 800f3dc:	009b      	lsls	r3, r3, #2
 800f3de:	461a      	mov	r2, r3
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff feff 	bl	800f1ec <prvWriteNameToBuffer>
 800f3ee:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00e      	beq.n	800f414 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	00db      	lsls	r3, r3, #3
 800f3fc:	4413      	add	r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	461a      	mov	r2, r3
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	4413      	add	r3, r2
 800f406:	699a      	ldr	r2, [r3, #24]
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	4916      	ldr	r1, [pc, #88]	@ (800f464 <vTaskGetRunTimeStats+0x100>)
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f001 ff11 	bl	8011234 <siprintf>
 800f412:	e00d      	b.n	800f430 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800f414:	69fa      	ldr	r2, [r7, #28]
 800f416:	4613      	mov	r3, r2
 800f418:	00db      	lsls	r3, r3, #3
 800f41a:	4413      	add	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	461a      	mov	r2, r3
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	4413      	add	r3, r2
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	461a      	mov	r2, r3
 800f428:	490f      	ldr	r1, [pc, #60]	@ (800f468 <vTaskGetRunTimeStats+0x104>)
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f001 ff02 	bl	8011234 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7f0 fed7 	bl	80001e4 <strlen>
 800f436:	4602      	mov	r2, r0
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4413      	add	r3, r2
 800f43c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	3301      	adds	r3, #1
 800f442:	61fb      	str	r3, [r7, #28]
 800f444:	69fa      	ldr	r2, [r7, #28]
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d3b6      	bcc.n	800f3ba <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800f44c:	6978      	ldr	r0, [r7, #20]
 800f44e:	f001 f8e3 	bl	8010618 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f452:	bf00      	nop
 800f454:	3720      	adds	r7, #32
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20006e00 	.word	0x20006e00
 800f460:	51eb851f 	.word	0x51eb851f
 800f464:	080120bc 	.word	0x080120bc
 800f468:	080120c8 	.word	0x080120c8

0800f46c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
 800f478:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f47a:	f000 fedd 	bl	8010238 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f47e:	4b29      	ldr	r3, [pc, #164]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d01c      	beq.n	800f4c6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f48c:	4b25      	ldr	r3, [pc, #148]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	43d2      	mvns	r2, r2
 800f498:	400a      	ands	r2, r1
 800f49a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f49e:	4b21      	ldr	r3, [pc, #132]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00b      	beq.n	800f4c6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	6838      	ldr	r0, [r7, #0]
 800f4b2:	f000 f9e3 	bl	800f87c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f4b6:	4b1c      	ldr	r3, [pc, #112]	@ (800f528 <xTaskNotifyWait+0xbc>)
 800f4b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	f3bf 8f4f 	dsb	sy
 800f4c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f4c6:	f000 fee9 	bl	801029c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f4ca:	f000 feb5 	bl	8010238 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d005      	beq.n	800f4e0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f4d4:	4b13      	ldr	r3, [pc, #76]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f4e0:	4b10      	ldr	r3, [pc, #64]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d002      	beq.n	800f4f4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	617b      	str	r3, [r7, #20]
 800f4f2:	e00a      	b.n	800f50a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	43d2      	mvns	r2, r2
 800f500:	400a      	ands	r2, r1
 800f502:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 800f506:	2301      	movs	r3, #1
 800f508:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f50a:	4b06      	ldr	r3, [pc, #24]	@ (800f524 <xTaskNotifyWait+0xb8>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 800f514:	f000 fec2 	bl	801029c <vPortExitCritical>

		return xReturn;
 800f518:	697b      	ldr	r3, [r7, #20]
	}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3718      	adds	r7, #24
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	2000692c 	.word	0x2000692c
 800f528:	e000ed04 	.word	0xe000ed04

0800f52c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08a      	sub	sp, #40	@ 0x28
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	603b      	str	r3, [r7, #0]
 800f538:	4613      	mov	r3, r2
 800f53a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f53c:	2301      	movs	r3, #1
 800f53e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d10b      	bne.n	800f55e <xTaskGenericNotify+0x32>
	__asm volatile
 800f546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f54a:	f383 8811 	msr	BASEPRI, r3
 800f54e:	f3bf 8f6f 	isb	sy
 800f552:	f3bf 8f4f 	dsb	sy
 800f556:	61bb      	str	r3, [r7, #24]
}
 800f558:	bf00      	nop
 800f55a:	bf00      	nop
 800f55c:	e7fd      	b.n	800f55a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f562:	f000 fe69 	bl	8010238 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f56c:	6a3b      	ldr	r3, [r7, #32]
 800f56e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800f57c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f57e:	6a3b      	ldr	r3, [r7, #32]
 800f580:	2202      	movs	r2, #2
 800f582:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800f586:	79fb      	ldrb	r3, [r7, #7]
 800f588:	2b04      	cmp	r3, #4
 800f58a:	d82e      	bhi.n	800f5ea <xTaskGenericNotify+0xbe>
 800f58c:	a201      	add	r2, pc, #4	@ (adr r2, 800f594 <xTaskGenericNotify+0x68>)
 800f58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f592:	bf00      	nop
 800f594:	0800f60f 	.word	0x0800f60f
 800f598:	0800f5a9 	.word	0x0800f5a9
 800f59c:	0800f5bb 	.word	0x0800f5bb
 800f5a0:	0800f5cb 	.word	0x0800f5cb
 800f5a4:	0800f5d5 	.word	0x0800f5d5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f5a8:	6a3b      	ldr	r3, [r7, #32]
 800f5aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	431a      	orrs	r2, r3
 800f5b2:	6a3b      	ldr	r3, [r7, #32]
 800f5b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800f5b8:	e02c      	b.n	800f614 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f5c0:	1c5a      	adds	r2, r3, #1
 800f5c2:	6a3b      	ldr	r3, [r7, #32]
 800f5c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800f5c8:	e024      	b.n	800f614 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f5ca:	6a3b      	ldr	r3, [r7, #32]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800f5d2:	e01f      	b.n	800f614 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f5d4:	7ffb      	ldrb	r3, [r7, #31]
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d004      	beq.n	800f5e4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f5e2:	e017      	b.n	800f614 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f5e8:	e014      	b.n	800f614 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f5ea:	6a3b      	ldr	r3, [r7, #32]
 800f5ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5f4:	d00d      	beq.n	800f612 <xTaskGenericNotify+0xe6>
	__asm volatile
 800f5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	617b      	str	r3, [r7, #20]
}
 800f608:	bf00      	nop
 800f60a:	bf00      	nop
 800f60c:	e7fd      	b.n	800f60a <xTaskGenericNotify+0xde>
					break;
 800f60e:	bf00      	nop
 800f610:	e000      	b.n	800f614 <xTaskGenericNotify+0xe8>

					break;
 800f612:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f614:	7ffb      	ldrb	r3, [r7, #31]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d13b      	bne.n	800f692 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f61a:	6a3b      	ldr	r3, [r7, #32]
 800f61c:	3304      	adds	r3, #4
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fd feb2 	bl	800d388 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f628:	4b1d      	ldr	r3, [pc, #116]	@ (800f6a0 <xTaskGenericNotify+0x174>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d903      	bls.n	800f638 <xTaskGenericNotify+0x10c>
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f634:	4a1a      	ldr	r2, [pc, #104]	@ (800f6a0 <xTaskGenericNotify+0x174>)
 800f636:	6013      	str	r3, [r2, #0]
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f63c:	4613      	mov	r3, r2
 800f63e:	009b      	lsls	r3, r3, #2
 800f640:	4413      	add	r3, r2
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	4a17      	ldr	r2, [pc, #92]	@ (800f6a4 <xTaskGenericNotify+0x178>)
 800f646:	441a      	add	r2, r3
 800f648:	6a3b      	ldr	r3, [r7, #32]
 800f64a:	3304      	adds	r3, #4
 800f64c:	4619      	mov	r1, r3
 800f64e:	4610      	mov	r0, r2
 800f650:	f7fd fe3d 	bl	800d2ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f654:	6a3b      	ldr	r3, [r7, #32]
 800f656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00b      	beq.n	800f674 <xTaskGenericNotify+0x148>
	__asm volatile
 800f65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f660:	f383 8811 	msr	BASEPRI, r3
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	613b      	str	r3, [r7, #16]
}
 800f66e:	bf00      	nop
 800f670:	bf00      	nop
 800f672:	e7fd      	b.n	800f670 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f674:	6a3b      	ldr	r3, [r7, #32]
 800f676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f678:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a8 <xTaskGenericNotify+0x17c>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67e:	429a      	cmp	r2, r3
 800f680:	d907      	bls.n	800f692 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f682:	4b0a      	ldr	r3, [pc, #40]	@ (800f6ac <xTaskGenericNotify+0x180>)
 800f684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	f3bf 8f4f 	dsb	sy
 800f68e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f692:	f000 fe03 	bl	801029c <vPortExitCritical>

		return xReturn;
 800f696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f698:	4618      	mov	r0, r3
 800f69a:	3728      	adds	r7, #40	@ 0x28
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	20006e08 	.word	0x20006e08
 800f6a4:	20006930 	.word	0x20006930
 800f6a8:	2000692c 	.word	0x2000692c
 800f6ac:	e000ed04 	.word	0xe000ed04

0800f6b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b08e      	sub	sp, #56	@ 0x38
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d10b      	bne.n	800f6e2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f6dc:	bf00      	nop
 800f6de:	bf00      	nop
 800f6e0:	e7fd      	b.n	800f6de <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6e2:	f000 fe89 	bl	80103f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f6ea:	f3ef 8211 	mrs	r2, BASEPRI
 800f6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	623a      	str	r2, [r7, #32]
 800f700:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f702:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f704:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d004      	beq.n	800f716 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f718:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800f71c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f722:	2202      	movs	r2, #2
 800f724:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	2b04      	cmp	r3, #4
 800f72c:	d82e      	bhi.n	800f78c <xTaskGenericNotifyFromISR+0xdc>
 800f72e:	a201      	add	r2, pc, #4	@ (adr r2, 800f734 <xTaskGenericNotifyFromISR+0x84>)
 800f730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f734:	0800f7b1 	.word	0x0800f7b1
 800f738:	0800f749 	.word	0x0800f749
 800f73c:	0800f75b 	.word	0x0800f75b
 800f740:	0800f76b 	.word	0x0800f76b
 800f744:	0800f775 	.word	0x0800f775
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	431a      	orrs	r2, r3
 800f752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f754:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800f758:	e02d      	b.n	800f7b6 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f75c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f760:	1c5a      	adds	r2, r3, #1
 800f762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f764:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800f768:	e025      	b.n	800f7b6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800f772:	e020      	b.n	800f7b6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f774:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f778:	2b02      	cmp	r3, #2
 800f77a:	d004      	beq.n	800f786 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f784:	e017      	b.n	800f7b6 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f786:	2300      	movs	r3, #0
 800f788:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f78a:	e014      	b.n	800f7b6 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f796:	d00d      	beq.n	800f7b4 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f79c:	f383 8811 	msr	BASEPRI, r3
 800f7a0:	f3bf 8f6f 	isb	sy
 800f7a4:	f3bf 8f4f 	dsb	sy
 800f7a8:	61bb      	str	r3, [r7, #24]
}
 800f7aa:	bf00      	nop
 800f7ac:	bf00      	nop
 800f7ae:	e7fd      	b.n	800f7ac <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f7b0:	bf00      	nop
 800f7b2:	e000      	b.n	800f7b6 <xTaskGenericNotifyFromISR+0x106>
					break;
 800f7b4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f7b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d147      	bne.n	800f84e <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00b      	beq.n	800f7de <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	617b      	str	r3, [r7, #20]
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	e7fd      	b.n	800f7da <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7de:	4b21      	ldr	r3, [pc, #132]	@ (800f864 <xTaskGenericNotifyFromISR+0x1b4>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d11d      	bne.n	800f822 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fd fdcc 	bl	800d388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7f4:	4b1c      	ldr	r3, [pc, #112]	@ (800f868 <xTaskGenericNotifyFromISR+0x1b8>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d903      	bls.n	800f804 <xTaskGenericNotifyFromISR+0x154>
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f800:	4a19      	ldr	r2, [pc, #100]	@ (800f868 <xTaskGenericNotifyFromISR+0x1b8>)
 800f802:	6013      	str	r3, [r2, #0]
 800f804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f808:	4613      	mov	r3, r2
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	4413      	add	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4a16      	ldr	r2, [pc, #88]	@ (800f86c <xTaskGenericNotifyFromISR+0x1bc>)
 800f812:	441a      	add	r2, r3
 800f814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f816:	3304      	adds	r3, #4
 800f818:	4619      	mov	r1, r3
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7fd fd57 	bl	800d2ce <vListInsertEnd>
 800f820:	e005      	b.n	800f82e <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f824:	3318      	adds	r3, #24
 800f826:	4619      	mov	r1, r3
 800f828:	4811      	ldr	r0, [pc, #68]	@ (800f870 <xTaskGenericNotifyFromISR+0x1c0>)
 800f82a:	f7fd fd50 	bl	800d2ce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f832:	4b10      	ldr	r3, [pc, #64]	@ (800f874 <xTaskGenericNotifyFromISR+0x1c4>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f838:	429a      	cmp	r2, r3
 800f83a:	d908      	bls.n	800f84e <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f83c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f844:	2201      	movs	r2, #1
 800f846:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f848:	4b0b      	ldr	r3, [pc, #44]	@ (800f878 <xTaskGenericNotifyFromISR+0x1c8>)
 800f84a:	2201      	movs	r2, #1
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f850:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	f383 8811 	msr	BASEPRI, r3
}
 800f858:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3738      	adds	r7, #56	@ 0x38
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20006e28 	.word	0x20006e28
 800f868:	20006e08 	.word	0x20006e08
 800f86c:	20006930 	.word	0x20006930
 800f870:	20006dc0 	.word	0x20006dc0
 800f874:	2000692c 	.word	0x2000692c
 800f878:	20006e14 	.word	0x20006e14

0800f87c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f886:	4b21      	ldr	r3, [pc, #132]	@ (800f90c <prvAddCurrentTaskToDelayedList+0x90>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f88c:	4b20      	ldr	r3, [pc, #128]	@ (800f910 <prvAddCurrentTaskToDelayedList+0x94>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3304      	adds	r3, #4
 800f892:	4618      	mov	r0, r3
 800f894:	f7fd fd78 	bl	800d388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f89e:	d10a      	bne.n	800f8b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d007      	beq.n	800f8b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f910 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4819      	ldr	r0, [pc, #100]	@ (800f914 <prvAddCurrentTaskToDelayedList+0x98>)
 800f8b0:	f7fd fd0d 	bl	800d2ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f8b4:	e026      	b.n	800f904 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f8be:	4b14      	ldr	r3, [pc, #80]	@ (800f910 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d209      	bcs.n	800f8e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8ce:	4b12      	ldr	r3, [pc, #72]	@ (800f918 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f910 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	4619      	mov	r1, r3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f7fd fd1b 	bl	800d316 <vListInsert>
}
 800f8e0:	e010      	b.n	800f904 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f91c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f910 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	3304      	adds	r3, #4
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	4610      	mov	r0, r2
 800f8f0:	f7fd fd11 	bl	800d316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f920 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	68ba      	ldr	r2, [r7, #8]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d202      	bcs.n	800f904 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f8fe:	4a08      	ldr	r2, [pc, #32]	@ (800f920 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	6013      	str	r3, [r2, #0]
}
 800f904:	bf00      	nop
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	20006e04 	.word	0x20006e04
 800f910:	2000692c 	.word	0x2000692c
 800f914:	20006dec 	.word	0x20006dec
 800f918:	20006dbc 	.word	0x20006dbc
 800f91c:	20006db8 	.word	0x20006db8
 800f920:	20006e20 	.word	0x20006e20

0800f924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b08a      	sub	sp, #40	@ 0x28
 800f928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f92a:	2300      	movs	r3, #0
 800f92c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f92e:	f000 fb13 	bl	800ff58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f932:	4b1d      	ldr	r3, [pc, #116]	@ (800f9a8 <xTimerCreateTimerTask+0x84>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d021      	beq.n	800f97e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f93e:	2300      	movs	r3, #0
 800f940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f942:	1d3a      	adds	r2, r7, #4
 800f944:	f107 0108 	add.w	r1, r7, #8
 800f948:	f107 030c 	add.w	r3, r7, #12
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fd fc77 	bl	800d240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f952:	6879      	ldr	r1, [r7, #4]
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	9202      	str	r2, [sp, #8]
 800f95a:	9301      	str	r3, [sp, #4]
 800f95c:	2302      	movs	r3, #2
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	2300      	movs	r3, #0
 800f962:	460a      	mov	r2, r1
 800f964:	4911      	ldr	r1, [pc, #68]	@ (800f9ac <xTimerCreateTimerTask+0x88>)
 800f966:	4812      	ldr	r0, [pc, #72]	@ (800f9b0 <xTimerCreateTimerTask+0x8c>)
 800f968:	f7fe faf0 	bl	800df4c <xTaskCreateStatic>
 800f96c:	4603      	mov	r3, r0
 800f96e:	4a11      	ldr	r2, [pc, #68]	@ (800f9b4 <xTimerCreateTimerTask+0x90>)
 800f970:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f972:	4b10      	ldr	r3, [pc, #64]	@ (800f9b4 <xTimerCreateTimerTask+0x90>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d001      	beq.n	800f97e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f97a:	2301      	movs	r3, #1
 800f97c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10b      	bne.n	800f99c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f988:	f383 8811 	msr	BASEPRI, r3
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	613b      	str	r3, [r7, #16]
}
 800f996:	bf00      	nop
 800f998:	bf00      	nop
 800f99a:	e7fd      	b.n	800f998 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f99c:	697b      	ldr	r3, [r7, #20]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3718      	adds	r7, #24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	20006e64 	.word	0x20006e64
 800f9ac:	080120d4 	.word	0x080120d4
 800f9b0:	0800faf1 	.word	0x0800faf1
 800f9b4:	20006e68 	.word	0x20006e68

0800f9b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b08a      	sub	sp, #40	@ 0x28
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
 800f9c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d10b      	bne.n	800f9e8 <xTimerGenericCommand+0x30>
	__asm volatile
 800f9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d4:	f383 8811 	msr	BASEPRI, r3
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	f3bf 8f4f 	dsb	sy
 800f9e0:	623b      	str	r3, [r7, #32]
}
 800f9e2:	bf00      	nop
 800f9e4:	bf00      	nop
 800f9e6:	e7fd      	b.n	800f9e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f9e8:	4b19      	ldr	r3, [pc, #100]	@ (800fa50 <xTimerGenericCommand+0x98>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d02a      	beq.n	800fa46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	2b05      	cmp	r3, #5
 800fa00:	dc18      	bgt.n	800fa34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa02:	f7ff fb65 	bl	800f0d0 <xTaskGetSchedulerState>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d109      	bne.n	800fa20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa0c:	4b10      	ldr	r3, [pc, #64]	@ (800fa50 <xTimerGenericCommand+0x98>)
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	f107 0110 	add.w	r1, r7, #16
 800fa14:	2300      	movs	r3, #0
 800fa16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa18:	f7fd fe26 	bl	800d668 <xQueueGenericSend>
 800fa1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800fa1e:	e012      	b.n	800fa46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa20:	4b0b      	ldr	r3, [pc, #44]	@ (800fa50 <xTimerGenericCommand+0x98>)
 800fa22:	6818      	ldr	r0, [r3, #0]
 800fa24:	f107 0110 	add.w	r1, r7, #16
 800fa28:	2300      	movs	r3, #0
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f7fd fe1c 	bl	800d668 <xQueueGenericSend>
 800fa30:	6278      	str	r0, [r7, #36]	@ 0x24
 800fa32:	e008      	b.n	800fa46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa34:	4b06      	ldr	r3, [pc, #24]	@ (800fa50 <xTimerGenericCommand+0x98>)
 800fa36:	6818      	ldr	r0, [r3, #0]
 800fa38:	f107 0110 	add.w	r1, r7, #16
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	683a      	ldr	r2, [r7, #0]
 800fa40:	f7fd ff14 	bl	800d86c <xQueueGenericSendFromISR>
 800fa44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3728      	adds	r7, #40	@ 0x28
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20006e64 	.word	0x20006e64

0800fa54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b088      	sub	sp, #32
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa5e:	4b23      	ldr	r3, [pc, #140]	@ (800faec <prvProcessExpiredTimer+0x98>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	3304      	adds	r3, #4
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fd fc8b 	bl	800d388 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa78:	f003 0304 	and.w	r3, r3, #4
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d023      	beq.n	800fac8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	699a      	ldr	r2, [r3, #24]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	18d1      	adds	r1, r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	683a      	ldr	r2, [r7, #0]
 800fa8c:	6978      	ldr	r0, [r7, #20]
 800fa8e:	f000 f8d5 	bl	800fc3c <prvInsertTimerInActiveList>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d020      	beq.n	800fada <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa98:	2300      	movs	r3, #0
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	2100      	movs	r1, #0
 800faa2:	6978      	ldr	r0, [r7, #20]
 800faa4:	f7ff ff88 	bl	800f9b8 <xTimerGenericCommand>
 800faa8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d114      	bne.n	800fada <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	60fb      	str	r3, [r7, #12]
}
 800fac2:	bf00      	nop
 800fac4:	bf00      	nop
 800fac6:	e7fd      	b.n	800fac4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800face:	f023 0301 	bic.w	r3, r3, #1
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	6978      	ldr	r0, [r7, #20]
 800fae0:	4798      	blx	r3
}
 800fae2:	bf00      	nop
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	20006e5c 	.word	0x20006e5c

0800faf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800faf8:	f107 0308 	add.w	r3, r7, #8
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 f859 	bl	800fbb4 <prvGetNextExpireTime>
 800fb02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	4619      	mov	r1, r3
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f000 f805 	bl	800fb18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb0e:	f000 f8d7 	bl	800fcc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb12:	bf00      	nop
 800fb14:	e7f0      	b.n	800faf8 <prvTimerTask+0x8>
	...

0800fb18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb22:	f7fe fd5d 	bl	800e5e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb26:	f107 0308 	add.w	r3, r7, #8
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f000 f866 	bl	800fbfc <prvSampleTimeNow>
 800fb30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d130      	bne.n	800fb9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d10a      	bne.n	800fb54 <prvProcessTimerOrBlockTask+0x3c>
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d806      	bhi.n	800fb54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb46:	f7fe fd59 	bl	800e5fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb4a:	68f9      	ldr	r1, [r7, #12]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7ff ff81 	bl	800fa54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb52:	e024      	b.n	800fb9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d008      	beq.n	800fb6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb5a:	4b13      	ldr	r3, [pc, #76]	@ (800fba8 <prvProcessTimerOrBlockTask+0x90>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d101      	bne.n	800fb68 <prvProcessTimerOrBlockTask+0x50>
 800fb64:	2301      	movs	r3, #1
 800fb66:	e000      	b.n	800fb6a <prvProcessTimerOrBlockTask+0x52>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800fbac <prvProcessTimerOrBlockTask+0x94>)
 800fb6e:	6818      	ldr	r0, [r3, #0]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	4619      	mov	r1, r3
 800fb7a:	f7fe f9b3 	bl	800dee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb7e:	f7fe fd3d 	bl	800e5fc <xTaskResumeAll>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10a      	bne.n	800fb9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb88:	4b09      	ldr	r3, [pc, #36]	@ (800fbb0 <prvProcessTimerOrBlockTask+0x98>)
 800fb8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb8e:	601a      	str	r2, [r3, #0]
 800fb90:	f3bf 8f4f 	dsb	sy
 800fb94:	f3bf 8f6f 	isb	sy
}
 800fb98:	e001      	b.n	800fb9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fb9a:	f7fe fd2f 	bl	800e5fc <xTaskResumeAll>
}
 800fb9e:	bf00      	nop
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20006e60 	.word	0x20006e60
 800fbac:	20006e64 	.word	0x20006e64
 800fbb0:	e000ed04 	.word	0xe000ed04

0800fbb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b085      	sub	sp, #20
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fbbc:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf8 <prvGetNextExpireTime+0x44>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d101      	bne.n	800fbca <prvGetNextExpireTime+0x16>
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	e000      	b.n	800fbcc <prvGetNextExpireTime+0x18>
 800fbca:	2200      	movs	r2, #0
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d105      	bne.n	800fbe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbd8:	4b07      	ldr	r3, [pc, #28]	@ (800fbf8 <prvGetNextExpireTime+0x44>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	60fb      	str	r3, [r7, #12]
 800fbe2:	e001      	b.n	800fbe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3714      	adds	r7, #20
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr
 800fbf6:	bf00      	nop
 800fbf8:	20006e5c 	.word	0x20006e5c

0800fbfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc04:	f7fe fd98 	bl	800e738 <xTaskGetTickCount>
 800fc08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc0a:	4b0b      	ldr	r3, [pc, #44]	@ (800fc38 <prvSampleTimeNow+0x3c>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d205      	bcs.n	800fc20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc14:	f000 f93a 	bl	800fe8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	e002      	b.n	800fc26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc26:	4a04      	ldr	r2, [pc, #16]	@ (800fc38 <prvSampleTimeNow+0x3c>)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	20006e6c 	.word	0x20006e6c

0800fc3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	68ba      	ldr	r2, [r7, #8]
 800fc52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d812      	bhi.n	800fc88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	1ad2      	subs	r2, r2, r3
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	699b      	ldr	r3, [r3, #24]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d302      	bcc.n	800fc76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc70:	2301      	movs	r3, #1
 800fc72:	617b      	str	r3, [r7, #20]
 800fc74:	e01b      	b.n	800fcae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc76:	4b10      	ldr	r3, [pc, #64]	@ (800fcb8 <prvInsertTimerInActiveList+0x7c>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4619      	mov	r1, r3
 800fc80:	4610      	mov	r0, r2
 800fc82:	f7fd fb48 	bl	800d316 <vListInsert>
 800fc86:	e012      	b.n	800fcae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d206      	bcs.n	800fc9e <prvInsertTimerInActiveList+0x62>
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d302      	bcc.n	800fc9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	e007      	b.n	800fcae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc9e:	4b07      	ldr	r3, [pc, #28]	@ (800fcbc <prvInsertTimerInActiveList+0x80>)
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3304      	adds	r3, #4
 800fca6:	4619      	mov	r1, r3
 800fca8:	4610      	mov	r0, r2
 800fcaa:	f7fd fb34 	bl	800d316 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fcae:	697b      	ldr	r3, [r7, #20]
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	20006e60 	.word	0x20006e60
 800fcbc:	20006e5c 	.word	0x20006e5c

0800fcc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b08e      	sub	sp, #56	@ 0x38
 800fcc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcc6:	e0ce      	b.n	800fe66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	da19      	bge.n	800fd02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fcce:	1d3b      	adds	r3, r7, #4
 800fcd0:	3304      	adds	r3, #4
 800fcd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d10b      	bne.n	800fcf2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800fcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	61fb      	str	r3, [r7, #28]
}
 800fcec:	bf00      	nop
 800fcee:	bf00      	nop
 800fcf0:	e7fd      	b.n	800fcee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcf8:	6850      	ldr	r0, [r2, #4]
 800fcfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcfc:	6892      	ldr	r2, [r2, #8]
 800fcfe:	4611      	mov	r1, r2
 800fd00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f2c0 80ae 	blt.w	800fe66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d004      	beq.n	800fd20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd18:	3304      	adds	r3, #4
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fd fb34 	bl	800d388 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd20:	463b      	mov	r3, r7
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7ff ff6a 	bl	800fbfc <prvSampleTimeNow>
 800fd28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2b09      	cmp	r3, #9
 800fd2e:	f200 8097 	bhi.w	800fe60 <prvProcessReceivedCommands+0x1a0>
 800fd32:	a201      	add	r2, pc, #4	@ (adr r2, 800fd38 <prvProcessReceivedCommands+0x78>)
 800fd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd38:	0800fd61 	.word	0x0800fd61
 800fd3c:	0800fd61 	.word	0x0800fd61
 800fd40:	0800fd61 	.word	0x0800fd61
 800fd44:	0800fdd7 	.word	0x0800fdd7
 800fd48:	0800fdeb 	.word	0x0800fdeb
 800fd4c:	0800fe37 	.word	0x0800fe37
 800fd50:	0800fd61 	.word	0x0800fd61
 800fd54:	0800fd61 	.word	0x0800fd61
 800fd58:	0800fdd7 	.word	0x0800fdd7
 800fd5c:	0800fdeb 	.word	0x0800fdeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd66:	f043 0301 	orr.w	r3, r3, #1
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd76:	699b      	ldr	r3, [r3, #24]
 800fd78:	18d1      	adds	r1, r2, r3
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd80:	f7ff ff5c 	bl	800fc3c <prvInsertTimerInActiveList>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d06c      	beq.n	800fe64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd98:	f003 0304 	and.w	r3, r3, #4
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d061      	beq.n	800fe64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	441a      	add	r2, r3
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	2300      	movs	r3, #0
 800fdae:	2100      	movs	r1, #0
 800fdb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdb2:	f7ff fe01 	bl	800f9b8 <xTimerGenericCommand>
 800fdb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fdb8:	6a3b      	ldr	r3, [r7, #32]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d152      	bne.n	800fe64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	61bb      	str	r3, [r7, #24]
}
 800fdd0:	bf00      	nop
 800fdd2:	bf00      	nop
 800fdd4:	e7fd      	b.n	800fdd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fddc:	f023 0301 	bic.w	r3, r3, #1
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fde8:	e03d      	b.n	800fe66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fdf0:	f043 0301 	orr.w	r3, r3, #1
 800fdf4:	b2da      	uxtb	r2, r3
 800fdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe04:	699b      	ldr	r3, [r3, #24]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10b      	bne.n	800fe22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	617b      	str	r3, [r7, #20]
}
 800fe1c:	bf00      	nop
 800fe1e:	bf00      	nop
 800fe20:	e7fd      	b.n	800fe1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe24:	699a      	ldr	r2, [r3, #24]
 800fe26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe28:	18d1      	adds	r1, r2, r3
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe30:	f7ff ff04 	bl	800fc3c <prvInsertTimerInActiveList>
					break;
 800fe34:	e017      	b.n	800fe66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe3c:	f003 0302 	and.w	r3, r3, #2
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d103      	bne.n	800fe4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fe44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe46:	f000 fbe7 	bl	8010618 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe4a:	e00c      	b.n	800fe66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe52:	f023 0301 	bic.w	r3, r3, #1
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fe5e:	e002      	b.n	800fe66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fe60:	bf00      	nop
 800fe62:	e000      	b.n	800fe66 <prvProcessReceivedCommands+0x1a6>
					break;
 800fe64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe66:	4b08      	ldr	r3, [pc, #32]	@ (800fe88 <prvProcessReceivedCommands+0x1c8>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	1d39      	adds	r1, r7, #4
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fd fd9a 	bl	800d9a8 <xQueueReceive>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	f47f af26 	bne.w	800fcc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fe7c:	bf00      	nop
 800fe7e:	bf00      	nop
 800fe80:	3730      	adds	r7, #48	@ 0x30
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	20006e64 	.word	0x20006e64

0800fe8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe92:	e049      	b.n	800ff28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe94:	4b2e      	ldr	r3, [pc, #184]	@ (800ff50 <prvSwitchTimerLists+0xc4>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe9e:	4b2c      	ldr	r3, [pc, #176]	@ (800ff50 <prvSwitchTimerLists+0xc4>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3304      	adds	r3, #4
 800feac:	4618      	mov	r0, r3
 800feae:	f7fd fa6b 	bl	800d388 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6a1b      	ldr	r3, [r3, #32]
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fec0:	f003 0304 	and.w	r3, r3, #4
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d02f      	beq.n	800ff28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	699b      	ldr	r3, [r3, #24]
 800fecc:	693a      	ldr	r2, [r7, #16]
 800fece:	4413      	add	r3, r2
 800fed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fed2:	68ba      	ldr	r2, [r7, #8]
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d90e      	bls.n	800fef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fee6:	4b1a      	ldr	r3, [pc, #104]	@ (800ff50 <prvSwitchTimerLists+0xc4>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	3304      	adds	r3, #4
 800feee:	4619      	mov	r1, r3
 800fef0:	4610      	mov	r0, r2
 800fef2:	f7fd fa10 	bl	800d316 <vListInsert>
 800fef6:	e017      	b.n	800ff28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fef8:	2300      	movs	r3, #0
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	2300      	movs	r3, #0
 800fefe:	693a      	ldr	r2, [r7, #16]
 800ff00:	2100      	movs	r1, #0
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f7ff fd58 	bl	800f9b8 <xTimerGenericCommand>
 800ff08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10b      	bne.n	800ff28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	603b      	str	r3, [r7, #0]
}
 800ff22:	bf00      	nop
 800ff24:	bf00      	nop
 800ff26:	e7fd      	b.n	800ff24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff28:	4b09      	ldr	r3, [pc, #36]	@ (800ff50 <prvSwitchTimerLists+0xc4>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d1b0      	bne.n	800fe94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff32:	4b07      	ldr	r3, [pc, #28]	@ (800ff50 <prvSwitchTimerLists+0xc4>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff38:	4b06      	ldr	r3, [pc, #24]	@ (800ff54 <prvSwitchTimerLists+0xc8>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4a04      	ldr	r2, [pc, #16]	@ (800ff50 <prvSwitchTimerLists+0xc4>)
 800ff3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff40:	4a04      	ldr	r2, [pc, #16]	@ (800ff54 <prvSwitchTimerLists+0xc8>)
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	6013      	str	r3, [r2, #0]
}
 800ff46:	bf00      	nop
 800ff48:	3718      	adds	r7, #24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20006e5c 	.word	0x20006e5c
 800ff54:	20006e60 	.word	0x20006e60

0800ff58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff5e:	f000 f96b 	bl	8010238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff62:	4b15      	ldr	r3, [pc, #84]	@ (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d120      	bne.n	800ffac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff6a:	4814      	ldr	r0, [pc, #80]	@ (800ffbc <prvCheckForValidListAndQueue+0x64>)
 800ff6c:	f7fd f982 	bl	800d274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff70:	4813      	ldr	r0, [pc, #76]	@ (800ffc0 <prvCheckForValidListAndQueue+0x68>)
 800ff72:	f7fd f97f 	bl	800d274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff76:	4b13      	ldr	r3, [pc, #76]	@ (800ffc4 <prvCheckForValidListAndQueue+0x6c>)
 800ff78:	4a10      	ldr	r2, [pc, #64]	@ (800ffbc <prvCheckForValidListAndQueue+0x64>)
 800ff7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff7c:	4b12      	ldr	r3, [pc, #72]	@ (800ffc8 <prvCheckForValidListAndQueue+0x70>)
 800ff7e:	4a10      	ldr	r2, [pc, #64]	@ (800ffc0 <prvCheckForValidListAndQueue+0x68>)
 800ff80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff82:	2300      	movs	r3, #0
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	4b11      	ldr	r3, [pc, #68]	@ (800ffcc <prvCheckForValidListAndQueue+0x74>)
 800ff88:	4a11      	ldr	r2, [pc, #68]	@ (800ffd0 <prvCheckForValidListAndQueue+0x78>)
 800ff8a:	2110      	movs	r1, #16
 800ff8c:	200a      	movs	r0, #10
 800ff8e:	f7fd fa8f 	bl	800d4b0 <xQueueGenericCreateStatic>
 800ff92:	4603      	mov	r3, r0
 800ff94:	4a08      	ldr	r2, [pc, #32]	@ (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ff96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ff98:	4b07      	ldr	r3, [pc, #28]	@ (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ffa0:	4b05      	ldr	r3, [pc, #20]	@ (800ffb8 <prvCheckForValidListAndQueue+0x60>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	490b      	ldr	r1, [pc, #44]	@ (800ffd4 <prvCheckForValidListAndQueue+0x7c>)
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fd ff72 	bl	800de90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffac:	f000 f976 	bl	801029c <vPortExitCritical>
}
 800ffb0:	bf00      	nop
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20006e64 	.word	0x20006e64
 800ffbc:	20006e34 	.word	0x20006e34
 800ffc0:	20006e48 	.word	0x20006e48
 800ffc4:	20006e5c 	.word	0x20006e5c
 800ffc8:	20006e60 	.word	0x20006e60
 800ffcc:	20006f10 	.word	0x20006f10
 800ffd0:	20006e70 	.word	0x20006e70
 800ffd4:	080120dc 	.word	0x080120dc

0800ffd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b085      	sub	sp, #20
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	3b04      	subs	r3, #4
 800ffe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3b04      	subs	r3, #4
 800fff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	f023 0201 	bic.w	r2, r3, #1
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3b04      	subs	r3, #4
 8010006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010008:	4a0c      	ldr	r2, [pc, #48]	@ (801003c <pxPortInitialiseStack+0x64>)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3b14      	subs	r3, #20
 8010012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3b04      	subs	r3, #4
 801001e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f06f 0202 	mvn.w	r2, #2
 8010026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3b20      	subs	r3, #32
 801002c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801002e:	68fb      	ldr	r3, [r7, #12]
}
 8010030:	4618      	mov	r0, r3
 8010032:	3714      	adds	r7, #20
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	08010041 	.word	0x08010041

08010040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801004a:	4b13      	ldr	r3, [pc, #76]	@ (8010098 <prvTaskExitError+0x58>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010052:	d00b      	beq.n	801006c <prvTaskExitError+0x2c>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	60fb      	str	r3, [r7, #12]
}
 8010066:	bf00      	nop
 8010068:	bf00      	nop
 801006a:	e7fd      	b.n	8010068 <prvTaskExitError+0x28>
	__asm volatile
 801006c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010070:	f383 8811 	msr	BASEPRI, r3
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	f3bf 8f4f 	dsb	sy
 801007c:	60bb      	str	r3, [r7, #8]
}
 801007e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010080:	bf00      	nop
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d0fc      	beq.n	8010082 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010088:	bf00      	nop
 801008a:	bf00      	nop
 801008c:	3714      	adds	r7, #20
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	2000003c 	.word	0x2000003c
 801009c:	00000000 	.word	0x00000000

080100a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100a0:	4b07      	ldr	r3, [pc, #28]	@ (80100c0 <pxCurrentTCBConst2>)
 80100a2:	6819      	ldr	r1, [r3, #0]
 80100a4:	6808      	ldr	r0, [r1, #0]
 80100a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100aa:	f380 8809 	msr	PSP, r0
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f04f 0000 	mov.w	r0, #0
 80100b6:	f380 8811 	msr	BASEPRI, r0
 80100ba:	4770      	bx	lr
 80100bc:	f3af 8000 	nop.w

080100c0 <pxCurrentTCBConst2>:
 80100c0:	2000692c 	.word	0x2000692c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop

080100c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100c8:	4808      	ldr	r0, [pc, #32]	@ (80100ec <prvPortStartFirstTask+0x24>)
 80100ca:	6800      	ldr	r0, [r0, #0]
 80100cc:	6800      	ldr	r0, [r0, #0]
 80100ce:	f380 8808 	msr	MSP, r0
 80100d2:	f04f 0000 	mov.w	r0, #0
 80100d6:	f380 8814 	msr	CONTROL, r0
 80100da:	b662      	cpsie	i
 80100dc:	b661      	cpsie	f
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	f3bf 8f6f 	isb	sy
 80100e6:	df00      	svc	0
 80100e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100ea:	bf00      	nop
 80100ec:	e000ed08 	.word	0xe000ed08

080100f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80100f6:	4b47      	ldr	r3, [pc, #284]	@ (8010214 <xPortStartScheduler+0x124>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a47      	ldr	r2, [pc, #284]	@ (8010218 <xPortStartScheduler+0x128>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d10b      	bne.n	8010118 <xPortStartScheduler+0x28>
	__asm volatile
 8010100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010104:	f383 8811 	msr	BASEPRI, r3
 8010108:	f3bf 8f6f 	isb	sy
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	613b      	str	r3, [r7, #16]
}
 8010112:	bf00      	nop
 8010114:	bf00      	nop
 8010116:	e7fd      	b.n	8010114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010118:	4b3e      	ldr	r3, [pc, #248]	@ (8010214 <xPortStartScheduler+0x124>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a3f      	ldr	r2, [pc, #252]	@ (801021c <xPortStartScheduler+0x12c>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d10b      	bne.n	801013a <xPortStartScheduler+0x4a>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	60fb      	str	r3, [r7, #12]
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	e7fd      	b.n	8010136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801013a:	4b39      	ldr	r3, [pc, #228]	@ (8010220 <xPortStartScheduler+0x130>)
 801013c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	22ff      	movs	r2, #255	@ 0xff
 801014a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	b2db      	uxtb	r3, r3
 8010152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	b2db      	uxtb	r3, r3
 8010158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801015c:	b2da      	uxtb	r2, r3
 801015e:	4b31      	ldr	r3, [pc, #196]	@ (8010224 <xPortStartScheduler+0x134>)
 8010160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010162:	4b31      	ldr	r3, [pc, #196]	@ (8010228 <xPortStartScheduler+0x138>)
 8010164:	2207      	movs	r2, #7
 8010166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010168:	e009      	b.n	801017e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801016a:	4b2f      	ldr	r3, [pc, #188]	@ (8010228 <xPortStartScheduler+0x138>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	3b01      	subs	r3, #1
 8010170:	4a2d      	ldr	r2, [pc, #180]	@ (8010228 <xPortStartScheduler+0x138>)
 8010172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010174:	78fb      	ldrb	r3, [r7, #3]
 8010176:	b2db      	uxtb	r3, r3
 8010178:	005b      	lsls	r3, r3, #1
 801017a:	b2db      	uxtb	r3, r3
 801017c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801017e:	78fb      	ldrb	r3, [r7, #3]
 8010180:	b2db      	uxtb	r3, r3
 8010182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010186:	2b80      	cmp	r3, #128	@ 0x80
 8010188:	d0ef      	beq.n	801016a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801018a:	4b27      	ldr	r3, [pc, #156]	@ (8010228 <xPortStartScheduler+0x138>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f1c3 0307 	rsb	r3, r3, #7
 8010192:	2b04      	cmp	r3, #4
 8010194:	d00b      	beq.n	80101ae <xPortStartScheduler+0xbe>
	__asm volatile
 8010196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019a:	f383 8811 	msr	BASEPRI, r3
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f3bf 8f4f 	dsb	sy
 80101a6:	60bb      	str	r3, [r7, #8]
}
 80101a8:	bf00      	nop
 80101aa:	bf00      	nop
 80101ac:	e7fd      	b.n	80101aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101ae:	4b1e      	ldr	r3, [pc, #120]	@ (8010228 <xPortStartScheduler+0x138>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	021b      	lsls	r3, r3, #8
 80101b4:	4a1c      	ldr	r2, [pc, #112]	@ (8010228 <xPortStartScheduler+0x138>)
 80101b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101b8:	4b1b      	ldr	r3, [pc, #108]	@ (8010228 <xPortStartScheduler+0x138>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80101c0:	4a19      	ldr	r2, [pc, #100]	@ (8010228 <xPortStartScheduler+0x138>)
 80101c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	b2da      	uxtb	r2, r3
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101cc:	4b17      	ldr	r3, [pc, #92]	@ (801022c <xPortStartScheduler+0x13c>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a16      	ldr	r2, [pc, #88]	@ (801022c <xPortStartScheduler+0x13c>)
 80101d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80101d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101d8:	4b14      	ldr	r3, [pc, #80]	@ (801022c <xPortStartScheduler+0x13c>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4a13      	ldr	r2, [pc, #76]	@ (801022c <xPortStartScheduler+0x13c>)
 80101de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80101e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101e4:	f000 f8da 	bl	801039c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101e8:	4b11      	ldr	r3, [pc, #68]	@ (8010230 <xPortStartScheduler+0x140>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101ee:	f000 f8f9 	bl	80103e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101f2:	4b10      	ldr	r3, [pc, #64]	@ (8010234 <xPortStartScheduler+0x144>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a0f      	ldr	r2, [pc, #60]	@ (8010234 <xPortStartScheduler+0x144>)
 80101f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80101fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80101fe:	f7ff ff63 	bl	80100c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010202:	f7fe fbf3 	bl	800e9ec <vTaskSwitchContext>
	prvTaskExitError();
 8010206:	f7ff ff1b 	bl	8010040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801020a:	2300      	movs	r3, #0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	e000ed00 	.word	0xe000ed00
 8010218:	410fc271 	.word	0x410fc271
 801021c:	410fc270 	.word	0x410fc270
 8010220:	e000e400 	.word	0xe000e400
 8010224:	20006f60 	.word	0x20006f60
 8010228:	20006f64 	.word	0x20006f64
 801022c:	e000ed20 	.word	0xe000ed20
 8010230:	2000003c 	.word	0x2000003c
 8010234:	e000ef34 	.word	0xe000ef34

08010238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
	__asm volatile
 801023e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010242:	f383 8811 	msr	BASEPRI, r3
 8010246:	f3bf 8f6f 	isb	sy
 801024a:	f3bf 8f4f 	dsb	sy
 801024e:	607b      	str	r3, [r7, #4]
}
 8010250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010252:	4b10      	ldr	r3, [pc, #64]	@ (8010294 <vPortEnterCritical+0x5c>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	3301      	adds	r3, #1
 8010258:	4a0e      	ldr	r2, [pc, #56]	@ (8010294 <vPortEnterCritical+0x5c>)
 801025a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801025c:	4b0d      	ldr	r3, [pc, #52]	@ (8010294 <vPortEnterCritical+0x5c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d110      	bne.n	8010286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010264:	4b0c      	ldr	r3, [pc, #48]	@ (8010298 <vPortEnterCritical+0x60>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00b      	beq.n	8010286 <vPortEnterCritical+0x4e>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	603b      	str	r3, [r7, #0]
}
 8010280:	bf00      	nop
 8010282:	bf00      	nop
 8010284:	e7fd      	b.n	8010282 <vPortEnterCritical+0x4a>
	}
}
 8010286:	bf00      	nop
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	2000003c 	.word	0x2000003c
 8010298:	e000ed04 	.word	0xe000ed04

0801029c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102a2:	4b12      	ldr	r3, [pc, #72]	@ (80102ec <vPortExitCritical+0x50>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d10b      	bne.n	80102c2 <vPortExitCritical+0x26>
	__asm volatile
 80102aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ae:	f383 8811 	msr	BASEPRI, r3
 80102b2:	f3bf 8f6f 	isb	sy
 80102b6:	f3bf 8f4f 	dsb	sy
 80102ba:	607b      	str	r3, [r7, #4]
}
 80102bc:	bf00      	nop
 80102be:	bf00      	nop
 80102c0:	e7fd      	b.n	80102be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102c2:	4b0a      	ldr	r3, [pc, #40]	@ (80102ec <vPortExitCritical+0x50>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	3b01      	subs	r3, #1
 80102c8:	4a08      	ldr	r2, [pc, #32]	@ (80102ec <vPortExitCritical+0x50>)
 80102ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102cc:	4b07      	ldr	r3, [pc, #28]	@ (80102ec <vPortExitCritical+0x50>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d105      	bne.n	80102e0 <vPortExitCritical+0x44>
 80102d4:	2300      	movs	r3, #0
 80102d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	f383 8811 	msr	BASEPRI, r3
}
 80102de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102e0:	bf00      	nop
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	2000003c 	.word	0x2000003c

080102f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102f0:	f3ef 8009 	mrs	r0, PSP
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	4b15      	ldr	r3, [pc, #84]	@ (8010350 <pxCurrentTCBConst>)
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	f01e 0f10 	tst.w	lr, #16
 8010300:	bf08      	it	eq
 8010302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030a:	6010      	str	r0, [r2, #0]
 801030c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010314:	f380 8811 	msr	BASEPRI, r0
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f7fe fb64 	bl	800e9ec <vTaskSwitchContext>
 8010324:	f04f 0000 	mov.w	r0, #0
 8010328:	f380 8811 	msr	BASEPRI, r0
 801032c:	bc09      	pop	{r0, r3}
 801032e:	6819      	ldr	r1, [r3, #0]
 8010330:	6808      	ldr	r0, [r1, #0]
 8010332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010336:	f01e 0f10 	tst.w	lr, #16
 801033a:	bf08      	it	eq
 801033c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010340:	f380 8809 	msr	PSP, r0
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	f3af 8000 	nop.w

08010350 <pxCurrentTCBConst>:
 8010350:	2000692c 	.word	0x2000692c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010354:	bf00      	nop
 8010356:	bf00      	nop

08010358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	607b      	str	r3, [r7, #4]
}
 8010370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010372:	f7fe fa81 	bl	800e878 <xTaskIncrementTick>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d003      	beq.n	8010384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801037c:	4b06      	ldr	r3, [pc, #24]	@ (8010398 <xPortSysTickHandler+0x40>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	2300      	movs	r3, #0
 8010386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	f383 8811 	msr	BASEPRI, r3
}
 801038e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	e000ed04 	.word	0xe000ed04

0801039c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801039c:	b480      	push	{r7}
 801039e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103a0:	4b0b      	ldr	r3, [pc, #44]	@ (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103a6:	4b0b      	ldr	r3, [pc, #44]	@ (80103d4 <vPortSetupTimerInterrupt+0x38>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	@ (80103d8 <vPortSetupTimerInterrupt+0x3c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a0a      	ldr	r2, [pc, #40]	@ (80103dc <vPortSetupTimerInterrupt+0x40>)
 80103b2:	fba2 2303 	umull	r2, r3, r2, r3
 80103b6:	099b      	lsrs	r3, r3, #6
 80103b8:	4a09      	ldr	r2, [pc, #36]	@ (80103e0 <vPortSetupTimerInterrupt+0x44>)
 80103ba:	3b01      	subs	r3, #1
 80103bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103be:	4b04      	ldr	r3, [pc, #16]	@ (80103d0 <vPortSetupTimerInterrupt+0x34>)
 80103c0:	2207      	movs	r2, #7
 80103c2:	601a      	str	r2, [r3, #0]
}
 80103c4:	bf00      	nop
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	e000e010 	.word	0xe000e010
 80103d4:	e000e018 	.word	0xe000e018
 80103d8:	20000010 	.word	0x20000010
 80103dc:	10624dd3 	.word	0x10624dd3
 80103e0:	e000e014 	.word	0xe000e014

080103e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80103f4 <vPortEnableVFP+0x10>
 80103e8:	6801      	ldr	r1, [r0, #0]
 80103ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80103ee:	6001      	str	r1, [r0, #0]
 80103f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103f2:	bf00      	nop
 80103f4:	e000ed88 	.word	0xe000ed88

080103f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103fe:	f3ef 8305 	mrs	r3, IPSR
 8010402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b0f      	cmp	r3, #15
 8010408:	d915      	bls.n	8010436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801040a:	4a18      	ldr	r2, [pc, #96]	@ (801046c <vPortValidateInterruptPriority+0x74>)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010414:	4b16      	ldr	r3, [pc, #88]	@ (8010470 <vPortValidateInterruptPriority+0x78>)
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	7afa      	ldrb	r2, [r7, #11]
 801041a:	429a      	cmp	r2, r3
 801041c:	d20b      	bcs.n	8010436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	607b      	str	r3, [r7, #4]
}
 8010430:	bf00      	nop
 8010432:	bf00      	nop
 8010434:	e7fd      	b.n	8010432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010436:	4b0f      	ldr	r3, [pc, #60]	@ (8010474 <vPortValidateInterruptPriority+0x7c>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801043e:	4b0e      	ldr	r3, [pc, #56]	@ (8010478 <vPortValidateInterruptPriority+0x80>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d90b      	bls.n	801045e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801044a:	f383 8811 	msr	BASEPRI, r3
 801044e:	f3bf 8f6f 	isb	sy
 8010452:	f3bf 8f4f 	dsb	sy
 8010456:	603b      	str	r3, [r7, #0]
}
 8010458:	bf00      	nop
 801045a:	bf00      	nop
 801045c:	e7fd      	b.n	801045a <vPortValidateInterruptPriority+0x62>
	}
 801045e:	bf00      	nop
 8010460:	3714      	adds	r7, #20
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	e000e3f0 	.word	0xe000e3f0
 8010470:	20006f60 	.word	0x20006f60
 8010474:	e000ed0c 	.word	0xe000ed0c
 8010478:	20006f64 	.word	0x20006f64

0801047c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08a      	sub	sp, #40	@ 0x28
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010484:	2300      	movs	r3, #0
 8010486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010488:	f7fe f8aa 	bl	800e5e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801048c:	4b5c      	ldr	r3, [pc, #368]	@ (8010600 <pvPortMalloc+0x184>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010494:	f000 f930 	bl	80106f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010498:	4b5a      	ldr	r3, [pc, #360]	@ (8010604 <pvPortMalloc+0x188>)
 801049a:	681a      	ldr	r2, [r3, #0]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4013      	ands	r3, r2
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f040 8095 	bne.w	80105d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d01e      	beq.n	80104ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80104ac:	2208      	movs	r2, #8
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4413      	add	r3, r2
 80104b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f003 0307 	and.w	r3, r3, #7
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d015      	beq.n	80104ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f023 0307 	bic.w	r3, r3, #7
 80104c4:	3308      	adds	r3, #8
 80104c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f003 0307 	and.w	r3, r3, #7
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d00b      	beq.n	80104ea <pvPortMalloc+0x6e>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104d6:	f383 8811 	msr	BASEPRI, r3
 80104da:	f3bf 8f6f 	isb	sy
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	617b      	str	r3, [r7, #20]
}
 80104e4:	bf00      	nop
 80104e6:	bf00      	nop
 80104e8:	e7fd      	b.n	80104e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d06f      	beq.n	80105d0 <pvPortMalloc+0x154>
 80104f0:	4b45      	ldr	r3, [pc, #276]	@ (8010608 <pvPortMalloc+0x18c>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d86a      	bhi.n	80105d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80104fa:	4b44      	ldr	r3, [pc, #272]	@ (801060c <pvPortMalloc+0x190>)
 80104fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80104fe:	4b43      	ldr	r3, [pc, #268]	@ (801060c <pvPortMalloc+0x190>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010504:	e004      	b.n	8010510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801050a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	429a      	cmp	r2, r3
 8010518:	d903      	bls.n	8010522 <pvPortMalloc+0xa6>
 801051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1f1      	bne.n	8010506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010522:	4b37      	ldr	r3, [pc, #220]	@ (8010600 <pvPortMalloc+0x184>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010528:	429a      	cmp	r2, r3
 801052a:	d051      	beq.n	80105d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2208      	movs	r2, #8
 8010532:	4413      	add	r3, r2
 8010534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	6a3b      	ldr	r3, [r7, #32]
 801053c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801053e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010540:	685a      	ldr	r2, [r3, #4]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	1ad2      	subs	r2, r2, r3
 8010546:	2308      	movs	r3, #8
 8010548:	005b      	lsls	r3, r3, #1
 801054a:	429a      	cmp	r2, r3
 801054c:	d920      	bls.n	8010590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801054e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4413      	add	r3, r2
 8010554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	f003 0307 	and.w	r3, r3, #7
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00b      	beq.n	8010578 <pvPortMalloc+0xfc>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	613b      	str	r3, [r7, #16]
}
 8010572:	bf00      	nop
 8010574:	bf00      	nop
 8010576:	e7fd      	b.n	8010574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057a:	685a      	ldr	r2, [r3, #4]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	1ad2      	subs	r2, r2, r3
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801058a:	69b8      	ldr	r0, [r7, #24]
 801058c:	f000 f916 	bl	80107bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010590:	4b1d      	ldr	r3, [pc, #116]	@ (8010608 <pvPortMalloc+0x18c>)
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	4a1b      	ldr	r2, [pc, #108]	@ (8010608 <pvPortMalloc+0x18c>)
 801059c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801059e:	4b1a      	ldr	r3, [pc, #104]	@ (8010608 <pvPortMalloc+0x18c>)
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010610 <pvPortMalloc+0x194>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d203      	bcs.n	80105b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105aa:	4b17      	ldr	r3, [pc, #92]	@ (8010608 <pvPortMalloc+0x18c>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4a18      	ldr	r2, [pc, #96]	@ (8010610 <pvPortMalloc+0x194>)
 80105b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b4:	685a      	ldr	r2, [r3, #4]
 80105b6:	4b13      	ldr	r3, [pc, #76]	@ (8010604 <pvPortMalloc+0x188>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	431a      	orrs	r2, r3
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c2:	2200      	movs	r2, #0
 80105c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105c6:	4b13      	ldr	r3, [pc, #76]	@ (8010614 <pvPortMalloc+0x198>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	3301      	adds	r3, #1
 80105cc:	4a11      	ldr	r2, [pc, #68]	@ (8010614 <pvPortMalloc+0x198>)
 80105ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105d0:	f7fe f814 	bl	800e5fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	f003 0307 	and.w	r3, r3, #7
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00b      	beq.n	80105f6 <pvPortMalloc+0x17a>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	60fb      	str	r3, [r7, #12]
}
 80105f0:	bf00      	nop
 80105f2:	bf00      	nop
 80105f4:	e7fd      	b.n	80105f2 <pvPortMalloc+0x176>
	return pvReturn;
 80105f6:	69fb      	ldr	r3, [r7, #28]
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3728      	adds	r7, #40	@ 0x28
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	2000ab70 	.word	0x2000ab70
 8010604:	2000ab84 	.word	0x2000ab84
 8010608:	2000ab74 	.word	0x2000ab74
 801060c:	2000ab68 	.word	0x2000ab68
 8010610:	2000ab78 	.word	0x2000ab78
 8010614:	2000ab7c 	.word	0x2000ab7c

08010618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b086      	sub	sp, #24
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d04f      	beq.n	80106ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801062a:	2308      	movs	r3, #8
 801062c:	425b      	negs	r3, r3
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	4413      	add	r3, r2
 8010632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	4b25      	ldr	r3, [pc, #148]	@ (80106d4 <vPortFree+0xbc>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4013      	ands	r3, r2
 8010642:	2b00      	cmp	r3, #0
 8010644:	d10b      	bne.n	801065e <vPortFree+0x46>
	__asm volatile
 8010646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801064a:	f383 8811 	msr	BASEPRI, r3
 801064e:	f3bf 8f6f 	isb	sy
 8010652:	f3bf 8f4f 	dsb	sy
 8010656:	60fb      	str	r3, [r7, #12]
}
 8010658:	bf00      	nop
 801065a:	bf00      	nop
 801065c:	e7fd      	b.n	801065a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00b      	beq.n	801067e <vPortFree+0x66>
	__asm volatile
 8010666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	60bb      	str	r3, [r7, #8]
}
 8010678:	bf00      	nop
 801067a:	bf00      	nop
 801067c:	e7fd      	b.n	801067a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	4b14      	ldr	r3, [pc, #80]	@ (80106d4 <vPortFree+0xbc>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4013      	ands	r3, r2
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01e      	beq.n	80106ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d11a      	bne.n	80106ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	685a      	ldr	r2, [r3, #4]
 8010698:	4b0e      	ldr	r3, [pc, #56]	@ (80106d4 <vPortFree+0xbc>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	43db      	mvns	r3, r3
 801069e:	401a      	ands	r2, r3
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106a4:	f7fd ff9c 	bl	800e5e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	685a      	ldr	r2, [r3, #4]
 80106ac:	4b0a      	ldr	r3, [pc, #40]	@ (80106d8 <vPortFree+0xc0>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4413      	add	r3, r2
 80106b2:	4a09      	ldr	r2, [pc, #36]	@ (80106d8 <vPortFree+0xc0>)
 80106b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106b6:	6938      	ldr	r0, [r7, #16]
 80106b8:	f000 f880 	bl	80107bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106bc:	4b07      	ldr	r3, [pc, #28]	@ (80106dc <vPortFree+0xc4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	3301      	adds	r3, #1
 80106c2:	4a06      	ldr	r2, [pc, #24]	@ (80106dc <vPortFree+0xc4>)
 80106c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106c6:	f7fd ff99 	bl	800e5fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106ca:	bf00      	nop
 80106cc:	3718      	adds	r7, #24
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	2000ab84 	.word	0x2000ab84
 80106d8:	2000ab74 	.word	0x2000ab74
 80106dc:	2000ab80 	.word	0x2000ab80

080106e0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80106e0:	b480      	push	{r7}
 80106e2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80106e4:	4b03      	ldr	r3, [pc, #12]	@ (80106f4 <xPortGetFreeHeapSize+0x14>)
 80106e6:	681b      	ldr	r3, [r3, #0]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	2000ab74 	.word	0x2000ab74

080106f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010702:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010704:	4b27      	ldr	r3, [pc, #156]	@ (80107a4 <prvHeapInit+0xac>)
 8010706:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f003 0307 	and.w	r3, r3, #7
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00c      	beq.n	801072c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	3307      	adds	r3, #7
 8010716:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f023 0307 	bic.w	r3, r3, #7
 801071e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	4a1f      	ldr	r2, [pc, #124]	@ (80107a4 <prvHeapInit+0xac>)
 8010728:	4413      	add	r3, r2
 801072a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010730:	4a1d      	ldr	r2, [pc, #116]	@ (80107a8 <prvHeapInit+0xb0>)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010736:	4b1c      	ldr	r3, [pc, #112]	@ (80107a8 <prvHeapInit+0xb0>)
 8010738:	2200      	movs	r2, #0
 801073a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	4413      	add	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010744:	2208      	movs	r2, #8
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	1a9b      	subs	r3, r3, r2
 801074a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f023 0307 	bic.w	r3, r3, #7
 8010752:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	4a15      	ldr	r2, [pc, #84]	@ (80107ac <prvHeapInit+0xb4>)
 8010758:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801075a:	4b14      	ldr	r3, [pc, #80]	@ (80107ac <prvHeapInit+0xb4>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2200      	movs	r2, #0
 8010760:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010762:	4b12      	ldr	r3, [pc, #72]	@ (80107ac <prvHeapInit+0xb4>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2200      	movs	r2, #0
 8010768:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	1ad2      	subs	r2, r2, r3
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010778:	4b0c      	ldr	r3, [pc, #48]	@ (80107ac <prvHeapInit+0xb4>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	4a0a      	ldr	r2, [pc, #40]	@ (80107b0 <prvHeapInit+0xb8>)
 8010786:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	4a09      	ldr	r2, [pc, #36]	@ (80107b4 <prvHeapInit+0xbc>)
 801078e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010790:	4b09      	ldr	r3, [pc, #36]	@ (80107b8 <prvHeapInit+0xc0>)
 8010792:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010796:	601a      	str	r2, [r3, #0]
}
 8010798:	bf00      	nop
 801079a:	3714      	adds	r7, #20
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	20006f68 	.word	0x20006f68
 80107a8:	2000ab68 	.word	0x2000ab68
 80107ac:	2000ab70 	.word	0x2000ab70
 80107b0:	2000ab78 	.word	0x2000ab78
 80107b4:	2000ab74 	.word	0x2000ab74
 80107b8:	2000ab84 	.word	0x2000ab84

080107bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107bc:	b480      	push	{r7}
 80107be:	b085      	sub	sp, #20
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107c4:	4b28      	ldr	r3, [pc, #160]	@ (8010868 <prvInsertBlockIntoFreeList+0xac>)
 80107c6:	60fb      	str	r3, [r7, #12]
 80107c8:	e002      	b.n	80107d0 <prvInsertBlockIntoFreeList+0x14>
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	60fb      	str	r3, [r7, #12]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d8f7      	bhi.n	80107ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	4413      	add	r3, r2
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d108      	bne.n	80107fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	441a      	add	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	441a      	add	r2, r3
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	429a      	cmp	r2, r3
 8010810:	d118      	bne.n	8010844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	4b15      	ldr	r3, [pc, #84]	@ (801086c <prvInsertBlockIntoFreeList+0xb0>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	429a      	cmp	r2, r3
 801081c:	d00d      	beq.n	801083a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	685a      	ldr	r2, [r3, #4]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	441a      	add	r2, r3
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	e008      	b.n	801084c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801083a:	4b0c      	ldr	r3, [pc, #48]	@ (801086c <prvInsertBlockIntoFreeList+0xb0>)
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	601a      	str	r2, [r3, #0]
 8010842:	e003      	b.n	801084c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	429a      	cmp	r2, r3
 8010852:	d002      	beq.n	801085a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801085a:	bf00      	nop
 801085c:	3714      	adds	r7, #20
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	2000ab68 	.word	0x2000ab68
 801086c:	2000ab70 	.word	0x2000ab70

08010870 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010874:	2201      	movs	r2, #1
 8010876:	490e      	ldr	r1, [pc, #56]	@ (80108b0 <MX_USB_HOST_Init+0x40>)
 8010878:	480e      	ldr	r0, [pc, #56]	@ (80108b4 <MX_USB_HOST_Init+0x44>)
 801087a:	f7fa fa77 	bl	800ad6c <USBH_Init>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d001      	beq.n	8010888 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010884:	f7f0 ffaa 	bl	80017dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010888:	490b      	ldr	r1, [pc, #44]	@ (80108b8 <MX_USB_HOST_Init+0x48>)
 801088a:	480a      	ldr	r0, [pc, #40]	@ (80108b4 <MX_USB_HOST_Init+0x44>)
 801088c:	f7fa fb3d 	bl	800af0a <USBH_RegisterClass>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010896:	f7f0 ffa1 	bl	80017dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801089a:	4806      	ldr	r0, [pc, #24]	@ (80108b4 <MX_USB_HOST_Init+0x44>)
 801089c:	f7fa fbc1 	bl	800b022 <USBH_Start>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d001      	beq.n	80108aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80108a6:	f7f0 ff99 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80108aa:	bf00      	nop
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	080108bd 	.word	0x080108bd
 80108b4:	2000ab88 	.word	0x2000ab88
 80108b8:	2000001c 	.word	0x2000001c

080108bc <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	460b      	mov	r3, r1
 80108c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80108c8:	78fb      	ldrb	r3, [r7, #3]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	2b04      	cmp	r3, #4
 80108ce:	d819      	bhi.n	8010904 <USBH_UserProcess+0x48>
 80108d0:	a201      	add	r2, pc, #4	@ (adr r2, 80108d8 <USBH_UserProcess+0x1c>)
 80108d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d6:	bf00      	nop
 80108d8:	08010905 	.word	0x08010905
 80108dc:	080108f5 	.word	0x080108f5
 80108e0:	08010905 	.word	0x08010905
 80108e4:	080108fd 	.word	0x080108fd
 80108e8:	080108ed 	.word	0x080108ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80108ec:	4b09      	ldr	r3, [pc, #36]	@ (8010914 <USBH_UserProcess+0x58>)
 80108ee:	2203      	movs	r2, #3
 80108f0:	701a      	strb	r2, [r3, #0]
  break;
 80108f2:	e008      	b.n	8010906 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80108f4:	4b07      	ldr	r3, [pc, #28]	@ (8010914 <USBH_UserProcess+0x58>)
 80108f6:	2202      	movs	r2, #2
 80108f8:	701a      	strb	r2, [r3, #0]
  break;
 80108fa:	e004      	b.n	8010906 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80108fc:	4b05      	ldr	r3, [pc, #20]	@ (8010914 <USBH_UserProcess+0x58>)
 80108fe:	2201      	movs	r2, #1
 8010900:	701a      	strb	r2, [r3, #0]
  break;
 8010902:	e000      	b.n	8010906 <USBH_UserProcess+0x4a>

  default:
  break;
 8010904:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010906:	bf00      	nop
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	2000af6c 	.word	0x2000af6c

08010918 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b08a      	sub	sp, #40	@ 0x28
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010920:	f107 0314 	add.w	r3, r7, #20
 8010924:	2200      	movs	r2, #0
 8010926:	601a      	str	r2, [r3, #0]
 8010928:	605a      	str	r2, [r3, #4]
 801092a:	609a      	str	r2, [r3, #8]
 801092c:	60da      	str	r2, [r3, #12]
 801092e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010938:	d147      	bne.n	80109ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801093a:	2300      	movs	r3, #0
 801093c:	613b      	str	r3, [r7, #16]
 801093e:	4b25      	ldr	r3, [pc, #148]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 8010940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010942:	4a24      	ldr	r2, [pc, #144]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 8010944:	f043 0301 	orr.w	r3, r3, #1
 8010948:	6313      	str	r3, [r2, #48]	@ 0x30
 801094a:	4b22      	ldr	r3, [pc, #136]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 801094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801094e:	f003 0301 	and.w	r3, r3, #1
 8010952:	613b      	str	r3, [r7, #16]
 8010954:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801095a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801095c:	2300      	movs	r3, #0
 801095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010960:	2300      	movs	r3, #0
 8010962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010964:	f107 0314 	add.w	r3, r7, #20
 8010968:	4619      	mov	r1, r3
 801096a:	481b      	ldr	r0, [pc, #108]	@ (80109d8 <HAL_HCD_MspInit+0xc0>)
 801096c:	f7f2 f882 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010970:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8010974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010976:	2302      	movs	r3, #2
 8010978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801097a:	2300      	movs	r3, #0
 801097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801097e:	2300      	movs	r3, #0
 8010980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010982:	230a      	movs	r3, #10
 8010984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010986:	f107 0314 	add.w	r3, r7, #20
 801098a:	4619      	mov	r1, r3
 801098c:	4812      	ldr	r0, [pc, #72]	@ (80109d8 <HAL_HCD_MspInit+0xc0>)
 801098e:	f7f2 f871 	bl	8002a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010992:	4b10      	ldr	r3, [pc, #64]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 8010994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010996:	4a0f      	ldr	r2, [pc, #60]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 8010998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801099c:	6353      	str	r3, [r2, #52]	@ 0x34
 801099e:	2300      	movs	r3, #0
 80109a0:	60fb      	str	r3, [r7, #12]
 80109a2:	4b0c      	ldr	r3, [pc, #48]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 80109a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109a6:	4a0b      	ldr	r2, [pc, #44]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 80109a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80109ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80109ae:	4b09      	ldr	r3, [pc, #36]	@ (80109d4 <HAL_HCD_MspInit+0xbc>)
 80109b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80109ba:	2200      	movs	r2, #0
 80109bc:	2105      	movs	r1, #5
 80109be:	2043      	movs	r0, #67	@ 0x43
 80109c0:	f7f1 fc2c 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80109c4:	2043      	movs	r0, #67	@ 0x43
 80109c6:	f7f1 fc45 	bl	8002254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80109ca:	bf00      	nop
 80109cc:	3728      	adds	r7, #40	@ 0x28
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	40023800 	.word	0x40023800
 80109d8:	40020000 	.word	0x40020000

080109dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fa ffcb 	bl	800b986 <USBH_LL_IncTimer>
}
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fb f80f 	bl	800ba2a <USBH_LL_Connect>
}
 8010a0c:	bf00      	nop
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fb f824 	bl	800ba70 <USBH_LL_Disconnect>
}
 8010a28:	bf00      	nop
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
 8010a3c:	4613      	mov	r3, r2
 8010a3e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fb f85b 	bl	800bb02 <USBH_LL_NotifyURBChange>
#endif
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fa ffb9 	bl	800b9da <USBH_LL_PortEnabled>
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fa ffc5 	bl	800ba0e <USBH_LL_PortDisabled>
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d12a      	bne.n	8010af4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010a9e:	4a18      	ldr	r2, [pc, #96]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4a15      	ldr	r2, [pc, #84]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010aaa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010aae:	4b14      	ldr	r3, [pc, #80]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010ab0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8010ab4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010ab6:	4b12      	ldr	r3, [pc, #72]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010ab8:	2208      	movs	r2, #8
 8010aba:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010abc:	4b10      	ldr	r3, [pc, #64]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010abe:	2201      	movs	r2, #1
 8010ac0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010aca:	2202      	movs	r2, #2
 8010acc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010ace:	4b0c      	ldr	r3, [pc, #48]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010ad4:	480a      	ldr	r0, [pc, #40]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010ad6:	f7f2 f9b5 	bl	8002e44 <HAL_HCD_Init>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010ae0:	f7f0 fe7c 	bl	80017dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010ae4:	4806      	ldr	r0, [pc, #24]	@ (8010b00 <USBH_LL_Init+0x74>)
 8010ae6:	f7f2 fe15 	bl	8003714 <HAL_HCD_GetCurrentFrame>
 8010aea:	4603      	mov	r3, r0
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7fa ff3a 	bl	800b968 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	2000af70 	.word	0x2000af70

08010b04 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b10:	2300      	movs	r3, #0
 8010b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7f2 fd82 	bl	8003624 <HAL_HCD_Start>
 8010b20:	4603      	mov	r3, r0
 8010b22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f000 f95e 	bl	8010de8 <USBH_Get_USB_Status>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b084      	sub	sp, #16
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f2 fd8a 	bl	800366a <HAL_HCD_Stop>
 8010b56:	4603      	mov	r3, r0
 8010b58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b5a:	7bfb      	ldrb	r3, [r7, #15]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f000 f943 	bl	8010de8 <USBH_Get_USB_Status>
 8010b62:	4603      	mov	r3, r0
 8010b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7f2 fdd4 	bl	8003730 <HAL_HCD_GetCurrentSpeed>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b02      	cmp	r3, #2
 8010b8c:	d00c      	beq.n	8010ba8 <USBH_LL_GetSpeed+0x38>
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	d80d      	bhi.n	8010bae <USBH_LL_GetSpeed+0x3e>
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <USBH_LL_GetSpeed+0x2c>
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d003      	beq.n	8010ba2 <USBH_LL_GetSpeed+0x32>
 8010b9a:	e008      	b.n	8010bae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8010ba0:	e008      	b.n	8010bb4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ba6:	e005      	b.n	8010bb4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010ba8:	2302      	movs	r3, #2
 8010baa:	73fb      	strb	r3, [r7, #15]
    break;
 8010bac:	e002      	b.n	8010bb4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8010bb2:	bf00      	nop
  }
  return  speed;
 8010bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b084      	sub	sp, #16
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7f2 fd65 	bl	80036a4 <HAL_HCD_ResetPort>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f901 	bl	8010de8 <USBH_Get_USB_Status>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c06:	78fa      	ldrb	r2, [r7, #3]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7f2 fd6d 	bl	80036ea <HAL_HCD_HC_GetXferCount>
 8010c10:	4603      	mov	r3, r0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3708      	adds	r7, #8
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010c1a:	b590      	push	{r4, r7, lr}
 8010c1c:	b089      	sub	sp, #36	@ 0x24
 8010c1e:	af04      	add	r7, sp, #16
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	4608      	mov	r0, r1
 8010c24:	4611      	mov	r1, r2
 8010c26:	461a      	mov	r2, r3
 8010c28:	4603      	mov	r3, r0
 8010c2a:	70fb      	strb	r3, [r7, #3]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	70bb      	strb	r3, [r7, #2]
 8010c30:	4613      	mov	r3, r2
 8010c32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c34:	2300      	movs	r3, #0
 8010c36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010c42:	787c      	ldrb	r4, [r7, #1]
 8010c44:	78ba      	ldrb	r2, [r7, #2]
 8010c46:	78f9      	ldrb	r1, [r7, #3]
 8010c48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c4a:	9302      	str	r3, [sp, #8]
 8010c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010c50:	9301      	str	r3, [sp, #4]
 8010c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	4623      	mov	r3, r4
 8010c5a:	f7f2 f95a 	bl	8002f12 <HAL_HCD_HC_Init>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c62:	7bfb      	ldrb	r3, [r7, #15]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 f8bf 	bl	8010de8 <USBH_Get_USB_Status>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd90      	pop	{r4, r7, pc}

08010c78 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	460b      	mov	r3, r1
 8010c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c84:	2300      	movs	r3, #0
 8010c86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c92:	78fa      	ldrb	r2, [r7, #3]
 8010c94:	4611      	mov	r1, r2
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7f2 f9f3 	bl	8003082 <HAL_HCD_HC_Halt>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ca0:	7bfb      	ldrb	r3, [r7, #15]
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f000 f8a0 	bl	8010de8 <USBH_Get_USB_Status>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}

08010cb6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010cb6:	b590      	push	{r4, r7, lr}
 8010cb8:	b089      	sub	sp, #36	@ 0x24
 8010cba:	af04      	add	r7, sp, #16
 8010cbc:	6078      	str	r0, [r7, #4]
 8010cbe:	4608      	mov	r0, r1
 8010cc0:	4611      	mov	r1, r2
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	70fb      	strb	r3, [r7, #3]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	70bb      	strb	r3, [r7, #2]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010cde:	787c      	ldrb	r4, [r7, #1]
 8010ce0:	78ba      	ldrb	r2, [r7, #2]
 8010ce2:	78f9      	ldrb	r1, [r7, #3]
 8010ce4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010ce8:	9303      	str	r3, [sp, #12]
 8010cea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010cec:	9302      	str	r3, [sp, #8]
 8010cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf0:	9301      	str	r3, [sp, #4]
 8010cf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	4623      	mov	r3, r4
 8010cfa:	f7f2 f9e5 	bl	80030c8 <HAL_HCD_HC_SubmitRequest>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010d02:	7bfb      	ldrb	r3, [r7, #15]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f000 f86f 	bl	8010de8 <USBH_Get_USB_Status>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd90      	pop	{r4, r7, pc}

08010d18 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010d2a:	78fa      	ldrb	r2, [r7, #3]
 8010d2c:	4611      	mov	r1, r2
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f2 fcc6 	bl	80036c0 <HAL_HCD_HC_GetURBState>
 8010d34:	4603      	mov	r3, r0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}

08010d3e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010d3e:	b580      	push	{r7, lr}
 8010d40:	b082      	sub	sp, #8
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
 8010d46:	460b      	mov	r3, r1
 8010d48:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d103      	bne.n	8010d5c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010d54:	78fb      	ldrb	r3, [r7, #3]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 f872 	bl	8010e40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d5c:	20c8      	movs	r0, #200	@ 0xc8
 8010d5e:	f7f1 f981 	bl	8002064 <HAL_Delay>
  return USBH_OK;
 8010d62:	2300      	movs	r3, #0
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3708      	adds	r7, #8
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	460b      	mov	r3, r1
 8010d76:	70fb      	strb	r3, [r7, #3]
 8010d78:	4613      	mov	r3, r2
 8010d7a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010d82:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010d84:	78fa      	ldrb	r2, [r7, #3]
 8010d86:	68f9      	ldr	r1, [r7, #12]
 8010d88:	4613      	mov	r3, r2
 8010d8a:	011b      	lsls	r3, r3, #4
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	440b      	add	r3, r1
 8010d92:	3317      	adds	r3, #23
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00a      	beq.n	8010db0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010d9a:	78fa      	ldrb	r2, [r7, #3]
 8010d9c:	68f9      	ldr	r1, [r7, #12]
 8010d9e:	4613      	mov	r3, r2
 8010da0:	011b      	lsls	r3, r3, #4
 8010da2:	1a9b      	subs	r3, r3, r2
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	440b      	add	r3, r1
 8010da8:	333c      	adds	r3, #60	@ 0x3c
 8010daa:	78ba      	ldrb	r2, [r7, #2]
 8010dac:	701a      	strb	r2, [r3, #0]
 8010dae:	e009      	b.n	8010dc4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010db0:	78fa      	ldrb	r2, [r7, #3]
 8010db2:	68f9      	ldr	r1, [r7, #12]
 8010db4:	4613      	mov	r3, r2
 8010db6:	011b      	lsls	r3, r3, #4
 8010db8:	1a9b      	subs	r3, r3, r2
 8010dba:	009b      	lsls	r3, r3, #2
 8010dbc:	440b      	add	r3, r1
 8010dbe:	333d      	adds	r3, #61	@ 0x3d
 8010dc0:	78ba      	ldrb	r2, [r7, #2]
 8010dc2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3714      	adds	r7, #20
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7f1 f942 	bl	8002064 <HAL_Delay>
}
 8010de0:	bf00      	nop
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b085      	sub	sp, #20
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	4603      	mov	r3, r0
 8010df0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010df6:	79fb      	ldrb	r3, [r7, #7]
 8010df8:	2b03      	cmp	r3, #3
 8010dfa:	d817      	bhi.n	8010e2c <USBH_Get_USB_Status+0x44>
 8010dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8010e04 <USBH_Get_USB_Status+0x1c>)
 8010dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e02:	bf00      	nop
 8010e04:	08010e15 	.word	0x08010e15
 8010e08:	08010e1b 	.word	0x08010e1b
 8010e0c:	08010e21 	.word	0x08010e21
 8010e10:	08010e27 	.word	0x08010e27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010e14:	2300      	movs	r3, #0
 8010e16:	73fb      	strb	r3, [r7, #15]
    break;
 8010e18:	e00b      	b.n	8010e32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e1e:	e008      	b.n	8010e32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010e20:	2301      	movs	r3, #1
 8010e22:	73fb      	strb	r3, [r7, #15]
    break;
 8010e24:	e005      	b.n	8010e32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010e26:	2302      	movs	r3, #2
 8010e28:	73fb      	strb	r3, [r7, #15]
    break;
 8010e2a:	e002      	b.n	8010e32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e30:	bf00      	nop
  }
  return usb_status;
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	4603      	mov	r3, r0
 8010e48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010e4a:	79fb      	ldrb	r3, [r7, #7]
 8010e4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010e4e:	79fb      	ldrb	r3, [r7, #7]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d102      	bne.n	8010e5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010e54:	2300      	movs	r3, #0
 8010e56:	73fb      	strb	r3, [r7, #15]
 8010e58:	e001      	b.n	8010e5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010e5e:	7bfb      	ldrb	r3, [r7, #15]
 8010e60:	461a      	mov	r2, r3
 8010e62:	2101      	movs	r1, #1
 8010e64:	4803      	ldr	r0, [pc, #12]	@ (8010e74 <MX_DriverVbusFS+0x34>)
 8010e66:	f7f1 ffa1 	bl	8002dac <HAL_GPIO_WritePin>
}
 8010e6a:	bf00      	nop
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	40020800 	.word	0x40020800

08010e78 <malloc>:
 8010e78:	4b02      	ldr	r3, [pc, #8]	@ (8010e84 <malloc+0xc>)
 8010e7a:	4601      	mov	r1, r0
 8010e7c:	6818      	ldr	r0, [r3, #0]
 8010e7e:	f000 b82d 	b.w	8010edc <_malloc_r>
 8010e82:	bf00      	nop
 8010e84:	2000004c 	.word	0x2000004c

08010e88 <free>:
 8010e88:	4b02      	ldr	r3, [pc, #8]	@ (8010e94 <free+0xc>)
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	6818      	ldr	r0, [r3, #0]
 8010e8e:	f000 bbc1 	b.w	8011614 <_free_r>
 8010e92:	bf00      	nop
 8010e94:	2000004c 	.word	0x2000004c

08010e98 <sbrk_aligned>:
 8010e98:	b570      	push	{r4, r5, r6, lr}
 8010e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8010ed8 <sbrk_aligned+0x40>)
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	6831      	ldr	r1, [r6, #0]
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	b911      	cbnz	r1, 8010eaa <sbrk_aligned+0x12>
 8010ea4:	f000 fb50 	bl	8011548 <_sbrk_r>
 8010ea8:	6030      	str	r0, [r6, #0]
 8010eaa:	4621      	mov	r1, r4
 8010eac:	4628      	mov	r0, r5
 8010eae:	f000 fb4b 	bl	8011548 <_sbrk_r>
 8010eb2:	1c43      	adds	r3, r0, #1
 8010eb4:	d103      	bne.n	8010ebe <sbrk_aligned+0x26>
 8010eb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010eba:	4620      	mov	r0, r4
 8010ebc:	bd70      	pop	{r4, r5, r6, pc}
 8010ebe:	1cc4      	adds	r4, r0, #3
 8010ec0:	f024 0403 	bic.w	r4, r4, #3
 8010ec4:	42a0      	cmp	r0, r4
 8010ec6:	d0f8      	beq.n	8010eba <sbrk_aligned+0x22>
 8010ec8:	1a21      	subs	r1, r4, r0
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f000 fb3c 	bl	8011548 <_sbrk_r>
 8010ed0:	3001      	adds	r0, #1
 8010ed2:	d1f2      	bne.n	8010eba <sbrk_aligned+0x22>
 8010ed4:	e7ef      	b.n	8010eb6 <sbrk_aligned+0x1e>
 8010ed6:	bf00      	nop
 8010ed8:	2000b350 	.word	0x2000b350

08010edc <_malloc_r>:
 8010edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ee0:	1ccd      	adds	r5, r1, #3
 8010ee2:	f025 0503 	bic.w	r5, r5, #3
 8010ee6:	3508      	adds	r5, #8
 8010ee8:	2d0c      	cmp	r5, #12
 8010eea:	bf38      	it	cc
 8010eec:	250c      	movcc	r5, #12
 8010eee:	2d00      	cmp	r5, #0
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	db01      	blt.n	8010ef8 <_malloc_r+0x1c>
 8010ef4:	42a9      	cmp	r1, r5
 8010ef6:	d904      	bls.n	8010f02 <_malloc_r+0x26>
 8010ef8:	230c      	movs	r3, #12
 8010efa:	6033      	str	r3, [r6, #0]
 8010efc:	2000      	movs	r0, #0
 8010efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010fd8 <_malloc_r+0xfc>
 8010f06:	f000 f869 	bl	8010fdc <__malloc_lock>
 8010f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f0e:	461c      	mov	r4, r3
 8010f10:	bb44      	cbnz	r4, 8010f64 <_malloc_r+0x88>
 8010f12:	4629      	mov	r1, r5
 8010f14:	4630      	mov	r0, r6
 8010f16:	f7ff ffbf 	bl	8010e98 <sbrk_aligned>
 8010f1a:	1c43      	adds	r3, r0, #1
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	d158      	bne.n	8010fd2 <_malloc_r+0xf6>
 8010f20:	f8d8 4000 	ldr.w	r4, [r8]
 8010f24:	4627      	mov	r7, r4
 8010f26:	2f00      	cmp	r7, #0
 8010f28:	d143      	bne.n	8010fb2 <_malloc_r+0xd6>
 8010f2a:	2c00      	cmp	r4, #0
 8010f2c:	d04b      	beq.n	8010fc6 <_malloc_r+0xea>
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	4639      	mov	r1, r7
 8010f32:	4630      	mov	r0, r6
 8010f34:	eb04 0903 	add.w	r9, r4, r3
 8010f38:	f000 fb06 	bl	8011548 <_sbrk_r>
 8010f3c:	4581      	cmp	r9, r0
 8010f3e:	d142      	bne.n	8010fc6 <_malloc_r+0xea>
 8010f40:	6821      	ldr	r1, [r4, #0]
 8010f42:	1a6d      	subs	r5, r5, r1
 8010f44:	4629      	mov	r1, r5
 8010f46:	4630      	mov	r0, r6
 8010f48:	f7ff ffa6 	bl	8010e98 <sbrk_aligned>
 8010f4c:	3001      	adds	r0, #1
 8010f4e:	d03a      	beq.n	8010fc6 <_malloc_r+0xea>
 8010f50:	6823      	ldr	r3, [r4, #0]
 8010f52:	442b      	add	r3, r5
 8010f54:	6023      	str	r3, [r4, #0]
 8010f56:	f8d8 3000 	ldr.w	r3, [r8]
 8010f5a:	685a      	ldr	r2, [r3, #4]
 8010f5c:	bb62      	cbnz	r2, 8010fb8 <_malloc_r+0xdc>
 8010f5e:	f8c8 7000 	str.w	r7, [r8]
 8010f62:	e00f      	b.n	8010f84 <_malloc_r+0xa8>
 8010f64:	6822      	ldr	r2, [r4, #0]
 8010f66:	1b52      	subs	r2, r2, r5
 8010f68:	d420      	bmi.n	8010fac <_malloc_r+0xd0>
 8010f6a:	2a0b      	cmp	r2, #11
 8010f6c:	d917      	bls.n	8010f9e <_malloc_r+0xc2>
 8010f6e:	1961      	adds	r1, r4, r5
 8010f70:	42a3      	cmp	r3, r4
 8010f72:	6025      	str	r5, [r4, #0]
 8010f74:	bf18      	it	ne
 8010f76:	6059      	strne	r1, [r3, #4]
 8010f78:	6863      	ldr	r3, [r4, #4]
 8010f7a:	bf08      	it	eq
 8010f7c:	f8c8 1000 	streq.w	r1, [r8]
 8010f80:	5162      	str	r2, [r4, r5]
 8010f82:	604b      	str	r3, [r1, #4]
 8010f84:	4630      	mov	r0, r6
 8010f86:	f000 f82f 	bl	8010fe8 <__malloc_unlock>
 8010f8a:	f104 000b 	add.w	r0, r4, #11
 8010f8e:	1d23      	adds	r3, r4, #4
 8010f90:	f020 0007 	bic.w	r0, r0, #7
 8010f94:	1ac2      	subs	r2, r0, r3
 8010f96:	bf1c      	itt	ne
 8010f98:	1a1b      	subne	r3, r3, r0
 8010f9a:	50a3      	strne	r3, [r4, r2]
 8010f9c:	e7af      	b.n	8010efe <_malloc_r+0x22>
 8010f9e:	6862      	ldr	r2, [r4, #4]
 8010fa0:	42a3      	cmp	r3, r4
 8010fa2:	bf0c      	ite	eq
 8010fa4:	f8c8 2000 	streq.w	r2, [r8]
 8010fa8:	605a      	strne	r2, [r3, #4]
 8010faa:	e7eb      	b.n	8010f84 <_malloc_r+0xa8>
 8010fac:	4623      	mov	r3, r4
 8010fae:	6864      	ldr	r4, [r4, #4]
 8010fb0:	e7ae      	b.n	8010f10 <_malloc_r+0x34>
 8010fb2:	463c      	mov	r4, r7
 8010fb4:	687f      	ldr	r7, [r7, #4]
 8010fb6:	e7b6      	b.n	8010f26 <_malloc_r+0x4a>
 8010fb8:	461a      	mov	r2, r3
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	42a3      	cmp	r3, r4
 8010fbe:	d1fb      	bne.n	8010fb8 <_malloc_r+0xdc>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	6053      	str	r3, [r2, #4]
 8010fc4:	e7de      	b.n	8010f84 <_malloc_r+0xa8>
 8010fc6:	230c      	movs	r3, #12
 8010fc8:	6033      	str	r3, [r6, #0]
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f000 f80c 	bl	8010fe8 <__malloc_unlock>
 8010fd0:	e794      	b.n	8010efc <_malloc_r+0x20>
 8010fd2:	6005      	str	r5, [r0, #0]
 8010fd4:	e7d6      	b.n	8010f84 <_malloc_r+0xa8>
 8010fd6:	bf00      	nop
 8010fd8:	2000b354 	.word	0x2000b354

08010fdc <__malloc_lock>:
 8010fdc:	4801      	ldr	r0, [pc, #4]	@ (8010fe4 <__malloc_lock+0x8>)
 8010fde:	f000 bb00 	b.w	80115e2 <__retarget_lock_acquire_recursive>
 8010fe2:	bf00      	nop
 8010fe4:	2000b498 	.word	0x2000b498

08010fe8 <__malloc_unlock>:
 8010fe8:	4801      	ldr	r0, [pc, #4]	@ (8010ff0 <__malloc_unlock+0x8>)
 8010fea:	f000 bafb 	b.w	80115e4 <__retarget_lock_release_recursive>
 8010fee:	bf00      	nop
 8010ff0:	2000b498 	.word	0x2000b498

08010ff4 <std>:
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	b510      	push	{r4, lr}
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8010ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011002:	6083      	str	r3, [r0, #8]
 8011004:	8181      	strh	r1, [r0, #12]
 8011006:	6643      	str	r3, [r0, #100]	@ 0x64
 8011008:	81c2      	strh	r2, [r0, #14]
 801100a:	6183      	str	r3, [r0, #24]
 801100c:	4619      	mov	r1, r3
 801100e:	2208      	movs	r2, #8
 8011010:	305c      	adds	r0, #92	@ 0x5c
 8011012:	f000 fa07 	bl	8011424 <memset>
 8011016:	4b0d      	ldr	r3, [pc, #52]	@ (801104c <std+0x58>)
 8011018:	6263      	str	r3, [r4, #36]	@ 0x24
 801101a:	4b0d      	ldr	r3, [pc, #52]	@ (8011050 <std+0x5c>)
 801101c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801101e:	4b0d      	ldr	r3, [pc, #52]	@ (8011054 <std+0x60>)
 8011020:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011022:	4b0d      	ldr	r3, [pc, #52]	@ (8011058 <std+0x64>)
 8011024:	6323      	str	r3, [r4, #48]	@ 0x30
 8011026:	4b0d      	ldr	r3, [pc, #52]	@ (801105c <std+0x68>)
 8011028:	6224      	str	r4, [r4, #32]
 801102a:	429c      	cmp	r4, r3
 801102c:	d006      	beq.n	801103c <std+0x48>
 801102e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011032:	4294      	cmp	r4, r2
 8011034:	d002      	beq.n	801103c <std+0x48>
 8011036:	33d0      	adds	r3, #208	@ 0xd0
 8011038:	429c      	cmp	r4, r3
 801103a:	d105      	bne.n	8011048 <std+0x54>
 801103c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011044:	f000 bacc 	b.w	80115e0 <__retarget_lock_init_recursive>
 8011048:	bd10      	pop	{r4, pc}
 801104a:	bf00      	nop
 801104c:	08011275 	.word	0x08011275
 8011050:	08011297 	.word	0x08011297
 8011054:	080112cf 	.word	0x080112cf
 8011058:	080112f3 	.word	0x080112f3
 801105c:	2000b358 	.word	0x2000b358

08011060 <stdio_exit_handler>:
 8011060:	4a02      	ldr	r2, [pc, #8]	@ (801106c <stdio_exit_handler+0xc>)
 8011062:	4903      	ldr	r1, [pc, #12]	@ (8011070 <stdio_exit_handler+0x10>)
 8011064:	4803      	ldr	r0, [pc, #12]	@ (8011074 <stdio_exit_handler+0x14>)
 8011066:	f000 b869 	b.w	801113c <_fwalk_sglue>
 801106a:	bf00      	nop
 801106c:	20000040 	.word	0x20000040
 8011070:	08011d7d 	.word	0x08011d7d
 8011074:	20000050 	.word	0x20000050

08011078 <cleanup_stdio>:
 8011078:	6841      	ldr	r1, [r0, #4]
 801107a:	4b0c      	ldr	r3, [pc, #48]	@ (80110ac <cleanup_stdio+0x34>)
 801107c:	4299      	cmp	r1, r3
 801107e:	b510      	push	{r4, lr}
 8011080:	4604      	mov	r4, r0
 8011082:	d001      	beq.n	8011088 <cleanup_stdio+0x10>
 8011084:	f000 fe7a 	bl	8011d7c <_fflush_r>
 8011088:	68a1      	ldr	r1, [r4, #8]
 801108a:	4b09      	ldr	r3, [pc, #36]	@ (80110b0 <cleanup_stdio+0x38>)
 801108c:	4299      	cmp	r1, r3
 801108e:	d002      	beq.n	8011096 <cleanup_stdio+0x1e>
 8011090:	4620      	mov	r0, r4
 8011092:	f000 fe73 	bl	8011d7c <_fflush_r>
 8011096:	68e1      	ldr	r1, [r4, #12]
 8011098:	4b06      	ldr	r3, [pc, #24]	@ (80110b4 <cleanup_stdio+0x3c>)
 801109a:	4299      	cmp	r1, r3
 801109c:	d004      	beq.n	80110a8 <cleanup_stdio+0x30>
 801109e:	4620      	mov	r0, r4
 80110a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110a4:	f000 be6a 	b.w	8011d7c <_fflush_r>
 80110a8:	bd10      	pop	{r4, pc}
 80110aa:	bf00      	nop
 80110ac:	2000b358 	.word	0x2000b358
 80110b0:	2000b3c0 	.word	0x2000b3c0
 80110b4:	2000b428 	.word	0x2000b428

080110b8 <global_stdio_init.part.0>:
 80110b8:	b510      	push	{r4, lr}
 80110ba:	4b0b      	ldr	r3, [pc, #44]	@ (80110e8 <global_stdio_init.part.0+0x30>)
 80110bc:	4c0b      	ldr	r4, [pc, #44]	@ (80110ec <global_stdio_init.part.0+0x34>)
 80110be:	4a0c      	ldr	r2, [pc, #48]	@ (80110f0 <global_stdio_init.part.0+0x38>)
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	4620      	mov	r0, r4
 80110c4:	2200      	movs	r2, #0
 80110c6:	2104      	movs	r1, #4
 80110c8:	f7ff ff94 	bl	8010ff4 <std>
 80110cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80110d0:	2201      	movs	r2, #1
 80110d2:	2109      	movs	r1, #9
 80110d4:	f7ff ff8e 	bl	8010ff4 <std>
 80110d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80110dc:	2202      	movs	r2, #2
 80110de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110e2:	2112      	movs	r1, #18
 80110e4:	f7ff bf86 	b.w	8010ff4 <std>
 80110e8:	2000b490 	.word	0x2000b490
 80110ec:	2000b358 	.word	0x2000b358
 80110f0:	08011061 	.word	0x08011061

080110f4 <__sfp_lock_acquire>:
 80110f4:	4801      	ldr	r0, [pc, #4]	@ (80110fc <__sfp_lock_acquire+0x8>)
 80110f6:	f000 ba74 	b.w	80115e2 <__retarget_lock_acquire_recursive>
 80110fa:	bf00      	nop
 80110fc:	2000b499 	.word	0x2000b499

08011100 <__sfp_lock_release>:
 8011100:	4801      	ldr	r0, [pc, #4]	@ (8011108 <__sfp_lock_release+0x8>)
 8011102:	f000 ba6f 	b.w	80115e4 <__retarget_lock_release_recursive>
 8011106:	bf00      	nop
 8011108:	2000b499 	.word	0x2000b499

0801110c <__sinit>:
 801110c:	b510      	push	{r4, lr}
 801110e:	4604      	mov	r4, r0
 8011110:	f7ff fff0 	bl	80110f4 <__sfp_lock_acquire>
 8011114:	6a23      	ldr	r3, [r4, #32]
 8011116:	b11b      	cbz	r3, 8011120 <__sinit+0x14>
 8011118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801111c:	f7ff bff0 	b.w	8011100 <__sfp_lock_release>
 8011120:	4b04      	ldr	r3, [pc, #16]	@ (8011134 <__sinit+0x28>)
 8011122:	6223      	str	r3, [r4, #32]
 8011124:	4b04      	ldr	r3, [pc, #16]	@ (8011138 <__sinit+0x2c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1f5      	bne.n	8011118 <__sinit+0xc>
 801112c:	f7ff ffc4 	bl	80110b8 <global_stdio_init.part.0>
 8011130:	e7f2      	b.n	8011118 <__sinit+0xc>
 8011132:	bf00      	nop
 8011134:	08011079 	.word	0x08011079
 8011138:	2000b490 	.word	0x2000b490

0801113c <_fwalk_sglue>:
 801113c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011140:	4607      	mov	r7, r0
 8011142:	4688      	mov	r8, r1
 8011144:	4614      	mov	r4, r2
 8011146:	2600      	movs	r6, #0
 8011148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801114c:	f1b9 0901 	subs.w	r9, r9, #1
 8011150:	d505      	bpl.n	801115e <_fwalk_sglue+0x22>
 8011152:	6824      	ldr	r4, [r4, #0]
 8011154:	2c00      	cmp	r4, #0
 8011156:	d1f7      	bne.n	8011148 <_fwalk_sglue+0xc>
 8011158:	4630      	mov	r0, r6
 801115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115e:	89ab      	ldrh	r3, [r5, #12]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d907      	bls.n	8011174 <_fwalk_sglue+0x38>
 8011164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011168:	3301      	adds	r3, #1
 801116a:	d003      	beq.n	8011174 <_fwalk_sglue+0x38>
 801116c:	4629      	mov	r1, r5
 801116e:	4638      	mov	r0, r7
 8011170:	47c0      	blx	r8
 8011172:	4306      	orrs	r6, r0
 8011174:	3568      	adds	r5, #104	@ 0x68
 8011176:	e7e9      	b.n	801114c <_fwalk_sglue+0x10>

08011178 <_puts_r>:
 8011178:	6a03      	ldr	r3, [r0, #32]
 801117a:	b570      	push	{r4, r5, r6, lr}
 801117c:	6884      	ldr	r4, [r0, #8]
 801117e:	4605      	mov	r5, r0
 8011180:	460e      	mov	r6, r1
 8011182:	b90b      	cbnz	r3, 8011188 <_puts_r+0x10>
 8011184:	f7ff ffc2 	bl	801110c <__sinit>
 8011188:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801118a:	07db      	lsls	r3, r3, #31
 801118c:	d405      	bmi.n	801119a <_puts_r+0x22>
 801118e:	89a3      	ldrh	r3, [r4, #12]
 8011190:	0598      	lsls	r0, r3, #22
 8011192:	d402      	bmi.n	801119a <_puts_r+0x22>
 8011194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011196:	f000 fa24 	bl	80115e2 <__retarget_lock_acquire_recursive>
 801119a:	89a3      	ldrh	r3, [r4, #12]
 801119c:	0719      	lsls	r1, r3, #28
 801119e:	d502      	bpl.n	80111a6 <_puts_r+0x2e>
 80111a0:	6923      	ldr	r3, [r4, #16]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d135      	bne.n	8011212 <_puts_r+0x9a>
 80111a6:	4621      	mov	r1, r4
 80111a8:	4628      	mov	r0, r5
 80111aa:	f000 f8e5 	bl	8011378 <__swsetup_r>
 80111ae:	b380      	cbz	r0, 8011212 <_puts_r+0x9a>
 80111b0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80111b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111b6:	07da      	lsls	r2, r3, #31
 80111b8:	d405      	bmi.n	80111c6 <_puts_r+0x4e>
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	059b      	lsls	r3, r3, #22
 80111be:	d402      	bmi.n	80111c6 <_puts_r+0x4e>
 80111c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111c2:	f000 fa0f 	bl	80115e4 <__retarget_lock_release_recursive>
 80111c6:	4628      	mov	r0, r5
 80111c8:	bd70      	pop	{r4, r5, r6, pc}
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	da04      	bge.n	80111d8 <_puts_r+0x60>
 80111ce:	69a2      	ldr	r2, [r4, #24]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	dc17      	bgt.n	8011204 <_puts_r+0x8c>
 80111d4:	290a      	cmp	r1, #10
 80111d6:	d015      	beq.n	8011204 <_puts_r+0x8c>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	1c5a      	adds	r2, r3, #1
 80111dc:	6022      	str	r2, [r4, #0]
 80111de:	7019      	strb	r1, [r3, #0]
 80111e0:	68a3      	ldr	r3, [r4, #8]
 80111e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80111e6:	3b01      	subs	r3, #1
 80111e8:	60a3      	str	r3, [r4, #8]
 80111ea:	2900      	cmp	r1, #0
 80111ec:	d1ed      	bne.n	80111ca <_puts_r+0x52>
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	da11      	bge.n	8011216 <_puts_r+0x9e>
 80111f2:	4622      	mov	r2, r4
 80111f4:	210a      	movs	r1, #10
 80111f6:	4628      	mov	r0, r5
 80111f8:	f000 f87f 	bl	80112fa <__swbuf_r>
 80111fc:	3001      	adds	r0, #1
 80111fe:	d0d7      	beq.n	80111b0 <_puts_r+0x38>
 8011200:	250a      	movs	r5, #10
 8011202:	e7d7      	b.n	80111b4 <_puts_r+0x3c>
 8011204:	4622      	mov	r2, r4
 8011206:	4628      	mov	r0, r5
 8011208:	f000 f877 	bl	80112fa <__swbuf_r>
 801120c:	3001      	adds	r0, #1
 801120e:	d1e7      	bne.n	80111e0 <_puts_r+0x68>
 8011210:	e7ce      	b.n	80111b0 <_puts_r+0x38>
 8011212:	3e01      	subs	r6, #1
 8011214:	e7e4      	b.n	80111e0 <_puts_r+0x68>
 8011216:	6823      	ldr	r3, [r4, #0]
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	6022      	str	r2, [r4, #0]
 801121c:	220a      	movs	r2, #10
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	e7ee      	b.n	8011200 <_puts_r+0x88>
	...

08011224 <puts>:
 8011224:	4b02      	ldr	r3, [pc, #8]	@ (8011230 <puts+0xc>)
 8011226:	4601      	mov	r1, r0
 8011228:	6818      	ldr	r0, [r3, #0]
 801122a:	f7ff bfa5 	b.w	8011178 <_puts_r>
 801122e:	bf00      	nop
 8011230:	2000004c 	.word	0x2000004c

08011234 <siprintf>:
 8011234:	b40e      	push	{r1, r2, r3}
 8011236:	b500      	push	{lr}
 8011238:	b09c      	sub	sp, #112	@ 0x70
 801123a:	ab1d      	add	r3, sp, #116	@ 0x74
 801123c:	9002      	str	r0, [sp, #8]
 801123e:	9006      	str	r0, [sp, #24]
 8011240:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011244:	4809      	ldr	r0, [pc, #36]	@ (801126c <siprintf+0x38>)
 8011246:	9107      	str	r1, [sp, #28]
 8011248:	9104      	str	r1, [sp, #16]
 801124a:	4909      	ldr	r1, [pc, #36]	@ (8011270 <siprintf+0x3c>)
 801124c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011250:	9105      	str	r1, [sp, #20]
 8011252:	6800      	ldr	r0, [r0, #0]
 8011254:	9301      	str	r3, [sp, #4]
 8011256:	a902      	add	r1, sp, #8
 8011258:	f000 fa82 	bl	8011760 <_svfiprintf_r>
 801125c:	9b02      	ldr	r3, [sp, #8]
 801125e:	2200      	movs	r2, #0
 8011260:	701a      	strb	r2, [r3, #0]
 8011262:	b01c      	add	sp, #112	@ 0x70
 8011264:	f85d eb04 	ldr.w	lr, [sp], #4
 8011268:	b003      	add	sp, #12
 801126a:	4770      	bx	lr
 801126c:	2000004c 	.word	0x2000004c
 8011270:	ffff0208 	.word	0xffff0208

08011274 <__sread>:
 8011274:	b510      	push	{r4, lr}
 8011276:	460c      	mov	r4, r1
 8011278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801127c:	f000 f952 	bl	8011524 <_read_r>
 8011280:	2800      	cmp	r0, #0
 8011282:	bfab      	itete	ge
 8011284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011286:	89a3      	ldrhlt	r3, [r4, #12]
 8011288:	181b      	addge	r3, r3, r0
 801128a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801128e:	bfac      	ite	ge
 8011290:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011292:	81a3      	strhlt	r3, [r4, #12]
 8011294:	bd10      	pop	{r4, pc}

08011296 <__swrite>:
 8011296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801129a:	461f      	mov	r7, r3
 801129c:	898b      	ldrh	r3, [r1, #12]
 801129e:	05db      	lsls	r3, r3, #23
 80112a0:	4605      	mov	r5, r0
 80112a2:	460c      	mov	r4, r1
 80112a4:	4616      	mov	r6, r2
 80112a6:	d505      	bpl.n	80112b4 <__swrite+0x1e>
 80112a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ac:	2302      	movs	r3, #2
 80112ae:	2200      	movs	r2, #0
 80112b0:	f000 f926 	bl	8011500 <_lseek_r>
 80112b4:	89a3      	ldrh	r3, [r4, #12]
 80112b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80112be:	81a3      	strh	r3, [r4, #12]
 80112c0:	4632      	mov	r2, r6
 80112c2:	463b      	mov	r3, r7
 80112c4:	4628      	mov	r0, r5
 80112c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ca:	f000 b94d 	b.w	8011568 <_write_r>

080112ce <__sseek>:
 80112ce:	b510      	push	{r4, lr}
 80112d0:	460c      	mov	r4, r1
 80112d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d6:	f000 f913 	bl	8011500 <_lseek_r>
 80112da:	1c43      	adds	r3, r0, #1
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	bf15      	itete	ne
 80112e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80112e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80112e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80112ea:	81a3      	strheq	r3, [r4, #12]
 80112ec:	bf18      	it	ne
 80112ee:	81a3      	strhne	r3, [r4, #12]
 80112f0:	bd10      	pop	{r4, pc}

080112f2 <__sclose>:
 80112f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112f6:	f000 b89d 	b.w	8011434 <_close_r>

080112fa <__swbuf_r>:
 80112fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112fc:	460e      	mov	r6, r1
 80112fe:	4614      	mov	r4, r2
 8011300:	4605      	mov	r5, r0
 8011302:	b118      	cbz	r0, 801130c <__swbuf_r+0x12>
 8011304:	6a03      	ldr	r3, [r0, #32]
 8011306:	b90b      	cbnz	r3, 801130c <__swbuf_r+0x12>
 8011308:	f7ff ff00 	bl	801110c <__sinit>
 801130c:	69a3      	ldr	r3, [r4, #24]
 801130e:	60a3      	str	r3, [r4, #8]
 8011310:	89a3      	ldrh	r3, [r4, #12]
 8011312:	071a      	lsls	r2, r3, #28
 8011314:	d501      	bpl.n	801131a <__swbuf_r+0x20>
 8011316:	6923      	ldr	r3, [r4, #16]
 8011318:	b943      	cbnz	r3, 801132c <__swbuf_r+0x32>
 801131a:	4621      	mov	r1, r4
 801131c:	4628      	mov	r0, r5
 801131e:	f000 f82b 	bl	8011378 <__swsetup_r>
 8011322:	b118      	cbz	r0, 801132c <__swbuf_r+0x32>
 8011324:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011328:	4638      	mov	r0, r7
 801132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	6922      	ldr	r2, [r4, #16]
 8011330:	1a98      	subs	r0, r3, r2
 8011332:	6963      	ldr	r3, [r4, #20]
 8011334:	b2f6      	uxtb	r6, r6
 8011336:	4283      	cmp	r3, r0
 8011338:	4637      	mov	r7, r6
 801133a:	dc05      	bgt.n	8011348 <__swbuf_r+0x4e>
 801133c:	4621      	mov	r1, r4
 801133e:	4628      	mov	r0, r5
 8011340:	f000 fd1c 	bl	8011d7c <_fflush_r>
 8011344:	2800      	cmp	r0, #0
 8011346:	d1ed      	bne.n	8011324 <__swbuf_r+0x2a>
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	3b01      	subs	r3, #1
 801134c:	60a3      	str	r3, [r4, #8]
 801134e:	6823      	ldr	r3, [r4, #0]
 8011350:	1c5a      	adds	r2, r3, #1
 8011352:	6022      	str	r2, [r4, #0]
 8011354:	701e      	strb	r6, [r3, #0]
 8011356:	6962      	ldr	r2, [r4, #20]
 8011358:	1c43      	adds	r3, r0, #1
 801135a:	429a      	cmp	r2, r3
 801135c:	d004      	beq.n	8011368 <__swbuf_r+0x6e>
 801135e:	89a3      	ldrh	r3, [r4, #12]
 8011360:	07db      	lsls	r3, r3, #31
 8011362:	d5e1      	bpl.n	8011328 <__swbuf_r+0x2e>
 8011364:	2e0a      	cmp	r6, #10
 8011366:	d1df      	bne.n	8011328 <__swbuf_r+0x2e>
 8011368:	4621      	mov	r1, r4
 801136a:	4628      	mov	r0, r5
 801136c:	f000 fd06 	bl	8011d7c <_fflush_r>
 8011370:	2800      	cmp	r0, #0
 8011372:	d0d9      	beq.n	8011328 <__swbuf_r+0x2e>
 8011374:	e7d6      	b.n	8011324 <__swbuf_r+0x2a>
	...

08011378 <__swsetup_r>:
 8011378:	b538      	push	{r3, r4, r5, lr}
 801137a:	4b29      	ldr	r3, [pc, #164]	@ (8011420 <__swsetup_r+0xa8>)
 801137c:	4605      	mov	r5, r0
 801137e:	6818      	ldr	r0, [r3, #0]
 8011380:	460c      	mov	r4, r1
 8011382:	b118      	cbz	r0, 801138c <__swsetup_r+0x14>
 8011384:	6a03      	ldr	r3, [r0, #32]
 8011386:	b90b      	cbnz	r3, 801138c <__swsetup_r+0x14>
 8011388:	f7ff fec0 	bl	801110c <__sinit>
 801138c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011390:	0719      	lsls	r1, r3, #28
 8011392:	d422      	bmi.n	80113da <__swsetup_r+0x62>
 8011394:	06da      	lsls	r2, r3, #27
 8011396:	d407      	bmi.n	80113a8 <__swsetup_r+0x30>
 8011398:	2209      	movs	r2, #9
 801139a:	602a      	str	r2, [r5, #0]
 801139c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113a0:	81a3      	strh	r3, [r4, #12]
 80113a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113a6:	e033      	b.n	8011410 <__swsetup_r+0x98>
 80113a8:	0758      	lsls	r0, r3, #29
 80113aa:	d512      	bpl.n	80113d2 <__swsetup_r+0x5a>
 80113ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113ae:	b141      	cbz	r1, 80113c2 <__swsetup_r+0x4a>
 80113b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113b4:	4299      	cmp	r1, r3
 80113b6:	d002      	beq.n	80113be <__swsetup_r+0x46>
 80113b8:	4628      	mov	r0, r5
 80113ba:	f000 f92b 	bl	8011614 <_free_r>
 80113be:	2300      	movs	r3, #0
 80113c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113c8:	81a3      	strh	r3, [r4, #12]
 80113ca:	2300      	movs	r3, #0
 80113cc:	6063      	str	r3, [r4, #4]
 80113ce:	6923      	ldr	r3, [r4, #16]
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	f043 0308 	orr.w	r3, r3, #8
 80113d8:	81a3      	strh	r3, [r4, #12]
 80113da:	6923      	ldr	r3, [r4, #16]
 80113dc:	b94b      	cbnz	r3, 80113f2 <__swsetup_r+0x7a>
 80113de:	89a3      	ldrh	r3, [r4, #12]
 80113e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80113e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113e8:	d003      	beq.n	80113f2 <__swsetup_r+0x7a>
 80113ea:	4621      	mov	r1, r4
 80113ec:	4628      	mov	r0, r5
 80113ee:	f000 fd13 	bl	8011e18 <__smakebuf_r>
 80113f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f6:	f013 0201 	ands.w	r2, r3, #1
 80113fa:	d00a      	beq.n	8011412 <__swsetup_r+0x9a>
 80113fc:	2200      	movs	r2, #0
 80113fe:	60a2      	str	r2, [r4, #8]
 8011400:	6962      	ldr	r2, [r4, #20]
 8011402:	4252      	negs	r2, r2
 8011404:	61a2      	str	r2, [r4, #24]
 8011406:	6922      	ldr	r2, [r4, #16]
 8011408:	b942      	cbnz	r2, 801141c <__swsetup_r+0xa4>
 801140a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801140e:	d1c5      	bne.n	801139c <__swsetup_r+0x24>
 8011410:	bd38      	pop	{r3, r4, r5, pc}
 8011412:	0799      	lsls	r1, r3, #30
 8011414:	bf58      	it	pl
 8011416:	6962      	ldrpl	r2, [r4, #20]
 8011418:	60a2      	str	r2, [r4, #8]
 801141a:	e7f4      	b.n	8011406 <__swsetup_r+0x8e>
 801141c:	2000      	movs	r0, #0
 801141e:	e7f7      	b.n	8011410 <__swsetup_r+0x98>
 8011420:	2000004c 	.word	0x2000004c

08011424 <memset>:
 8011424:	4402      	add	r2, r0
 8011426:	4603      	mov	r3, r0
 8011428:	4293      	cmp	r3, r2
 801142a:	d100      	bne.n	801142e <memset+0xa>
 801142c:	4770      	bx	lr
 801142e:	f803 1b01 	strb.w	r1, [r3], #1
 8011432:	e7f9      	b.n	8011428 <memset+0x4>

08011434 <_close_r>:
 8011434:	b538      	push	{r3, r4, r5, lr}
 8011436:	4d06      	ldr	r5, [pc, #24]	@ (8011450 <_close_r+0x1c>)
 8011438:	2300      	movs	r3, #0
 801143a:	4604      	mov	r4, r0
 801143c:	4608      	mov	r0, r1
 801143e:	602b      	str	r3, [r5, #0]
 8011440:	f7f0 fd27 	bl	8001e92 <_close>
 8011444:	1c43      	adds	r3, r0, #1
 8011446:	d102      	bne.n	801144e <_close_r+0x1a>
 8011448:	682b      	ldr	r3, [r5, #0]
 801144a:	b103      	cbz	r3, 801144e <_close_r+0x1a>
 801144c:	6023      	str	r3, [r4, #0]
 801144e:	bd38      	pop	{r3, r4, r5, pc}
 8011450:	2000b494 	.word	0x2000b494

08011454 <_reclaim_reent>:
 8011454:	4b29      	ldr	r3, [pc, #164]	@ (80114fc <_reclaim_reent+0xa8>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4283      	cmp	r3, r0
 801145a:	b570      	push	{r4, r5, r6, lr}
 801145c:	4604      	mov	r4, r0
 801145e:	d04b      	beq.n	80114f8 <_reclaim_reent+0xa4>
 8011460:	69c3      	ldr	r3, [r0, #28]
 8011462:	b1ab      	cbz	r3, 8011490 <_reclaim_reent+0x3c>
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	b16b      	cbz	r3, 8011484 <_reclaim_reent+0x30>
 8011468:	2500      	movs	r5, #0
 801146a:	69e3      	ldr	r3, [r4, #28]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	5959      	ldr	r1, [r3, r5]
 8011470:	2900      	cmp	r1, #0
 8011472:	d13b      	bne.n	80114ec <_reclaim_reent+0x98>
 8011474:	3504      	adds	r5, #4
 8011476:	2d80      	cmp	r5, #128	@ 0x80
 8011478:	d1f7      	bne.n	801146a <_reclaim_reent+0x16>
 801147a:	69e3      	ldr	r3, [r4, #28]
 801147c:	4620      	mov	r0, r4
 801147e:	68d9      	ldr	r1, [r3, #12]
 8011480:	f000 f8c8 	bl	8011614 <_free_r>
 8011484:	69e3      	ldr	r3, [r4, #28]
 8011486:	6819      	ldr	r1, [r3, #0]
 8011488:	b111      	cbz	r1, 8011490 <_reclaim_reent+0x3c>
 801148a:	4620      	mov	r0, r4
 801148c:	f000 f8c2 	bl	8011614 <_free_r>
 8011490:	6961      	ldr	r1, [r4, #20]
 8011492:	b111      	cbz	r1, 801149a <_reclaim_reent+0x46>
 8011494:	4620      	mov	r0, r4
 8011496:	f000 f8bd 	bl	8011614 <_free_r>
 801149a:	69e1      	ldr	r1, [r4, #28]
 801149c:	b111      	cbz	r1, 80114a4 <_reclaim_reent+0x50>
 801149e:	4620      	mov	r0, r4
 80114a0:	f000 f8b8 	bl	8011614 <_free_r>
 80114a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80114a6:	b111      	cbz	r1, 80114ae <_reclaim_reent+0x5a>
 80114a8:	4620      	mov	r0, r4
 80114aa:	f000 f8b3 	bl	8011614 <_free_r>
 80114ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80114b0:	b111      	cbz	r1, 80114b8 <_reclaim_reent+0x64>
 80114b2:	4620      	mov	r0, r4
 80114b4:	f000 f8ae 	bl	8011614 <_free_r>
 80114b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80114ba:	b111      	cbz	r1, 80114c2 <_reclaim_reent+0x6e>
 80114bc:	4620      	mov	r0, r4
 80114be:	f000 f8a9 	bl	8011614 <_free_r>
 80114c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80114c4:	b111      	cbz	r1, 80114cc <_reclaim_reent+0x78>
 80114c6:	4620      	mov	r0, r4
 80114c8:	f000 f8a4 	bl	8011614 <_free_r>
 80114cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80114ce:	b111      	cbz	r1, 80114d6 <_reclaim_reent+0x82>
 80114d0:	4620      	mov	r0, r4
 80114d2:	f000 f89f 	bl	8011614 <_free_r>
 80114d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80114d8:	b111      	cbz	r1, 80114e0 <_reclaim_reent+0x8c>
 80114da:	4620      	mov	r0, r4
 80114dc:	f000 f89a 	bl	8011614 <_free_r>
 80114e0:	6a23      	ldr	r3, [r4, #32]
 80114e2:	b14b      	cbz	r3, 80114f8 <_reclaim_reent+0xa4>
 80114e4:	4620      	mov	r0, r4
 80114e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114ea:	4718      	bx	r3
 80114ec:	680e      	ldr	r6, [r1, #0]
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 f890 	bl	8011614 <_free_r>
 80114f4:	4631      	mov	r1, r6
 80114f6:	e7bb      	b.n	8011470 <_reclaim_reent+0x1c>
 80114f8:	bd70      	pop	{r4, r5, r6, pc}
 80114fa:	bf00      	nop
 80114fc:	2000004c 	.word	0x2000004c

08011500 <_lseek_r>:
 8011500:	b538      	push	{r3, r4, r5, lr}
 8011502:	4d07      	ldr	r5, [pc, #28]	@ (8011520 <_lseek_r+0x20>)
 8011504:	4604      	mov	r4, r0
 8011506:	4608      	mov	r0, r1
 8011508:	4611      	mov	r1, r2
 801150a:	2200      	movs	r2, #0
 801150c:	602a      	str	r2, [r5, #0]
 801150e:	461a      	mov	r2, r3
 8011510:	f7f0 fce6 	bl	8001ee0 <_lseek>
 8011514:	1c43      	adds	r3, r0, #1
 8011516:	d102      	bne.n	801151e <_lseek_r+0x1e>
 8011518:	682b      	ldr	r3, [r5, #0]
 801151a:	b103      	cbz	r3, 801151e <_lseek_r+0x1e>
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	bd38      	pop	{r3, r4, r5, pc}
 8011520:	2000b494 	.word	0x2000b494

08011524 <_read_r>:
 8011524:	b538      	push	{r3, r4, r5, lr}
 8011526:	4d07      	ldr	r5, [pc, #28]	@ (8011544 <_read_r+0x20>)
 8011528:	4604      	mov	r4, r0
 801152a:	4608      	mov	r0, r1
 801152c:	4611      	mov	r1, r2
 801152e:	2200      	movs	r2, #0
 8011530:	602a      	str	r2, [r5, #0]
 8011532:	461a      	mov	r2, r3
 8011534:	f7f0 fc74 	bl	8001e20 <_read>
 8011538:	1c43      	adds	r3, r0, #1
 801153a:	d102      	bne.n	8011542 <_read_r+0x1e>
 801153c:	682b      	ldr	r3, [r5, #0]
 801153e:	b103      	cbz	r3, 8011542 <_read_r+0x1e>
 8011540:	6023      	str	r3, [r4, #0]
 8011542:	bd38      	pop	{r3, r4, r5, pc}
 8011544:	2000b494 	.word	0x2000b494

08011548 <_sbrk_r>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	4d06      	ldr	r5, [pc, #24]	@ (8011564 <_sbrk_r+0x1c>)
 801154c:	2300      	movs	r3, #0
 801154e:	4604      	mov	r4, r0
 8011550:	4608      	mov	r0, r1
 8011552:	602b      	str	r3, [r5, #0]
 8011554:	f7f0 fcd2 	bl	8001efc <_sbrk>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d102      	bne.n	8011562 <_sbrk_r+0x1a>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	b103      	cbz	r3, 8011562 <_sbrk_r+0x1a>
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	2000b494 	.word	0x2000b494

08011568 <_write_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	4d07      	ldr	r5, [pc, #28]	@ (8011588 <_write_r+0x20>)
 801156c:	4604      	mov	r4, r0
 801156e:	4608      	mov	r0, r1
 8011570:	4611      	mov	r1, r2
 8011572:	2200      	movs	r2, #0
 8011574:	602a      	str	r2, [r5, #0]
 8011576:	461a      	mov	r2, r3
 8011578:	f7f0 fc6f 	bl	8001e5a <_write>
 801157c:	1c43      	adds	r3, r0, #1
 801157e:	d102      	bne.n	8011586 <_write_r+0x1e>
 8011580:	682b      	ldr	r3, [r5, #0]
 8011582:	b103      	cbz	r3, 8011586 <_write_r+0x1e>
 8011584:	6023      	str	r3, [r4, #0]
 8011586:	bd38      	pop	{r3, r4, r5, pc}
 8011588:	2000b494 	.word	0x2000b494

0801158c <__errno>:
 801158c:	4b01      	ldr	r3, [pc, #4]	@ (8011594 <__errno+0x8>)
 801158e:	6818      	ldr	r0, [r3, #0]
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	2000004c 	.word	0x2000004c

08011598 <__libc_init_array>:
 8011598:	b570      	push	{r4, r5, r6, lr}
 801159a:	4d0d      	ldr	r5, [pc, #52]	@ (80115d0 <__libc_init_array+0x38>)
 801159c:	4c0d      	ldr	r4, [pc, #52]	@ (80115d4 <__libc_init_array+0x3c>)
 801159e:	1b64      	subs	r4, r4, r5
 80115a0:	10a4      	asrs	r4, r4, #2
 80115a2:	2600      	movs	r6, #0
 80115a4:	42a6      	cmp	r6, r4
 80115a6:	d109      	bne.n	80115bc <__libc_init_array+0x24>
 80115a8:	4d0b      	ldr	r5, [pc, #44]	@ (80115d8 <__libc_init_array+0x40>)
 80115aa:	4c0c      	ldr	r4, [pc, #48]	@ (80115dc <__libc_init_array+0x44>)
 80115ac:	f000 fce2 	bl	8011f74 <_init>
 80115b0:	1b64      	subs	r4, r4, r5
 80115b2:	10a4      	asrs	r4, r4, #2
 80115b4:	2600      	movs	r6, #0
 80115b6:	42a6      	cmp	r6, r4
 80115b8:	d105      	bne.n	80115c6 <__libc_init_array+0x2e>
 80115ba:	bd70      	pop	{r4, r5, r6, pc}
 80115bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80115c0:	4798      	blx	r3
 80115c2:	3601      	adds	r6, #1
 80115c4:	e7ee      	b.n	80115a4 <__libc_init_array+0xc>
 80115c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80115ca:	4798      	blx	r3
 80115cc:	3601      	adds	r6, #1
 80115ce:	e7f2      	b.n	80115b6 <__libc_init_array+0x1e>
 80115d0:	08012284 	.word	0x08012284
 80115d4:	08012284 	.word	0x08012284
 80115d8:	08012284 	.word	0x08012284
 80115dc:	08012288 	.word	0x08012288

080115e0 <__retarget_lock_init_recursive>:
 80115e0:	4770      	bx	lr

080115e2 <__retarget_lock_acquire_recursive>:
 80115e2:	4770      	bx	lr

080115e4 <__retarget_lock_release_recursive>:
 80115e4:	4770      	bx	lr

080115e6 <strcpy>:
 80115e6:	4603      	mov	r3, r0
 80115e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115ec:	f803 2b01 	strb.w	r2, [r3], #1
 80115f0:	2a00      	cmp	r2, #0
 80115f2:	d1f9      	bne.n	80115e8 <strcpy+0x2>
 80115f4:	4770      	bx	lr

080115f6 <memcpy>:
 80115f6:	440a      	add	r2, r1
 80115f8:	4291      	cmp	r1, r2
 80115fa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80115fe:	d100      	bne.n	8011602 <memcpy+0xc>
 8011600:	4770      	bx	lr
 8011602:	b510      	push	{r4, lr}
 8011604:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011608:	f803 4f01 	strb.w	r4, [r3, #1]!
 801160c:	4291      	cmp	r1, r2
 801160e:	d1f9      	bne.n	8011604 <memcpy+0xe>
 8011610:	bd10      	pop	{r4, pc}
	...

08011614 <_free_r>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	4605      	mov	r5, r0
 8011618:	2900      	cmp	r1, #0
 801161a:	d041      	beq.n	80116a0 <_free_r+0x8c>
 801161c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011620:	1f0c      	subs	r4, r1, #4
 8011622:	2b00      	cmp	r3, #0
 8011624:	bfb8      	it	lt
 8011626:	18e4      	addlt	r4, r4, r3
 8011628:	f7ff fcd8 	bl	8010fdc <__malloc_lock>
 801162c:	4a1d      	ldr	r2, [pc, #116]	@ (80116a4 <_free_r+0x90>)
 801162e:	6813      	ldr	r3, [r2, #0]
 8011630:	b933      	cbnz	r3, 8011640 <_free_r+0x2c>
 8011632:	6063      	str	r3, [r4, #4]
 8011634:	6014      	str	r4, [r2, #0]
 8011636:	4628      	mov	r0, r5
 8011638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801163c:	f7ff bcd4 	b.w	8010fe8 <__malloc_unlock>
 8011640:	42a3      	cmp	r3, r4
 8011642:	d908      	bls.n	8011656 <_free_r+0x42>
 8011644:	6820      	ldr	r0, [r4, #0]
 8011646:	1821      	adds	r1, r4, r0
 8011648:	428b      	cmp	r3, r1
 801164a:	bf01      	itttt	eq
 801164c:	6819      	ldreq	r1, [r3, #0]
 801164e:	685b      	ldreq	r3, [r3, #4]
 8011650:	1809      	addeq	r1, r1, r0
 8011652:	6021      	streq	r1, [r4, #0]
 8011654:	e7ed      	b.n	8011632 <_free_r+0x1e>
 8011656:	461a      	mov	r2, r3
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	b10b      	cbz	r3, 8011660 <_free_r+0x4c>
 801165c:	42a3      	cmp	r3, r4
 801165e:	d9fa      	bls.n	8011656 <_free_r+0x42>
 8011660:	6811      	ldr	r1, [r2, #0]
 8011662:	1850      	adds	r0, r2, r1
 8011664:	42a0      	cmp	r0, r4
 8011666:	d10b      	bne.n	8011680 <_free_r+0x6c>
 8011668:	6820      	ldr	r0, [r4, #0]
 801166a:	4401      	add	r1, r0
 801166c:	1850      	adds	r0, r2, r1
 801166e:	4283      	cmp	r3, r0
 8011670:	6011      	str	r1, [r2, #0]
 8011672:	d1e0      	bne.n	8011636 <_free_r+0x22>
 8011674:	6818      	ldr	r0, [r3, #0]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	6053      	str	r3, [r2, #4]
 801167a:	4408      	add	r0, r1
 801167c:	6010      	str	r0, [r2, #0]
 801167e:	e7da      	b.n	8011636 <_free_r+0x22>
 8011680:	d902      	bls.n	8011688 <_free_r+0x74>
 8011682:	230c      	movs	r3, #12
 8011684:	602b      	str	r3, [r5, #0]
 8011686:	e7d6      	b.n	8011636 <_free_r+0x22>
 8011688:	6820      	ldr	r0, [r4, #0]
 801168a:	1821      	adds	r1, r4, r0
 801168c:	428b      	cmp	r3, r1
 801168e:	bf04      	itt	eq
 8011690:	6819      	ldreq	r1, [r3, #0]
 8011692:	685b      	ldreq	r3, [r3, #4]
 8011694:	6063      	str	r3, [r4, #4]
 8011696:	bf04      	itt	eq
 8011698:	1809      	addeq	r1, r1, r0
 801169a:	6021      	streq	r1, [r4, #0]
 801169c:	6054      	str	r4, [r2, #4]
 801169e:	e7ca      	b.n	8011636 <_free_r+0x22>
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop
 80116a4:	2000b354 	.word	0x2000b354

080116a8 <__ssputs_r>:
 80116a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116ac:	688e      	ldr	r6, [r1, #8]
 80116ae:	461f      	mov	r7, r3
 80116b0:	42be      	cmp	r6, r7
 80116b2:	680b      	ldr	r3, [r1, #0]
 80116b4:	4682      	mov	sl, r0
 80116b6:	460c      	mov	r4, r1
 80116b8:	4690      	mov	r8, r2
 80116ba:	d82d      	bhi.n	8011718 <__ssputs_r+0x70>
 80116bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80116c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80116c4:	d026      	beq.n	8011714 <__ssputs_r+0x6c>
 80116c6:	6965      	ldr	r5, [r4, #20]
 80116c8:	6909      	ldr	r1, [r1, #16]
 80116ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116ce:	eba3 0901 	sub.w	r9, r3, r1
 80116d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116d6:	1c7b      	adds	r3, r7, #1
 80116d8:	444b      	add	r3, r9
 80116da:	106d      	asrs	r5, r5, #1
 80116dc:	429d      	cmp	r5, r3
 80116de:	bf38      	it	cc
 80116e0:	461d      	movcc	r5, r3
 80116e2:	0553      	lsls	r3, r2, #21
 80116e4:	d527      	bpl.n	8011736 <__ssputs_r+0x8e>
 80116e6:	4629      	mov	r1, r5
 80116e8:	f7ff fbf8 	bl	8010edc <_malloc_r>
 80116ec:	4606      	mov	r6, r0
 80116ee:	b360      	cbz	r0, 801174a <__ssputs_r+0xa2>
 80116f0:	6921      	ldr	r1, [r4, #16]
 80116f2:	464a      	mov	r2, r9
 80116f4:	f7ff ff7f 	bl	80115f6 <memcpy>
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80116fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	6126      	str	r6, [r4, #16]
 8011706:	6165      	str	r5, [r4, #20]
 8011708:	444e      	add	r6, r9
 801170a:	eba5 0509 	sub.w	r5, r5, r9
 801170e:	6026      	str	r6, [r4, #0]
 8011710:	60a5      	str	r5, [r4, #8]
 8011712:	463e      	mov	r6, r7
 8011714:	42be      	cmp	r6, r7
 8011716:	d900      	bls.n	801171a <__ssputs_r+0x72>
 8011718:	463e      	mov	r6, r7
 801171a:	6820      	ldr	r0, [r4, #0]
 801171c:	4632      	mov	r2, r6
 801171e:	4641      	mov	r1, r8
 8011720:	f000 fbb6 	bl	8011e90 <memmove>
 8011724:	68a3      	ldr	r3, [r4, #8]
 8011726:	1b9b      	subs	r3, r3, r6
 8011728:	60a3      	str	r3, [r4, #8]
 801172a:	6823      	ldr	r3, [r4, #0]
 801172c:	4433      	add	r3, r6
 801172e:	6023      	str	r3, [r4, #0]
 8011730:	2000      	movs	r0, #0
 8011732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011736:	462a      	mov	r2, r5
 8011738:	f000 fbe6 	bl	8011f08 <_realloc_r>
 801173c:	4606      	mov	r6, r0
 801173e:	2800      	cmp	r0, #0
 8011740:	d1e0      	bne.n	8011704 <__ssputs_r+0x5c>
 8011742:	6921      	ldr	r1, [r4, #16]
 8011744:	4650      	mov	r0, sl
 8011746:	f7ff ff65 	bl	8011614 <_free_r>
 801174a:	230c      	movs	r3, #12
 801174c:	f8ca 3000 	str.w	r3, [sl]
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011756:	81a3      	strh	r3, [r4, #12]
 8011758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801175c:	e7e9      	b.n	8011732 <__ssputs_r+0x8a>
	...

08011760 <_svfiprintf_r>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	4698      	mov	r8, r3
 8011766:	898b      	ldrh	r3, [r1, #12]
 8011768:	061b      	lsls	r3, r3, #24
 801176a:	b09d      	sub	sp, #116	@ 0x74
 801176c:	4607      	mov	r7, r0
 801176e:	460d      	mov	r5, r1
 8011770:	4614      	mov	r4, r2
 8011772:	d510      	bpl.n	8011796 <_svfiprintf_r+0x36>
 8011774:	690b      	ldr	r3, [r1, #16]
 8011776:	b973      	cbnz	r3, 8011796 <_svfiprintf_r+0x36>
 8011778:	2140      	movs	r1, #64	@ 0x40
 801177a:	f7ff fbaf 	bl	8010edc <_malloc_r>
 801177e:	6028      	str	r0, [r5, #0]
 8011780:	6128      	str	r0, [r5, #16]
 8011782:	b930      	cbnz	r0, 8011792 <_svfiprintf_r+0x32>
 8011784:	230c      	movs	r3, #12
 8011786:	603b      	str	r3, [r7, #0]
 8011788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801178c:	b01d      	add	sp, #116	@ 0x74
 801178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011792:	2340      	movs	r3, #64	@ 0x40
 8011794:	616b      	str	r3, [r5, #20]
 8011796:	2300      	movs	r3, #0
 8011798:	9309      	str	r3, [sp, #36]	@ 0x24
 801179a:	2320      	movs	r3, #32
 801179c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80117a4:	2330      	movs	r3, #48	@ 0x30
 80117a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011944 <_svfiprintf_r+0x1e4>
 80117aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117ae:	f04f 0901 	mov.w	r9, #1
 80117b2:	4623      	mov	r3, r4
 80117b4:	469a      	mov	sl, r3
 80117b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117ba:	b10a      	cbz	r2, 80117c0 <_svfiprintf_r+0x60>
 80117bc:	2a25      	cmp	r2, #37	@ 0x25
 80117be:	d1f9      	bne.n	80117b4 <_svfiprintf_r+0x54>
 80117c0:	ebba 0b04 	subs.w	fp, sl, r4
 80117c4:	d00b      	beq.n	80117de <_svfiprintf_r+0x7e>
 80117c6:	465b      	mov	r3, fp
 80117c8:	4622      	mov	r2, r4
 80117ca:	4629      	mov	r1, r5
 80117cc:	4638      	mov	r0, r7
 80117ce:	f7ff ff6b 	bl	80116a8 <__ssputs_r>
 80117d2:	3001      	adds	r0, #1
 80117d4:	f000 80a7 	beq.w	8011926 <_svfiprintf_r+0x1c6>
 80117d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117da:	445a      	add	r2, fp
 80117dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80117de:	f89a 3000 	ldrb.w	r3, [sl]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 809f 	beq.w	8011926 <_svfiprintf_r+0x1c6>
 80117e8:	2300      	movs	r3, #0
 80117ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80117ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117f2:	f10a 0a01 	add.w	sl, sl, #1
 80117f6:	9304      	str	r3, [sp, #16]
 80117f8:	9307      	str	r3, [sp, #28]
 80117fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8011800:	4654      	mov	r4, sl
 8011802:	2205      	movs	r2, #5
 8011804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011808:	484e      	ldr	r0, [pc, #312]	@ (8011944 <_svfiprintf_r+0x1e4>)
 801180a:	f7ee fcf9 	bl	8000200 <memchr>
 801180e:	9a04      	ldr	r2, [sp, #16]
 8011810:	b9d8      	cbnz	r0, 801184a <_svfiprintf_r+0xea>
 8011812:	06d0      	lsls	r0, r2, #27
 8011814:	bf44      	itt	mi
 8011816:	2320      	movmi	r3, #32
 8011818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801181c:	0711      	lsls	r1, r2, #28
 801181e:	bf44      	itt	mi
 8011820:	232b      	movmi	r3, #43	@ 0x2b
 8011822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011826:	f89a 3000 	ldrb.w	r3, [sl]
 801182a:	2b2a      	cmp	r3, #42	@ 0x2a
 801182c:	d015      	beq.n	801185a <_svfiprintf_r+0xfa>
 801182e:	9a07      	ldr	r2, [sp, #28]
 8011830:	4654      	mov	r4, sl
 8011832:	2000      	movs	r0, #0
 8011834:	f04f 0c0a 	mov.w	ip, #10
 8011838:	4621      	mov	r1, r4
 801183a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801183e:	3b30      	subs	r3, #48	@ 0x30
 8011840:	2b09      	cmp	r3, #9
 8011842:	d94b      	bls.n	80118dc <_svfiprintf_r+0x17c>
 8011844:	b1b0      	cbz	r0, 8011874 <_svfiprintf_r+0x114>
 8011846:	9207      	str	r2, [sp, #28]
 8011848:	e014      	b.n	8011874 <_svfiprintf_r+0x114>
 801184a:	eba0 0308 	sub.w	r3, r0, r8
 801184e:	fa09 f303 	lsl.w	r3, r9, r3
 8011852:	4313      	orrs	r3, r2
 8011854:	9304      	str	r3, [sp, #16]
 8011856:	46a2      	mov	sl, r4
 8011858:	e7d2      	b.n	8011800 <_svfiprintf_r+0xa0>
 801185a:	9b03      	ldr	r3, [sp, #12]
 801185c:	1d19      	adds	r1, r3, #4
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	9103      	str	r1, [sp, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	bfbb      	ittet	lt
 8011866:	425b      	neglt	r3, r3
 8011868:	f042 0202 	orrlt.w	r2, r2, #2
 801186c:	9307      	strge	r3, [sp, #28]
 801186e:	9307      	strlt	r3, [sp, #28]
 8011870:	bfb8      	it	lt
 8011872:	9204      	strlt	r2, [sp, #16]
 8011874:	7823      	ldrb	r3, [r4, #0]
 8011876:	2b2e      	cmp	r3, #46	@ 0x2e
 8011878:	d10a      	bne.n	8011890 <_svfiprintf_r+0x130>
 801187a:	7863      	ldrb	r3, [r4, #1]
 801187c:	2b2a      	cmp	r3, #42	@ 0x2a
 801187e:	d132      	bne.n	80118e6 <_svfiprintf_r+0x186>
 8011880:	9b03      	ldr	r3, [sp, #12]
 8011882:	1d1a      	adds	r2, r3, #4
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	9203      	str	r2, [sp, #12]
 8011888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801188c:	3402      	adds	r4, #2
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011954 <_svfiprintf_r+0x1f4>
 8011894:	7821      	ldrb	r1, [r4, #0]
 8011896:	2203      	movs	r2, #3
 8011898:	4650      	mov	r0, sl
 801189a:	f7ee fcb1 	bl	8000200 <memchr>
 801189e:	b138      	cbz	r0, 80118b0 <_svfiprintf_r+0x150>
 80118a0:	9b04      	ldr	r3, [sp, #16]
 80118a2:	eba0 000a 	sub.w	r0, r0, sl
 80118a6:	2240      	movs	r2, #64	@ 0x40
 80118a8:	4082      	lsls	r2, r0
 80118aa:	4313      	orrs	r3, r2
 80118ac:	3401      	adds	r4, #1
 80118ae:	9304      	str	r3, [sp, #16]
 80118b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118b4:	4824      	ldr	r0, [pc, #144]	@ (8011948 <_svfiprintf_r+0x1e8>)
 80118b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118ba:	2206      	movs	r2, #6
 80118bc:	f7ee fca0 	bl	8000200 <memchr>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d036      	beq.n	8011932 <_svfiprintf_r+0x1d2>
 80118c4:	4b21      	ldr	r3, [pc, #132]	@ (801194c <_svfiprintf_r+0x1ec>)
 80118c6:	bb1b      	cbnz	r3, 8011910 <_svfiprintf_r+0x1b0>
 80118c8:	9b03      	ldr	r3, [sp, #12]
 80118ca:	3307      	adds	r3, #7
 80118cc:	f023 0307 	bic.w	r3, r3, #7
 80118d0:	3308      	adds	r3, #8
 80118d2:	9303      	str	r3, [sp, #12]
 80118d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118d6:	4433      	add	r3, r6
 80118d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80118da:	e76a      	b.n	80117b2 <_svfiprintf_r+0x52>
 80118dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80118e0:	460c      	mov	r4, r1
 80118e2:	2001      	movs	r0, #1
 80118e4:	e7a8      	b.n	8011838 <_svfiprintf_r+0xd8>
 80118e6:	2300      	movs	r3, #0
 80118e8:	3401      	adds	r4, #1
 80118ea:	9305      	str	r3, [sp, #20]
 80118ec:	4619      	mov	r1, r3
 80118ee:	f04f 0c0a 	mov.w	ip, #10
 80118f2:	4620      	mov	r0, r4
 80118f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118f8:	3a30      	subs	r2, #48	@ 0x30
 80118fa:	2a09      	cmp	r2, #9
 80118fc:	d903      	bls.n	8011906 <_svfiprintf_r+0x1a6>
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0c6      	beq.n	8011890 <_svfiprintf_r+0x130>
 8011902:	9105      	str	r1, [sp, #20]
 8011904:	e7c4      	b.n	8011890 <_svfiprintf_r+0x130>
 8011906:	fb0c 2101 	mla	r1, ip, r1, r2
 801190a:	4604      	mov	r4, r0
 801190c:	2301      	movs	r3, #1
 801190e:	e7f0      	b.n	80118f2 <_svfiprintf_r+0x192>
 8011910:	ab03      	add	r3, sp, #12
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	462a      	mov	r2, r5
 8011916:	4b0e      	ldr	r3, [pc, #56]	@ (8011950 <_svfiprintf_r+0x1f0>)
 8011918:	a904      	add	r1, sp, #16
 801191a:	4638      	mov	r0, r7
 801191c:	f3af 8000 	nop.w
 8011920:	1c42      	adds	r2, r0, #1
 8011922:	4606      	mov	r6, r0
 8011924:	d1d6      	bne.n	80118d4 <_svfiprintf_r+0x174>
 8011926:	89ab      	ldrh	r3, [r5, #12]
 8011928:	065b      	lsls	r3, r3, #25
 801192a:	f53f af2d 	bmi.w	8011788 <_svfiprintf_r+0x28>
 801192e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011930:	e72c      	b.n	801178c <_svfiprintf_r+0x2c>
 8011932:	ab03      	add	r3, sp, #12
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	462a      	mov	r2, r5
 8011938:	4b05      	ldr	r3, [pc, #20]	@ (8011950 <_svfiprintf_r+0x1f0>)
 801193a:	a904      	add	r1, sp, #16
 801193c:	4638      	mov	r0, r7
 801193e:	f000 f879 	bl	8011a34 <_printf_i>
 8011942:	e7ed      	b.n	8011920 <_svfiprintf_r+0x1c0>
 8011944:	08012248 	.word	0x08012248
 8011948:	08012252 	.word	0x08012252
 801194c:	00000000 	.word	0x00000000
 8011950:	080116a9 	.word	0x080116a9
 8011954:	0801224e 	.word	0x0801224e

08011958 <_printf_common>:
 8011958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801195c:	4616      	mov	r6, r2
 801195e:	4698      	mov	r8, r3
 8011960:	688a      	ldr	r2, [r1, #8]
 8011962:	690b      	ldr	r3, [r1, #16]
 8011964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011968:	4293      	cmp	r3, r2
 801196a:	bfb8      	it	lt
 801196c:	4613      	movlt	r3, r2
 801196e:	6033      	str	r3, [r6, #0]
 8011970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011974:	4607      	mov	r7, r0
 8011976:	460c      	mov	r4, r1
 8011978:	b10a      	cbz	r2, 801197e <_printf_common+0x26>
 801197a:	3301      	adds	r3, #1
 801197c:	6033      	str	r3, [r6, #0]
 801197e:	6823      	ldr	r3, [r4, #0]
 8011980:	0699      	lsls	r1, r3, #26
 8011982:	bf42      	ittt	mi
 8011984:	6833      	ldrmi	r3, [r6, #0]
 8011986:	3302      	addmi	r3, #2
 8011988:	6033      	strmi	r3, [r6, #0]
 801198a:	6825      	ldr	r5, [r4, #0]
 801198c:	f015 0506 	ands.w	r5, r5, #6
 8011990:	d106      	bne.n	80119a0 <_printf_common+0x48>
 8011992:	f104 0a19 	add.w	sl, r4, #25
 8011996:	68e3      	ldr	r3, [r4, #12]
 8011998:	6832      	ldr	r2, [r6, #0]
 801199a:	1a9b      	subs	r3, r3, r2
 801199c:	42ab      	cmp	r3, r5
 801199e:	dc26      	bgt.n	80119ee <_printf_common+0x96>
 80119a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80119a4:	6822      	ldr	r2, [r4, #0]
 80119a6:	3b00      	subs	r3, #0
 80119a8:	bf18      	it	ne
 80119aa:	2301      	movne	r3, #1
 80119ac:	0692      	lsls	r2, r2, #26
 80119ae:	d42b      	bmi.n	8011a08 <_printf_common+0xb0>
 80119b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80119b4:	4641      	mov	r1, r8
 80119b6:	4638      	mov	r0, r7
 80119b8:	47c8      	blx	r9
 80119ba:	3001      	adds	r0, #1
 80119bc:	d01e      	beq.n	80119fc <_printf_common+0xa4>
 80119be:	6823      	ldr	r3, [r4, #0]
 80119c0:	6922      	ldr	r2, [r4, #16]
 80119c2:	f003 0306 	and.w	r3, r3, #6
 80119c6:	2b04      	cmp	r3, #4
 80119c8:	bf02      	ittt	eq
 80119ca:	68e5      	ldreq	r5, [r4, #12]
 80119cc:	6833      	ldreq	r3, [r6, #0]
 80119ce:	1aed      	subeq	r5, r5, r3
 80119d0:	68a3      	ldr	r3, [r4, #8]
 80119d2:	bf0c      	ite	eq
 80119d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80119d8:	2500      	movne	r5, #0
 80119da:	4293      	cmp	r3, r2
 80119dc:	bfc4      	itt	gt
 80119de:	1a9b      	subgt	r3, r3, r2
 80119e0:	18ed      	addgt	r5, r5, r3
 80119e2:	2600      	movs	r6, #0
 80119e4:	341a      	adds	r4, #26
 80119e6:	42b5      	cmp	r5, r6
 80119e8:	d11a      	bne.n	8011a20 <_printf_common+0xc8>
 80119ea:	2000      	movs	r0, #0
 80119ec:	e008      	b.n	8011a00 <_printf_common+0xa8>
 80119ee:	2301      	movs	r3, #1
 80119f0:	4652      	mov	r2, sl
 80119f2:	4641      	mov	r1, r8
 80119f4:	4638      	mov	r0, r7
 80119f6:	47c8      	blx	r9
 80119f8:	3001      	adds	r0, #1
 80119fa:	d103      	bne.n	8011a04 <_printf_common+0xac>
 80119fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a04:	3501      	adds	r5, #1
 8011a06:	e7c6      	b.n	8011996 <_printf_common+0x3e>
 8011a08:	18e1      	adds	r1, r4, r3
 8011a0a:	1c5a      	adds	r2, r3, #1
 8011a0c:	2030      	movs	r0, #48	@ 0x30
 8011a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011a12:	4422      	add	r2, r4
 8011a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011a1c:	3302      	adds	r3, #2
 8011a1e:	e7c7      	b.n	80119b0 <_printf_common+0x58>
 8011a20:	2301      	movs	r3, #1
 8011a22:	4622      	mov	r2, r4
 8011a24:	4641      	mov	r1, r8
 8011a26:	4638      	mov	r0, r7
 8011a28:	47c8      	blx	r9
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	d0e6      	beq.n	80119fc <_printf_common+0xa4>
 8011a2e:	3601      	adds	r6, #1
 8011a30:	e7d9      	b.n	80119e6 <_printf_common+0x8e>
	...

08011a34 <_printf_i>:
 8011a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a38:	7e0f      	ldrb	r7, [r1, #24]
 8011a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a3c:	2f78      	cmp	r7, #120	@ 0x78
 8011a3e:	4691      	mov	r9, r2
 8011a40:	4680      	mov	r8, r0
 8011a42:	460c      	mov	r4, r1
 8011a44:	469a      	mov	sl, r3
 8011a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011a4a:	d807      	bhi.n	8011a5c <_printf_i+0x28>
 8011a4c:	2f62      	cmp	r7, #98	@ 0x62
 8011a4e:	d80a      	bhi.n	8011a66 <_printf_i+0x32>
 8011a50:	2f00      	cmp	r7, #0
 8011a52:	f000 80d2 	beq.w	8011bfa <_printf_i+0x1c6>
 8011a56:	2f58      	cmp	r7, #88	@ 0x58
 8011a58:	f000 80b9 	beq.w	8011bce <_printf_i+0x19a>
 8011a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011a64:	e03a      	b.n	8011adc <_printf_i+0xa8>
 8011a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011a6a:	2b15      	cmp	r3, #21
 8011a6c:	d8f6      	bhi.n	8011a5c <_printf_i+0x28>
 8011a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8011a74 <_printf_i+0x40>)
 8011a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a74:	08011acd 	.word	0x08011acd
 8011a78:	08011ae1 	.word	0x08011ae1
 8011a7c:	08011a5d 	.word	0x08011a5d
 8011a80:	08011a5d 	.word	0x08011a5d
 8011a84:	08011a5d 	.word	0x08011a5d
 8011a88:	08011a5d 	.word	0x08011a5d
 8011a8c:	08011ae1 	.word	0x08011ae1
 8011a90:	08011a5d 	.word	0x08011a5d
 8011a94:	08011a5d 	.word	0x08011a5d
 8011a98:	08011a5d 	.word	0x08011a5d
 8011a9c:	08011a5d 	.word	0x08011a5d
 8011aa0:	08011be1 	.word	0x08011be1
 8011aa4:	08011b0b 	.word	0x08011b0b
 8011aa8:	08011b9b 	.word	0x08011b9b
 8011aac:	08011a5d 	.word	0x08011a5d
 8011ab0:	08011a5d 	.word	0x08011a5d
 8011ab4:	08011c03 	.word	0x08011c03
 8011ab8:	08011a5d 	.word	0x08011a5d
 8011abc:	08011b0b 	.word	0x08011b0b
 8011ac0:	08011a5d 	.word	0x08011a5d
 8011ac4:	08011a5d 	.word	0x08011a5d
 8011ac8:	08011ba3 	.word	0x08011ba3
 8011acc:	6833      	ldr	r3, [r6, #0]
 8011ace:	1d1a      	adds	r2, r3, #4
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6032      	str	r2, [r6, #0]
 8011ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011adc:	2301      	movs	r3, #1
 8011ade:	e09d      	b.n	8011c1c <_printf_i+0x1e8>
 8011ae0:	6833      	ldr	r3, [r6, #0]
 8011ae2:	6820      	ldr	r0, [r4, #0]
 8011ae4:	1d19      	adds	r1, r3, #4
 8011ae6:	6031      	str	r1, [r6, #0]
 8011ae8:	0606      	lsls	r6, r0, #24
 8011aea:	d501      	bpl.n	8011af0 <_printf_i+0xbc>
 8011aec:	681d      	ldr	r5, [r3, #0]
 8011aee:	e003      	b.n	8011af8 <_printf_i+0xc4>
 8011af0:	0645      	lsls	r5, r0, #25
 8011af2:	d5fb      	bpl.n	8011aec <_printf_i+0xb8>
 8011af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011af8:	2d00      	cmp	r5, #0
 8011afa:	da03      	bge.n	8011b04 <_printf_i+0xd0>
 8011afc:	232d      	movs	r3, #45	@ 0x2d
 8011afe:	426d      	negs	r5, r5
 8011b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b04:	4859      	ldr	r0, [pc, #356]	@ (8011c6c <_printf_i+0x238>)
 8011b06:	230a      	movs	r3, #10
 8011b08:	e011      	b.n	8011b2e <_printf_i+0xfa>
 8011b0a:	6821      	ldr	r1, [r4, #0]
 8011b0c:	6833      	ldr	r3, [r6, #0]
 8011b0e:	0608      	lsls	r0, r1, #24
 8011b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8011b14:	d402      	bmi.n	8011b1c <_printf_i+0xe8>
 8011b16:	0649      	lsls	r1, r1, #25
 8011b18:	bf48      	it	mi
 8011b1a:	b2ad      	uxthmi	r5, r5
 8011b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8011b1e:	4853      	ldr	r0, [pc, #332]	@ (8011c6c <_printf_i+0x238>)
 8011b20:	6033      	str	r3, [r6, #0]
 8011b22:	bf14      	ite	ne
 8011b24:	230a      	movne	r3, #10
 8011b26:	2308      	moveq	r3, #8
 8011b28:	2100      	movs	r1, #0
 8011b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011b2e:	6866      	ldr	r6, [r4, #4]
 8011b30:	60a6      	str	r6, [r4, #8]
 8011b32:	2e00      	cmp	r6, #0
 8011b34:	bfa2      	ittt	ge
 8011b36:	6821      	ldrge	r1, [r4, #0]
 8011b38:	f021 0104 	bicge.w	r1, r1, #4
 8011b3c:	6021      	strge	r1, [r4, #0]
 8011b3e:	b90d      	cbnz	r5, 8011b44 <_printf_i+0x110>
 8011b40:	2e00      	cmp	r6, #0
 8011b42:	d04b      	beq.n	8011bdc <_printf_i+0x1a8>
 8011b44:	4616      	mov	r6, r2
 8011b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8011b4e:	5dc7      	ldrb	r7, [r0, r7]
 8011b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b54:	462f      	mov	r7, r5
 8011b56:	42bb      	cmp	r3, r7
 8011b58:	460d      	mov	r5, r1
 8011b5a:	d9f4      	bls.n	8011b46 <_printf_i+0x112>
 8011b5c:	2b08      	cmp	r3, #8
 8011b5e:	d10b      	bne.n	8011b78 <_printf_i+0x144>
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	07df      	lsls	r7, r3, #31
 8011b64:	d508      	bpl.n	8011b78 <_printf_i+0x144>
 8011b66:	6923      	ldr	r3, [r4, #16]
 8011b68:	6861      	ldr	r1, [r4, #4]
 8011b6a:	4299      	cmp	r1, r3
 8011b6c:	bfde      	ittt	le
 8011b6e:	2330      	movle	r3, #48	@ 0x30
 8011b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011b74:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011b78:	1b92      	subs	r2, r2, r6
 8011b7a:	6122      	str	r2, [r4, #16]
 8011b7c:	f8cd a000 	str.w	sl, [sp]
 8011b80:	464b      	mov	r3, r9
 8011b82:	aa03      	add	r2, sp, #12
 8011b84:	4621      	mov	r1, r4
 8011b86:	4640      	mov	r0, r8
 8011b88:	f7ff fee6 	bl	8011958 <_printf_common>
 8011b8c:	3001      	adds	r0, #1
 8011b8e:	d14a      	bne.n	8011c26 <_printf_i+0x1f2>
 8011b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b94:	b004      	add	sp, #16
 8011b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	f043 0320 	orr.w	r3, r3, #32
 8011ba0:	6023      	str	r3, [r4, #0]
 8011ba2:	4833      	ldr	r0, [pc, #204]	@ (8011c70 <_printf_i+0x23c>)
 8011ba4:	2778      	movs	r7, #120	@ 0x78
 8011ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	6831      	ldr	r1, [r6, #0]
 8011bae:	061f      	lsls	r7, r3, #24
 8011bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8011bb4:	d402      	bmi.n	8011bbc <_printf_i+0x188>
 8011bb6:	065f      	lsls	r7, r3, #25
 8011bb8:	bf48      	it	mi
 8011bba:	b2ad      	uxthmi	r5, r5
 8011bbc:	6031      	str	r1, [r6, #0]
 8011bbe:	07d9      	lsls	r1, r3, #31
 8011bc0:	bf44      	itt	mi
 8011bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8011bc6:	6023      	strmi	r3, [r4, #0]
 8011bc8:	b11d      	cbz	r5, 8011bd2 <_printf_i+0x19e>
 8011bca:	2310      	movs	r3, #16
 8011bcc:	e7ac      	b.n	8011b28 <_printf_i+0xf4>
 8011bce:	4827      	ldr	r0, [pc, #156]	@ (8011c6c <_printf_i+0x238>)
 8011bd0:	e7e9      	b.n	8011ba6 <_printf_i+0x172>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	f023 0320 	bic.w	r3, r3, #32
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	e7f6      	b.n	8011bca <_printf_i+0x196>
 8011bdc:	4616      	mov	r6, r2
 8011bde:	e7bd      	b.n	8011b5c <_printf_i+0x128>
 8011be0:	6833      	ldr	r3, [r6, #0]
 8011be2:	6825      	ldr	r5, [r4, #0]
 8011be4:	6961      	ldr	r1, [r4, #20]
 8011be6:	1d18      	adds	r0, r3, #4
 8011be8:	6030      	str	r0, [r6, #0]
 8011bea:	062e      	lsls	r6, r5, #24
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	d501      	bpl.n	8011bf4 <_printf_i+0x1c0>
 8011bf0:	6019      	str	r1, [r3, #0]
 8011bf2:	e002      	b.n	8011bfa <_printf_i+0x1c6>
 8011bf4:	0668      	lsls	r0, r5, #25
 8011bf6:	d5fb      	bpl.n	8011bf0 <_printf_i+0x1bc>
 8011bf8:	8019      	strh	r1, [r3, #0]
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	6123      	str	r3, [r4, #16]
 8011bfe:	4616      	mov	r6, r2
 8011c00:	e7bc      	b.n	8011b7c <_printf_i+0x148>
 8011c02:	6833      	ldr	r3, [r6, #0]
 8011c04:	1d1a      	adds	r2, r3, #4
 8011c06:	6032      	str	r2, [r6, #0]
 8011c08:	681e      	ldr	r6, [r3, #0]
 8011c0a:	6862      	ldr	r2, [r4, #4]
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f7ee faf6 	bl	8000200 <memchr>
 8011c14:	b108      	cbz	r0, 8011c1a <_printf_i+0x1e6>
 8011c16:	1b80      	subs	r0, r0, r6
 8011c18:	6060      	str	r0, [r4, #4]
 8011c1a:	6863      	ldr	r3, [r4, #4]
 8011c1c:	6123      	str	r3, [r4, #16]
 8011c1e:	2300      	movs	r3, #0
 8011c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c24:	e7aa      	b.n	8011b7c <_printf_i+0x148>
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	4632      	mov	r2, r6
 8011c2a:	4649      	mov	r1, r9
 8011c2c:	4640      	mov	r0, r8
 8011c2e:	47d0      	blx	sl
 8011c30:	3001      	adds	r0, #1
 8011c32:	d0ad      	beq.n	8011b90 <_printf_i+0x15c>
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	079b      	lsls	r3, r3, #30
 8011c38:	d413      	bmi.n	8011c62 <_printf_i+0x22e>
 8011c3a:	68e0      	ldr	r0, [r4, #12]
 8011c3c:	9b03      	ldr	r3, [sp, #12]
 8011c3e:	4298      	cmp	r0, r3
 8011c40:	bfb8      	it	lt
 8011c42:	4618      	movlt	r0, r3
 8011c44:	e7a6      	b.n	8011b94 <_printf_i+0x160>
 8011c46:	2301      	movs	r3, #1
 8011c48:	4632      	mov	r2, r6
 8011c4a:	4649      	mov	r1, r9
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	47d0      	blx	sl
 8011c50:	3001      	adds	r0, #1
 8011c52:	d09d      	beq.n	8011b90 <_printf_i+0x15c>
 8011c54:	3501      	adds	r5, #1
 8011c56:	68e3      	ldr	r3, [r4, #12]
 8011c58:	9903      	ldr	r1, [sp, #12]
 8011c5a:	1a5b      	subs	r3, r3, r1
 8011c5c:	42ab      	cmp	r3, r5
 8011c5e:	dcf2      	bgt.n	8011c46 <_printf_i+0x212>
 8011c60:	e7eb      	b.n	8011c3a <_printf_i+0x206>
 8011c62:	2500      	movs	r5, #0
 8011c64:	f104 0619 	add.w	r6, r4, #25
 8011c68:	e7f5      	b.n	8011c56 <_printf_i+0x222>
 8011c6a:	bf00      	nop
 8011c6c:	08012259 	.word	0x08012259
 8011c70:	0801226a 	.word	0x0801226a

08011c74 <__sflush_r>:
 8011c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7c:	0716      	lsls	r6, r2, #28
 8011c7e:	4605      	mov	r5, r0
 8011c80:	460c      	mov	r4, r1
 8011c82:	d454      	bmi.n	8011d2e <__sflush_r+0xba>
 8011c84:	684b      	ldr	r3, [r1, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dc02      	bgt.n	8011c90 <__sflush_r+0x1c>
 8011c8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	dd48      	ble.n	8011d22 <__sflush_r+0xae>
 8011c90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c92:	2e00      	cmp	r6, #0
 8011c94:	d045      	beq.n	8011d22 <__sflush_r+0xae>
 8011c96:	2300      	movs	r3, #0
 8011c98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c9c:	682f      	ldr	r7, [r5, #0]
 8011c9e:	6a21      	ldr	r1, [r4, #32]
 8011ca0:	602b      	str	r3, [r5, #0]
 8011ca2:	d030      	beq.n	8011d06 <__sflush_r+0x92>
 8011ca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011ca6:	89a3      	ldrh	r3, [r4, #12]
 8011ca8:	0759      	lsls	r1, r3, #29
 8011caa:	d505      	bpl.n	8011cb8 <__sflush_r+0x44>
 8011cac:	6863      	ldr	r3, [r4, #4]
 8011cae:	1ad2      	subs	r2, r2, r3
 8011cb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011cb2:	b10b      	cbz	r3, 8011cb8 <__sflush_r+0x44>
 8011cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011cb6:	1ad2      	subs	r2, r2, r3
 8011cb8:	2300      	movs	r3, #0
 8011cba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cbc:	6a21      	ldr	r1, [r4, #32]
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	47b0      	blx	r6
 8011cc2:	1c43      	adds	r3, r0, #1
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	d106      	bne.n	8011cd6 <__sflush_r+0x62>
 8011cc8:	6829      	ldr	r1, [r5, #0]
 8011cca:	291d      	cmp	r1, #29
 8011ccc:	d82b      	bhi.n	8011d26 <__sflush_r+0xb2>
 8011cce:	4a2a      	ldr	r2, [pc, #168]	@ (8011d78 <__sflush_r+0x104>)
 8011cd0:	410a      	asrs	r2, r1
 8011cd2:	07d6      	lsls	r6, r2, #31
 8011cd4:	d427      	bmi.n	8011d26 <__sflush_r+0xb2>
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	6062      	str	r2, [r4, #4]
 8011cda:	04d9      	lsls	r1, r3, #19
 8011cdc:	6922      	ldr	r2, [r4, #16]
 8011cde:	6022      	str	r2, [r4, #0]
 8011ce0:	d504      	bpl.n	8011cec <__sflush_r+0x78>
 8011ce2:	1c42      	adds	r2, r0, #1
 8011ce4:	d101      	bne.n	8011cea <__sflush_r+0x76>
 8011ce6:	682b      	ldr	r3, [r5, #0]
 8011ce8:	b903      	cbnz	r3, 8011cec <__sflush_r+0x78>
 8011cea:	6560      	str	r0, [r4, #84]	@ 0x54
 8011cec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cee:	602f      	str	r7, [r5, #0]
 8011cf0:	b1b9      	cbz	r1, 8011d22 <__sflush_r+0xae>
 8011cf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cf6:	4299      	cmp	r1, r3
 8011cf8:	d002      	beq.n	8011d00 <__sflush_r+0x8c>
 8011cfa:	4628      	mov	r0, r5
 8011cfc:	f7ff fc8a 	bl	8011614 <_free_r>
 8011d00:	2300      	movs	r3, #0
 8011d02:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d04:	e00d      	b.n	8011d22 <__sflush_r+0xae>
 8011d06:	2301      	movs	r3, #1
 8011d08:	4628      	mov	r0, r5
 8011d0a:	47b0      	blx	r6
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	1c50      	adds	r0, r2, #1
 8011d10:	d1c9      	bne.n	8011ca6 <__sflush_r+0x32>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d0c6      	beq.n	8011ca6 <__sflush_r+0x32>
 8011d18:	2b1d      	cmp	r3, #29
 8011d1a:	d001      	beq.n	8011d20 <__sflush_r+0xac>
 8011d1c:	2b16      	cmp	r3, #22
 8011d1e:	d11e      	bne.n	8011d5e <__sflush_r+0xea>
 8011d20:	602f      	str	r7, [r5, #0]
 8011d22:	2000      	movs	r0, #0
 8011d24:	e022      	b.n	8011d6c <__sflush_r+0xf8>
 8011d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d2a:	b21b      	sxth	r3, r3
 8011d2c:	e01b      	b.n	8011d66 <__sflush_r+0xf2>
 8011d2e:	690f      	ldr	r7, [r1, #16]
 8011d30:	2f00      	cmp	r7, #0
 8011d32:	d0f6      	beq.n	8011d22 <__sflush_r+0xae>
 8011d34:	0793      	lsls	r3, r2, #30
 8011d36:	680e      	ldr	r6, [r1, #0]
 8011d38:	bf08      	it	eq
 8011d3a:	694b      	ldreq	r3, [r1, #20]
 8011d3c:	600f      	str	r7, [r1, #0]
 8011d3e:	bf18      	it	ne
 8011d40:	2300      	movne	r3, #0
 8011d42:	eba6 0807 	sub.w	r8, r6, r7
 8011d46:	608b      	str	r3, [r1, #8]
 8011d48:	f1b8 0f00 	cmp.w	r8, #0
 8011d4c:	dde9      	ble.n	8011d22 <__sflush_r+0xae>
 8011d4e:	6a21      	ldr	r1, [r4, #32]
 8011d50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d52:	4643      	mov	r3, r8
 8011d54:	463a      	mov	r2, r7
 8011d56:	4628      	mov	r0, r5
 8011d58:	47b0      	blx	r6
 8011d5a:	2800      	cmp	r0, #0
 8011d5c:	dc08      	bgt.n	8011d70 <__sflush_r+0xfc>
 8011d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d66:	81a3      	strh	r3, [r4, #12]
 8011d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d70:	4407      	add	r7, r0
 8011d72:	eba8 0800 	sub.w	r8, r8, r0
 8011d76:	e7e7      	b.n	8011d48 <__sflush_r+0xd4>
 8011d78:	dfbffffe 	.word	0xdfbffffe

08011d7c <_fflush_r>:
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	690b      	ldr	r3, [r1, #16]
 8011d80:	4605      	mov	r5, r0
 8011d82:	460c      	mov	r4, r1
 8011d84:	b913      	cbnz	r3, 8011d8c <_fflush_r+0x10>
 8011d86:	2500      	movs	r5, #0
 8011d88:	4628      	mov	r0, r5
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	b118      	cbz	r0, 8011d96 <_fflush_r+0x1a>
 8011d8e:	6a03      	ldr	r3, [r0, #32]
 8011d90:	b90b      	cbnz	r3, 8011d96 <_fflush_r+0x1a>
 8011d92:	f7ff f9bb 	bl	801110c <__sinit>
 8011d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d0f3      	beq.n	8011d86 <_fflush_r+0xa>
 8011d9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011da0:	07d0      	lsls	r0, r2, #31
 8011da2:	d404      	bmi.n	8011dae <_fflush_r+0x32>
 8011da4:	0599      	lsls	r1, r3, #22
 8011da6:	d402      	bmi.n	8011dae <_fflush_r+0x32>
 8011da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011daa:	f7ff fc1a 	bl	80115e2 <__retarget_lock_acquire_recursive>
 8011dae:	4628      	mov	r0, r5
 8011db0:	4621      	mov	r1, r4
 8011db2:	f7ff ff5f 	bl	8011c74 <__sflush_r>
 8011db6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011db8:	07da      	lsls	r2, r3, #31
 8011dba:	4605      	mov	r5, r0
 8011dbc:	d4e4      	bmi.n	8011d88 <_fflush_r+0xc>
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	059b      	lsls	r3, r3, #22
 8011dc2:	d4e1      	bmi.n	8011d88 <_fflush_r+0xc>
 8011dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dc6:	f7ff fc0d 	bl	80115e4 <__retarget_lock_release_recursive>
 8011dca:	e7dd      	b.n	8011d88 <_fflush_r+0xc>

08011dcc <__swhatbuf_r>:
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	460c      	mov	r4, r1
 8011dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dd4:	2900      	cmp	r1, #0
 8011dd6:	b096      	sub	sp, #88	@ 0x58
 8011dd8:	4615      	mov	r5, r2
 8011dda:	461e      	mov	r6, r3
 8011ddc:	da0d      	bge.n	8011dfa <__swhatbuf_r+0x2e>
 8011dde:	89a3      	ldrh	r3, [r4, #12]
 8011de0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011de4:	f04f 0100 	mov.w	r1, #0
 8011de8:	bf14      	ite	ne
 8011dea:	2340      	movne	r3, #64	@ 0x40
 8011dec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011df0:	2000      	movs	r0, #0
 8011df2:	6031      	str	r1, [r6, #0]
 8011df4:	602b      	str	r3, [r5, #0]
 8011df6:	b016      	add	sp, #88	@ 0x58
 8011df8:	bd70      	pop	{r4, r5, r6, pc}
 8011dfa:	466a      	mov	r2, sp
 8011dfc:	f000 f862 	bl	8011ec4 <_fstat_r>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	dbec      	blt.n	8011dde <__swhatbuf_r+0x12>
 8011e04:	9901      	ldr	r1, [sp, #4]
 8011e06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e0e:	4259      	negs	r1, r3
 8011e10:	4159      	adcs	r1, r3
 8011e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e16:	e7eb      	b.n	8011df0 <__swhatbuf_r+0x24>

08011e18 <__smakebuf_r>:
 8011e18:	898b      	ldrh	r3, [r1, #12]
 8011e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e1c:	079d      	lsls	r5, r3, #30
 8011e1e:	4606      	mov	r6, r0
 8011e20:	460c      	mov	r4, r1
 8011e22:	d507      	bpl.n	8011e34 <__smakebuf_r+0x1c>
 8011e24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e28:	6023      	str	r3, [r4, #0]
 8011e2a:	6123      	str	r3, [r4, #16]
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	6163      	str	r3, [r4, #20]
 8011e30:	b003      	add	sp, #12
 8011e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e34:	ab01      	add	r3, sp, #4
 8011e36:	466a      	mov	r2, sp
 8011e38:	f7ff ffc8 	bl	8011dcc <__swhatbuf_r>
 8011e3c:	9f00      	ldr	r7, [sp, #0]
 8011e3e:	4605      	mov	r5, r0
 8011e40:	4639      	mov	r1, r7
 8011e42:	4630      	mov	r0, r6
 8011e44:	f7ff f84a 	bl	8010edc <_malloc_r>
 8011e48:	b948      	cbnz	r0, 8011e5e <__smakebuf_r+0x46>
 8011e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e4e:	059a      	lsls	r2, r3, #22
 8011e50:	d4ee      	bmi.n	8011e30 <__smakebuf_r+0x18>
 8011e52:	f023 0303 	bic.w	r3, r3, #3
 8011e56:	f043 0302 	orr.w	r3, r3, #2
 8011e5a:	81a3      	strh	r3, [r4, #12]
 8011e5c:	e7e2      	b.n	8011e24 <__smakebuf_r+0xc>
 8011e5e:	89a3      	ldrh	r3, [r4, #12]
 8011e60:	6020      	str	r0, [r4, #0]
 8011e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e66:	81a3      	strh	r3, [r4, #12]
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e6e:	b15b      	cbz	r3, 8011e88 <__smakebuf_r+0x70>
 8011e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e74:	4630      	mov	r0, r6
 8011e76:	f000 f837 	bl	8011ee8 <_isatty_r>
 8011e7a:	b128      	cbz	r0, 8011e88 <__smakebuf_r+0x70>
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	f023 0303 	bic.w	r3, r3, #3
 8011e82:	f043 0301 	orr.w	r3, r3, #1
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	89a3      	ldrh	r3, [r4, #12]
 8011e8a:	431d      	orrs	r5, r3
 8011e8c:	81a5      	strh	r5, [r4, #12]
 8011e8e:	e7cf      	b.n	8011e30 <__smakebuf_r+0x18>

08011e90 <memmove>:
 8011e90:	4288      	cmp	r0, r1
 8011e92:	b510      	push	{r4, lr}
 8011e94:	eb01 0402 	add.w	r4, r1, r2
 8011e98:	d902      	bls.n	8011ea0 <memmove+0x10>
 8011e9a:	4284      	cmp	r4, r0
 8011e9c:	4623      	mov	r3, r4
 8011e9e:	d807      	bhi.n	8011eb0 <memmove+0x20>
 8011ea0:	1e43      	subs	r3, r0, #1
 8011ea2:	42a1      	cmp	r1, r4
 8011ea4:	d008      	beq.n	8011eb8 <memmove+0x28>
 8011ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eae:	e7f8      	b.n	8011ea2 <memmove+0x12>
 8011eb0:	4402      	add	r2, r0
 8011eb2:	4601      	mov	r1, r0
 8011eb4:	428a      	cmp	r2, r1
 8011eb6:	d100      	bne.n	8011eba <memmove+0x2a>
 8011eb8:	bd10      	pop	{r4, pc}
 8011eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ec2:	e7f7      	b.n	8011eb4 <memmove+0x24>

08011ec4 <_fstat_r>:
 8011ec4:	b538      	push	{r3, r4, r5, lr}
 8011ec6:	4d07      	ldr	r5, [pc, #28]	@ (8011ee4 <_fstat_r+0x20>)
 8011ec8:	2300      	movs	r3, #0
 8011eca:	4604      	mov	r4, r0
 8011ecc:	4608      	mov	r0, r1
 8011ece:	4611      	mov	r1, r2
 8011ed0:	602b      	str	r3, [r5, #0]
 8011ed2:	f7ef ffea 	bl	8001eaa <_fstat>
 8011ed6:	1c43      	adds	r3, r0, #1
 8011ed8:	d102      	bne.n	8011ee0 <_fstat_r+0x1c>
 8011eda:	682b      	ldr	r3, [r5, #0]
 8011edc:	b103      	cbz	r3, 8011ee0 <_fstat_r+0x1c>
 8011ede:	6023      	str	r3, [r4, #0]
 8011ee0:	bd38      	pop	{r3, r4, r5, pc}
 8011ee2:	bf00      	nop
 8011ee4:	2000b494 	.word	0x2000b494

08011ee8 <_isatty_r>:
 8011ee8:	b538      	push	{r3, r4, r5, lr}
 8011eea:	4d06      	ldr	r5, [pc, #24]	@ (8011f04 <_isatty_r+0x1c>)
 8011eec:	2300      	movs	r3, #0
 8011eee:	4604      	mov	r4, r0
 8011ef0:	4608      	mov	r0, r1
 8011ef2:	602b      	str	r3, [r5, #0]
 8011ef4:	f7ef ffe9 	bl	8001eca <_isatty>
 8011ef8:	1c43      	adds	r3, r0, #1
 8011efa:	d102      	bne.n	8011f02 <_isatty_r+0x1a>
 8011efc:	682b      	ldr	r3, [r5, #0]
 8011efe:	b103      	cbz	r3, 8011f02 <_isatty_r+0x1a>
 8011f00:	6023      	str	r3, [r4, #0]
 8011f02:	bd38      	pop	{r3, r4, r5, pc}
 8011f04:	2000b494 	.word	0x2000b494

08011f08 <_realloc_r>:
 8011f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f0c:	4680      	mov	r8, r0
 8011f0e:	4615      	mov	r5, r2
 8011f10:	460c      	mov	r4, r1
 8011f12:	b921      	cbnz	r1, 8011f1e <_realloc_r+0x16>
 8011f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f18:	4611      	mov	r1, r2
 8011f1a:	f7fe bfdf 	b.w	8010edc <_malloc_r>
 8011f1e:	b92a      	cbnz	r2, 8011f2c <_realloc_r+0x24>
 8011f20:	f7ff fb78 	bl	8011614 <_free_r>
 8011f24:	2400      	movs	r4, #0
 8011f26:	4620      	mov	r0, r4
 8011f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f2c:	f000 f81a 	bl	8011f64 <_malloc_usable_size_r>
 8011f30:	4285      	cmp	r5, r0
 8011f32:	4606      	mov	r6, r0
 8011f34:	d802      	bhi.n	8011f3c <_realloc_r+0x34>
 8011f36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011f3a:	d8f4      	bhi.n	8011f26 <_realloc_r+0x1e>
 8011f3c:	4629      	mov	r1, r5
 8011f3e:	4640      	mov	r0, r8
 8011f40:	f7fe ffcc 	bl	8010edc <_malloc_r>
 8011f44:	4607      	mov	r7, r0
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d0ec      	beq.n	8011f24 <_realloc_r+0x1c>
 8011f4a:	42b5      	cmp	r5, r6
 8011f4c:	462a      	mov	r2, r5
 8011f4e:	4621      	mov	r1, r4
 8011f50:	bf28      	it	cs
 8011f52:	4632      	movcs	r2, r6
 8011f54:	f7ff fb4f 	bl	80115f6 <memcpy>
 8011f58:	4621      	mov	r1, r4
 8011f5a:	4640      	mov	r0, r8
 8011f5c:	f7ff fb5a 	bl	8011614 <_free_r>
 8011f60:	463c      	mov	r4, r7
 8011f62:	e7e0      	b.n	8011f26 <_realloc_r+0x1e>

08011f64 <_malloc_usable_size_r>:
 8011f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f68:	1f18      	subs	r0, r3, #4
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bfbc      	itt	lt
 8011f6e:	580b      	ldrlt	r3, [r1, r0]
 8011f70:	18c0      	addlt	r0, r0, r3
 8011f72:	4770      	bx	lr

08011f74 <_init>:
 8011f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f76:	bf00      	nop
 8011f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f7a:	bc08      	pop	{r3}
 8011f7c:	469e      	mov	lr, r3
 8011f7e:	4770      	bx	lr

08011f80 <_fini>:
 8011f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f82:	bf00      	nop
 8011f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f86:	bc08      	pop	{r3}
 8011f88:	469e      	mov	lr, r3
 8011f8a:	4770      	bx	lr
