
2024-IOS-MD02-Rodrigo-Laurinovics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0801063c  0801063c  0001163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108c8  080108c8  00012090  2**0
                  CONTENTS
  4 .ARM          00000008  080108c8  080108c8  000118c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108d0  080108d0  00012090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108d0  080108d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108d4  080108d4  000118d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080108d8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012090  2**0
                  CONTENTS
 10 .bss          00007b18  20000090  20000090  00012090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007ba8  20007ba8  00012090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c92e  00000000  00000000  000120c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000622d  00000000  00000000  0003e9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023b0  00000000  00000000  00044c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bb4  00000000  00000000  00046fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029254  00000000  00000000  00048b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cad1  00000000  00000000  00071dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7fc9  00000000  00000000  0009e8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00186872  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009cc4  00000000  00000000  001868b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0019057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010624 	.word	0x08010624

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08010624 	.word	0x08010624

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <LIS3DSH_WriteIO+0x4c>)
 800058a:	f002 f949 	bl	8002820 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 800058e:	f107 010f 	add.w	r1, r7, #15
 8000592:	230a      	movs	r3, #10
 8000594:	2201      	movs	r2, #1
 8000596:	480a      	ldr	r0, [pc, #40]	@ (80005c0 <LIS3DSH_WriteIO+0x50>)
 8000598:	f006 f8f1 	bl	800677e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	230a      	movs	r3, #10
 80005a2:	6839      	ldr	r1, [r7, #0]
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <LIS3DSH_WriteIO+0x50>)
 80005a6:	f006 f8ea 	bl	800677e <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80005aa:	2201      	movs	r2, #1
 80005ac:	2108      	movs	r1, #8
 80005ae:	4803      	ldr	r0, [pc, #12]	@ (80005bc <LIS3DSH_WriteIO+0x4c>)
 80005b0:	f002 f936 	bl	8002820 <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	200000ac 	.word	0x200000ac

080005c4 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	4818      	ldr	r0, [pc, #96]	@ (8000644 <LIS3DSH_ReadIO+0x80>)
 80005e4:	f002 f91c 	bl	8002820 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 80005e8:	f107 0108 	add.w	r1, r7, #8
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	4815      	ldr	r0, [pc, #84]	@ (8000648 <LIS3DSH_ReadIO+0x84>)
 80005f2:	f006 f8c4 	bl	800677e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f107 0108 	add.w	r1, r7, #8
 80005fe:	230a      	movs	r3, #10
 8000600:	4811      	ldr	r0, [pc, #68]	@ (8000648 <LIS3DSH_ReadIO+0x84>)
 8000602:	f006 f9ff 	bl	8006a04 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000606:	2201      	movs	r2, #1
 8000608:	2108      	movs	r1, #8
 800060a:	480e      	ldr	r0, [pc, #56]	@ (8000644 <LIS3DSH_ReadIO+0x80>)
 800060c:	f002 f908 	bl	8002820 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e00b      	b.n	800062e <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000616:	7bfa      	ldrb	r2, [r7, #15]
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	440b      	add	r3, r1
 800061e:	3210      	adds	r2, #16
 8000620:	443a      	add	r2, r7
 8000622:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000626:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	3301      	adds	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	7bfa      	ldrb	r2, [r7, #15]
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	429a      	cmp	r2, r3
 8000638:	dbed      	blt.n	8000616 <LIS3DSH_ReadIO+0x52>
	}
}
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	200000ac 	.word	0x200000ac

0800064c <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 800065a:	2258      	movs	r2, #88	@ 0x58
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	485b      	ldr	r0, [pc, #364]	@ (80007cc <LIS3DSH_Init+0x180>)
 8000660:	f00f fc52 	bl	800ff08 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	b25a      	sxtb	r2, r3
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	4313      	orrs	r3, r2
 8000676:	b25b      	sxtb	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b25b      	sxtb	r3, r3
 8000682:	f023 030f 	bic.w	r3, r3, #15
 8000686:	b25a      	sxtb	r2, r3
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	b25b      	sxtb	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b25b      	sxtb	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000694:	f107 030f 	add.w	r3, r7, #15
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	2020      	movs	r0, #32
 800069e:	f7ff ff67 	bl	8000570 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80006d6:	f107 030f 	add.w	r3, r7, #15
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	2024      	movs	r0, #36	@ 0x24
 80006e0:	f7ff ff46 	bl	8000570 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 80006ec:	2388      	movs	r3, #136	@ 0x88
 80006ee:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 80006f0:	f107 030f 	add.w	r3, r7, #15
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	2023      	movs	r0, #35	@ 0x23
 80006fa:	f7ff ff39 	bl	8000570 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	2b20      	cmp	r3, #32
 8000704:	d858      	bhi.n	80007b8 <LIS3DSH_Init+0x16c>
 8000706:	a201      	add	r2, pc, #4	@ (adr r2, 800070c <LIS3DSH_Init+0xc0>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	08000791 	.word	0x08000791
 8000710:	080007b9 	.word	0x080007b9
 8000714:	080007b9 	.word	0x080007b9
 8000718:	080007b9 	.word	0x080007b9
 800071c:	080007b9 	.word	0x080007b9
 8000720:	080007b9 	.word	0x080007b9
 8000724:	080007b9 	.word	0x080007b9
 8000728:	080007b9 	.word	0x080007b9
 800072c:	08000799 	.word	0x08000799
 8000730:	080007b9 	.word	0x080007b9
 8000734:	080007b9 	.word	0x080007b9
 8000738:	080007b9 	.word	0x080007b9
 800073c:	080007b9 	.word	0x080007b9
 8000740:	080007b9 	.word	0x080007b9
 8000744:	080007b9 	.word	0x080007b9
 8000748:	080007b9 	.word	0x080007b9
 800074c:	080007a1 	.word	0x080007a1
 8000750:	080007b9 	.word	0x080007b9
 8000754:	080007b9 	.word	0x080007b9
 8000758:	080007b9 	.word	0x080007b9
 800075c:	080007b9 	.word	0x080007b9
 8000760:	080007b9 	.word	0x080007b9
 8000764:	080007b9 	.word	0x080007b9
 8000768:	080007b9 	.word	0x080007b9
 800076c:	080007a9 	.word	0x080007a9
 8000770:	080007b9 	.word	0x080007b9
 8000774:	080007b9 	.word	0x080007b9
 8000778:	080007b9 	.word	0x080007b9
 800077c:	080007b9 	.word	0x080007b9
 8000780:	080007b9 	.word	0x080007b9
 8000784:	080007b9 	.word	0x080007b9
 8000788:	080007b9 	.word	0x080007b9
 800078c:	080007b1 	.word	0x080007b1
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <LIS3DSH_Init+0x184>)
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <LIS3DSH_Init+0x188>)
 8000794:	601a      	str	r2, [r3, #0]
			break;
 8000796:	e00f      	b.n	80007b8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <LIS3DSH_Init+0x184>)
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <LIS3DSH_Init+0x18c>)
 800079c:	601a      	str	r2, [r3, #0]
			break;
 800079e:	e00b      	b.n	80007b8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <LIS3DSH_Init+0x184>)
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <LIS3DSH_Init+0x190>)
 80007a4:	601a      	str	r2, [r3, #0]
			break;
 80007a6:	e007      	b.n	80007b8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <LIS3DSH_Init+0x184>)
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <LIS3DSH_Init+0x194>)
 80007ac:	601a      	str	r2, [r3, #0]
			break;
 80007ae:	e003      	b.n	80007b8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <LIS3DSH_Init+0x184>)
 80007b2:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <LIS3DSH_Init+0x198>)
 80007b4:	601a      	str	r2, [r3, #0]
			break;
 80007b6:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <LIS3DSH_Init+0x19c>)
 80007be:	f002 f82f 	bl	8002820 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	20000000 	.word	0x20000000
 80007d4:	3d75c28f 	.word	0x3d75c28f
 80007d8:	3df5c28f 	.word	0x3df5c28f
 80007dc:	3e3851ec 	.word	0x3e3851ec
 80007e0:	3e75c28f 	.word	0x3e75c28f
 80007e4:	3f3ae148 	.word	0x3f3ae148
 80007e8:	40021000 	.word	0x40021000

080007ec <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2202      	movs	r2, #2
 80007fa:	4619      	mov	r1, r3
 80007fc:	2028      	movs	r0, #40	@ 0x28
 80007fe:	f7ff fee1 	bl	80005c4 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8000802:	7d7b      	ldrb	r3, [r7, #21]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	7d3a      	ldrb	r2, [r7, #20]
 800080a:	4413      	add	r3, r2
 800080c:	b29b      	uxth	r3, r3
 800080e:	b21b      	sxth	r3, r3
 8000810:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2202      	movs	r2, #2
 8000818:	4619      	mov	r1, r3
 800081a:	202a      	movs	r0, #42	@ 0x2a
 800081c:	f7ff fed2 	bl	80005c4 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000820:	7d7b      	ldrb	r3, [r7, #21]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	b29b      	uxth	r3, r3
 8000826:	7d3a      	ldrb	r2, [r7, #20]
 8000828:	4413      	add	r3, r2
 800082a:	b29b      	uxth	r3, r3
 800082c:	b21b      	sxth	r3, r3
 800082e:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2202      	movs	r2, #2
 8000836:	4619      	mov	r1, r3
 8000838:	202c      	movs	r0, #44	@ 0x2c
 800083a:	f7ff fec3 	bl	80005c4 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800083e:	7d7b      	ldrb	r3, [r7, #21]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b29b      	uxth	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	b29b      	uxth	r3, r3
 800084a:	b21b      	sxth	r3, r3
 800084c:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	461a      	mov	r2, r3
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	6010      	str	r0, [r2, #0]
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	8093      	strh	r3, [r2, #4]

}
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffba 	bl	80007ec <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8000878:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000884:	4b31      	ldr	r3, [pc, #196]	@ (800094c <LIS3DSH_GetDataScaled+0xe4>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <LIS3DSH_GetDataScaled+0xe8>)
 8000890:	edd3 7a00 	vldr	s15, [r3]
 8000894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000898:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000954 <LIS3DSH_GetDataScaled+0xec>
 800089c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <LIS3DSH_GetDataScaled+0xf0>)
 80008a2:	edd3 7a00 	vldr	s15, [r3]
 80008a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008aa:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80008ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ba:	4b24      	ldr	r3, [pc, #144]	@ (800094c <LIS3DSH_GetDataScaled+0xe4>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c4:	4b25      	ldr	r3, [pc, #148]	@ (800095c <LIS3DSH_GetDataScaled+0xf4>)
 80008c6:	edd3 7a00 	vldr	s15, [r3]
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000954 <LIS3DSH_GetDataScaled+0xec>
 80008d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80008d6:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <LIS3DSH_GetDataScaled+0xf8>)
 80008d8:	edd3 7a00 	vldr	s15, [r3]
 80008dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e0:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80008e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <LIS3DSH_GetDataScaled+0xe4>)
 80008f2:	edd3 7a00 	vldr	s15, [r3]
 80008f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <LIS3DSH_GetDataScaled+0xfc>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000904:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000954 <LIS3DSH_GetDataScaled+0xec>
 8000908:	ee37 7a87 	vadd.f32	s14, s15, s14
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <LIS3DSH_GetDataScaled+0x100>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000916:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	f107 0210 	add.w	r2, r7, #16
 8000922:	ca07      	ldmia	r2, {r0, r1, r2}
 8000924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800092a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800092c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800092e:	ee06 1a90 	vmov	s13, r1
 8000932:	ee07 2a10 	vmov	s14, r2
 8000936:	ee07 3a90 	vmov	s15, r3
}
 800093a:	eeb0 0a66 	vmov.f32	s0, s13
 800093e:	eef0 0a47 	vmov.f32	s1, s14
 8000942:	eeb0 1a67 	vmov.f32	s2, s15
 8000946:	3730      	adds	r7, #48	@ 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004
 8000954:	00000000 	.word	0x00000000
 8000958:	20000104 	.word	0x20000104
 800095c:	20000008 	.word	0x20000008
 8000960:	20000108 	.word	0x20000108
 8000964:	2000000c 	.word	0x2000000c
 8000968:	2000010c 	.word	0x2000010c

0800096c <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f001 f980 	bl	8001c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f8aa 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 fb00 	bl	8000f8c <MX_GPIO_Init>
  MX_DMA_Init();
 800098c:	f000 fade 	bl	8000f4c <MX_DMA_Init>
  MX_I2C1_Init();
 8000990:	f000 f910 	bl	8000bb4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000994:	f000 f93c 	bl	8000c10 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000998:	f000 f990 	bl	8000cbc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800099c:	f000 faac 	bl	8000ef8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80009a0:	f000 f966 	bl	8000c70 <MX_RTC_Init>
  MX_TIM3_Init();
 80009a4:	f000 fa0e 	bl	8000dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a8:	f000 fa58 	bl	8000e5c <MX_TIM4_Init>
  MX_TIM2_Init();
 80009ac:	f000 f9bc 	bl	8000d28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80009b0:	482d      	ldr	r0, [pc, #180]	@ (8000a68 <main+0xec>)
 80009b2:	f006 fc81 	bl	80072b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80009b6:	482d      	ldr	r0, [pc, #180]	@ (8000a6c <main+0xf0>)
 80009b8:	f006 fc7e 	bl	80072b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009bc:	f00a fff2 	bl	800b9a4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LIS3DSH_DataScaled */
  LIS3DSH_DataScaledHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_DataScaled_attributes);
 80009c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a70 <main+0xf4>)
 80009c2:	210c      	movs	r1, #12
 80009c4:	2003      	movs	r0, #3
 80009c6:	f00b f9b3 	bl	800bd30 <osMessageQueueNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a29      	ldr	r2, [pc, #164]	@ (8000a74 <main+0xf8>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of LIS3DSH_ProcessedData */
  LIS3DSH_ProcessedDataHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_ProcessedData_attributes);
 80009d0:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <main+0xfc>)
 80009d2:	210c      	movs	r1, #12
 80009d4:	2003      	movs	r0, #3
 80009d6:	f00b f9ab 	bl	800bd30 <osMessageQueueNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a27      	ldr	r2, [pc, #156]	@ (8000a7c <main+0x100>)
 80009de:	6013      	str	r3, [r2, #0]

  /* creation of RTC_Data */
  RTC_DataHandle = osMessageQueueNew (3, sizeof(My_RTC_Data), &RTC_Data_attributes);
 80009e0:	4a27      	ldr	r2, [pc, #156]	@ (8000a80 <main+0x104>)
 80009e2:	2118      	movs	r1, #24
 80009e4:	2003      	movs	r0, #3
 80009e6:	f00b f9a3 	bl	800bd30 <osMessageQueueNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a25      	ldr	r2, [pc, #148]	@ (8000a84 <main+0x108>)
 80009ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myUserMsg */
  myUserMsgHandle = osThreadNew(MY_User_Message, NULL, &myUserMsg_attributes);
 80009f0:	4a25      	ldr	r2, [pc, #148]	@ (8000a88 <main+0x10c>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4825      	ldr	r0, [pc, #148]	@ (8000a8c <main+0x110>)
 80009f6:	f00b f81f 	bl	800ba38 <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a24      	ldr	r2, [pc, #144]	@ (8000a90 <main+0x114>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of myRTCTime */
  myRTCTimeHandle = osThreadNew(MY_RTC_Time, NULL, &myRTCTime_attributes);
 8000a00:	4a24      	ldr	r2, [pc, #144]	@ (8000a94 <main+0x118>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4824      	ldr	r0, [pc, #144]	@ (8000a98 <main+0x11c>)
 8000a06:	f00b f817 	bl	800ba38 <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <main+0x120>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of myGetAccData */
  myGetAccDataHandle = osThreadNew(MY_Get_Acc_Data, NULL, &myGetAccData_attributes);
 8000a10:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <main+0x124>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4823      	ldr	r0, [pc, #140]	@ (8000aa4 <main+0x128>)
 8000a16:	f00b f80f 	bl	800ba38 <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <main+0x12c>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* creation of myIntTask */
  myIntTaskHandle = osThreadNew(my_Int_Task, NULL, &myIntTask_attributes);
 8000a20:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <main+0x130>)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4822      	ldr	r0, [pc, #136]	@ (8000ab0 <main+0x134>)
 8000a26:	f00b f807 	bl	800ba38 <osThreadNew>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <main+0x138>)
 8000a2e:	6013      	str	r3, [r2, #0]

  /* creation of myfreeRTOSManager */
  myfreeRTOSManagerHandle = osThreadNew(MY_freeRTOS_Task_Manager, NULL, &myfreeRTOSManager_attributes);
 8000a30:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <main+0x13c>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4821      	ldr	r0, [pc, #132]	@ (8000abc <main+0x140>)
 8000a36:	f00a ffff 	bl	800ba38 <osThreadNew>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a20      	ldr	r2, [pc, #128]	@ (8000ac0 <main+0x144>)
 8000a3e:	6013      	str	r3, [r2, #0]

  /* creation of myProcessAccData */
  myProcessAccDataHandle = osThreadNew(MY_Process_AccData, NULL, &myProcessAccData_attributes);
 8000a40:	4a20      	ldr	r2, [pc, #128]	@ (8000ac4 <main+0x148>)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4820      	ldr	r0, [pc, #128]	@ (8000ac8 <main+0x14c>)
 8000a46:	f00a fff7 	bl	800ba38 <osThreadNew>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <main+0x150>)
 8000a4e:	6013      	str	r3, [r2, #0]

  /* creation of myProcessCMD */
  myProcessCMDHandle = osThreadNew(MY_Process_CMD, NULL, &myProcessCMD_attributes);
 8000a50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad0 <main+0x154>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <main+0x158>)
 8000a56:	f00a ffef 	bl	800ba38 <osThreadNew>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <main+0x15c>)
 8000a5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a60:	f00a ffc4 	bl	800b9ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <main+0xe8>
 8000a68:	2000026c 	.word	0x2000026c
 8000a6c:	200002b4 	.word	0x200002b4
 8000a70:	0801082c 	.word	0x0801082c
 8000a74:	200003c0 	.word	0x200003c0
 8000a78:	08010844 	.word	0x08010844
 8000a7c:	200003c4 	.word	0x200003c4
 8000a80:	0801085c 	.word	0x0801085c
 8000a84:	200003c8 	.word	0x200003c8
 8000a88:	08010730 	.word	0x08010730
 8000a8c:	080011cd 	.word	0x080011cd
 8000a90:	200003a4 	.word	0x200003a4
 8000a94:	08010754 	.word	0x08010754
 8000a98:	080011e1 	.word	0x080011e1
 8000a9c:	200003a8 	.word	0x200003a8
 8000aa0:	08010778 	.word	0x08010778
 8000aa4:	08001231 	.word	0x08001231
 8000aa8:	200003ac 	.word	0x200003ac
 8000aac:	0801079c 	.word	0x0801079c
 8000ab0:	080012b1 	.word	0x080012b1
 8000ab4:	200003b0 	.word	0x200003b0
 8000ab8:	080107c0 	.word	0x080107c0
 8000abc:	080012c1 	.word	0x080012c1
 8000ac0:	200003b4 	.word	0x200003b4
 8000ac4:	080107e4 	.word	0x080107e4
 8000ac8:	080012f9 	.word	0x080012f9
 8000acc:	200003b8 	.word	0x200003b8
 8000ad0:	08010808 	.word	0x08010808
 8000ad4:	080014d9 	.word	0x080014d9
 8000ad8:	200003bc 	.word	0x200003bc

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	@ 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	2230      	movs	r2, #48	@ 0x30
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00f f96a 	bl	800fdc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <SystemClock_Config+0xd0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a28      	ldr	r2, [pc, #160]	@ (8000bac <SystemClock_Config+0xd0>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <SystemClock_Config+0xd0>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <SystemClock_Config+0xd4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <SystemClock_Config+0xd4>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <SystemClock_Config+0xd4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b38:	2309      	movs	r3, #9
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b50:	2308      	movs	r3, #8
 8000b52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fda4 	bl	80056b4 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b72:	f000 fd05 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2105      	movs	r1, #5
 8000b94:	4618      	mov	r0, r3
 8000b96:	f005 f805 	bl	8005ba4 <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ba0:	f000 fcee 	bl	8001580 <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3750      	adds	r7, #80	@ 0x50
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <MX_I2C1_Init+0x54>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bc0:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <MX_I2C1_Init+0x58>)
 8000bc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	@ (8000c04 <MX_I2C1_Init+0x50>)
 8000bf2:	f003 ff7b 	bl	8004aec <HAL_I2C_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bfc:	f000 fcc0 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000110 	.word	0x20000110
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	000186a0 	.word	0x000186a0

08000c10 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c16:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <MX_I2S3_Init+0x58>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c20:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c34:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <MX_I2S3_Init+0x5c>)
 8000c3a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_I2S3_Init+0x54>)
 8000c50:	f004 f890 	bl	8004d74 <HAL_I2S_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c5a:	f000 fc91 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000164 	.word	0x20000164
 8000c68:	40003c00 	.word	0x40003c00
 8000c6c:	00017700 	.word	0x00017700

08000c70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <MX_RTC_Init+0x48>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c82:	227f      	movs	r2, #127	@ 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c88:	22ff      	movs	r2, #255	@ 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_RTC_Init+0x44>)
 8000ca0:	f005 fb14 	bl	80062cc <HAL_RTC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000caa:	f000 fc69 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001ac 	.word	0x200001ac
 8000cb8:	40002800 	.word	0x40002800

08000cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <MX_SPI1_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf0:	2228      	movs	r2, #40	@ 0x28
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d0e:	f005 fcad 	bl	800666c <HAL_SPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d18:	f000 fc32 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001cc 	.word	0x200001cc
 8000d24:	40013000 	.word	0x40013000

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d4e:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000d52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6e:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d70:	f006 fa52 	bl	8007218 <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d7a:	f000 fc01 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000d8c:	f006 fbf4 	bl	8007578 <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d96:	f000 fbf3 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_TIM2_Init+0x98>)
 8000da8:	f006 fe1c 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000db2:	f000 fbe5 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000224 	.word	0x20000224

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000de2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000de8:	2254      	movs	r2, #84	@ 0x54
 8000dea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000df4:	2264      	movs	r2, #100	@ 0x64
 8000df6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000e06:	f006 fa07 	bl	8007218 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000e10:	f000 fbb6 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000e22:	f006 fba9 	bl	8007578 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000e2c:	f000 fba8 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_TIM3_Init+0x90>)
 8000e3e:	f006 fdd1 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000e48:	f000 fb9a 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000026c 	.word	0x2000026c
 8000e58:	40000400 	.word	0x40000400

08000e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <MX_TIM4_Init+0x98>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e80:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000e84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000e92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ea0:	4813      	ldr	r0, [pc, #76]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000ea2:	f006 f9b9 	bl	8007218 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000eac:	f000 fb68 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000ebe:	f006 fb5b 	bl	8007578 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ec8:	f000 fb5a 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000eda:	f006 fd83 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 fb4c 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200002b4 	.word	0x200002b4
 8000ef4:	40000800 	.word	0x40000800

08000ef8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_USART2_UART_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f006 fde8 	bl	8007b04 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3a:	f000 fb21 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002fc 	.word	0x200002fc
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_DMA_Init+0x3c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <MX_DMA_Init+0x3c>)
 8000f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_DMA_Init+0x3c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2105      	movs	r1, #5
 8000f72:	2010      	movs	r0, #16
 8000f74:	f000 ffa4 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f000 ffbd 	bl	8001ef8 <HAL_NVIC_EnableIRQ>

}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	@ 0x30
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b76      	ldr	r3, [pc, #472]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a75      	ldr	r2, [pc, #468]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b73      	ldr	r3, [pc, #460]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b6c      	ldr	r3, [pc, #432]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b68      	ldr	r3, [pc, #416]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a67      	ldr	r2, [pc, #412]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b65      	ldr	r3, [pc, #404]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b61      	ldr	r3, [pc, #388]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a60      	ldr	r2, [pc, #384]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b5e      	ldr	r3, [pc, #376]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b5a      	ldr	r3, [pc, #360]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a59      	ldr	r2, [pc, #356]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b57      	ldr	r3, [pc, #348]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b53      	ldr	r3, [pc, #332]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a52      	ldr	r2, [pc, #328]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b50      	ldr	r3, [pc, #320]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2108      	movs	r1, #8
 800104e:	484d      	ldr	r0, [pc, #308]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001050:	f001 fbe6 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2101      	movs	r1, #1
 8001058:	484b      	ldr	r0, [pc, #300]	@ (8001188 <MX_GPIO_Init+0x1fc>)
 800105a:	f001 fbe1 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800105e:	2200      	movs	r2, #0
 8001060:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001064:	4849      	ldr	r0, [pc, #292]	@ (800118c <MX_GPIO_Init+0x200>)
 8001066:	f001 fbdb 	bl	8002820 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800106a:	2308      	movs	r3, #8
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4840      	ldr	r0, [pc, #256]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001082:	f001 fa31 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	483a      	ldr	r0, [pc, #232]	@ (8001188 <MX_GPIO_Init+0x1fc>)
 800109e:	f001 fa23 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010a2:	2308      	movs	r3, #8
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b2:	2305      	movs	r3, #5
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4832      	ldr	r0, [pc, #200]	@ (8001188 <MX_GPIO_Init+0x1fc>)
 80010be:	f001 fa13 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010c2:	2304      	movs	r3, #4
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	482e      	ldr	r0, [pc, #184]	@ (8001190 <MX_GPIO_Init+0x204>)
 80010d6:	f001 fa07 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ec:	2305      	movs	r3, #5
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4826      	ldr	r0, [pc, #152]	@ (8001190 <MX_GPIO_Init+0x204>)
 80010f8:	f001 f9f6 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010fc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001100:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	481d      	ldr	r0, [pc, #116]	@ (800118c <MX_GPIO_Init+0x200>)
 8001116:	f001 f9e7 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800111a:	2320      	movs	r3, #32
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4817      	ldr	r0, [pc, #92]	@ (800118c <MX_GPIO_Init+0x200>)
 800112e:	f001 f9db 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001136:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	480f      	ldr	r0, [pc, #60]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001148:	f001 f9ce 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001150:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001162:	f001 f9c1 	bl	80024e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2006      	movs	r0, #6
 800116c:	f000 fea8 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001170:	2006      	movs	r0, #6
 8001172:	f000 fec1 	bl	8001ef8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	@ 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40021000 	.word	0x40021000
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40020400 	.word	0x40020400

08001194 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
//	if(GPIO_Pin == B1_Pin){
//		BaseType_t checkifYieldRequired = xTaskResumeFromISR(myIntTaskHandle);
//		portYIELD_FROM_ISR(checkifYieldRequired);
//	}
	if(GPIO_Pin == MEMS_INT1_Pin){
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10a      	bne.n	80011ba <HAL_GPIO_EXTI_Callback+0x26>
		osThreadFlagsSet(myGetAccDataHandle, 0x0001);
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00a fcd6 	bl	800bb5c <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80011b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80011b6:	f001 fb4c 	bl	8002852 <HAL_GPIO_TogglePin>
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200003ac 	.word	0x200003ac
 80011c8:	40020c00 	.word	0x40020c00

080011cc <MY_User_Message>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MY_User_Message */
void MY_User_Message(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80011d4:	f00e fa14 	bl	800f600 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d8:	2001      	movs	r0, #1
 80011da:	f00a fd8e 	bl	800bcfa <osDelay>
 80011de:	e7fb      	b.n	80011d8 <MY_User_Message+0xc>

080011e0 <MY_RTC_Time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_RTC_Time */
void MY_RTC_Time(void *argument)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_RTC_Time */
  My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011ec:	2101      	movs	r1, #1
 80011ee:	2001      	movs	r0, #1
 80011f0:	f00a fd02 	bl	800bbf8 <osThreadFlagsWait>
	HAL_RTC_GetTime(&hrtc, &RTC_data.sTime, RTC_FORMAT_BCD);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	3304      	adds	r3, #4
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	480a      	ldr	r0, [pc, #40]	@ (8001228 <MY_RTC_Time+0x48>)
 8001200:	f005 f8e7 	bl	80063d2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_data.sDate, RTC_FORMAT_BCD);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2201      	movs	r2, #1
 800120a:	4619      	mov	r1, r3
 800120c:	4806      	ldr	r0, [pc, #24]	@ (8001228 <MY_RTC_Time+0x48>)
 800120e:	f005 f93e 	bl	800648e <HAL_RTC_GetDate>
	osMessageQueuePut(RTC_DataHandle, &RTC_data, 10, 1);
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MY_RTC_Time+0x4c>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f107 0108 	add.w	r1, r7, #8
 800121a:	2301      	movs	r3, #1
 800121c:	220a      	movs	r2, #10
 800121e:	f00a fdfb 	bl	800be18 <osMessageQueuePut>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001222:	bf00      	nop
 8001224:	e7e0      	b.n	80011e8 <MY_RTC_Time+0x8>
 8001226:	bf00      	nop
 8001228:	200001ac 	.word	0x200001ac
 800122c:	200003c8 	.word	0x200003c8

08001230 <MY_Get_Acc_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Get_Acc_Data */
void MY_Get_Acc_Data(void *argument)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Get_Acc_Data */
	LIS3DSH_InitTypeDef MY_LIS3DSH_Configuration;
	MY_LIS3DSH_Configuration.dataRate = LIS3DSH_DATARATE_800;
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	763b      	strb	r3, [r7, #24]
	MY_LIS3DSH_Configuration.fullScale = LIS3DSH_FULLSCALE_4;
 800123c:	2308      	movs	r3, #8
 800123e:	767b      	strb	r3, [r7, #25]
	MY_LIS3DSH_Configuration.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001240:	23c0      	movs	r3, #192	@ 0xc0
 8001242:	76bb      	strb	r3, [r7, #26]
	MY_LIS3DSH_Configuration.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001244:	2307      	movs	r3, #7
 8001246:	76fb      	strb	r3, [r7, #27]
	MY_LIS3DSH_Configuration.interruptEnable = true;
 8001248:	2301      	movs	r3, #1
 800124a:	773b      	strb	r3, [r7, #28]
	LIS3DSH_Init(&hspi1, &MY_LIS3DSH_Configuration);
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4619      	mov	r1, r3
 8001252:	4814      	ldr	r0, [pc, #80]	@ (80012a4 <MY_Get_Acc_Data+0x74>)
 8001254:	f7ff f9fa 	bl	800064c <LIS3DSH_Init>
	LIS3DSH_DataScaled myLIS3DSH;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800125c:	2101      	movs	r1, #1
 800125e:	2001      	movs	r0, #1
 8001260:	f00a fcca 	bl	800bbf8 <osThreadFlagsWait>
	  myLIS3DSH = LIS3DSH_GetDataScaled();
 8001264:	f7ff fb00 	bl	8000868 <LIS3DSH_GetDataScaled>
 8001268:	eef0 6a40 	vmov.f32	s13, s0
 800126c:	eeb0 7a60 	vmov.f32	s14, s1
 8001270:	eef0 7a41 	vmov.f32	s15, s2
 8001274:	edc7 6a03 	vstr	s13, [r7, #12]
 8001278:	ed87 7a04 	vstr	s14, [r7, #16]
 800127c:	edc7 7a05 	vstr	s15, [r7, #20]
	  g_myLIS3DSH = myLIS3DSH;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MY_Get_Acc_Data+0x78>)
 8001282:	461c      	mov	r4, r3
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800128c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osMessageQueuePut(LIS3DSH_DataScaledHandle, &myLIS3DSH, 10, 1);
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MY_Get_Acc_Data+0x7c>)
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f107 010c 	add.w	r1, r7, #12
 8001298:	2301      	movs	r3, #1
 800129a:	220a      	movs	r2, #10
 800129c:	f00a fdbc 	bl	800be18 <osMessageQueuePut>
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80012a0:	bf00      	nop
 80012a2:	e7d9      	b.n	8001258 <MY_Get_Acc_Data+0x28>
 80012a4:	200001cc 	.word	0x200001cc
 80012a8:	20000bd4 	.word	0x20000bd4
 80012ac:	200003c0 	.word	0x200003c0

080012b0 <my_Int_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_my_Int_Task */
void my_Int_Task(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN my_Int_Task */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f00b ff69 	bl	800d190 <vTaskSuspend>
 80012be:	e7fb      	b.n	80012b8 <my_Int_Task+0x8>

080012c0 <MY_freeRTOS_Task_Manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_freeRTOS_Task_Manager */
void MY_freeRTOS_Task_Manager(void *argument)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_freeRTOS_Task_Manager */
  /* Infinite loop */
  for(;;)
  {
	  task_manager.freemem = xPortGetFreeHeapSize();
 80012c8:	f00e f8d2 	bl	800f470 <xPortGetFreeHeapSize>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MY_freeRTOS_Task_Manager+0x2c>)
 80012d2:	601a      	str	r2, [r3, #0]
	  vTaskList(task_manager.taskListBuffer);
 80012d4:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <MY_freeRTOS_Task_Manager+0x30>)
 80012d6:	f00c fe73 	bl	800dfc0 <vTaskList>
	  vTaskGetRunTimeStats(task_manager.taskTimingBuffer);
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MY_freeRTOS_Task_Manager+0x34>)
 80012dc:	f00c ff06 	bl	800e0ec <vTaskGetRunTimeStats>
	  osDelay(1000);
 80012e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e4:	f00a fd09 	bl	800bcfa <osDelay>
	  task_manager.freemem = xPortGetFreeHeapSize();
 80012e8:	bf00      	nop
 80012ea:	e7ed      	b.n	80012c8 <MY_freeRTOS_Task_Manager+0x8>
 80012ec:	200003d0 	.word	0x200003d0
 80012f0:	200003d4 	.word	0x200003d4
 80012f4:	200007d4 	.word	0x200007d4

080012f8 <MY_Process_AccData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_AccData */
void MY_Process_AccData(void *argument)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08f      	sub	sp, #60	@ 0x3c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Process_AccData */
	float avg[3] = {0};
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
	LIS3DSH_DataScaled myLIS3DSH;
	LIS3DSH_DataScaled myLIS3DSH_after_filter;
	uint16_t fill = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 8001310:	4b6c      	ldr	r3, [pc, #432]	@ (80014c4 <MY_Process_AccData+0x1cc>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f107 0114 	add.w	r1, r7, #20
 8001318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800131c:	2200      	movs	r2, #0
 800131e:	f00a fddb 	bl	800bed8 <osMessageQueueGet>
	if(fill < sampling_rate){
 8001322:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001324:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001328:	d219      	bcs.n	800135e <MY_Process_AccData+0x66>
		moving_avg[0][fill] = myLIS3DSH.x;
 800132a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4966      	ldr	r1, [pc, #408]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	601a      	str	r2, [r3, #0]
		moving_avg[1][fill] = myLIS3DSH.y;
 8001336:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4963      	ldr	r1, [pc, #396]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 800133c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	601a      	str	r2, [r3, #0]
		moving_avg[2][fill] = myLIS3DSH.z;
 8001346:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	495f      	ldr	r1, [pc, #380]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 800134c:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	601a      	str	r2, [r3, #0]
		fill++;
 8001356:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001358:	3301      	adds	r3, #1
 800135a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800135c:	e7d8      	b.n	8001310 <MY_Process_AccData+0x18>
	} else {
		for(uint8_t i = 0; i < 3; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001364:	e00d      	b.n	8001382 <MY_Process_AccData+0x8a>
			avg[i] = 0;
 8001366:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	3338      	adds	r3, #56	@ 0x38
 800136e:	443b      	add	r3, r7
 8001370:	3b18      	subs	r3, #24
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 3; i++)
 8001378:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800137c:	3301      	adds	r3, #1
 800137e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001382:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001386:	2b02      	cmp	r3, #2
 8001388:	d9ed      	bls.n	8001366 <MY_Process_AccData+0x6e>
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
 800138a:	f240 2357 	movw	r3, #599	@ 0x257
 800138e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001390:	e027      	b.n	80013e2 <MY_Process_AccData+0xea>
			moving_avg[0][j] = moving_avg[0][j - 1];
 8001392:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001394:	1e5a      	subs	r2, r3, #1
 8001396:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001398:	494b      	ldr	r1, [pc, #300]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	440a      	add	r2, r1
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	4949      	ldr	r1, [pc, #292]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	601a      	str	r2, [r3, #0]
			moving_avg[1][j] = moving_avg[0][j - 1];
 80013a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013ae:	4946      	ldr	r1, [pc, #280]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	440a      	add	r2, r1
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	4944      	ldr	r1, [pc, #272]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	601a      	str	r2, [r3, #0]
			moving_avg[2][j] = moving_avg[0][j - 1];
 80013c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013c8:	493f      	ldr	r1, [pc, #252]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	440a      	add	r2, r1
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	493d      	ldr	r1, [pc, #244]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013d2:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	601a      	str	r2, [r3, #0]
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
 80013dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013de:	3b01      	subs	r3, #1
 80013e0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80013e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1d4      	bne.n	8001392 <MY_Process_AccData+0x9a>
		}
		moving_avg[0][0] = myLIS3DSH.x;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4a37      	ldr	r2, [pc, #220]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013ec:	6013      	str	r3, [r2, #0]
		moving_avg[1][0] = myLIS3DSH.y;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4b35      	ldr	r3, [pc, #212]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013f2:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 80013f6:	601a      	str	r2, [r3, #0]
		moving_avg[2][0] = myLIS3DSH.z;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4a33      	ldr	r2, [pc, #204]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 80013fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001400:	f8c2 32c0 	str.w	r3, [r2, #704]	@ 0x2c0
		for(uint8_t i = 0; i < 3; i++){
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800140a:	e02d      	b.n	8001468 <MY_Process_AccData+0x170>
			for(uint16_t j = 0; j < sampling_rate; j++)
 800140c:	2300      	movs	r3, #0
 800140e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001410:	e021      	b.n	8001456 <MY_Process_AccData+0x15e>
				avg[i] += moving_avg[i][j];
 8001412:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	3338      	adds	r3, #56	@ 0x38
 800141a:	443b      	add	r3, r7
 800141c:	3b18      	subs	r3, #24
 800141e:	ed93 7a00 	vldr	s14, [r3]
 8001422:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001426:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001428:	4927      	ldr	r1, [pc, #156]	@ (80014c8 <MY_Process_AccData+0x1d0>)
 800142a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800142e:	fb00 f202 	mul.w	r2, r0, r2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3338      	adds	r3, #56	@ 0x38
 8001448:	443b      	add	r3, r7
 800144a:	3b18      	subs	r3, #24
 800144c:	edc3 7a00 	vstr	s15, [r3]
			for(uint16_t j = 0; j < sampling_rate; j++)
 8001450:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001452:	3301      	adds	r3, #1
 8001454:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001456:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001458:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800145c:	d3d9      	bcc.n	8001412 <MY_Process_AccData+0x11a>
		for(uint8_t i = 0; i < 3; i++){
 800145e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001462:	3301      	adds	r3, #1
 8001464:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001468:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800146c:	2b02      	cmp	r3, #2
 800146e:	d9cd      	bls.n	800140c <MY_Process_AccData+0x114>
		}
		myLIS3DSH_after_filter.x = avg[0] / sampling_rate;
 8001470:	ed97 7a08 	vldr	s14, [r7, #32]
 8001474:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80014cc <MY_Process_AccData+0x1d4>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a02 	vstr	s15, [r7, #8]
		myLIS3DSH_after_filter.y = avg[1] / sampling_rate;
 8001480:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001484:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80014cc <MY_Process_AccData+0x1d4>
 8001488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
		myLIS3DSH_after_filter.z = avg[2] / sampling_rate;
 8001490:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001494:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80014cc <MY_Process_AccData+0x1d4>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	edc7 7a04 	vstr	s15, [r7, #16]
		sg_myLIS3DSH = myLIS3DSH_after_filter;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MY_Process_AccData+0x1d8>)
 80014a2:	461c      	mov	r4, r3
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		osMessageQueuePut(LIS3DSH_ProcessedDataHandle, &myLIS3DSH_after_filter, 10, 1);
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <MY_Process_AccData+0x1dc>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	f107 0108 	add.w	r1, r7, #8
 80014b8:	2301      	movs	r3, #1
 80014ba:	220a      	movs	r2, #10
 80014bc:	f00a fcac 	bl	800be18 <osMessageQueuePut>
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 80014c0:	e726      	b.n	8001310 <MY_Process_AccData+0x18>
 80014c2:	bf00      	nop
 80014c4:	200003c0 	.word	0x200003c0
 80014c8:	20000bec 	.word	0x20000bec
 80014cc:	44160000 	.word	0x44160000
 80014d0:	20000be0 	.word	0x20000be0
 80014d4:	200003c4 	.word	0x200003c4

080014d8 <MY_Process_CMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_CMD */
void MY_Process_CMD(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	LIS3DSH_DataScaled myLIS3DSH;
	My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <MY_Process_CMD+0x38>)
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ec:	2200      	movs	r2, #0
 80014ee:	f00a fcf3 	bl	800bed8 <osMessageQueueGet>
	osMessageQueueGet(RTC_DataHandle, &RTC_data, NULL, osWaitForever);
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <MY_Process_CMD+0x3c>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f107 010c 	add.w	r1, r7, #12
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014fe:	2200      	movs	r2, #0
 8001500:	f00a fcea 	bl	800bed8 <osMessageQueueGet>

    osDelay(1000);
 8001504:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001508:	f00a fbf7 	bl	800bcfa <osDelay>
	osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 800150c:	bf00      	nop
 800150e:	e7e7      	b.n	80014e0 <MY_Process_CMD+0x8>
 8001510:	200003c4 	.word	0x200003c4
 8001514:	200003c8 	.word	0x200003c8

08001518 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a11      	ldr	r2, [pc, #68]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d104      	bne.n	8001534 <HAL_TIM_PeriodElapsedCallback+0x1c>
		ulHighFrequencyTimerTicks++;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001532:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM3){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10a      	bne.n	8001554 <HAL_TIM_PeriodElapsedCallback+0x3c>
		osThreadFlagsSet(RTC_DataHandle, 0x0001);
 800153e:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f00a fb09 	bl	800bb5c <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800154a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154e:	480a      	ldr	r0, [pc, #40]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001550:	f001 f97f 	bl	8002852 <HAL_GPIO_TogglePin>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 800155e:	f000 fbb3 	bl	8001cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40000400 	.word	0x40000400
 8001570:	200003cc 	.word	0x200003cc
 8001574:	200003c8 	.word	0x200003c8
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40001000 	.word	0x40001000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_MspInit+0x54>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	4a11      	ldr	r2, [pc, #68]	@ (80015e0 <HAL_MspInit+0x54>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_MspInit+0x54>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_MspInit+0x54>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_MspInit+0x54>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_MspInit+0x54>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	210f      	movs	r1, #15
 80015ce:	f06f 0001 	mvn.w	r0, #1
 80015d2:	f000 fc75 	bl	8001ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <HAL_I2C_MspInit+0x84>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12c      	bne.n	8001660 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_I2C_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a17      	ldr	r2, [pc, #92]	@ (800166c <HAL_I2C_MspInit+0x88>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_I2C_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001622:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001634:	2304      	movs	r3, #4
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	480c      	ldr	r0, [pc, #48]	@ (8001670 <HAL_I2C_MspInit+0x8c>)
 8001640:	f000 ff52 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_I2C_MspInit+0x88>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_I2C_MspInit+0x88>)
 800164e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_I2C_MspInit+0x88>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	@ 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020400 	.word	0x40020400

08001674 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	@ 0x38
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a31      	ldr	r2, [pc, #196]	@ (8001764 <HAL_I2S_MspInit+0xf0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d15a      	bne.n	800175a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016a8:	23c0      	movs	r3, #192	@ 0xc0
 80016aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fcc7 	bl	8006048 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016c0:	f7ff ff5e 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a26      	ldr	r2, [pc, #152]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 80016ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	4a18      	ldr	r2, [pc, #96]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6313      	str	r3, [r2, #48]	@ 0x30
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_I2S_MspInit+0xf4>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001718:	2310      	movs	r3, #16
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001728:	2306      	movs	r3, #6
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	480e      	ldr	r0, [pc, #56]	@ (800176c <HAL_I2S_MspInit+0xf8>)
 8001734:	f000 fed8 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001738:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800174a:	2306      	movs	r3, #6
 800174c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4806      	ldr	r0, [pc, #24]	@ (8001770 <HAL_I2S_MspInit+0xfc>)
 8001756:	f000 fec7 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3738      	adds	r7, #56	@ 0x38
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40003c00 	.word	0x40003c00
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020800 	.word	0x40020800

08001774 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <HAL_RTC_MspInit+0x4c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d111      	bne.n	80017b8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001794:	2302      	movs	r3, #2
 8001796:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800179c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fc50 	bl	8006048 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80017ae:	f7ff fee7 	bl	8001580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <HAL_RTC_MspInit+0x50>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40002800 	.word	0x40002800
 80017c4:	42470e3c 	.word	0x42470e3c

080017c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	@ (800184c <HAL_SPI_MspInit+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d12b      	bne.n	8001842 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <HAL_SPI_MspInit+0x88>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <HAL_SPI_MspInit+0x88>)
 80017f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_SPI_MspInit+0x88>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <HAL_SPI_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <HAL_SPI_MspInit+0x88>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_SPI_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001822:	23e0      	movs	r3, #224	@ 0xe0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001832:	2305      	movs	r3, #5
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <HAL_SPI_MspInit+0x8c>)
 800183e:	f000 fe53 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40013000 	.word	0x40013000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001868:	d116      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a23      	ldr	r2, [pc, #140]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	201c      	movs	r0, #28
 800188c:	f000 fb18 	bl	8001ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001890:	201c      	movs	r0, #28
 8001892:	f000 fb31 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001896:	e02e      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <HAL_TIM_Base_MspInit+0xac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d116      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2105      	movs	r1, #5
 80018c2:	201d      	movs	r0, #29
 80018c4:	f000 fafc 	bl	8001ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018c8:	201d      	movs	r0, #29
 80018ca:	f000 fb15 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
}
 80018ce:	e012      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001908 <HAL_TIM_Base_MspInit+0xb0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10d      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_TIM_Base_MspInit+0xa8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40000400 	.word	0x40000400
 8001908:	40000800 	.word	0x40000800

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a30      	ldr	r2, [pc, #192]	@ (80019ec <HAL_UART_MspInit+0xe0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d15a      	bne.n	80019e4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <HAL_UART_MspInit+0xe4>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	4a2e      	ldr	r2, [pc, #184]	@ (80019f0 <HAL_UART_MspInit+0xe4>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193c:	6413      	str	r3, [r2, #64]	@ 0x40
 800193e:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <HAL_UART_MspInit+0xe4>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_UART_MspInit+0xe4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <HAL_UART_MspInit+0xe4>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <HAL_UART_MspInit+0xe4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001966:	230c      	movs	r3, #12
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001976:	2307      	movs	r3, #7
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	481c      	ldr	r0, [pc, #112]	@ (80019f4 <HAL_UART_MspInit+0xe8>)
 8001982:	f000 fdb1 	bl	80024e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <HAL_UART_MspInit+0xf0>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 800198e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001992:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001994:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019c8:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019ca:	f000 faa3 	bl	8001f14 <HAL_DMA_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80019d4:	f7ff fdd4 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019de:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <HAL_UART_MspInit+0xec>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	@ 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004400 	.word	0x40004400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	20000344 	.word	0x20000344
 80019fc:	40026088 	.word	0x40026088

08001a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	@ 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_InitTick+0xe4>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a32      	ldr	r2, [pc, #200]	@ (8001ae4 <HAL_InitTick+0xe4>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a20:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <HAL_InitTick+0xe4>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a2c:	f107 0210 	add.w	r2, r7, #16
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 fad4 	bl	8005fe4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a46:	f004 faa5 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8001a4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a4c:	e004      	b.n	8001a58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a4e:	f004 faa1 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8001a52:	4603      	mov	r3, r0
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	0c9b      	lsrs	r3, r3, #18
 8001a62:	3b01      	subs	r3, #1
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <HAL_InitTick+0xec>)
 8001a68:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <HAL_InitTick+0xf0>)
 8001a6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_InitTick+0xec>)
 8001a6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_InitTick+0xec>)
 8001a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_InitTick+0xec>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_InitTick+0xec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_InitTick+0xec>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a8c:	4817      	ldr	r0, [pc, #92]	@ (8001aec <HAL_InitTick+0xec>)
 8001a8e:	f005 fbc3 	bl	8007218 <HAL_TIM_Base_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001aa0:	4812      	ldr	r0, [pc, #72]	@ (8001aec <HAL_InitTick+0xec>)
 8001aa2:	f005 fc09 	bl	80072b8 <HAL_TIM_Base_Start_IT>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d111      	bne.n	8001ad8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ab4:	2036      	movs	r0, #54	@ 0x36
 8001ab6:	f000 fa1f 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d808      	bhi.n	8001ad2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	2036      	movs	r0, #54	@ 0x36
 8001ac6:	f000 f9fb 	bl	8001ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_InitTick+0xf4>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e002      	b.n	8001ad8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3738      	adds	r7, #56	@ 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	2000280c 	.word	0x2000280c
 8001af0:	40001000 	.word	0x40001000
 8001af4:	20000014 	.word	0x20000014

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <NMI_Handler+0x4>

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <MemManage_Handler+0x4>

08001b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MEMS_INT1_Pin);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f000 fea8 	bl	8002888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <DMA1_Stream5_IRQHandler+0x10>)
 8001b42:	f000 fa95 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000344 	.word	0x20000344

08001b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <TIM2_IRQHandler+0x10>)
 8001b56:	f005 fc1f 	bl	8007398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000224 	.word	0x20000224

08001b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <TIM3_IRQHandler+0x10>)
 8001b6a:	f005 fc15 	bl	8007398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000026c 	.word	0x2000026c

08001b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <TIM6_DAC_IRQHandler+0x10>)
 8001b7e:	f005 fc0b 	bl	8007398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000280c 	.word	0x2000280c

08001b8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <OTG_FS_IRQHandler+0x10>)
 8001b92:	f001 f971 	bl	8002e78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20007680 	.word	0x20007680

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f00e f966 	bl	800fea0 <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20020000 	.word	0x20020000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	20002854 	.word	0x20002854
 8001c08:	20007ba8 	.word	0x20007ba8

08001c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c34:	f7ff ffea 	bl	8001c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	@ (8001c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	@ (8001c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f00e f925 	bl	800feac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7fe fe8b 	bl	800097c <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c74:	080108d8 	.word	0x080108d8
  ldr r2, =_sbss
 8001c78:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c7c:	20007ba8 	.word	0x20007ba8

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 f8fc 	bl	8001eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f7ff fea4 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fc68 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000018 	.word	0x20000018
 8001cec:	20002858 	.word	0x20002858

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20002858 	.word	0x20002858

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000018 	.word	0x20000018

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	@ (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff4c 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed2:	f7ff ff61 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7ff ffb1 	bl	8001e44 <NVIC_EncodePriority>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff80 	bl	8001df0 <__NVIC_SetPriority>
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff54 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fee6 	bl	8001cf0 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e099      	b.n	8002064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f50:	e00f      	b.n	8001f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f52:	f7ff fecd 	bl	8001cf0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d908      	bls.n	8001f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e078      	b.n	8002064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e8      	bne.n	8001f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <HAL_DMA_Init+0x158>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d107      	bne.n	8001fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	2b04      	cmp	r3, #4
 8002004:	d117      	bne.n	8002036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f9e9 	bl	80023f0 <DMA_CheckFifoParam>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	@ 0x40
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002032:	2301      	movs	r3, #1
 8002034:	e016      	b.n	8002064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f9a0 	bl	8002384 <DMA_CalcBaseAndBitshift>
 8002044:	4603      	mov	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	223f      	movs	r2, #63	@ 0x3f
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	f010803f 	.word	0xf010803f

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800207c:	4b8e      	ldr	r3, [pc, #568]	@ (80022b8 <HAL_DMA_IRQHandler+0x248>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8e      	ldr	r2, [pc, #568]	@ (80022bc <HAL_DMA_IRQHandler+0x24c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2208      	movs	r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	2208      	movs	r2, #8
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	2204      	movs	r2, #4
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	2210      	movs	r2, #16
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d043      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	2210      	movs	r2, #16
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e01f      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2220      	movs	r2, #32
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808f 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8087 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2220      	movs	r2, #32
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d136      	bne.n	8002288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0216 	bic.w	r2, r2, #22
 8002228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_DMA_IRQHandler+0x1da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	223f      	movs	r2, #63	@ 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07e      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
        }
        return;
 8002286:	e079      	b.n	800237c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d031      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e02c      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
 80022b6:	bf00      	nop
 80022b8:	20000010 	.word	0x20000010
 80022bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e01e      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0210 	bic.w	r2, r2, #16
 80022ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d307      	bcc.n	8002358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_DMA_IRQHandler+0x2cc>
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e000      	b.n	800237e <HAL_DMA_IRQHandler+0x30e>
        return;
 800237c:	bf00      	nop
    }
  }
}
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3b10      	subs	r3, #16
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <DMA_CalcBaseAndBitshift+0x68>)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d909      	bls.n	80023c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80023c4:	e007      	b.n	80023d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	aaaaaaab 	.word	0xaaaaaaab
 80023ec:	0801088c 	.word	0x0801088c

080023f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d11f      	bne.n	800244a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d856      	bhi.n	80024be <DMA_CheckFifoParam+0xce>
 8002410:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <DMA_CheckFifoParam+0x28>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	08002429 	.word	0x08002429
 800241c:	0800243b 	.word	0x0800243b
 8002420:	08002429 	.word	0x08002429
 8002424:	080024bf 	.word	0x080024bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d046      	beq.n	80024c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002438:	e043      	b.n	80024c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002442:	d140      	bne.n	80024c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002448:	e03d      	b.n	80024c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002452:	d121      	bne.n	8002498 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d837      	bhi.n	80024ca <DMA_CheckFifoParam+0xda>
 800245a:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <DMA_CheckFifoParam+0x70>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	08002471 	.word	0x08002471
 8002464:	08002477 	.word	0x08002477
 8002468:	08002471 	.word	0x08002471
 800246c:	08002489 	.word	0x08002489
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e030      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d025      	beq.n	80024ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002486:	e022      	b.n	80024ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002490:	d11f      	bne.n	80024d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002496:	e01c      	b.n	80024d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d903      	bls.n	80024a6 <DMA_CheckFifoParam+0xb6>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d003      	beq.n	80024ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a4:	e018      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
      break;
 80024aa:	e015      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e00b      	b.n	80024d6 <DMA_CheckFifoParam+0xe6>
      break;
 80024be:	bf00      	nop
 80024c0:	e00a      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e008      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e006      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e004      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
    }
  } 
  
  return status; 
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e16b      	b.n	80027dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 815a 	bne.w	80027d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b4 	beq.w	80027d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b60      	ldr	r3, [pc, #384]	@ (80027f4 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	4a5f      	ldr	r2, [pc, #380]	@ (80027f4 <HAL_GPIO_Init+0x30c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267c:	6453      	str	r3, [r2, #68]	@ 0x44
 800267e:	4b5d      	ldr	r3, [pc, #372]	@ (80027f4 <HAL_GPIO_Init+0x30c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a5b      	ldr	r2, [pc, #364]	@ (80027f8 <HAL_GPIO_Init+0x310>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_GPIO_Init+0x314>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02b      	beq.n	800270e <HAL_GPIO_Init+0x226>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a51      	ldr	r2, [pc, #324]	@ (8002800 <HAL_GPIO_Init+0x318>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d025      	beq.n	800270a <HAL_GPIO_Init+0x222>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a50      	ldr	r2, [pc, #320]	@ (8002804 <HAL_GPIO_Init+0x31c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <HAL_GPIO_Init+0x21e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002808 <HAL_GPIO_Init+0x320>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0x21a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4e      	ldr	r2, [pc, #312]	@ (800280c <HAL_GPIO_Init+0x324>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0x216>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002810 <HAL_GPIO_Init+0x328>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_GPIO_Init+0x212>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002814 <HAL_GPIO_Init+0x32c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002818 <HAL_GPIO_Init+0x330>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_GPIO_Init+0x20a>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00e      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00c      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f6:	2306      	movs	r3, #6
 80026f8:	e00a      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	@ (80027f8 <HAL_GPIO_Init+0x310>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272e:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_GPIO_Init+0x334>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002752:	4a32      	ldr	r2, [pc, #200]	@ (800281c <HAL_GPIO_Init+0x334>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002758:	4b30      	ldr	r3, [pc, #192]	@ (800281c <HAL_GPIO_Init+0x334>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800277c:	4a27      	ldr	r2, [pc, #156]	@ (800281c <HAL_GPIO_Init+0x334>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002782:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_GPIO_Init+0x334>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a6:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_GPIO_Init+0x334>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d0:	4a12      	ldr	r2, [pc, #72]	@ (800281c <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f ae90 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40021400 	.word	0x40021400
 8002814:	40021800 	.word	0x40021800
 8002818:	40021c00 	.word	0x40021c00
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43d9      	mvns	r1, r3
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	400b      	ands	r3, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289e:	4a05      	ldr	r2, [pc, #20]	@ (80028b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fc74 	bl	8001194 <HAL_GPIO_EXTI_Callback>
  }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e059      	b.n	800297e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f00c fedf 	bl	800f6a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f8:	d102      	bne.n	8002900 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f005 fc36 	bl	8008176 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7c1a      	ldrb	r2, [r3, #16]
 8002912:	f88d 2000 	strb.w	r2, [sp]
 8002916:	3304      	adds	r3, #4
 8002918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291a:	f005 fbb7 	bl	800808c <USB_CoreInit>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e026      	b.n	800297e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f005 fc2e 	bl	8008198 <USB_SetCurrentMode>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e017      	b.n	800297e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7c1a      	ldrb	r2, [r3, #16]
 8002956:	f88d 2000 	strb.w	r2, [sp]
 800295a:	3304      	adds	r3, #4
 800295c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295e:	f005 fdd1 	bl	8008504 <USB_HostInit>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e004      	b.n	800297e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002986:	b590      	push	{r4, r7, lr}
 8002988:	b08b      	sub	sp, #44	@ 0x2c
 800298a:	af04      	add	r7, sp, #16
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	4608      	mov	r0, r1
 8002990:	4611      	mov	r1, r2
 8002992:	461a      	mov	r2, r3
 8002994:	4603      	mov	r3, r0
 8002996:	70fb      	strb	r3, [r7, #3]
 8002998:	460b      	mov	r3, r1
 800299a:	70bb      	strb	r3, [r7, #2]
 800299c:	4613      	mov	r3, r2
 800299e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80029a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80029a2:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_HCD_HC_Init+0x2c>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e09d      	b.n	8002aee <HAL_HCD_HC_Init+0x168>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3319      	adds	r3, #25
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3314      	adds	r3, #20
 80029de:	787a      	ldrb	r2, [r7, #1]
 80029e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3315      	adds	r3, #21
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3326      	adds	r3, #38	@ 0x26
 8002a06:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	78bb      	ldrb	r3, [r7, #2]
 8002a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a14:	b2d8      	uxtb	r0, r3
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3316      	adds	r3, #22
 8002a24:	4602      	mov	r2, r0
 8002a26:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fbc7 	bl	80031c0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002a32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da0a      	bge.n	8002a50 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3317      	adds	r3, #23
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e009      	b.n	8002a64 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3317      	adds	r3, #23
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 feaf 	bl	80087cc <USB_GetHostSpeed>
 8002a6e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002a70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10b      	bne.n	8002a90 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002a78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_HCD_HC_Init+0x10a>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2bbc      	cmp	r3, #188	@ 0xbc
 8002a8a:	d901      	bls.n	8002a90 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002a8c:	23bc      	movs	r3, #188	@ 0xbc
 8002a8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3318      	adds	r3, #24
 8002aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	b298      	uxth	r0, r3
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3328      	adds	r3, #40	@ 0x28
 8002aba:	4602      	mov	r2, r0
 8002abc:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	787c      	ldrb	r4, [r7, #1]
 8002ac8:	78ba      	ldrb	r2, [r7, #2]
 8002aca:	78f9      	ldrb	r1, [r7, #3]
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4623      	mov	r3, r4
 8002adc:	f005 fe9e 	bl	800881c <USB_HC_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}

08002af6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_HCD_HC_Halt+0x1e>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e00f      	b.n	8002b34 <HAL_HCD_HC_Halt+0x3e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f006 fa30 	bl	8008f8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	70fb      	strb	r3, [r7, #3]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70bb      	strb	r3, [r7, #2]
 8002b52:	4613      	mov	r3, r2
 8002b54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3317      	adds	r3, #23
 8002b66:	78ba      	ldrb	r2, [r7, #2]
 8002b68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3326      	adds	r3, #38	@ 0x26
 8002b7a:	787a      	ldrb	r2, [r7, #1]
 8002b7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b7e:	7c3b      	ldrb	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d114      	bne.n	8002bae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	332a      	adds	r3, #42	@ 0x2a
 8002b94:	2203      	movs	r2, #3
 8002b96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3319      	adds	r3, #25
 8002ba8:	7f3a      	ldrb	r2, [r7, #28]
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e009      	b.n	8002bc2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	332a      	adds	r3, #42	@ 0x2a
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bc2:	787b      	ldrb	r3, [r7, #1]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	f200 8102 	bhi.w	8002dce <HAL_HCD_HC_SubmitRequest+0x292>
 8002bca:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002db9 	.word	0x08002db9
 8002bd8:	08002ca5 	.word	0x08002ca5
 8002bdc:	08002d2f 	.word	0x08002d2f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002be0:	7c3b      	ldrb	r3, [r7, #16]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	f040 80f5 	bne.w	8002dd2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002be8:	78bb      	ldrb	r3, [r7, #2]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d12d      	bne.n	8002c4a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002bee:	8b3b      	ldrh	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	333d      	adds	r3, #61	@ 0x3d
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	333d      	adds	r3, #61	@ 0x3d
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	332a      	adds	r3, #42	@ 0x2a
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002c32:	e0ce      	b.n	8002dd2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	332a      	adds	r3, #42	@ 0x2a
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
      break;
 8002c48:	e0c3      	b.n	8002dd2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	331a      	adds	r3, #26
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f040 80b8 	bne.w	8002dd2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	333c      	adds	r3, #60	@ 0x3c
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	332a      	adds	r3, #42	@ 0x2a
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	e0a1      	b.n	8002dd2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	332a      	adds	r3, #42	@ 0x2a
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	701a      	strb	r2, [r3, #0]
      break;
 8002ca2:	e096      	b.n	8002dd2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ca4:	78bb      	ldrb	r3, [r7, #2]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d120      	bne.n	8002cec <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	333d      	adds	r3, #61	@ 0x3d
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	332a      	adds	r3, #42	@ 0x2a
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cd4:	e07e      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	332a      	adds	r3, #42	@ 0x2a
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
      break;
 8002cea:	e073      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	333c      	adds	r3, #60	@ 0x3c
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	332a      	adds	r3, #42	@ 0x2a
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
      break;
 8002d16:	e05d      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	332a      	adds	r3, #42	@ 0x2a
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
      break;
 8002d2c:	e052      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d2e:	78bb      	ldrb	r3, [r7, #2]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d120      	bne.n	8002d76 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	333d      	adds	r3, #61	@ 0x3d
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	332a      	adds	r3, #42	@ 0x2a
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d5e:	e039      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	332a      	adds	r3, #42	@ 0x2a
 8002d70:	2202      	movs	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]
      break;
 8002d74:	e02e      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	333c      	adds	r3, #60	@ 0x3c
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	332a      	adds	r3, #42	@ 0x2a
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
      break;
 8002da0:	e018      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	332a      	adds	r3, #42	@ 0x2a
 8002db2:	2202      	movs	r2, #2
 8002db4:	701a      	strb	r2, [r3, #0]
      break;
 8002db6:	e00d      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	332a      	adds	r3, #42	@ 0x2a
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
      break;
 8002dcc:	e002      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002dd2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	332c      	adds	r3, #44	@ 0x2c
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	8b39      	ldrh	r1, [r7, #24]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	3334      	adds	r3, #52	@ 0x34
 8002dfa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	@ 0x4c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3338      	adds	r3, #56	@ 0x38
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3315      	adds	r3, #21
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	1d19      	adds	r1, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	799b      	ldrb	r3, [r3, #6]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f005 fe04 	bl	8008a74 <USB_HC_StartXfer>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop

08002e78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f005 faf8 	bl	8008484 <USB_GetMode>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 80fb 	bne.w	8003092 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f005 fabb 	bl	800841c <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80f1 	beq.w	8003090 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f005 fab2 	bl	800841c <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ebe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ec2:	d104      	bne.n	8002ece <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ecc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f005 faa2 	bl	800841c <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee2:	d104      	bne.n	8002eee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 fa92 	bl	800841c <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f02:	d104      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f005 fa82 	bl	800841c <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d103      	bne.n	8002f2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2202      	movs	r2, #2
 8002f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 fa74 	bl	800841c <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f3e:	d120      	bne.n	8002f82 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d113      	bne.n	8002f82 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	6938      	ldr	r0, [r7, #16]
 8002f5e:	f005 f967 	bl	8008230 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f62:	6938      	ldr	r0, [r7, #16]
 8002f64:	f005 f996 	bl	8008294 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7a5b      	ldrb	r3, [r3, #9]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d105      	bne.n	8002f7c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f005 fb88 	bl	800868c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f00c fc11 	bl	800f7a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 fa48 	bl	800841c <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f96:	d102      	bne.n	8002f9e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 fd33 	bl	8004a04 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fa3a 	bl	800841c <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d106      	bne.n	8002fc0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f00c fbda 	bl	800f76c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f005 fa29 	bl	800841c <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd4:	d139      	bne.n	800304a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f005 ffc4 	bl	8008f68 <USB_HC_ReadInterrupt>
 8002fe0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e025      	b.n	8003034 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d018      	beq.n	800302e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003012:	d106      	bne.n	8003022 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f905 	bl	800322a <HCD_HC_IN_IRQHandler>
 8003020:	e005      	b.n	800302e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 ff67 	bl	8003efc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3301      	adds	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	795b      	ldrb	r3, [r3, #5]
 8003038:	461a      	mov	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	4293      	cmp	r3, r2
 800303e:	d3d3      	bcc.n	8002fe8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f005 f9e4 	bl	800841c <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b10      	cmp	r3, #16
 800305c:	d101      	bne.n	8003062 <HAL_HCD_IRQHandler+0x1ea>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_HCD_IRQHandler+0x1ec>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d014      	beq.n	8003092 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0210 	bic.w	r2, r2, #16
 8003076:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f001 fbe4 	bl	8004846 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0210 	orr.w	r2, r2, #16
 800308c:	619a      	str	r2, [r3, #24]
 800308e:	e000      	b.n	8003092 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003090:	bf00      	nop
    }
  }
}
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_HCD_Start+0x16>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e013      	b.n	80030d6 <HAL_HCD_Start+0x3e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 fb4c 	bl	800875a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 f844 	bl	8008154 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_HCD_Stop+0x16>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e00d      	b.n	8003110 <HAL_HCD_Stop+0x32>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f006 f89f 	bl	8009244 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f005 faee 	bl	8008706 <USB_ResetPort>
 800312a:	4603      	mov	r3, r0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334c      	adds	r3, #76	@ 0x4c
 8003150:	781b      	ldrb	r3, [r3, #0]
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3338      	adds	r3, #56	@ 0x38
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f005 fb30 	bl	80087fa <USB_GetCurrentFrame>
 800319a:	4603      	mov	r3, r0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 fb0b 	bl	80087cc <USB_GetHostSpeed>
 80031b6:	4603      	mov	r3, r0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	331a      	adds	r3, #26
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	331b      	adds	r3, #27
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3325      	adds	r3, #37	@ 0x25
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3324      	adds	r3, #36	@ 0x24
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f005 f8fa 	bl	8008442 <USB_ReadChInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11a      	bne.n	800328e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	2304      	movs	r3, #4
 8003268:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	@ 0x4d
 800327a:	2207      	movs	r2, #7
 800327c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f005 fe7f 	bl	8008f8a <USB_HC_Halt>
 800328c:	e09e      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f005 f8d3 	bl	8008442 <USB_ReadChInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a6:	d11b      	bne.n	80032e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	@ 0x4d
 80032cc:	2208      	movs	r2, #8
 80032ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f005 fe56 	bl	8008f8a <USB_HC_Halt>
 80032de:	e075      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 f8aa 	bl	8008442 <USB_ReadChInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d11a      	bne.n	800332e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	2308      	movs	r3, #8
 8003308:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334d      	adds	r3, #77	@ 0x4d
 800331a:	2206      	movs	r2, #6
 800331c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f005 fe2f 	bl	8008f8a <USB_HC_Halt>
 800332c:	e04e      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f005 f883 	bl	8008442 <USB_ReadChInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003346:	d11b      	bne.n	8003380 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334d      	adds	r3, #77	@ 0x4d
 800336c:	2209      	movs	r2, #9
 800336e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f005 fe06 	bl	8008f8a <USB_HC_Halt>
 800337e:	e025      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f005 f85a 	bl	8008442 <USB_ReadChInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	2b80      	cmp	r3, #128	@ 0x80
 8003396:	d119      	bne.n	80033cc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a4:	461a      	mov	r2, r3
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334d      	adds	r3, #77	@ 0x4d
 80033ba:	2207      	movs	r2, #7
 80033bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 fddf 	bl	8008f8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 f834 	bl	8008442 <USB_ReadChInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e4:	d112      	bne.n	800340c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 fdcb 	bl	8008f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	f000 bd75 	b.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f005 f814 	bl	8008442 <USB_ReadChInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 8128 	bne.w	8003676 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003432:	461a      	mov	r2, r3
 8003434:	2320      	movs	r3, #32
 8003436:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	331b      	adds	r3, #27
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d119      	bne.n	8003482 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	331b      	adds	r3, #27
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	440a      	add	r2, r1
 8003478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800347c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003480:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	799b      	ldrb	r3, [r3, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01b      	beq.n	80034c2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3330      	adds	r3, #48	@ 0x30
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	1ac9      	subs	r1, r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	3338      	adds	r3, #56	@ 0x38
 80034c0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334d      	adds	r3, #77	@ 0x4d
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3344      	adds	r3, #68	@ 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2301      	movs	r3, #1
 80034fa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3326      	adds	r3, #38	@ 0x26
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3326      	adds	r3, #38	@ 0x26
 8003522:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003524:	2b02      	cmp	r3, #2
 8003526:	d110      	bne.n	800354a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f005 fd2a 	bl	8008f8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	2310      	movs	r3, #16
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	e03d      	b.n	80035c6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	3326      	adds	r3, #38	@ 0x26
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d00a      	beq.n	8003576 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3326      	adds	r3, #38	@ 0x26
 8003570:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003572:	2b01      	cmp	r3, #1
 8003574:	d127      	bne.n	80035c6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	440a      	add	r2, r1
 800358c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003590:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003594:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334c      	adds	r3, #76	@ 0x4c
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334c      	adds	r3, #76	@ 0x4c
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f00c f8fd 	bl	800f7c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	799b      	ldrb	r3, [r3, #6]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d13b      	bne.n	8003646 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3338      	adds	r3, #56	@ 0x38
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	3328      	adds	r3, #40	@ 0x28
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	440b      	add	r3, r1
 80035f4:	1e59      	subs	r1, r3, #1
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4403      	add	r3, r0
 8003604:	3328      	adds	r3, #40	@ 0x28
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	fbb1 f3f3 	udiv	r3, r1, r3
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8470 	beq.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	333c      	adds	r3, #60	@ 0x3c
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2d8      	uxtb	r0, r3
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	333c      	adds	r3, #60	@ 0x3c
 800363e:	4602      	mov	r2, r0
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	f000 bc58 	b.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	333c      	adds	r3, #60	@ 0x3c
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	f083 0301 	eor.w	r3, r3, #1
 800365e:	b2d8      	uxtb	r0, r3
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	333c      	adds	r3, #60	@ 0x3c
 800366e:	4602      	mov	r2, r0
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	f000 bc40 	b.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f004 fedf 	bl	8008442 <USB_ReadChInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b20      	cmp	r3, #32
 800368c:	d131      	bne.n	80036f2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	2320      	movs	r3, #32
 800369e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	331a      	adds	r3, #26
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	f040 841f 	bne.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	331b      	adds	r3, #27
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	@ 0x4d
 80036dc:	2203      	movs	r2, #3
 80036de:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f005 fc4e 	bl	8008f8a <USB_HC_Halt>
 80036ee:	f000 bc02 	b.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fea1 	bl	8008442 <USB_ReadChInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b02      	cmp	r3, #2
 8003708:	f040 8305 	bne.w	8003d16 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003718:	461a      	mov	r2, r3
 800371a:	2302      	movs	r3, #2
 800371c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	334d      	adds	r3, #77	@ 0x4d
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d114      	bne.n	800375e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334d      	adds	r3, #77	@ 0x4d
 8003744:	2202      	movs	r2, #2
 8003746:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334c      	adds	r3, #76	@ 0x4c
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e2cc      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	334d      	adds	r3, #77	@ 0x4d
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d114      	bne.n	800379e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	334d      	adds	r3, #77	@ 0x4d
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334c      	adds	r3, #76	@ 0x4c
 8003798:	2205      	movs	r2, #5
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	e2ac      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	334d      	adds	r3, #77	@ 0x4d
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d00b      	beq.n	80037cc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334d      	adds	r3, #77	@ 0x4d
 80037c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	f040 80a6 	bne.w	8003918 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334d      	adds	r3, #77	@ 0x4d
 80037dc:	2202      	movs	r2, #2
 80037de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3344      	adds	r3, #68	@ 0x44
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4403      	add	r3, r0
 8003800:	3344      	adds	r3, #68	@ 0x44
 8003802:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3344      	adds	r3, #68	@ 0x44
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d943      	bls.n	80038a2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3344      	adds	r3, #68	@ 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	331a      	adds	r3, #26
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d123      	bne.n	800388c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	331b      	adds	r3, #27
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	331c      	adds	r3, #28
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	440a      	add	r2, r1
 8003882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	334c      	adds	r3, #76	@ 0x4c
 800389c:	2204      	movs	r2, #4
 800389e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038a0:	e229      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	334c      	adds	r3, #76	@ 0x4c
 80038b2:	2202      	movs	r2, #2
 80038b4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3326      	adds	r3, #38	@ 0x26
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3326      	adds	r3, #38	@ 0x26
 80038dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038de:	2b02      	cmp	r3, #2
 80038e0:	f040 8209 	bne.w	8003cf6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003916:	e1ee      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	334d      	adds	r3, #77	@ 0x4d
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b05      	cmp	r3, #5
 800392c:	f040 80c8 	bne.w	8003ac0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	331b      	adds	r3, #27
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	f040 81ce 	bne.w	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3326      	adds	r3, #38	@ 0x26
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d16b      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3348      	adds	r3, #72	@ 0x48
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1c59      	adds	r1, r3, #1
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4403      	add	r3, r0
 8003992:	3348      	adds	r3, #72	@ 0x48
 8003994:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3348      	adds	r3, #72	@ 0x48
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d943      	bls.n	8003a34 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3348      	adds	r3, #72	@ 0x48
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	331b      	adds	r3, #27
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3344      	adds	r3, #68	@ 0x44
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d809      	bhi.n	80039fe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	331c      	adds	r3, #28
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	334c      	adds	r3, #76	@ 0x4c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e014      	b.n	8003a5e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	334c      	adds	r3, #76	@ 0x4c
 8003a44:	2202      	movs	r2, #2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e009      	b.n	8003a5e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	334c      	adds	r3, #76	@ 0x4c
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3326      	adds	r3, #38	@ 0x26
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3326      	adds	r3, #38	@ 0x26
 8003a84:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	f040 8136 	bne.w	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003aa2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003aaa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e11b      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	334d      	adds	r3, #77	@ 0x4d
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	f040 8081 	bne.w	8003bda <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	334d      	adds	r3, #77	@ 0x4d
 8003ae8:	2202      	movs	r2, #2
 8003aea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	331b      	adds	r3, #27
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f040 80fa 	bne.w	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334c      	adds	r3, #76	@ 0x4c
 8003b14:	2202      	movs	r2, #2
 8003b16:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b36:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b56:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b72:	f023 0320 	bic.w	r3, r3, #32
 8003b76:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	3326      	adds	r3, #38	@ 0x26
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3326      	adds	r3, #38	@ 0x26
 8003b9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	f040 80a9 	bne.w	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bbc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bc4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e08e      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	334d      	adds	r3, #77	@ 0x4d
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d143      	bne.n	8003c78 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334d      	adds	r3, #77	@ 0x4d
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	334c      	adds	r3, #76	@ 0x4c
 8003c14:	2202      	movs	r2, #2
 8003c16:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3326      	adds	r3, #38	@ 0x26
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3326      	adds	r3, #38	@ 0x26
 8003c3e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d159      	bne.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c5a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c62:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c70:	461a      	mov	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e03f      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334d      	adds	r3, #77	@ 0x4d
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d126      	bne.n	8003cdc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334d      	adds	r3, #77	@ 0x4d
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3344      	adds	r3, #68	@ 0x44
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c59      	adds	r1, r3, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3344      	adds	r3, #68	@ 0x44
 8003cc4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	334c      	adds	r3, #76	@ 0x4c
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e00d      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	334d      	adds	r3, #77	@ 0x4d
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f000 8100 	beq.w	8003ef4 <HCD_HC_IN_IRQHandler+0xcca>
 8003cf4:	e000      	b.n	8003cf8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cf6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334c      	adds	r3, #76	@ 0x4c
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f00b fd56 	bl	800f7c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d14:	e0ef      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fb8f 	bl	8008442 <USB_ReadChInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d12f      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2340      	movs	r3, #64	@ 0x40
 8003d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	2205      	movs	r2, #5
 8003d52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	331a      	adds	r3, #26
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3344      	adds	r3, #68	@ 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	78fa      	ldrb	r2, [r7, #3]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f005 f8ff 	bl	8008f8a <USB_HC_Halt>
 8003d8c:	e0b3      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 fb53 	bl	8008442 <USB_ReadChInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	f040 80a7 	bne.w	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3326      	adds	r3, #38	@ 0x26
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d11b      	bne.n	8003df6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3344      	adds	r3, #68	@ 0x44
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	334d      	adds	r3, #77	@ 0x4d
 8003de2:	2204      	movs	r2, #4
 8003de4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 f8cb 	bl	8008f8a <USB_HC_Halt>
 8003df4:	e03f      	b.n	8003e76 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3326      	adds	r3, #38	@ 0x26
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3326      	adds	r3, #38	@ 0x26
 8003e1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d129      	bne.n	8003e76 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	3344      	adds	r3, #68	@ 0x44
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	799b      	ldrb	r3, [r3, #6]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HCD_HC_IN_IRQHandler+0xc2a>
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	331b      	adds	r3, #27
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d110      	bne.n	8003e76 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	334d      	adds	r3, #77	@ 0x4d
 8003e64:	2204      	movs	r2, #4
 8003e66:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 f88a 	bl	8008f8a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	331b      	adds	r3, #27
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d129      	bne.n	8003ee0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	331b      	adds	r3, #27
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eda:	f043 0320 	orr.w	r3, r3, #32
 8003ede:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	2310      	movs	r3, #16
 8003ef0:	6093      	str	r3, [r2, #8]
 8003ef2:	e000      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ef4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f004 fa91 	bl	8008442 <USB_ReadChInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d11b      	bne.n	8003f62 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f36:	461a      	mov	r2, r3
 8003f38:	2304      	movs	r3, #4
 8003f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334d      	adds	r3, #77	@ 0x4d
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 f816 	bl	8008f8a <USB_HC_Halt>
 8003f5e:	f000 bc6f 	b.w	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f004 fa69 	bl	8008442 <USB_ReadChInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	f040 8082 	bne.w	8004080 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3319      	adds	r3, #25
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d124      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3319      	adds	r3, #25
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334c      	adds	r3, #76	@ 0x4c
 8003fc8:	2202      	movs	r2, #2
 8003fca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334d      	adds	r3, #77	@ 0x4d
 8003fdc:	2203      	movs	r2, #3
 8003fde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f004 ffce 	bl	8008f8a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	331a      	adds	r3, #26
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 841d 	bne.w	8004840 <HCD_HC_OUT_IRQHandler+0x944>
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	331b      	adds	r3, #27
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 8411 	bne.w	8004840 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3326      	adds	r3, #38	@ 0x26
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d009      	beq.n	8004048 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	331b      	adds	r3, #27
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	334d      	adds	r3, #77	@ 0x4d
 8004058:	2203      	movs	r2, #3
 800405a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f004 ff90 	bl	8008f8a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3344      	adds	r3, #68	@ 0x44
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e3df      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f004 f9da 	bl	8008442 <USB_ReadChInterrupts>
 800408e:	4603      	mov	r3, r0
 8004090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004098:	d111      	bne.n	80040be <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 ff67 	bl	8008f8a <USB_HC_Halt>
 80040bc:	e3c0      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f004 f9bb 	bl	8008442 <USB_ReadChInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d168      	bne.n	80041a8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3344      	adds	r3, #68	@ 0x44
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 f9a5 	bl	8008442 <USB_ReadChInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	d112      	bne.n	8004128 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3319      	adds	r3, #25
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004122:	461a      	mov	r2, r3
 8004124:	2340      	movs	r3, #64	@ 0x40
 8004126:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	331b      	adds	r3, #27
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d019      	beq.n	8004172 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	331b      	adds	r3, #27
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	440a      	add	r2, r1
 8004168:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800416c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004170:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	461a      	mov	r2, r3
 8004180:	2301      	movs	r3, #1
 8004182:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334d      	adds	r3, #77	@ 0x4d
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f004 fef2 	bl	8008f8a <USB_HC_Halt>
 80041a6:	e34b      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 f946 	bl	8008442 <USB_ReadChInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041bc:	2b40      	cmp	r3, #64	@ 0x40
 80041be:	d139      	bne.n	8004234 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	@ 0x4d
 80041d0:	2205      	movs	r2, #5
 80041d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	331a      	adds	r3, #26
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3319      	adds	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	3344      	adds	r3, #68	@ 0x44
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f004 feb5 	bl	8008f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	2340      	movs	r3, #64	@ 0x40
 8004230:	6093      	str	r3, [r2, #8]
 8004232:	e305      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f004 f900 	bl	8008442 <USB_ReadChInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b08      	cmp	r3, #8
 800424a:	d11a      	bne.n	8004282 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2308      	movs	r3, #8
 800425c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334d      	adds	r3, #77	@ 0x4d
 800426e:	2206      	movs	r2, #6
 8004270:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 fe85 	bl	8008f8a <USB_HC_Halt>
 8004280:	e2de      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f004 f8d9 	bl	8008442 <USB_ReadChInterrupts>
 8004290:	4603      	mov	r3, r0
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b10      	cmp	r3, #16
 8004298:	d144      	bne.n	8004324 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3344      	adds	r3, #68	@ 0x44
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	334d      	adds	r3, #77	@ 0x4d
 80042be:	2204      	movs	r2, #4
 80042c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	3319      	adds	r3, #25
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d114      	bne.n	8004302 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3318      	adds	r3, #24
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3319      	adds	r3, #25
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f004 fe3d 	bl	8008f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431c:	461a      	mov	r2, r3
 800431e:	2310      	movs	r3, #16
 8004320:	6093      	str	r3, [r2, #8]
 8004322:	e28d      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f004 f888 	bl	8008442 <USB_ReadChInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	d169      	bne.n	8004410 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	799b      	ldrb	r3, [r3, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334d      	adds	r3, #77	@ 0x4d
 8004354:	2207      	movs	r2, #7
 8004356:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f004 fe12 	bl	8008f8a <USB_HC_Halt>
 8004366:	e049      	b.n	80043fc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	3344      	adds	r3, #68	@ 0x44
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c59      	adds	r1, r3, #1
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4403      	add	r3, r0
 8004388:	3344      	adds	r3, #68	@ 0x44
 800438a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3344      	adds	r3, #68	@ 0x44
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d922      	bls.n	80043e8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	@ 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	334c      	adds	r3, #76	@ 0x4c
 80043c6:	2204      	movs	r2, #4
 80043c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	334c      	adds	r3, #76	@ 0x4c
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f00b f9ed 	bl	800f7c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043e6:	e009      	b.n	80043fc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334c      	adds	r3, #76	@ 0x4c
 80043f8:	2202      	movs	r2, #2
 80043fa:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004408:	461a      	mov	r2, r3
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	6093      	str	r3, [r2, #8]
 800440e:	e217      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f004 f812 	bl	8008442 <USB_ReadChInterrupts>
 800441e:	4603      	mov	r3, r0
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	d11b      	bne.n	8004462 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334d      	adds	r3, #77	@ 0x4d
 800443a:	2209      	movs	r2, #9
 800443c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f004 fd9f 	bl	8008f8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004458:	461a      	mov	r2, r3
 800445a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800445e:	6093      	str	r3, [r2, #8]
 8004460:	e1ee      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f003 ffe9 	bl	8008442 <USB_ReadChInterrupts>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	f040 81df 	bne.w	800483a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004488:	461a      	mov	r2, r3
 800448a:	2302      	movs	r3, #2
 800448c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	334d      	adds	r3, #77	@ 0x4d
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 8093 	bne.w	80045cc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334d      	adds	r3, #77	@ 0x4d
 80044b6:	2202      	movs	r2, #2
 80044b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	334c      	adds	r3, #76	@ 0x4c
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3326      	adds	r3, #38	@ 0x26
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d00b      	beq.n	80044fc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	3326      	adds	r3, #38	@ 0x26
 80044f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	f040 8190 	bne.w	800481c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	799b      	ldrb	r3, [r3, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d115      	bne.n	8004530 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	333d      	adds	r3, #61	@ 0x3d
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	f083 0301 	eor.w	r3, r3, #1
 800451c:	b2d8      	uxtb	r0, r3
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	333d      	adds	r3, #61	@ 0x3d
 800452c:	4602      	mov	r2, r0
 800452e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	799b      	ldrb	r3, [r3, #6]
 8004534:	2b01      	cmp	r3, #1
 8004536:	f040 8171 	bne.w	800481c <HCD_HC_OUT_IRQHandler+0x920>
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	3334      	adds	r3, #52	@ 0x34
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8165 	beq.w	800481c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3334      	adds	r3, #52	@ 0x34
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4403      	add	r3, r0
 8004572:	3328      	adds	r3, #40	@ 0x28
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	440b      	add	r3, r1
 8004578:	1e59      	subs	r1, r3, #1
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4403      	add	r3, r0
 8004588:	3328      	adds	r3, #40	@ 0x28
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004590:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 813f 	beq.w	800481c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	333d      	adds	r3, #61	@ 0x3d
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	f083 0301 	eor.w	r3, r3, #1
 80045b6:	b2d8      	uxtb	r0, r3
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	333d      	adds	r3, #61	@ 0x3d
 80045c6:	4602      	mov	r2, r0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e127      	b.n	800481c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	334d      	adds	r3, #77	@ 0x4d
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d120      	bne.n	8004624 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334d      	adds	r3, #77	@ 0x4d
 80045f2:	2202      	movs	r2, #2
 80045f4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	331b      	adds	r3, #27
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	f040 8107 	bne.w	800481c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334c      	adds	r3, #76	@ 0x4c
 800461e:	2202      	movs	r2, #2
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e0fb      	b.n	800481c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334d      	adds	r3, #77	@ 0x4d
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d13a      	bne.n	80046b0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334d      	adds	r3, #77	@ 0x4d
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	334c      	adds	r3, #76	@ 0x4c
 800465e:	2202      	movs	r2, #2
 8004660:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	331b      	adds	r3, #27
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	f040 80d1 	bne.w	800481c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	331b      	adds	r3, #27
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	e0b5      	b.n	800481c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	334d      	adds	r3, #77	@ 0x4d
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d114      	bne.n	80046f0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	334d      	adds	r3, #77	@ 0x4d
 80046d6:	2202      	movs	r2, #2
 80046d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334c      	adds	r3, #76	@ 0x4c
 80046ea:	2202      	movs	r2, #2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e095      	b.n	800481c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334d      	adds	r3, #77	@ 0x4d
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d114      	bne.n	8004730 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	334d      	adds	r3, #77	@ 0x4d
 8004716:	2202      	movs	r2, #2
 8004718:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	334c      	adds	r3, #76	@ 0x4c
 800472a:	2205      	movs	r2, #5
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e075      	b.n	800481c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	334d      	adds	r3, #77	@ 0x4d
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b07      	cmp	r3, #7
 8004744:	d00a      	beq.n	800475c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	334d      	adds	r3, #77	@ 0x4d
 8004756:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004758:	2b09      	cmp	r3, #9
 800475a:	d170      	bne.n	800483e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	334d      	adds	r3, #77	@ 0x4d
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3344      	adds	r3, #68	@ 0x44
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	1c59      	adds	r1, r3, #1
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4403      	add	r3, r0
 8004790:	3344      	adds	r3, #68	@ 0x44
 8004792:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3344      	adds	r3, #68	@ 0x44
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d914      	bls.n	80047d4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3344      	adds	r3, #68	@ 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334c      	adds	r3, #76	@ 0x4c
 80047ce:	2204      	movs	r2, #4
 80047d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047d2:	e022      	b.n	800481a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334c      	adds	r3, #76	@ 0x4c
 80047e4:	2202      	movs	r2, #2
 80047e6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004806:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004814:	461a      	mov	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800481a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	334c      	adds	r3, #76	@ 0x4c
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f00a ffc4 	bl	800f7c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004838:	e002      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800483e:	bf00      	nop
  }
}
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b08a      	sub	sp, #40	@ 0x28
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	0c5b      	lsrs	r3, r3, #17
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d004      	beq.n	800488c <HCD_RXQLVL_IRQHandler+0x46>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b05      	cmp	r3, #5
 8004886:	f000 80b6 	beq.w	80049f6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800488a:	e0b7      	b.n	80049fc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80b3 	beq.w	80049fa <HCD_RXQLVL_IRQHandler+0x1b4>
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	332c      	adds	r3, #44	@ 0x2c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80a7 	beq.w	80049fa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4613      	mov	r3, r2
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	3338      	adds	r3, #56	@ 0x38
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	18d1      	adds	r1, r2, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4403      	add	r3, r0
 80048d0:	3334      	adds	r3, #52	@ 0x34
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4299      	cmp	r1, r3
 80048d6:	f200 8083 	bhi.w	80049e0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	332c      	adds	r3, #44	@ 0x2c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	b292      	uxth	r2, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f003 fd39 	bl	800836c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	332c      	adds	r3, #44	@ 0x2c
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	18d1      	adds	r1, r2, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4403      	add	r3, r0
 800491e:	332c      	adds	r3, #44	@ 0x2c
 8004920:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3338      	adds	r3, #56	@ 0x38
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	18d1      	adds	r1, r2, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4403      	add	r3, r0
 8004946:	3338      	adds	r3, #56	@ 0x38
 8004948:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	4413      	add	r3, r2
 8004952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	0cdb      	lsrs	r3, r3, #19
 800495a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	3328      	adds	r3, #40	@ 0x28
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4293      	cmp	r3, r2
 8004978:	d13f      	bne.n	80049fa <HCD_RXQLVL_IRQHandler+0x1b4>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d03c      	beq.n	80049fa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004996:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800499e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4613      	mov	r3, r2
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	333c      	adds	r3, #60	@ 0x3c
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f083 0301 	eor.w	r3, r3, #1
 80049c8:	b2d8      	uxtb	r0, r3
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	333c      	adds	r3, #60	@ 0x3c
 80049da:	4602      	mov	r2, r0
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e00c      	b.n	80049fa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	334c      	adds	r3, #76	@ 0x4c
 80049f0:	2204      	movs	r2, #4
 80049f2:	701a      	strb	r2, [r3, #0]
      break;
 80049f4:	e001      	b.n	80049fa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80049fa:	bf00      	nop
  }
}
 80049fc:	bf00      	nop
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004a30:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d10b      	bne.n	8004a54 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d102      	bne.n	8004a4c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f00a fe9e 	bl	800f788 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d132      	bne.n	8004ac4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d126      	bne.n	8004abe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7a5b      	ldrb	r3, [r3, #9]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d113      	bne.n	8004aa0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004a7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a82:	d106      	bne.n	8004a92 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f003 fdfe 	bl	800868c <USB_InitFSLSPClkSel>
 8004a90:	e011      	b.n	8004ab6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2101      	movs	r1, #1
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f003 fdf7 	bl	800868c <USB_InitFSLSPClkSel>
 8004a9e:	e00a      	b.n	8004ab6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	79db      	ldrb	r3, [r3, #7]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d106      	bne.n	8004ab6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004ab4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f00a fe94 	bl	800f7e4 <HAL_HCD_PortEnabled_Callback>
 8004abc:	e002      	b.n	8004ac4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f00a fe9e 	bl	800f800 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d103      	bne.n	8004ad6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0320 	orr.w	r3, r3, #32
 8004ad4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6013      	str	r3, [r2, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e12b      	b.n	8004d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fd66 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	@ 0x24
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b50:	f001 fa20 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4a81      	ldr	r2, [pc, #516]	@ (8004d60 <HAL_I2C_Init+0x274>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d807      	bhi.n	8004b70 <HAL_I2C_Init+0x84>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a80      	ldr	r2, [pc, #512]	@ (8004d64 <HAL_I2C_Init+0x278>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bf94      	ite	ls
 8004b68:	2301      	movls	r3, #1
 8004b6a:	2300      	movhi	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e006      	b.n	8004b7e <HAL_I2C_Init+0x92>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a7d      	ldr	r2, [pc, #500]	@ (8004d68 <HAL_I2C_Init+0x27c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	bf94      	ite	ls
 8004b78:	2301      	movls	r3, #1
 8004b7a:	2300      	movhi	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0e7      	b.n	8004d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a78      	ldr	r2, [pc, #480]	@ (8004d6c <HAL_I2C_Init+0x280>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0c9b      	lsrs	r3, r3, #18
 8004b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004d60 <HAL_I2C_Init+0x274>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d802      	bhi.n	8004bc0 <HAL_I2C_Init+0xd4>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	e009      	b.n	8004bd4 <HAL_I2C_Init+0xe8>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a69      	ldr	r2, [pc, #420]	@ (8004d70 <HAL_I2C_Init+0x284>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004be6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	495c      	ldr	r1, [pc, #368]	@ (8004d60 <HAL_I2C_Init+0x274>)
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	d819      	bhi.n	8004c28 <HAL_I2C_Init+0x13c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1e59      	subs	r1, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c02:	1c59      	adds	r1, r3, #1
 8004c04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c08:	400b      	ands	r3, r1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_I2C_Init+0x138>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1e59      	subs	r1, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c22:	e051      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004c24:	2304      	movs	r3, #4
 8004c26:	e04f      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d111      	bne.n	8004c54 <HAL_I2C_Init+0x168>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1e58      	subs	r0, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	440b      	add	r3, r1
 8004c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e012      	b.n	8004c7a <HAL_I2C_Init+0x18e>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e58      	subs	r0, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	0099      	lsls	r1, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Init+0x196>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e022      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10e      	bne.n	8004ca8 <HAL_I2C_Init+0x1bc>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1e58      	subs	r0, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	440b      	add	r3, r1
 8004c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca6:	e00f      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e58      	subs	r0, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	0099      	lsls	r1, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	6809      	ldr	r1, [r1, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6911      	ldr	r1, [r2, #16]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68d2      	ldr	r2, [r2, #12]
 8004d02:	4311      	orrs	r1, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	000186a0 	.word	0x000186a0
 8004d64:	001e847f 	.word	0x001e847f
 8004d68:	003d08ff 	.word	0x003d08ff
 8004d6c:	431bde83 	.word	0x431bde83
 8004d70:	10624dd3 	.word	0x10624dd3

08004d74 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e128      	b.n	8004fd8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a90      	ldr	r2, [pc, #576]	@ (8004fe0 <HAL_I2S_Init+0x26c>)
 8004d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7fc fc67 	bl	8001674 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004dbc:	f023 030f 	bic.w	r3, r3, #15
 8004dc0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d060      	beq.n	8004e94 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004dda:	2310      	movs	r3, #16
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e001      	b.n	8004de4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004de0:	2320      	movs	r3, #32
 8004de2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d802      	bhi.n	8004df2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004df2:	2001      	movs	r0, #1
 8004df4:	f001 fa0a 	bl	800620c <HAL_RCCEx_GetPeriphCLKFreq>
 8004df8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e02:	d125      	bne.n	8004e50 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	3305      	adds	r3, #5
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e01f      	b.n	8004e6e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	3305      	adds	r3, #5
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e00e      	b.n	8004e6e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	3305      	adds	r3, #5
 8004e6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe4 <HAL_I2S_Init+0x270>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	08db      	lsrs	r3, r3, #3
 8004e78:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e003      	b.n	8004e9c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e94:	2302      	movs	r3, #2
 8004e96:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d902      	bls.n	8004ea8 <HAL_I2S_Init+0x134>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2bff      	cmp	r3, #255	@ 0xff
 8004ea6:	d907      	bls.n	8004eb8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e08f      	b.n	8004fd8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	ea42 0103 	orr.w	r1, r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ed6:	f023 030f 	bic.w	r3, r3, #15
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6851      	ldr	r1, [r2, #4]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	4311      	orrs	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68d2      	ldr	r2, [r2, #12]
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6992      	ldr	r2, [r2, #24]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004efa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d161      	bne.n	8004fc8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a38      	ldr	r2, [pc, #224]	@ (8004fe8 <HAL_I2S_Init+0x274>)
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a37      	ldr	r2, [pc, #220]	@ (8004fec <HAL_I2S_Init+0x278>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <HAL_I2S_Init+0x1a4>
 8004f14:	4b36      	ldr	r3, [pc, #216]	@ (8004ff0 <HAL_I2S_Init+0x27c>)
 8004f16:	e001      	b.n	8004f1c <HAL_I2S_Init+0x1a8>
 8004f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	4932      	ldr	r1, [pc, #200]	@ (8004fec <HAL_I2S_Init+0x278>)
 8004f24:	428a      	cmp	r2, r1
 8004f26:	d101      	bne.n	8004f2c <HAL_I2S_Init+0x1b8>
 8004f28:	4a31      	ldr	r2, [pc, #196]	@ (8004ff0 <HAL_I2S_Init+0x27c>)
 8004f2a:	e001      	b.n	8004f30 <HAL_I2S_Init+0x1bc>
 8004f2c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004f30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <HAL_I2S_Init+0x278>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <HAL_I2S_Init+0x1d4>
 8004f44:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff0 <HAL_I2S_Init+0x27c>)
 8004f46:	e001      	b.n	8004f4c <HAL_I2S_Init+0x1d8>
 8004f48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a25      	ldr	r2, [pc, #148]	@ (8004fec <HAL_I2S_Init+0x278>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <HAL_I2S_Init+0x1ea>
 8004f5a:	4b25      	ldr	r3, [pc, #148]	@ (8004ff0 <HAL_I2S_Init+0x27c>)
 8004f5c:	e001      	b.n	8004f62 <HAL_I2S_Init+0x1ee>
 8004f5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6e:	d003      	beq.n	8004f78 <HAL_I2S_Init+0x204>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e001      	b.n	8004f84 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	897b      	ldrh	r3, [r7, #10]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fb0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8004fec <HAL_I2S_Init+0x278>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <HAL_I2S_Init+0x24c>
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <HAL_I2S_Init+0x27c>)
 8004fbe:	e001      	b.n	8004fc4 <HAL_I2S_Init+0x250>
 8004fc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fc4:	897a      	ldrh	r2, [r7, #10]
 8004fc6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	080050eb 	.word	0x080050eb
 8004fe4:	cccccccd 	.word	0xcccccccd
 8004fe8:	08005201 	.word	0x08005201
 8004fec:	40003800 	.word	0x40003800
 8004ff0:	40003400 	.word	0x40003400

08004ff4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	881a      	ldrh	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10e      	bne.n	8005084 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005074:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffb8 	bl	8004ff4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	b292      	uxth	r2, r2
 80050a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	1c9a      	adds	r2, r3, #2
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10e      	bne.n	80050e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff93 	bl	8005008 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b04      	cmp	r3, #4
 8005104:	d13a      	bne.n	800517c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d109      	bne.n	8005124 <I2S_IRQHandler+0x3a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b40      	cmp	r3, #64	@ 0x40
 800511c:	d102      	bne.n	8005124 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ffb4 	bl	800508c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	d126      	bne.n	800517c <I2S_IRQHandler+0x92>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b20      	cmp	r3, #32
 800513a:	d11f      	bne.n	800517c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800514a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f043 0202 	orr.w	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ff50 	bl	800501c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b03      	cmp	r3, #3
 8005186:	d136      	bne.n	80051f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d109      	bne.n	80051a6 <I2S_IRQHandler+0xbc>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519c:	2b80      	cmp	r3, #128	@ 0x80
 800519e:	d102      	bne.n	80051a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff45 	bl	8005030 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d122      	bne.n	80051f6 <I2S_IRQHandler+0x10c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d11b      	bne.n	80051f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e8:	f043 0204 	orr.w	r2, r3, #4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ff13 	bl	800501c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051f6:	bf00      	nop
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a92      	ldr	r2, [pc, #584]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800521a:	4b92      	ldr	r3, [pc, #584]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800521c:	e001      	b.n	8005222 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800521e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a8b      	ldr	r2, [pc, #556]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005238:	4b8a      	ldr	r3, [pc, #552]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800523a:	e001      	b.n	8005240 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800523c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524c:	d004      	beq.n	8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 8099 	bne.w	800538a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d107      	bne.n	8005272 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f925 	bl	80054bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9c8 	bl	800561c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005292:	2b40      	cmp	r3, #64	@ 0x40
 8005294:	d13a      	bne.n	800530c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d035      	beq.n	800530c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d101      	bne.n	80052ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80052aa:	4b6e      	ldr	r3, [pc, #440]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052ac:	e001      	b.n	80052b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80052ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4969      	ldr	r1, [pc, #420]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052ba:	428b      	cmp	r3, r1
 80052bc:	d101      	bne.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80052be:	4b69      	ldr	r3, [pc, #420]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052c0:	e001      	b.n	80052c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80052c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fe:	f043 0202 	orr.w	r2, r3, #2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fe88 	bl	800501c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b08      	cmp	r3, #8
 8005314:	f040 80c3 	bne.w	800549e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80bd 	beq.w	800549e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005332:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a49      	ldr	r2, [pc, #292]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800533e:	4b49      	ldr	r3, [pc, #292]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005340:	e001      	b.n	8005346 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005342:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4944      	ldr	r1, [pc, #272]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800534e:	428b      	cmp	r3, r1
 8005350:	d101      	bne.n	8005356 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005352:	4b44      	ldr	r3, [pc, #272]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005354:	e001      	b.n	800535a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005356:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800535a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800535e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005360:	2300      	movs	r3, #0
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff fe4a 	bl	800501c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005388:	e089      	b.n	800549e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b02      	cmp	r3, #2
 8005392:	d107      	bne.n	80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8be 	bl	8005520 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8fd 	bl	80055b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d12f      	bne.n	8005428 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02a      	beq.n	8005428 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d101      	bne.n	80053f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053ee:	e001      	b.n	80053f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80053f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4919      	ldr	r1, [pc, #100]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053fc:	428b      	cmp	r3, r1
 80053fe:	d101      	bne.n	8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005400:	4b18      	ldr	r3, [pc, #96]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005402:	e001      	b.n	8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005404:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005408:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800540c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f043 0202 	orr.w	r2, r3, #2
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fdfa 	bl	800501c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b08      	cmp	r3, #8
 8005430:	d136      	bne.n	80054a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d031      	beq.n	80054a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a07      	ldr	r2, [pc, #28]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005446:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005448:	e001      	b.n	800544e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800544a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4902      	ldr	r1, [pc, #8]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005456:	428b      	cmp	r3, r1
 8005458:	d106      	bne.n	8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800545a:	4b02      	ldr	r3, [pc, #8]	@ (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800545c:	e006      	b.n	800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800545e:	bf00      	nop
 8005460:	40003800 	.word	0x40003800
 8005464:	40003400 	.word	0x40003400
 8005468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800546c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005470:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005480:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fdc0 	bl	800501c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800549c:	e000      	b.n	80054a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800549e:	bf00      	nop
}
 80054a0:	bf00      	nop
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	1c99      	adds	r1, r3, #2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80054ce:	881a      	ldrh	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d113      	bne.n	8005516 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ffc9 	bl	80054a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	1c99      	adds	r1, r3, #2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6251      	str	r1, [r2, #36]	@ 0x24
 8005532:	8819      	ldrh	r1, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1d      	ldr	r2, [pc, #116]	@ (80055b0 <I2SEx_TxISR_I2SExt+0x90>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d101      	bne.n	8005542 <I2SEx_TxISR_I2SExt+0x22>
 800553e:	4b1d      	ldr	r3, [pc, #116]	@ (80055b4 <I2SEx_TxISR_I2SExt+0x94>)
 8005540:	e001      	b.n	8005546 <I2SEx_TxISR_I2SExt+0x26>
 8005542:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005546:	460a      	mov	r2, r1
 8005548:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d121      	bne.n	80055a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a12      	ldr	r2, [pc, #72]	@ (80055b0 <I2SEx_TxISR_I2SExt+0x90>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <I2SEx_TxISR_I2SExt+0x50>
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <I2SEx_TxISR_I2SExt+0x94>)
 800556e:	e001      	b.n	8005574 <I2SEx_TxISR_I2SExt+0x54>
 8005570:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	490d      	ldr	r1, [pc, #52]	@ (80055b0 <I2SEx_TxISR_I2SExt+0x90>)
 800557c:	428b      	cmp	r3, r1
 800557e:	d101      	bne.n	8005584 <I2SEx_TxISR_I2SExt+0x64>
 8005580:	4b0c      	ldr	r3, [pc, #48]	@ (80055b4 <I2SEx_TxISR_I2SExt+0x94>)
 8005582:	e001      	b.n	8005588 <I2SEx_TxISR_I2SExt+0x68>
 8005584:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005588:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800558c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff81 	bl	80054a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40003800 	.word	0x40003800
 80055b4:	40003400 	.word	0x40003400

080055b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68d8      	ldr	r0, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	1c99      	adds	r1, r3, #2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80055d0:	b282      	uxth	r2, r0
 80055d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d113      	bne.n	8005614 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff4a 	bl	80054a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a20      	ldr	r2, [pc, #128]	@ (80056ac <I2SEx_RxISR_I2SExt+0x90>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <I2SEx_RxISR_I2SExt+0x16>
 800562e:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <I2SEx_RxISR_I2SExt+0x94>)
 8005630:	e001      	b.n	8005636 <I2SEx_RxISR_I2SExt+0x1a>
 8005632:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005636:	68d8      	ldr	r0, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	1c99      	adds	r1, r3, #2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005642:	b282      	uxth	r2, r0
 8005644:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d121      	bne.n	80056a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <I2SEx_RxISR_I2SExt+0x90>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <I2SEx_RxISR_I2SExt+0x50>
 8005668:	4b11      	ldr	r3, [pc, #68]	@ (80056b0 <I2SEx_RxISR_I2SExt+0x94>)
 800566a:	e001      	b.n	8005670 <I2SEx_RxISR_I2SExt+0x54>
 800566c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	490d      	ldr	r1, [pc, #52]	@ (80056ac <I2SEx_RxISR_I2SExt+0x90>)
 8005678:	428b      	cmp	r3, r1
 800567a:	d101      	bne.n	8005680 <I2SEx_RxISR_I2SExt+0x64>
 800567c:	4b0c      	ldr	r3, [pc, #48]	@ (80056b0 <I2SEx_RxISR_I2SExt+0x94>)
 800567e:	e001      	b.n	8005684 <I2SEx_RxISR_I2SExt+0x68>
 8005680:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005684:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005688:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d106      	bne.n	80056a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff03 	bl	80054a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40003800 	.word	0x40003800
 80056b0:	40003400 	.word	0x40003400

080056b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e267      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d075      	beq.n	80057be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056d2:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056de:	4b85      	ldr	r3, [pc, #532]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d112      	bne.n	8005710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ea:	4b82      	ldr	r3, [pc, #520]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f6:	d10b      	bne.n	8005710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	4b7e      	ldr	r3, [pc, #504]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d05b      	beq.n	80057bc <HAL_RCC_OscConfig+0x108>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d157      	bne.n	80057bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e242      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005718:	d106      	bne.n	8005728 <HAL_RCC_OscConfig+0x74>
 800571a:	4b76      	ldr	r3, [pc, #472]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a75      	ldr	r2, [pc, #468]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e01d      	b.n	8005764 <HAL_RCC_OscConfig+0xb0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0x98>
 8005732:	4b70      	ldr	r3, [pc, #448]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6f      	ldr	r2, [pc, #444]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	4b6d      	ldr	r3, [pc, #436]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6c      	ldr	r2, [pc, #432]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0xb0>
 800574c:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a68      	ldr	r2, [pc, #416]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4b66      	ldr	r3, [pc, #408]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a65      	ldr	r2, [pc, #404]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 800575e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fc fac0 	bl	8001cf0 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005774:	f7fc fabc 	bl	8001cf0 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	@ 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e207      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005786:	4b5b      	ldr	r3, [pc, #364]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0xc0>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fc faac 	bl	8001cf0 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800579c:	f7fc faa8 	bl	8001cf0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	@ 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e1f3      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ae:	4b51      	ldr	r3, [pc, #324]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0xe8>
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d063      	beq.n	8005892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ca:	4b4a      	ldr	r3, [pc, #296]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d11c      	bne.n	800581c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b44      	ldr	r3, [pc, #272]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d116      	bne.n	800581c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	4b41      	ldr	r3, [pc, #260]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_RCC_OscConfig+0x152>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d001      	beq.n	8005806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e1c7      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005806:	4b3b      	ldr	r3, [pc, #236]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4937      	ldr	r1, [pc, #220]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581a:	e03a      	b.n	8005892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005824:	4b34      	ldr	r3, [pc, #208]	@ (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fc fa61 	bl	8001cf0 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005832:	f7fc fa5d 	bl	8001cf0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1a8      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005844:	4b2b      	ldr	r3, [pc, #172]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4925      	ldr	r1, [pc, #148]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]
 8005864:	e015      	b.n	8005892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <HAL_RCC_OscConfig+0x244>)
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fc fa40 	bl	8001cf0 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005874:	f7fc fa3c 	bl	8001cf0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e187      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005886:	4b1b      	ldr	r3, [pc, #108]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d036      	beq.n	800590c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a6:	4b15      	ldr	r3, [pc, #84]	@ (80058fc <HAL_RCC_OscConfig+0x248>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fc fa20 	bl	8001cf0 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b4:	f7fc fa1c 	bl	8001cf0 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e167      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c6:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <HAL_RCC_OscConfig+0x240>)
 80058c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x200>
 80058d2:	e01b      	b.n	800590c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d4:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <HAL_RCC_OscConfig+0x248>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058da:	f7fc fa09 	bl	8001cf0 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e0:	e00e      	b.n	8005900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e2:	f7fc fa05 	bl	8001cf0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d907      	bls.n	8005900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e150      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	42470000 	.word	0x42470000
 80058fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005900:	4b88      	ldr	r3, [pc, #544]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ea      	bne.n	80058e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8097 	beq.w	8005a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591e:	4b81      	ldr	r3, [pc, #516]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	4b7d      	ldr	r3, [pc, #500]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	4a7c      	ldr	r2, [pc, #496]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	@ 0x40
 800593a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594a:	4b77      	ldr	r3, [pc, #476]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d118      	bne.n	8005988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005956:	4b74      	ldr	r3, [pc, #464]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a73      	ldr	r2, [pc, #460]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005962:	f7fc f9c5 	bl	8001cf0 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7fc f9c1 	bl	8001cf0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e10c      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b6a      	ldr	r3, [pc, #424]	@ (8005b28 <HAL_RCC_OscConfig+0x474>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x2ea>
 8005990:	4b64      	ldr	r3, [pc, #400]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005994:	4a63      	ldr	r2, [pc, #396]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	@ 0x70
 800599c:	e01c      	b.n	80059d8 <HAL_RCC_OscConfig+0x324>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x30c>
 80059a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0x324>
 80059c0:	4b58      	ldr	r3, [pc, #352]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c4:	4a57      	ldr	r2, [pc, #348]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80059cc:	4b55      	ldr	r3, [pc, #340]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d0:	4a54      	ldr	r2, [pc, #336]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 80059d2:	f023 0304 	bic.w	r3, r3, #4
 80059d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fc f986 	bl	8001cf0 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059e8:	f7fc f982 	bl	8001cf0 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0cb      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fe:	4b49      	ldr	r3, [pc, #292]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ee      	beq.n	80059e8 <HAL_RCC_OscConfig+0x334>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a0c:	f7fc f970 	bl	8001cf0 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a14:	f7fc f96c 	bl	8001cf0 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0b5      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ee      	bne.n	8005a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a3c:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	4a38      	ldr	r2, [pc, #224]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80a1 	beq.w	8005b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a52:	4b34      	ldr	r3, [pc, #208]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d05c      	beq.n	8005b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d141      	bne.n	8005aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <HAL_RCC_OscConfig+0x478>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fc f940 	bl	8001cf0 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fc f93c 	bl	8001cf0 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e087      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a86:	4b27      	ldr	r3, [pc, #156]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	061b      	lsls	r3, r3, #24
 8005ab6:	491b      	ldr	r1, [pc, #108]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b2c <HAL_RCC_OscConfig+0x478>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac2:	f7fc f915 	bl	8001cf0 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fc f911 	bl	8001cf0 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e05c      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005adc:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x416>
 8005ae8:	e054      	b.n	8005b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b10      	ldr	r3, [pc, #64]	@ (8005b2c <HAL_RCC_OscConfig+0x478>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fc f8fe 	bl	8001cf0 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fc f8fa 	bl	8001cf0 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e045      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <HAL_RCC_OscConfig+0x470>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x444>
 8005b16:	e03d      	b.n	8005b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e038      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
 8005b24:	40023800 	.word	0x40023800
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <HAL_RCC_OscConfig+0x4ec>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d028      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d121      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d11a      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d111      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800

08005ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0cc      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b68      	ldr	r3, [pc, #416]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d90c      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b65      	ldr	r3, [pc, #404]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bce:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0b8      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d020      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf8:	4b59      	ldr	r3, [pc, #356]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4a58      	ldr	r2, [pc, #352]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c10:	4b53      	ldr	r3, [pc, #332]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	4a52      	ldr	r2, [pc, #328]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c1c:	4b50      	ldr	r3, [pc, #320]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	494d      	ldr	r1, [pc, #308]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d044      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d107      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c42:	4b47      	ldr	r3, [pc, #284]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d119      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e07f      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d003      	beq.n	8005c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c62:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e06f      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c72:	4b3b      	ldr	r3, [pc, #236]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e067      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c82:	4b37      	ldr	r3, [pc, #220]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f023 0203 	bic.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4934      	ldr	r1, [pc, #208]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c94:	f7fc f82c 	bl	8001cf0 <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9c:	f7fc f828 	bl	8001cf0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e04f      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 020c 	and.w	r2, r3, #12
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1eb      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b25      	ldr	r3, [pc, #148]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d20c      	bcs.n	8005cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b22      	ldr	r3, [pc, #136]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b20      	ldr	r3, [pc, #128]	@ (8005d5c <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e032      	b.n	8005d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf8:	4b19      	ldr	r3, [pc, #100]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4916      	ldr	r1, [pc, #88]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d16:	4b12      	ldr	r3, [pc, #72]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	490e      	ldr	r1, [pc, #56]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d2a:	f000 f821 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	490a      	ldr	r1, [pc, #40]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	5ccb      	ldrb	r3, [r1, r3]
 8005d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d42:	4a09      	ldr	r2, [pc, #36]	@ (8005d68 <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d46:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fb fe58 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40023c00 	.word	0x40023c00
 8005d60:	40023800 	.word	0x40023800
 8005d64:	08010874 	.word	0x08010874
 8005d68:	20000010 	.word	0x20000010
 8005d6c:	20000014 	.word	0x20000014

08005d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d74:	b094      	sub	sp, #80	@ 0x50
 8005d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	2300      	movs	r3, #0
 8005d82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d88:	4b79      	ldr	r3, [pc, #484]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d00d      	beq.n	8005db0 <HAL_RCC_GetSysClockFreq+0x40>
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	f200 80e1 	bhi.w	8005f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x34>
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d003      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x3a>
 8005da2:	e0db      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da4:	4b73      	ldr	r3, [pc, #460]	@ (8005f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005da6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005da8:	e0db      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005daa:	4b73      	ldr	r3, [pc, #460]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dae:	e0d8      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db0:	4b6f      	ldr	r3, [pc, #444]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005db8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dba:	4b6d      	ldr	r3, [pc, #436]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d063      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	099b      	lsrs	r3, r3, #6
 8005dcc:	2200      	movs	r2, #0
 8005dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	f04f 0000 	mov.w	r0, #0
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	0159      	lsls	r1, r3, #5
 8005df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df4:	0150      	lsls	r0, r2, #5
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	1a51      	subs	r1, r2, r1
 8005dfe:	6139      	str	r1, [r7, #16]
 8005e00:	4629      	mov	r1, r5
 8005e02:	eb63 0301 	sbc.w	r3, r3, r1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e14:	4659      	mov	r1, fp
 8005e16:	018b      	lsls	r3, r1, #6
 8005e18:	4651      	mov	r1, sl
 8005e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e1e:	4651      	mov	r1, sl
 8005e20:	018a      	lsls	r2, r1, #6
 8005e22:	4651      	mov	r1, sl
 8005e24:	ebb2 0801 	subs.w	r8, r2, r1
 8005e28:	4659      	mov	r1, fp
 8005e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e42:	4690      	mov	r8, r2
 8005e44:	4699      	mov	r9, r3
 8005e46:	4623      	mov	r3, r4
 8005e48:	eb18 0303 	adds.w	r3, r8, r3
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	462b      	mov	r3, r5
 8005e50:	eb49 0303 	adc.w	r3, r9, r3
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e62:	4629      	mov	r1, r5
 8005e64:	024b      	lsls	r3, r1, #9
 8005e66:	4621      	mov	r1, r4
 8005e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	024a      	lsls	r2, r1, #9
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e76:	2200      	movs	r2, #0
 8005e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e80:	f7fa f9fe 	bl	8000280 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4613      	mov	r3, r2
 8005e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e8c:	e058      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8e:	4b38      	ldr	r3, [pc, #224]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	2200      	movs	r2, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	4611      	mov	r1, r2
 8005e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f04f 0000 	mov.w	r0, #0
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	0159      	lsls	r1, r3, #5
 8005eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eba:	0150      	lsls	r0, r2, #5
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	00eb      	lsls	r3, r5, #3
 8005ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ef6:	00e2      	lsls	r2, r4, #3
 8005ef8:	4614      	mov	r4, r2
 8005efa:	461d      	mov	r5, r3
 8005efc:	4643      	mov	r3, r8
 8005efe:	18e3      	adds	r3, r4, r3
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	464b      	mov	r3, r9
 8005f04:	eb45 0303 	adc.w	r3, r5, r3
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f16:	4629      	mov	r1, r5
 8005f18:	028b      	lsls	r3, r1, #10
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f20:	4621      	mov	r1, r4
 8005f22:	028a      	lsls	r2, r1, #10
 8005f24:	4610      	mov	r0, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	61fa      	str	r2, [r7, #28]
 8005f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f34:	f7fa f9a4 	bl	8000280 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f40:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f5a:	e002      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3750      	adds	r7, #80	@ 0x50
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	40023800 	.word	0x40023800
 8005f74:	00f42400 	.word	0x00f42400
 8005f78:	007a1200 	.word	0x007a1200

08005f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f80:	4b03      	ldr	r3, [pc, #12]	@ (8005f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f82:	681b      	ldr	r3, [r3, #0]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000010 	.word	0x20000010

08005f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f98:	f7ff fff0 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0a9b      	lsrs	r3, r3, #10
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4903      	ldr	r1, [pc, #12]	@ (8005fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	08010884 	.word	0x08010884

08005fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fc0:	f7ff ffdc 	bl	8005f7c <HAL_RCC_GetHCLKFreq>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b05      	ldr	r3, [pc, #20]	@ (8005fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	0b5b      	lsrs	r3, r3, #13
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	4903      	ldr	r1, [pc, #12]	@ (8005fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	08010884 	.word	0x08010884

08005fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ff4:	4b12      	ldr	r3, [pc, #72]	@ (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0203 	and.w	r2, r3, #3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006000:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006018:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <HAL_RCC_GetClockConfig+0x5c>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	08db      	lsrs	r3, r3, #3
 800601e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006026:	4b07      	ldr	r3, [pc, #28]	@ (8006044 <HAL_RCC_GetClockConfig+0x60>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0207 	and.w	r2, r3, #7
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	601a      	str	r2, [r3, #0]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	40023c00 	.word	0x40023c00

08006048 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800606c:	2b00      	cmp	r3, #0
 800606e:	d035      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006070:	4b62      	ldr	r3, [pc, #392]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006076:	f7fb fe3b 	bl	8001cf0 <HAL_GetTick>
 800607a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800607e:	f7fb fe37 	bl	8001cf0 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e0b0      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006090:	4b5b      	ldr	r3, [pc, #364]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	019a      	lsls	r2, r3, #6
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	071b      	lsls	r3, r3, #28
 80060a8:	4955      	ldr	r1, [pc, #340]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060b0:	4b52      	ldr	r3, [pc, #328]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060b6:	f7fb fe1b 	bl	8001cf0 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060be:	f7fb fe17 	bl	8001cf0 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e090      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8083 	beq.w	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	4b44      	ldr	r3, [pc, #272]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	4a43      	ldr	r2, [pc, #268]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060fa:	4b41      	ldr	r3, [pc, #260]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006106:	4b3f      	ldr	r3, [pc, #252]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3e      	ldr	r2, [pc, #248]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006110:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006112:	f7fb fded 	bl	8001cf0 <HAL_GetTick>
 8006116:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006118:	e008      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800611a:	f7fb fde9 	bl	8001cf0 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e062      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800612c:	4b35      	ldr	r3, [pc, #212]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006138:	4b31      	ldr	r3, [pc, #196]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006140:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d02f      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	429a      	cmp	r2, r3
 8006154:	d028      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006156:	4b2a      	ldr	r3, [pc, #168]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006160:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006166:	4b28      	ldr	r3, [pc, #160]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800616c:	4a24      	ldr	r2, [pc, #144]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006172:	4b23      	ldr	r3, [pc, #140]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b01      	cmp	r3, #1
 800617c:	d114      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800617e:	f7fb fdb7 	bl	8001cf0 <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006184:	e00a      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006186:	f7fb fdb3 	bl	8001cf0 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006194:	4293      	cmp	r3, r2
 8006196:	d901      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e02a      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800619c:	4b18      	ldr	r3, [pc, #96]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ee      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061b4:	d10d      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061b6:	4b12      	ldr	r3, [pc, #72]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80061c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ca:	490d      	ldr	r1, [pc, #52]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	608b      	str	r3, [r1, #8]
 80061d0:	e005      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80061dc:	6093      	str	r3, [r2, #8]
 80061de:	4b08      	ldr	r3, [pc, #32]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ea:	4905      	ldr	r1, [pc, #20]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	42470068 	.word	0x42470068
 8006200:	40023800 	.word	0x40023800
 8006204:	40007000 	.word	0x40007000
 8006208:	42470e40 	.word	0x42470e40

0800620c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d13f      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800622a:	4b24      	ldr	r3, [pc, #144]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d006      	beq.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006240:	d12f      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006242:	4b1f      	ldr	r3, [pc, #124]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006244:	617b      	str	r3, [r7, #20]
          break;
 8006246:	e02f      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006248:	4b1c      	ldr	r3, [pc, #112]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006254:	d108      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006256:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800625e:	4a19      	ldr	r2, [pc, #100]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	e007      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006268:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006270:	4a15      	ldr	r2, [pc, #84]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006278:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800627a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800627e:	099b      	lsrs	r3, r3, #6
 8006280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800628c:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800628e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006292:	0f1b      	lsrs	r3, r3, #28
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	fbb2 f3f3 	udiv	r3, r2, r3
 800629e:	617b      	str	r3, [r7, #20]
          break;
 80062a0:	e002      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
          break;
 80062a6:	bf00      	nop
        }
      }
      break;
 80062a8:	e000      	b.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80062aa:	bf00      	nop
    }
  }
  return frequency;
 80062ac:	697b      	ldr	r3, [r7, #20]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	00bb8000 	.word	0x00bb8000
 80062c4:	007a1200 	.word	0x007a1200
 80062c8:	00f42400 	.word	0x00f42400

080062cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e073      	b.n	80063ca <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	7f5b      	ldrb	r3, [r3, #29]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fa3e 	bl	8001774 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d055      	beq.n	80063b8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	22ca      	movs	r2, #202	@ 0xca
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2253      	movs	r2, #83	@ 0x53
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f92b 	bl	8006578 <RTC_EnterInitMode>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d12c      	bne.n	8006386 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800633a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800633e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6899      	ldr	r1, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68d2      	ldr	r2, [r2, #12]
 8006366:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6919      	ldr	r1, [r3, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	041a      	lsls	r2, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f932 	bl	80065e6 <RTC_ExitInitMode>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d110      	bne.n	80063ae <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800639a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	22ff      	movs	r2, #255	@ 0xff
 80063b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80063b6:	e001      	b.n	80063bc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006404:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006408:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006432:	b2da      	uxtb	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	0d9b      	lsrs	r3, r3, #22
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d11a      	bne.n	8006484 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f8ec 	bl	8006630 <RTC_Bcd2ToByte>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 f8e3 	bl	8006630 <RTC_Bcd2ToByte>
 800646a:	4603      	mov	r3, r0
 800646c:	461a      	mov	r2, r3
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	789b      	ldrb	r3, [r3, #2]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f8da 	bl	8006630 <RTC_Bcd2ToByte>
 800647c:	4603      	mov	r3, r0
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80064a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80064ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	0b5b      	lsrs	r3, r3, #13
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11a      	bne.n	8006522 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	78db      	ldrb	r3, [r3, #3]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 f89d 	bl	8006630 <RTC_Bcd2ToByte>
 80064f6:	4603      	mov	r3, r0
 80064f8:	461a      	mov	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f894 	bl	8006630 <RTC_Bcd2ToByte>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	789b      	ldrb	r3, [r3, #2]
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f88b 	bl	8006630 <RTC_Bcd2ToByte>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a0d      	ldr	r2, [pc, #52]	@ (8006574 <HAL_RTC_WaitForSynchro+0x48>)
 800653e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006540:	f7fb fbd6 	bl	8001cf0 <HAL_GetTick>
 8006544:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006546:	e009      	b.n	800655c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006548:	f7fb fbd2 	bl	8001cf0 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006556:	d901      	bls.n	800655c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e007      	b.n	800656c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0ee      	beq.n	8006548 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	00017f5f 	.word	0x00017f5f

08006578 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d122      	bne.n	80065dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065a6:	f7fb fba3 	bl	8001cf0 <HAL_GetTick>
 80065aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80065ac:	e00c      	b.n	80065c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065ae:	f7fb fb9f 	bl	8001cf0 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065bc:	d904      	bls.n	80065c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2204      	movs	r2, #4
 80065c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <RTC_EnterInitMode+0x64>
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d1e8      	bne.n	80065ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006600:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff8b 	bl	800652c <HAL_RTC_WaitForSynchro>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2204      	movs	r2, #4
 8006620:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	b2db      	uxtb	r3, r3
 800665c:	4413      	add	r3, r2
 800665e:	b2db      	uxtb	r3, r3
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e07b      	b.n	8006776 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d108      	bne.n	8006698 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800668e:	d009      	beq.n	80066a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	61da      	str	r2, [r3, #28]
 8006696:	e005      	b.n	80066a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fb f882 	bl	80017c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006728:	ea42 0103 	orr.w	r1, r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	f003 0104 	and.w	r1, r3, #4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	f003 0210 	and.w	r2, r3, #16
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006764:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b088      	sub	sp, #32
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_SPI_Transmit+0x22>
 800679c:	2302      	movs	r3, #2
 800679e:	e12d      	b.n	80069fc <HAL_SPI_Transmit+0x27e>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a8:	f7fb faa2 	bl	8001cf0 <HAL_GetTick>
 80067ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067be:	2302      	movs	r3, #2
 80067c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067c2:	e116      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_SPI_Transmit+0x52>
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067d4:	e10d      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2203      	movs	r2, #3
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800681c:	d10f      	bne.n	800683e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800682c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800683c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006848:	2b40      	cmp	r3, #64	@ 0x40
 800684a:	d007      	beq.n	800685c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800685a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006864:	d14f      	bne.n	8006906 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Transmit+0xf6>
 800686e:	8afb      	ldrh	r3, [r7, #22]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d142      	bne.n	80068fa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	881a      	ldrh	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006884:	1c9a      	adds	r2, r3, #2
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006898:	e02f      	b.n	80068fa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d112      	bne.n	80068ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ac:	881a      	ldrh	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	1c9a      	adds	r2, r3, #2
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068cc:	e015      	b.n	80068fa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ce:	f7fb fa0f 	bl	8001cf0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d803      	bhi.n	80068e6 <HAL_SPI_Transmit+0x168>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068e4:	d102      	bne.n	80068ec <HAL_SPI_Transmit+0x16e>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80068f8:	e07b      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1ca      	bne.n	800689a <HAL_SPI_Transmit+0x11c>
 8006904:	e050      	b.n	80069a8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_SPI_Transmit+0x196>
 800690e:	8afb      	ldrh	r3, [r7, #22]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d144      	bne.n	800699e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	7812      	ldrb	r2, [r2, #0]
 8006920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800693a:	e030      	b.n	800699e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d113      	bne.n	8006972 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006970:	e015      	b.n	800699e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006972:	f7fb f9bd 	bl	8001cf0 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d803      	bhi.n	800698a <HAL_SPI_Transmit+0x20c>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006988:	d102      	bne.n	8006990 <HAL_SPI_Transmit+0x212>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d106      	bne.n	800699e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800699c:	e029      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1c9      	bne.n	800693c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fbdf 	bl	8007170 <SPI_EndRxTxTransaction>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e003      	b.n	80069f2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80069fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d002      	beq.n	8006a2a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
 8006a26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a28:	e0fb      	b.n	8006c22 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a32:	d112      	bne.n	8006a5a <HAL_SPI_Receive+0x56>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10e      	bne.n	8006a5a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f8ef 	bl	8006c34 <HAL_SPI_TransmitReceive>
 8006a56:	4603      	mov	r3, r0
 8006a58:	e0e8      	b.n	8006c2c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_SPI_Receive+0x64>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e0e1      	b.n	8006c2c <HAL_SPI_Receive+0x228>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a70:	f7fb f93e 	bl	8001cf0 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_SPI_Receive+0x7e>
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a86:	e0cc      	b.n	8006c22 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	88fa      	ldrh	r2, [r7, #6]
 8006aa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	88fa      	ldrh	r2, [r7, #6]
 8006aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ace:	d10f      	bne.n	8006af0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ade:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006aee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d007      	beq.n	8006b0e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d16a      	bne.n	8006bec <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b16:	e032      	b.n	8006b7e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d115      	bne.n	8006b52 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f103 020c 	add.w	r2, r3, #12
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	7812      	ldrb	r2, [r2, #0]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b50:	e015      	b.n	8006b7e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b52:	f7fb f8cd 	bl	8001cf0 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d803      	bhi.n	8006b6a <HAL_SPI_Receive+0x166>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b68:	d102      	bne.n	8006b70 <HAL_SPI_Receive+0x16c>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006b7c:	e051      	b.n	8006c22 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1c7      	bne.n	8006b18 <HAL_SPI_Receive+0x114>
 8006b88:	e035      	b.n	8006bf6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d113      	bne.n	8006bc0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006baa:	1c9a      	adds	r2, r3, #2
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bbe:	e015      	b.n	8006bec <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc0:	f7fb f896 	bl	8001cf0 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d803      	bhi.n	8006bd8 <HAL_SPI_Receive+0x1d4>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd6:	d102      	bne.n	8006bde <HAL_SPI_Receive+0x1da>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006bea:	e01a      	b.n	8006c22 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1c9      	bne.n	8006b8a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fa52 	bl	80070a4 <SPI_EndRxTransaction>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	75fb      	strb	r3, [r7, #23]
 8006c18:	e003      	b.n	8006c22 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	@ 0x30
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c42:	2301      	movs	r3, #1
 8006c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x26>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e198      	b.n	8006f8c <HAL_SPI_TransmitReceive+0x358>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c62:	f7fb f845 	bl	8001cf0 <HAL_GetTick>
 8006c66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c78:	887b      	ldrh	r3, [r7, #2]
 8006c7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d00f      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x70>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8a:	d107      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x68>
 8006c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d003      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006ca2:	e16d      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x82>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x82>
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006cbc:	e160      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d003      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2205      	movs	r2, #5
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	887a      	ldrh	r2, [r7, #2]
 8006ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	887a      	ldrh	r2, [r7, #2]
 8006cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	887a      	ldrh	r2, [r7, #2]
 8006cfa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b40      	cmp	r3, #64	@ 0x40
 8006d14:	d007      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d2e:	d17c      	bne.n	8006e2a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x10a>
 8006d38:	8b7b      	ldrh	r3, [r7, #26]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d16a      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d62:	e057      	b.n	8006e14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d11b      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x176>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d016      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x176>
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d113      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d86:	881a      	ldrh	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d119      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x1b8>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006de8:	2301      	movs	r3, #1
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dec:	f7fa ff80 	bl	8001cf0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d80b      	bhi.n	8006e14 <HAL_SPI_TransmitReceive+0x1e0>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e02:	d007      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006e12:	e0b5      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1a2      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x130>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d19d      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x130>
 8006e28:	e080      	b.n	8006f2c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SPI_TransmitReceive+0x204>
 8006e32:	8b7b      	ldrh	r3, [r7, #26]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d16f      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e5e:	e05b      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d11c      	bne.n	8006ea8 <HAL_SPI_TransmitReceive+0x274>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d017      	beq.n	8006ea8 <HAL_SPI_TransmitReceive+0x274>
 8006e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d114      	bne.n	8006ea8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d119      	bne.n	8006eea <HAL_SPI_TransmitReceive+0x2b6>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d014      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006eea:	f7fa ff01 	bl	8001cf0 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d803      	bhi.n	8006f02 <HAL_SPI_TransmitReceive+0x2ce>
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f00:	d102      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006f16:	e033      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d19e      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x22c>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d199      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f91d 	bl	8007170 <SPI_EndRxTxTransaction>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d006      	beq.n	8006f4a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006f48:	e01a      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f76:	e003      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006f88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3730      	adds	r7, #48	@ 0x30
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fa4:	f7fa fea4 	bl	8001cf0 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fb4:	f7fa fe9c 	bl	8001cf0 <HAL_GetTick>
 8006fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fba:	4b39      	ldr	r3, [pc, #228]	@ (80070a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	015b      	lsls	r3, r3, #5
 8006fc0:	0d1b      	lsrs	r3, r3, #20
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	fb02 f303 	mul.w	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fca:	e054      	b.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fd2:	d050      	beq.n	8007076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fd4:	f7fa fe8c 	bl	8001cf0 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d902      	bls.n	8006fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d13d      	bne.n	8007066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007002:	d111      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800700c:	d004      	beq.n	8007018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007016:	d107      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007030:	d10f      	bne.n	8007052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e017      	b.n	8007096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	3b01      	subs	r3, #1
 8007074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	bf0c      	ite	eq
 8007086:	2301      	moveq	r3, #1
 8007088:	2300      	movne	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	429a      	cmp	r2, r3
 8007092:	d19b      	bne.n	8006fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	20000010 	.word	0x20000010

080070a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070b8:	d111      	bne.n	80070de <SPI_EndRxTransaction+0x3a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c2:	d004      	beq.n	80070ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070cc:	d107      	bne.n	80070de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e6:	d12a      	bne.n	800713e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f0:	d012      	beq.n	8007118 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2180      	movs	r1, #128	@ 0x80
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff ff49 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02d      	beq.n	8007164 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710c:	f043 0220 	orr.w	r2, r3, #32
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e026      	b.n	8007166 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	2101      	movs	r1, #1
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff ff36 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d01a      	beq.n	8007164 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007132:	f043 0220 	orr.w	r2, r3, #32
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e013      	b.n	8007166 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	2101      	movs	r1, #1
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff ff23 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d007      	beq.n	8007164 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007158:	f043 0220 	orr.w	r2, r3, #32
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e000      	b.n	8007166 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2201      	movs	r2, #1
 8007184:	2102      	movs	r1, #2
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff ff04 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e032      	b.n	8007208 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007210 <SPI_EndRxTxTransaction+0xa0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007214 <SPI_EndRxTxTransaction+0xa4>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	0d5b      	lsrs	r3, r3, #21
 80071ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071c0:	d112      	bne.n	80071e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	2180      	movs	r1, #128	@ 0x80
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff fee1 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d016      	beq.n	8007206 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e00f      	b.n	8007208 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d0f2      	beq.n	80071e8 <SPI_EndRxTxTransaction+0x78>
 8007202:	e000      	b.n	8007206 <SPI_EndRxTxTransaction+0x96>
        break;
 8007204:	bf00      	nop
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000010 	.word	0x20000010
 8007214:	165e9f81 	.word	0x165e9f81

08007218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e041      	b.n	80072ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fa fb0a 	bl	8001858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f000 fa7e 	bl	8007758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d001      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e04e      	b.n	800736e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a23      	ldr	r2, [pc, #140]	@ (800737c <HAL_TIM_Base_Start_IT+0xc4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d022      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fa:	d01d      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1f      	ldr	r2, [pc, #124]	@ (8007380 <HAL_TIM_Base_Start_IT+0xc8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d018      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1e      	ldr	r2, [pc, #120]	@ (8007384 <HAL_TIM_Base_Start_IT+0xcc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <HAL_TIM_Base_Start_IT+0xd0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00e      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <HAL_TIM_Base_Start_IT+0xd4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d009      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a19      	ldr	r2, [pc, #100]	@ (8007390 <HAL_TIM_Base_Start_IT+0xd8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x80>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a18      	ldr	r2, [pc, #96]	@ (8007394 <HAL_TIM_Base_Start_IT+0xdc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d111      	bne.n	800735c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b06      	cmp	r3, #6
 8007348:	d010      	beq.n	800736c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0201 	orr.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735a:	e007      	b.n	800736c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40010400 	.word	0x40010400
 8007390:	40014000 	.word	0x40014000
 8007394:	40001800 	.word	0x40001800

08007398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d020      	beq.n	80073fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f06f 0202 	mvn.w	r2, #2
 80073cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f999 	bl	800771a <HAL_TIM_IC_CaptureCallback>
 80073e8:	e005      	b.n	80073f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f98b 	bl	8007706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f99c 	bl	800772e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f003 0304 	and.w	r3, r3, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d020      	beq.n	8007448 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01b      	beq.n	8007448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f06f 0204 	mvn.w	r2, #4
 8007418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f973 	bl	800771a <HAL_TIM_IC_CaptureCallback>
 8007434:	e005      	b.n	8007442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f965 	bl	8007706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f976 	bl	800772e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d020      	beq.n	8007494 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01b      	beq.n	8007494 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0208 	mvn.w	r2, #8
 8007464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2204      	movs	r2, #4
 800746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f94d 	bl	800771a <HAL_TIM_IC_CaptureCallback>
 8007480:	e005      	b.n	800748e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f93f 	bl	8007706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f950 	bl	800772e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	2b00      	cmp	r3, #0
 800749c:	d020      	beq.n	80074e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d01b      	beq.n	80074e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0210 	mvn.w	r2, #16
 80074b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2208      	movs	r2, #8
 80074b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f927 	bl	800771a <HAL_TIM_IC_CaptureCallback>
 80074cc:	e005      	b.n	80074da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f919 	bl	8007706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f92a 	bl	800772e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d007      	beq.n	8007504 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f06f 0201 	mvn.w	r2, #1
 80074fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fa f80a 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00c      	beq.n	8007528 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fae4 	bl	8007af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00c      	beq.n	800754c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f8fb 	bl	8007742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00c      	beq.n	8007570 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d007      	beq.n	8007570 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0220 	mvn.w	r2, #32
 8007568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fab6 	bl	8007adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_TIM_ConfigClockSource+0x1c>
 8007590:	2302      	movs	r3, #2
 8007592:	e0b4      	b.n	80076fe <HAL_TIM_ConfigClockSource+0x186>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075cc:	d03e      	beq.n	800764c <HAL_TIM_ConfigClockSource+0xd4>
 80075ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075d2:	f200 8087 	bhi.w	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 80075d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075da:	f000 8086 	beq.w	80076ea <HAL_TIM_ConfigClockSource+0x172>
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e2:	d87f      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 80075e4:	2b70      	cmp	r3, #112	@ 0x70
 80075e6:	d01a      	beq.n	800761e <HAL_TIM_ConfigClockSource+0xa6>
 80075e8:	2b70      	cmp	r3, #112	@ 0x70
 80075ea:	d87b      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 80075ec:	2b60      	cmp	r3, #96	@ 0x60
 80075ee:	d050      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0x11a>
 80075f0:	2b60      	cmp	r3, #96	@ 0x60
 80075f2:	d877      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 80075f4:	2b50      	cmp	r3, #80	@ 0x50
 80075f6:	d03c      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0xfa>
 80075f8:	2b50      	cmp	r3, #80	@ 0x50
 80075fa:	d873      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b40      	cmp	r3, #64	@ 0x40
 80075fe:	d058      	beq.n	80076b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007600:	2b40      	cmp	r3, #64	@ 0x40
 8007602:	d86f      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b30      	cmp	r3, #48	@ 0x30
 8007606:	d064      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007608:	2b30      	cmp	r3, #48	@ 0x30
 800760a:	d86b      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b20      	cmp	r3, #32
 800760e:	d060      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007610:	2b20      	cmp	r3, #32
 8007612:	d867      	bhi.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d05c      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007618:	2b10      	cmp	r3, #16
 800761a:	d05a      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x15a>
 800761c:	e062      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	f000 f9b9 	bl	80079a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	609a      	str	r2, [r3, #8]
      break;
 800764a:	e04f      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800765c:	f000 f9a2 	bl	80079a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800766e:	609a      	str	r2, [r3, #8]
      break;
 8007670:	e03c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800767e:	461a      	mov	r2, r3
 8007680:	f000 f916 	bl	80078b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2150      	movs	r1, #80	@ 0x50
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f96f 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 8007690:	e02c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800769e:	461a      	mov	r2, r3
 80076a0:	f000 f935 	bl	800790e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2160      	movs	r1, #96	@ 0x60
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f95f 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 80076b0:	e01c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076be:	461a      	mov	r2, r3
 80076c0:	f000 f8f6 	bl	80078b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2140      	movs	r1, #64	@ 0x40
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f94f 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 80076d0:	e00c      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f000 f946 	bl	800796e <TIM_ITRx_SetConfig>
      break;
 80076e2:	e003      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      break;
 80076e8:	e000      	b.n	80076ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a46      	ldr	r2, [pc, #280]	@ (8007884 <TIM_Base_SetConfig+0x12c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d013      	beq.n	8007798 <TIM_Base_SetConfig+0x40>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007776:	d00f      	beq.n	8007798 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a43      	ldr	r2, [pc, #268]	@ (8007888 <TIM_Base_SetConfig+0x130>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00b      	beq.n	8007798 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a42      	ldr	r2, [pc, #264]	@ (800788c <TIM_Base_SetConfig+0x134>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d007      	beq.n	8007798 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a41      	ldr	r2, [pc, #260]	@ (8007890 <TIM_Base_SetConfig+0x138>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_Base_SetConfig+0x40>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a40      	ldr	r2, [pc, #256]	@ (8007894 <TIM_Base_SetConfig+0x13c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d108      	bne.n	80077aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a35      	ldr	r2, [pc, #212]	@ (8007884 <TIM_Base_SetConfig+0x12c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d02b      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b8:	d027      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a32      	ldr	r2, [pc, #200]	@ (8007888 <TIM_Base_SetConfig+0x130>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d023      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a31      	ldr	r2, [pc, #196]	@ (800788c <TIM_Base_SetConfig+0x134>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d01f      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a30      	ldr	r2, [pc, #192]	@ (8007890 <TIM_Base_SetConfig+0x138>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01b      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007894 <TIM_Base_SetConfig+0x13c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d017      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007898 <TIM_Base_SetConfig+0x140>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a2d      	ldr	r2, [pc, #180]	@ (800789c <TIM_Base_SetConfig+0x144>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00f      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a2c      	ldr	r2, [pc, #176]	@ (80078a0 <TIM_Base_SetConfig+0x148>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00b      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a2b      	ldr	r2, [pc, #172]	@ (80078a4 <TIM_Base_SetConfig+0x14c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d007      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a2a      	ldr	r2, [pc, #168]	@ (80078a8 <TIM_Base_SetConfig+0x150>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d003      	beq.n	800780a <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a29      	ldr	r2, [pc, #164]	@ (80078ac <TIM_Base_SetConfig+0x154>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d108      	bne.n	800781c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a10      	ldr	r2, [pc, #64]	@ (8007884 <TIM_Base_SetConfig+0x12c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_Base_SetConfig+0xf8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a12      	ldr	r2, [pc, #72]	@ (8007894 <TIM_Base_SetConfig+0x13c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d103      	bne.n	8007858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d105      	bne.n	8007876 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	611a      	str	r2, [r3, #16]
  }
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40010000 	.word	0x40010000
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40000c00 	.word	0x40000c00
 8007894:	40010400 	.word	0x40010400
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	40001800 	.word	0x40001800
 80078a8:	40001c00 	.word	0x40001c00
 80078ac:	40002000 	.word	0x40002000

080078b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0201 	bic.w	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f023 030a 	bic.w	r3, r3, #10
 80078ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800790e:	b480      	push	{r7}
 8007910:	b087      	sub	sp, #28
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	f023 0210 	bic.w	r2, r3, #16
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	031b      	lsls	r3, r3, #12
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800794a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	f043 0307 	orr.w	r3, r3, #7
 8007990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	609a      	str	r2, [r3, #8]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	021a      	lsls	r2, r3, #8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	609a      	str	r2, [r3, #8]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e05a      	b.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a21      	ldr	r2, [pc, #132]	@ (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d022      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a48:	d01d      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d018      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1a      	ldr	r2, [pc, #104]	@ (8007acc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00e      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a18      	ldr	r2, [pc, #96]	@ (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d009      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a17      	ldr	r2, [pc, #92]	@ (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d004      	beq.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d10c      	bne.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40000400 	.word	0x40000400
 8007ac8:	40000800 	.word	0x40000800
 8007acc:	40000c00 	.word	0x40000c00
 8007ad0:	40010400 	.word	0x40010400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40001800 	.word	0x40001800

08007adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e042      	b.n	8007b9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7f9 feee 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2224      	movs	r2, #36	@ 0x24
 8007b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f82b 	bl	8007ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2220      	movs	r2, #32
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ba8:	b0c0      	sub	sp, #256	@ 0x100
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	68d9      	ldr	r1, [r3, #12]
 8007bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	ea40 0301 	orr.w	r3, r0, r1
 8007bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bfc:	f021 010c 	bic.w	r1, r1, #12
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1e:	6999      	ldr	r1, [r3, #24]
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	ea40 0301 	orr.w	r3, r0, r1
 8007c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b8f      	ldr	r3, [pc, #572]	@ (8007e70 <UART_SetConfig+0x2cc>)
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d005      	beq.n	8007c44 <UART_SetConfig+0xa0>
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e74 <UART_SetConfig+0x2d0>)
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d104      	bne.n	8007c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c44:	f7fe f9ba 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 8007c48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c4c:	e003      	b.n	8007c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c4e:	f7fe f9a1 	bl	8005f94 <HAL_RCC_GetPCLK1Freq>
 8007c52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c60:	f040 810c 	bne.w	8007e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c76:	4622      	mov	r2, r4
 8007c78:	462b      	mov	r3, r5
 8007c7a:	1891      	adds	r1, r2, r2
 8007c7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c7e:	415b      	adcs	r3, r3
 8007c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c86:	4621      	mov	r1, r4
 8007c88:	eb12 0801 	adds.w	r8, r2, r1
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	eb43 0901 	adc.w	r9, r3, r1
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ca6:	4690      	mov	r8, r2
 8007ca8:	4699      	mov	r9, r3
 8007caa:	4623      	mov	r3, r4
 8007cac:	eb18 0303 	adds.w	r3, r8, r3
 8007cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	eb49 0303 	adc.w	r3, r9, r3
 8007cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	18db      	adds	r3, r3, r3
 8007cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cd8:	4613      	mov	r3, r2
 8007cda:	eb42 0303 	adc.w	r3, r2, r3
 8007cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ce8:	f7f8 faca 	bl	8000280 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4b61      	ldr	r3, [pc, #388]	@ (8007e78 <UART_SetConfig+0x2d4>)
 8007cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	011c      	lsls	r4, r3, #4
 8007cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	464b      	mov	r3, r9
 8007d10:	1891      	adds	r1, r2, r2
 8007d12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d14:	415b      	adcs	r3, r3
 8007d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d22:	4649      	mov	r1, r9
 8007d24:	eb43 0b01 	adc.w	fp, r3, r1
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d3c:	4692      	mov	sl, r2
 8007d3e:	469b      	mov	fp, r3
 8007d40:	4643      	mov	r3, r8
 8007d42:	eb1a 0303 	adds.w	r3, sl, r3
 8007d46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	18db      	adds	r3, r3, r3
 8007d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d6e:	4613      	mov	r3, r2
 8007d70:	eb42 0303 	adc.w	r3, r2, r3
 8007d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d7e:	f7f8 fa7f 	bl	8000280 <__aeabi_uldivmod>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	4b3b      	ldr	r3, [pc, #236]	@ (8007e78 <UART_SetConfig+0x2d4>)
 8007d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	2264      	movs	r2, #100	@ 0x64
 8007d92:	fb02 f303 	mul.w	r3, r2, r3
 8007d96:	1acb      	subs	r3, r1, r3
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d9e:	4b36      	ldr	r3, [pc, #216]	@ (8007e78 <UART_SetConfig+0x2d4>)
 8007da0:	fba3 2302 	umull	r2, r3, r3, r2
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007dac:	441c      	add	r4, r3
 8007dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007db8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	1891      	adds	r1, r2, r2
 8007dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007dc8:	415b      	adcs	r3, r3
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	1851      	adds	r1, r2, r1
 8007dd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	414b      	adcs	r3, r1
 8007dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007de8:	4659      	mov	r1, fp
 8007dea:	00cb      	lsls	r3, r1, #3
 8007dec:	4651      	mov	r1, sl
 8007dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007df2:	4651      	mov	r1, sl
 8007df4:	00ca      	lsls	r2, r1, #3
 8007df6:	4610      	mov	r0, r2
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	189b      	adds	r3, r3, r2
 8007e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e04:	464b      	mov	r3, r9
 8007e06:	460a      	mov	r2, r1
 8007e08:	eb42 0303 	adc.w	r3, r2, r3
 8007e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e24:	460b      	mov	r3, r1
 8007e26:	18db      	adds	r3, r3, r3
 8007e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	eb42 0303 	adc.w	r3, r2, r3
 8007e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e3a:	f7f8 fa21 	bl	8000280 <__aeabi_uldivmod>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <UART_SetConfig+0x2d4>)
 8007e44:	fba3 1302 	umull	r1, r3, r3, r2
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	2164      	movs	r1, #100	@ 0x64
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	3332      	adds	r3, #50	@ 0x32
 8007e56:	4a08      	ldr	r2, [pc, #32]	@ (8007e78 <UART_SetConfig+0x2d4>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	f003 0207 	and.w	r2, r3, #7
 8007e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4422      	add	r2, r4
 8007e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e6c:	e106      	b.n	800807c <UART_SetConfig+0x4d8>
 8007e6e:	bf00      	nop
 8007e70:	40011000 	.word	0x40011000
 8007e74:	40011400 	.word	0x40011400
 8007e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e8e:	4642      	mov	r2, r8
 8007e90:	464b      	mov	r3, r9
 8007e92:	1891      	adds	r1, r2, r2
 8007e94:	6239      	str	r1, [r7, #32]
 8007e96:	415b      	adcs	r3, r3
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	1854      	adds	r4, r2, r1
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	eb43 0501 	adc.w	r5, r3, r1
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	00eb      	lsls	r3, r5, #3
 8007eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eb6:	00e2      	lsls	r2, r4, #3
 8007eb8:	4614      	mov	r4, r2
 8007eba:	461d      	mov	r5, r3
 8007ebc:	4643      	mov	r3, r8
 8007ebe:	18e3      	adds	r3, r4, r3
 8007ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	eb45 0303 	adc.w	r3, r5, r3
 8007eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007eea:	4629      	mov	r1, r5
 8007eec:	008b      	lsls	r3, r1, #2
 8007eee:	4621      	mov	r1, r4
 8007ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	008a      	lsls	r2, r1, #2
 8007ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007efc:	f7f8 f9c0 	bl	8000280 <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4b60      	ldr	r3, [pc, #384]	@ (8008088 <UART_SetConfig+0x4e4>)
 8007f06:	fba3 2302 	umull	r2, r3, r3, r2
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	011c      	lsls	r4, r3, #4
 8007f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	1891      	adds	r1, r2, r2
 8007f26:	61b9      	str	r1, [r7, #24]
 8007f28:	415b      	adcs	r3, r3
 8007f2a:	61fb      	str	r3, [r7, #28]
 8007f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f30:	4641      	mov	r1, r8
 8007f32:	1851      	adds	r1, r2, r1
 8007f34:	6139      	str	r1, [r7, #16]
 8007f36:	4649      	mov	r1, r9
 8007f38:	414b      	adcs	r3, r1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f48:	4659      	mov	r1, fp
 8007f4a:	00cb      	lsls	r3, r1, #3
 8007f4c:	4651      	mov	r1, sl
 8007f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f52:	4651      	mov	r1, sl
 8007f54:	00ca      	lsls	r2, r1, #3
 8007f56:	4610      	mov	r0, r2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f64:	464b      	mov	r3, r9
 8007f66:	460a      	mov	r2, r1
 8007f68:	eb42 0303 	adc.w	r3, r2, r3
 8007f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	f04f 0300 	mov.w	r3, #0
 8007f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f88:	4649      	mov	r1, r9
 8007f8a:	008b      	lsls	r3, r1, #2
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f92:	4641      	mov	r1, r8
 8007f94:	008a      	lsls	r2, r1, #2
 8007f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f9a:	f7f8 f971 	bl	8000280 <__aeabi_uldivmod>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4b38      	ldr	r3, [pc, #224]	@ (8008088 <UART_SetConfig+0x4e4>)
 8007fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	2264      	movs	r2, #100	@ 0x64
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
 8007fb2:	1acb      	subs	r3, r1, r3
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	3332      	adds	r3, #50	@ 0x32
 8007fb8:	4a33      	ldr	r2, [pc, #204]	@ (8008088 <UART_SetConfig+0x4e4>)
 8007fba:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fc4:	441c      	add	r4, r3
 8007fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fca:	2200      	movs	r2, #0
 8007fcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fce:	677a      	str	r2, [r7, #116]	@ 0x74
 8007fd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	1891      	adds	r1, r2, r2
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	415b      	adcs	r3, r3
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	1851      	adds	r1, r2, r1
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	4649      	mov	r1, r9
 8007fec:	414b      	adcs	r3, r1
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ffc:	4659      	mov	r1, fp
 8007ffe:	00cb      	lsls	r3, r1, #3
 8008000:	4651      	mov	r1, sl
 8008002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008006:	4651      	mov	r1, sl
 8008008:	00ca      	lsls	r2, r1, #3
 800800a:	4610      	mov	r0, r2
 800800c:	4619      	mov	r1, r3
 800800e:	4603      	mov	r3, r0
 8008010:	4642      	mov	r2, r8
 8008012:	189b      	adds	r3, r3, r2
 8008014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008016:	464b      	mov	r3, r9
 8008018:	460a      	mov	r2, r1
 800801a:	eb42 0303 	adc.w	r3, r2, r3
 800801e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	663b      	str	r3, [r7, #96]	@ 0x60
 800802a:	667a      	str	r2, [r7, #100]	@ 0x64
 800802c:	f04f 0200 	mov.w	r2, #0
 8008030:	f04f 0300 	mov.w	r3, #0
 8008034:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008038:	4649      	mov	r1, r9
 800803a:	008b      	lsls	r3, r1, #2
 800803c:	4641      	mov	r1, r8
 800803e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008042:	4641      	mov	r1, r8
 8008044:	008a      	lsls	r2, r1, #2
 8008046:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800804a:	f7f8 f919 	bl	8000280 <__aeabi_uldivmod>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4b0d      	ldr	r3, [pc, #52]	@ (8008088 <UART_SetConfig+0x4e4>)
 8008054:	fba3 1302 	umull	r1, r3, r3, r2
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	2164      	movs	r1, #100	@ 0x64
 800805c:	fb01 f303 	mul.w	r3, r1, r3
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	3332      	adds	r3, #50	@ 0x32
 8008066:	4a08      	ldr	r2, [pc, #32]	@ (8008088 <UART_SetConfig+0x4e4>)
 8008068:	fba2 2303 	umull	r2, r3, r2, r3
 800806c:	095b      	lsrs	r3, r3, #5
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4422      	add	r2, r4
 800807a:	609a      	str	r2, [r3, #8]
}
 800807c:	bf00      	nop
 800807e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008082:	46bd      	mov	sp, r7
 8008084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008088:	51eb851f 	.word	0x51eb851f

0800808c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800808c:	b084      	sub	sp, #16
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	f107 001c 	add.w	r0, r7, #28
 800809a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800809e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d123      	bne.n	80080ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80080ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d105      	bne.n	80080e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9dc 	bl	80084a0 <USB_CoreReset>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e01b      	b.n	8008126 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9d0 	bl	80084a0 <USB_CoreReset>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008104:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	@ 0x38
 8008118:	e005      	b.n	8008126 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008126:	7fbb      	ldrb	r3, [r7, #30]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d10b      	bne.n	8008144 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f043 0206 	orr.w	r2, r3, #6
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f043 0220 	orr.w	r2, r3, #32
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008150:	b004      	add	sp, #16
 8008152:	4770      	bx	lr

08008154 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f043 0201 	orr.w	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 0201 	bic.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d115      	bne.n	80081e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80081c6:	200a      	movs	r0, #10
 80081c8:	f7f9 fd9e 	bl	8001d08 <HAL_Delay>
      ms += 10U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	330a      	adds	r3, #10
 80081d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f956 	bl	8008484 <USB_GetMode>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d01e      	beq.n	800821c <USB_SetCurrentMode+0x84>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80081e2:	d9f0      	bls.n	80081c6 <USB_SetCurrentMode+0x2e>
 80081e4:	e01a      	b.n	800821c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d115      	bne.n	8008218 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80081f8:	200a      	movs	r0, #10
 80081fa:	f7f9 fd85 	bl	8001d08 <HAL_Delay>
      ms += 10U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	330a      	adds	r3, #10
 8008202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f93d 	bl	8008484 <USB_GetMode>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <USB_SetCurrentMode+0x84>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2bc7      	cmp	r3, #199	@ 0xc7
 8008214:	d9f0      	bls.n	80081f8 <USB_SetCurrentMode+0x60>
 8008216:	e001      	b.n	800821c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e005      	b.n	8008228 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008220:	d101      	bne.n	8008226 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800824a:	d901      	bls.n	8008250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e01b      	b.n	8008288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	daf2      	bge.n	800823e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	019b      	lsls	r3, r3, #6
 8008260:	f043 0220 	orr.w	r2, r3, #32
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008274:	d901      	bls.n	800827a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e006      	b.n	8008288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b20      	cmp	r3, #32
 8008284:	d0f0      	beq.n	8008268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082ac:	d901      	bls.n	80082b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e018      	b.n	80082e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	daf2      	bge.n	80082a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2210      	movs	r2, #16
 80082c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3301      	adds	r3, #1
 80082c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082d0:	d901      	bls.n	80082d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e006      	b.n	80082e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d0f0      	beq.n	80082c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b089      	sub	sp, #36	@ 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4611      	mov	r1, r2
 80082fc:	461a      	mov	r2, r3
 80082fe:	460b      	mov	r3, r1
 8008300:	71fb      	strb	r3, [r7, #7]
 8008302:	4613      	mov	r3, r2
 8008304:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800830e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d123      	bne.n	800835e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008316:	88bb      	ldrh	r3, [r7, #4]
 8008318:	3303      	adds	r3, #3
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e018      	b.n	8008356 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	031a      	lsls	r2, r3, #12
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	4413      	add	r3, r2
 800832c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008330:	461a      	mov	r2, r3
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	3301      	adds	r3, #1
 8008342:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	3301      	adds	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3301      	adds	r3, #1
 800834e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	3301      	adds	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	d3e2      	bcc.n	8008324 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3724      	adds	r7, #36	@ 0x24
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800836c:	b480      	push	{r7}
 800836e:	b08b      	sub	sp, #44	@ 0x2c
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	b29b      	uxth	r3, r3
 8008388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
 8008396:	e014      	b.n	80083c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	3301      	adds	r3, #1
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	3301      	adds	r3, #1
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	3301      	adds	r3, #1
 80083b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	3301      	adds	r3, #1
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	3301      	adds	r3, #1
 80083c0:	623b      	str	r3, [r7, #32]
 80083c2:	6a3a      	ldr	r2, [r7, #32]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d3e6      	bcc.n	8008398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083ca:	8bfb      	ldrh	r3, [r7, #30]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01e      	beq.n	800840e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083da:	461a      	mov	r2, r3
 80083dc:	f107 0310 	add.w	r3, r7, #16
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	701a      	strb	r2, [r3, #0]
      i++;
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	3301      	adds	r3, #1
 80083fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	3301      	adds	r3, #1
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008402:	8bfb      	ldrh	r3, [r7, #30]
 8008404:	3b01      	subs	r3, #1
 8008406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008408:	8bfb      	ldrh	r3, [r7, #30]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1ea      	bne.n	80083e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008410:	4618      	mov	r0, r3
 8008412:	372c      	adds	r7, #44	@ 0x2c
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4013      	ands	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008434:	68fb      	ldr	r3, [r7, #12]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	4013      	ands	r3, r2
 8008474:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008476:	68bb      	ldr	r3, [r7, #8]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	f003 0301 	and.w	r3, r3, #1
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084b8:	d901      	bls.n	80084be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e01b      	b.n	80084f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	daf2      	bge.n	80084ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f043 0201 	orr.w	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084e2:	d901      	bls.n	80084e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e006      	b.n	80084f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d0f0      	beq.n	80084d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008504:	b084      	sub	sp, #16
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008524:	461a      	mov	r2, r3
 8008526:	2300      	movs	r3, #0
 8008528:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008546:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d119      	bne.n	800858e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800855a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800855e:	2b01      	cmp	r3, #1
 8008560:	d10a      	bne.n	8008578 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008570:	f043 0304 	orr.w	r3, r3, #4
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e014      	b.n	80085a2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008586:	f023 0304 	bic.w	r3, r3, #4
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	e009      	b.n	80085a2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800859c:	f023 0304 	bic.w	r3, r3, #4
 80085a0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085a2:	2110      	movs	r1, #16
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff fe43 	bl	8008230 <USB_FlushTxFifo>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fe6d 	bl	8008294 <USB_FlushRxFifo>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	e015      	b.n	80085f6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d6:	461a      	mov	r2, r3
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085dc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ea:	461a      	mov	r2, r3
 80085ec:	2300      	movs	r3, #0
 80085ee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	3301      	adds	r3, #1
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80085fa:	461a      	mov	r2, r3
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4293      	cmp	r3, r2
 8008600:	d3e3      	bcc.n	80085ca <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800860e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a18      	ldr	r2, [pc, #96]	@ (8008674 <USB_HostInit+0x170>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d10b      	bne.n	8008630 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800861e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <USB_HostInit+0x174>)
 8008624:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a14      	ldr	r2, [pc, #80]	@ (800867c <USB_HostInit+0x178>)
 800862a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800862e:	e009      	b.n	8008644 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2280      	movs	r2, #128	@ 0x80
 8008634:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a11      	ldr	r2, [pc, #68]	@ (8008680 <USB_HostInit+0x17c>)
 800863a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a11      	ldr	r2, [pc, #68]	@ (8008684 <USB_HostInit+0x180>)
 8008640:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f043 0210 	orr.w	r2, r3, #16
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	4b0a      	ldr	r3, [pc, #40]	@ (8008688 <USB_HostInit+0x184>)
 800865e:	4313      	orrs	r3, r2
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008670:	b004      	add	sp, #16
 8008672:	4770      	bx	lr
 8008674:	40040000 	.word	0x40040000
 8008678:	01000200 	.word	0x01000200
 800867c:	00e00300 	.word	0x00e00300
 8008680:	00600080 	.word	0x00600080
 8008684:	004000e0 	.word	0x004000e0
 8008688:	a3200008 	.word	0xa3200008

0800868c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086c4:	4313      	orrs	r3, r2
 80086c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d107      	bne.n	80086de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d4:	461a      	mov	r2, r3
 80086d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80086da:	6053      	str	r3, [r2, #4]
 80086dc:	e00c      	b.n	80086f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d107      	bne.n	80086f4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ea:	461a      	mov	r2, r3
 80086ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 80086f0:	6053      	str	r3, [r2, #4]
 80086f2:	e001      	b.n	80086f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008726:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008734:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008736:	2064      	movs	r0, #100	@ 0x64
 8008738:	f7f9 fae6 	bl	8001d08 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008748:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800874a:	200a      	movs	r0, #10
 800874c:	f7f9 fadc 	bl	8001d08 <HAL_Delay>

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800877e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <USB_DriveVbus+0x44>
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d106      	bne.n	800879e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800879c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a8:	d109      	bne.n	80087be <USB_DriveVbus+0x64>
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d106      	bne.n	80087be <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80087b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087bc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	0c5b      	lsrs	r3, r3, #17
 80087ea:	f003 0303 	and.w	r3, r3, #3
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	b29b      	uxth	r3, r3
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	4608      	mov	r0, r1
 8008826:	4611      	mov	r1, r2
 8008828:	461a      	mov	r2, r3
 800882a:	4603      	mov	r3, r0
 800882c:	70fb      	strb	r3, [r7, #3]
 800882e:	460b      	mov	r3, r1
 8008830:	70bb      	strb	r3, [r7, #2]
 8008832:	4613      	mov	r3, r2
 8008834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884a:	461a      	mov	r2, r3
 800884c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008850:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008852:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008856:	2b03      	cmp	r3, #3
 8008858:	d87c      	bhi.n	8008954 <USB_HC_Init+0x138>
 800885a:	a201      	add	r2, pc, #4	@ (adr r2, 8008860 <USB_HC_Init+0x44>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008871 	.word	0x08008871
 8008864:	08008917 	.word	0x08008917
 8008868:	08008871 	.word	0x08008871
 800886c:	080088d9 	.word	0x080088d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887c:	461a      	mov	r2, r3
 800887e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008882:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008888:	2b00      	cmp	r3, #0
 800888a:	da10      	bge.n	80088ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	78fa      	ldrb	r2, [r7, #3]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088aa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80088ac:	e055      	b.n	800895a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a6f      	ldr	r2, [pc, #444]	@ (8008a70 <USB_HC_Init+0x254>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d151      	bne.n	800895a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	78fa      	ldrb	r2, [r7, #3]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80088d4:	60d3      	str	r3, [r2, #12]
      break;
 80088d6:	e040      	b.n	800895a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e4:	461a      	mov	r2, r3
 80088e6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80088ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80088ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da34      	bge.n	800895e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	440a      	add	r2, r1
 800890a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800890e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008912:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008914:	e023      	b.n	800895e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	4413      	add	r3, r2
 800891e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008922:	461a      	mov	r2, r3
 8008924:	f240 2325 	movw	r3, #549	@ 0x225
 8008928:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800892a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800892e:	2b00      	cmp	r3, #0
 8008930:	da17      	bge.n	8008962 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	4413      	add	r3, r2
 800893a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	78fa      	ldrb	r2, [r7, #3]
 8008942:	0151      	lsls	r1, r2, #5
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	440a      	add	r2, r1
 8008948:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800894c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008950:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008952:	e006      	b.n	8008962 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	77fb      	strb	r3, [r7, #31]
      break;
 8008958:	e004      	b.n	8008964 <USB_HC_Init+0x148>
      break;
 800895a:	bf00      	nop
 800895c:	e002      	b.n	8008964 <USB_HC_Init+0x148>
      break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <USB_HC_Init+0x148>
      break;
 8008962:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	4413      	add	r3, r2
 800896c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008970:	461a      	mov	r2, r3
 8008972:	2300      	movs	r3, #0
 8008974:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	4413      	add	r3, r2
 800897e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	440a      	add	r2, r1
 800898c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008990:	f043 0302 	orr.w	r3, r3, #2
 8008994:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	2101      	movs	r1, #1
 80089a6:	fa01 f303 	lsl.w	r3, r1, r3
 80089aa:	6939      	ldr	r1, [r7, #16]
 80089ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80089b0:	4313      	orrs	r3, r2
 80089b2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80089c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da03      	bge.n	80089d0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80089c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089cc:	61bb      	str	r3, [r7, #24]
 80089ce:	e001      	b.n	80089d4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff fef9 	bl	80087cc <USB_GetHostSpeed>
 80089da:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80089dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d106      	bne.n	80089f2 <USB_HC_Init+0x1d6>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d003      	beq.n	80089f2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80089ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	e001      	b.n	80089f6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089f6:	787b      	ldrb	r3, [r7, #1]
 80089f8:	059b      	lsls	r3, r3, #22
 80089fa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089fe:	78bb      	ldrb	r3, [r7, #2]
 8008a00:	02db      	lsls	r3, r3, #11
 8008a02:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a0c:	049b      	lsls	r3, r3, #18
 8008a0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008a14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a1a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a34:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008a36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d003      	beq.n	8008a46 <USB_HC_Init+0x22a>
 8008a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d10f      	bne.n	8008a66 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	015a      	lsls	r2, r3, #5
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	78fa      	ldrb	r2, [r7, #3]
 8008a56:	0151      	lsls	r1, r2, #5
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	440a      	add	r2, r1
 8008a5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3720      	adds	r7, #32
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40040000 	.word	0x40040000

08008a74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08c      	sub	sp, #48	@ 0x30
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	785b      	ldrb	r3, [r3, #1]
 8008a8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a90:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a5d      	ldr	r2, [pc, #372]	@ (8008c0c <USB_HC_StartXfer+0x198>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d12f      	bne.n	8008afa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d11c      	bne.n	8008ada <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	7c9b      	ldrb	r3, [r3, #18]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <USB_HC_StartXfer+0x3c>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	7c9b      	ldrb	r3, [r3, #18]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d124      	bne.n	8008afa <USB_HC_StartXfer+0x86>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	799b      	ldrb	r3, [r3, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d120      	bne.n	8008afa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	6a3a      	ldr	r2, [r7, #32]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad6:	60d3      	str	r3, [r2, #12]
 8008ad8:	e00f      	b.n	8008afa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	791b      	ldrb	r3, [r3, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10b      	bne.n	8008afa <USB_HC_StartXfer+0x86>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	795b      	ldrb	r3, [r3, #5]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d107      	bne.n	8008afa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	4619      	mov	r1, r3
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fb6b 	bl	80091cc <USB_DoPing>
        return HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e232      	b.n	8008f60 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	799b      	ldrb	r3, [r3, #6]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d158      	bne.n	8008bb4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008b02:	2301      	movs	r3, #1
 8008b04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	78db      	ldrb	r3, [r3, #3]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d007      	beq.n	8008b1e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	8a92      	ldrh	r2, [r2, #20]
 8008b14:	fb03 f202 	mul.w	r2, r3, r2
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	61da      	str	r2, [r3, #28]
 8008b1c:	e07c      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	7c9b      	ldrb	r3, [r3, #18]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d130      	bne.n	8008b88 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8008b2c:	d918      	bls.n	8008b60 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	8a9b      	ldrh	r3, [r3, #20]
 8008b32:	461a      	mov	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d003      	beq.n	8008b50 <USB_HC_StartXfer+0xdc>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d103      	bne.n	8008b58 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2202      	movs	r2, #2
 8008b54:	60da      	str	r2, [r3, #12]
 8008b56:	e05f      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	60da      	str	r2, [r3, #12]
 8008b5e:	e05b      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6a1a      	ldr	r2, [r3, #32]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d007      	beq.n	8008b80 <USB_HC_StartXfer+0x10c>
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d003      	beq.n	8008b80 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	60da      	str	r2, [r3, #12]
 8008b7e:	e04b      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2203      	movs	r2, #3
 8008b84:	60da      	str	r2, [r3, #12]
 8008b86:	e047      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d10d      	bne.n	8008baa <USB_HC_StartXfer+0x136>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	8a92      	ldrh	r2, [r2, #20]
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d907      	bls.n	8008baa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	8a92      	ldrh	r2, [r2, #20]
 8008ba0:	fb03 f202 	mul.w	r2, r3, r2
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	61da      	str	r2, [r3, #28]
 8008ba8:	e036      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6a1a      	ldr	r2, [r3, #32]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	61da      	str	r2, [r3, #28]
 8008bb2:	e031      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d018      	beq.n	8008bee <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	8a92      	ldrh	r2, [r2, #20]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	8a92      	ldrh	r2, [r2, #20]
 8008bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008bd2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008bd4:	8b7b      	ldrh	r3, [r7, #26]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d90b      	bls.n	8008bf2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008bda:	8b7b      	ldrh	r3, [r7, #26]
 8008bdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008bde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	8a92      	ldrh	r2, [r2, #20]
 8008be4:	fb03 f202 	mul.w	r2, r3, r2
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	61da      	str	r2, [r3, #28]
 8008bec:	e001      	b.n	8008bf2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	78db      	ldrb	r3, [r3, #3]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008bfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	8a92      	ldrh	r2, [r2, #20]
 8008c00:	fb03 f202 	mul.w	r2, r3, r2
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	61da      	str	r2, [r3, #28]
 8008c08:	e006      	b.n	8008c18 <USB_HC_StartXfer+0x1a4>
 8008c0a:	bf00      	nop
 8008c0c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c22:	04d9      	lsls	r1, r3, #19
 8008c24:	4ba3      	ldr	r3, [pc, #652]	@ (8008eb4 <USB_HC_StartXfer+0x440>)
 8008c26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	7d9b      	ldrb	r3, [r3, #22]
 8008c2e:	075b      	lsls	r3, r3, #29
 8008c30:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c34:	69f9      	ldr	r1, [r7, #28]
 8008c36:	0148      	lsls	r0, r1, #5
 8008c38:	6a39      	ldr	r1, [r7, #32]
 8008c3a:	4401      	add	r1, r0
 8008c3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6999      	ldr	r1, [r3, #24]
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bf0c      	ite	eq
 8008c6e:	2301      	moveq	r3, #1
 8008c70:	2300      	movne	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	0151      	lsls	r1, r2, #5
 8008c88:	6a3a      	ldr	r2, [r7, #32]
 8008c8a:	440a      	add	r2, r1
 8008c8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	7e7b      	ldrb	r3, [r7, #25]
 8008ca6:	075b      	lsls	r3, r3, #29
 8008ca8:	69f9      	ldr	r1, [r7, #28]
 8008caa:	0148      	lsls	r0, r1, #5
 8008cac:	6a39      	ldr	r1, [r7, #32]
 8008cae:	4401      	add	r1, r0
 8008cb0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	799b      	ldrb	r3, [r3, #6]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	f040 80c3 	bne.w	8008e48 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	7c5b      	ldrb	r3, [r3, #17]
 8008cc6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	6a3a      	ldr	r2, [r7, #32]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008cda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008cde:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	6a3a      	ldr	r2, [r7, #32]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008cfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	79db      	ldrb	r3, [r3, #7]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d123      	bne.n	8008d50 <USB_HC_StartXfer+0x2dc>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	78db      	ldrb	r3, [r3, #3]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d11f      	bne.n	8008d50 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	6a3a      	ldr	r2, [r7, #32]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d2e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d4e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	7c9b      	ldrb	r3, [r3, #18]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d003      	beq.n	8008d60 <USB_HC_StartXfer+0x2ec>
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	7c9b      	ldrb	r3, [r3, #18]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d117      	bne.n	8008d90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d113      	bne.n	8008d90 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	78db      	ldrb	r3, [r3, #3]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d10f      	bne.n	8008d90 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d8e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	7c9b      	ldrb	r3, [r3, #18]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d162      	bne.n	8008e5e <USB_HC_StartXfer+0x3ea>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	78db      	ldrb	r3, [r3, #3]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d15e      	bne.n	8008e5e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d858      	bhi.n	8008e5c <USB_HC_StartXfer+0x3e8>
 8008daa:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <USB_HC_StartXfer+0x33c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008de3 	.word	0x08008de3
 8008db8:	08008e05 	.word	0x08008e05
 8008dbc:	08008e27 	.word	0x08008e27
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	0151      	lsls	r1, r2, #5
 8008dd2:	6a3a      	ldr	r2, [r7, #32]
 8008dd4:	440a      	add	r2, r1
 8008dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dde:	6053      	str	r3, [r2, #4]
          break;
 8008de0:	e03d      	b.n	8008e5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	6a3a      	ldr	r2, [r7, #32]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dfc:	f043 030e 	orr.w	r3, r3, #14
 8008e00:	6053      	str	r3, [r2, #4]
          break;
 8008e02:	e02c      	b.n	8008e5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	6a3a      	ldr	r2, [r7, #32]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e22:	6053      	str	r3, [r2, #4]
          break;
 8008e24:	e01b      	b.n	8008e5e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	69fa      	ldr	r2, [r7, #28]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	6a3a      	ldr	r2, [r7, #32]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e44:	6053      	str	r3, [r2, #4]
          break;
 8008e46:	e00a      	b.n	8008e5e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6053      	str	r3, [r2, #4]
 8008e5a:	e000      	b.n	8008e5e <USB_HC_StartXfer+0x3ea>
          break;
 8008e5c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e74:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	78db      	ldrb	r3, [r3, #3]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	e003      	b.n	8008e90 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e8e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e96:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e055      	b.n	8008f60 <USB_HC_StartXfer+0x4ec>
 8008eb4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	78db      	ldrb	r3, [r3, #3]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d14e      	bne.n	8008f5e <USB_HC_StartXfer+0x4ea>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d04a      	beq.n	8008f5e <USB_HC_StartXfer+0x4ea>
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	79db      	ldrb	r3, [r3, #7]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d146      	bne.n	8008f5e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	7c9b      	ldrb	r3, [r3, #18]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d831      	bhi.n	8008f3c <USB_HC_StartXfer+0x4c8>
 8008ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <USB_HC_StartXfer+0x46c>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008f15 	.word	0x08008f15
 8008ee8:	08008ef1 	.word	0x08008ef1
 8008eec:	08008f15 	.word	0x08008f15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	3303      	adds	r3, #3
 8008ef6:	089b      	lsrs	r3, r3, #2
 8008ef8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008efa:	8afa      	ldrh	r2, [r7, #22]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d91c      	bls.n	8008f40 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f043 0220 	orr.w	r2, r3, #32
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f12:	e015      	b.n	8008f40 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	3303      	adds	r3, #3
 8008f1a:	089b      	lsrs	r3, r3, #2
 8008f1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f1e:	8afa      	ldrh	r2, [r7, #22]
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d90a      	bls.n	8008f44 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f3a:	e003      	b.n	8008f44 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <USB_HC_StartXfer+0x4d2>
        break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <USB_HC_StartXfer+0x4d2>
        break;
 8008f44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	6999      	ldr	r1, [r3, #24]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	785a      	ldrb	r2, [r3, #1]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	2000      	movs	r0, #0
 8008f56:	9000      	str	r0, [sp, #0]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff f9c9 	bl	80082f0 <USB_WritePacket>
  }

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3728      	adds	r7, #40	@ 0x28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	b29b      	uxth	r3, r3
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b089      	sub	sp, #36	@ 0x24
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	0c9b      	lsrs	r3, r3, #18
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	0fdb      	lsrs	r3, r3, #31
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	0fdb      	lsrs	r3, r3, #31
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d10d      	bne.n	800900c <USB_HC_Halt+0x82>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <USB_HC_Halt+0x82>
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d002      	beq.n	8009008 <USB_HC_Halt+0x7e>
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b03      	cmp	r3, #3
 8009006:	d101      	bne.n	800900c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e0d8      	b.n	80091be <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <USB_HC_Halt+0x8e>
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d173      	bne.n	8009100 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009036:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d14a      	bne.n	80090da <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009048:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d133      	bne.n	80090b8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	440a      	add	r2, r1
 8009066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800906a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800906e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	4413      	add	r3, r2
 8009078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	440a      	add	r2, r1
 8009086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800908a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800908e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3301      	adds	r3, #1
 8009094:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800909c:	d82e      	bhi.n	80090fc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090b4:	d0ec      	beq.n	8009090 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090b6:	e081      	b.n	80091bc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090d8:	e070      	b.n	80091bc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090fa:	e05f      	b.n	80091bc <USB_HC_Halt+0x232>
            break;
 80090fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090fe:	e05d      	b.n	80091bc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	4413      	add	r3, r2
 8009108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	0151      	lsls	r1, r2, #5
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	440a      	add	r2, r1
 8009116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800911a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800911e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d133      	bne.n	8009198 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	440a      	add	r2, r1
 8009146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800914a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800914e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	4413      	add	r3, r2
 8009158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	440a      	add	r2, r1
 8009166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800916a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800916e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	3301      	adds	r3, #1
 8009174:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800917c:	d81d      	bhi.n	80091ba <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009194:	d0ec      	beq.n	8009170 <USB_HC_Halt+0x1e6>
 8009196:	e011      	b.n	80091bc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e000      	b.n	80091bc <USB_HC_Halt+0x232>
          break;
 80091ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3724      	adds	r7, #36	@ 0x24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
	...

080091cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80091e0:	2301      	movs	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	04da      	lsls	r2, r3, #19
 80091e8:	4b15      	ldr	r3, [pc, #84]	@ (8009240 <USB_DoPing+0x74>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	0151      	lsls	r1, r2, #5
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	440a      	add	r2, r1
 80091f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	4413      	add	r3, r2
 8009206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009214:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800921c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800922a:	461a      	mov	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	1ff80000 	.word	0x1ff80000

08009244 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7fe ff8c 	bl	8008176 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800925e:	2110      	movs	r1, #16
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7fe ffe5 	bl	8008230 <USB_FlushTxFifo>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff f80f 	bl	8008294 <USB_FlushRxFifo>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009280:	2300      	movs	r3, #0
 8009282:	61bb      	str	r3, [r7, #24]
 8009284:	e01f      	b.n	80092c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	4413      	add	r3, r2
 800928e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800929c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ba:	461a      	mov	r2, r3
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	3301      	adds	r3, #1
 80092c4:	61bb      	str	r3, [r7, #24]
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b0f      	cmp	r3, #15
 80092ca:	d9dc      	bls.n	8009286 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80092cc:	2300      	movs	r3, #0
 80092ce:	61bb      	str	r3, [r7, #24]
 80092d0:	e034      	b.n	800933c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	4413      	add	r3, r2
 8009302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009306:	461a      	mov	r2, r3
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3301      	adds	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009318:	d80c      	bhi.n	8009334 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800932c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009330:	d0ec      	beq.n	800930c <USB_StopHost+0xc8>
 8009332:	e000      	b.n	8009336 <USB_StopHost+0xf2>
        break;
 8009334:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	3301      	adds	r3, #1
 800933a:	61bb      	str	r3, [r7, #24]
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b0f      	cmp	r3, #15
 8009340:	d9c7      	bls.n	80092d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009348:	461a      	mov	r2, r3
 800934a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800934e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009356:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7fe fefb 	bl	8008154 <USB_EnableGlobalInt>

  return ret;
 800935e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b089      	sub	sp, #36	@ 0x24
 800936c:	af04      	add	r7, sp, #16
 800936e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009370:	2301      	movs	r3, #1
 8009372:	2202      	movs	r2, #2
 8009374:	2102      	movs	r1, #2
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fcd1 	bl	8009d1e <USBH_FindInterface>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	2bff      	cmp	r3, #255	@ 0xff
 8009384:	d002      	beq.n	800938c <USBH_CDC_InterfaceInit+0x24>
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d901      	bls.n	8009390 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800938c:	2302      	movs	r3, #2
 800938e:	e13d      	b.n	800960c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fca6 	bl	8009ce6 <USBH_SelectInterface>
 800939a:	4603      	mov	r3, r0
 800939c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80093a4:	2302      	movs	r3, #2
 80093a6:	e131      	b.n	800960c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80093ae:	2050      	movs	r0, #80	@ 0x50
 80093b0:	f006 fc2a 	bl	800fc08 <malloc>
 80093b4:	4603      	mov	r3, r0
 80093b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80093c8:	2302      	movs	r3, #2
 80093ca:	e11f      	b.n	800960c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80093cc:	2250      	movs	r2, #80	@ 0x50
 80093ce:	2100      	movs	r1, #0
 80093d0:	68b8      	ldr	r0, [r7, #8]
 80093d2:	f006 fcf7 	bl	800fdc4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	211a      	movs	r1, #26
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	4413      	add	r3, r2
 80093e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b25b      	sxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	da15      	bge.n	800941a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	211a      	movs	r1, #26
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	4413      	add	r3, r2
 80093fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093fe:	781a      	ldrb	r2, [r3, #0]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	211a      	movs	r1, #26
 800940a:	fb01 f303 	mul.w	r3, r1, r3
 800940e:	4413      	add	r3, r2
 8009410:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009414:	881a      	ldrh	r2, [r3, #0]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f002 fa18 	bl	800b856 <USBH_AllocPipe>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	7819      	ldrb	r1, [r3, #0]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	7858      	ldrb	r0, [r3, #1]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	8952      	ldrh	r2, [r2, #10]
 8009446:	9202      	str	r2, [sp, #8]
 8009448:	2203      	movs	r2, #3
 800944a:	9201      	str	r2, [sp, #4]
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	4623      	mov	r3, r4
 8009450:	4602      	mov	r2, r0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f002 f9d0 	bl	800b7f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2200      	movs	r2, #0
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f006 fb4b 	bl	800fafc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009466:	2300      	movs	r3, #0
 8009468:	2200      	movs	r2, #0
 800946a:	210a      	movs	r1, #10
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fc56 	bl	8009d1e <USBH_FindInterface>
 8009472:	4603      	mov	r3, r0
 8009474:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	2bff      	cmp	r3, #255	@ 0xff
 800947a:	d002      	beq.n	8009482 <USBH_CDC_InterfaceInit+0x11a>
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d901      	bls.n	8009486 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009482:	2302      	movs	r3, #2
 8009484:	e0c2      	b.n	800960c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	211a      	movs	r1, #26
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	4413      	add	r3, r2
 8009492:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	b25b      	sxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	da16      	bge.n	80094cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	211a      	movs	r1, #26
 80094a4:	fb01 f303 	mul.w	r3, r1, r3
 80094a8:	4413      	add	r3, r2
 80094aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	211a      	movs	r1, #26
 80094ba:	fb01 f303 	mul.w	r3, r1, r3
 80094be:	4413      	add	r3, r2
 80094c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80094c4:	881a      	ldrh	r2, [r3, #0]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	835a      	strh	r2, [r3, #26]
 80094ca:	e015      	b.n	80094f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	211a      	movs	r1, #26
 80094d2:	fb01 f303 	mul.w	r3, r1, r3
 80094d6:	4413      	add	r3, r2
 80094d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094dc:	781a      	ldrb	r2, [r3, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	211a      	movs	r1, #26
 80094e8:	fb01 f303 	mul.w	r3, r1, r3
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80094f2:	881a      	ldrh	r2, [r3, #0]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	211a      	movs	r1, #26
 80094fe:	fb01 f303 	mul.w	r3, r1, r3
 8009502:	4413      	add	r3, r2
 8009504:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	b25b      	sxtb	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	da16      	bge.n	800953e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	211a      	movs	r1, #26
 8009516:	fb01 f303 	mul.w	r3, r1, r3
 800951a:	4413      	add	r3, r2
 800951c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009520:	781a      	ldrb	r2, [r3, #0]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	211a      	movs	r1, #26
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	4413      	add	r3, r2
 8009532:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009536:	881a      	ldrh	r2, [r3, #0]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	835a      	strh	r2, [r3, #26]
 800953c:	e015      	b.n	800956a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	211a      	movs	r1, #26
 8009544:	fb01 f303 	mul.w	r3, r1, r3
 8009548:	4413      	add	r3, r2
 800954a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	211a      	movs	r1, #26
 800955a:	fb01 f303 	mul.w	r3, r1, r3
 800955e:	4413      	add	r3, r2
 8009560:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009564:	881a      	ldrh	r2, [r3, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	7b9b      	ldrb	r3, [r3, #14]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f002 f970 	bl	800b856 <USBH_AllocPipe>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	7bdb      	ldrb	r3, [r3, #15]
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f002 f966 	bl	800b856 <USBH_AllocPipe>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	7b59      	ldrb	r1, [r3, #13]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	7b98      	ldrb	r0, [r3, #14]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	8b12      	ldrh	r2, [r2, #24]
 80095aa:	9202      	str	r2, [sp, #8]
 80095ac:	2202      	movs	r2, #2
 80095ae:	9201      	str	r2, [sp, #4]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	4623      	mov	r3, r4
 80095b4:	4602      	mov	r2, r0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 f91e 	bl	800b7f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	7b19      	ldrb	r1, [r3, #12]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	7bd8      	ldrb	r0, [r3, #15]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	8b52      	ldrh	r2, [r2, #26]
 80095d4:	9202      	str	r2, [sp, #8]
 80095d6:	2202      	movs	r2, #2
 80095d8:	9201      	str	r2, [sp, #4]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4623      	mov	r3, r4
 80095de:	4602      	mov	r2, r0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f002 f909 	bl	800b7f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	7b5b      	ldrb	r3, [r3, #13]
 80095f2:	2200      	movs	r2, #0
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f006 fa80 	bl	800fafc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	7b1b      	ldrb	r3, [r3, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f006 fa79 	bl	800fafc <USBH_LL_SetToggle>

  return USBH_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	bd90      	pop	{r4, r7, pc}

08009614 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00e      	beq.n	800964c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f002 f8fe 	bl	800b836 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f002 f929 	bl	800b898 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	7b1b      	ldrb	r3, [r3, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00e      	beq.n	8009672 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	7b1b      	ldrb	r3, [r3, #12]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f002 f8eb 	bl	800b836 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	7b1b      	ldrb	r3, [r3, #12]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f002 f916 	bl	800b898 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	7b5b      	ldrb	r3, [r3, #13]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00e      	beq.n	8009698 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	7b5b      	ldrb	r3, [r3, #13]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f002 f8d8 	bl	800b836 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	7b5b      	ldrb	r3, [r3, #13]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f002 f903 	bl	800b898 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f006 fab3 	bl	800fc18 <free>
    phost->pActiveClass->pData = 0U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096b8:	2200      	movs	r2, #0
 80096ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3340      	adds	r3, #64	@ 0x40
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f8b1 	bl	8009846 <GetLineCoding>
 80096e4:	4603      	mov	r3, r0
 80096e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096f4:	2102      	movs	r1, #2
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80096fa:	7afb      	ldrb	r3, [r7, #11]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800970c:	2301      	movs	r3, #1
 800970e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009724:	2b04      	cmp	r3, #4
 8009726:	d877      	bhi.n	8009818 <USBH_CDC_Process+0x114>
 8009728:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <USBH_CDC_Process+0x2c>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009745 	.word	0x08009745
 8009734:	0800974b 	.word	0x0800974b
 8009738:	0800977b 	.word	0x0800977b
 800973c:	080097ef 	.word	0x080097ef
 8009740:	080097fd 	.word	0x080097fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
      break;
 8009748:	e06d      	b.n	8009826 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f897 	bl	8009884 <SetLineCoding>
 8009756:	4603      	mov	r3, r0
 8009758:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009768:	e058      	b.n	800981c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d055      	beq.n	800981c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2204      	movs	r2, #4
 8009774:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009778:	e050      	b.n	800981c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	3340      	adds	r3, #64	@ 0x40
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f860 	bl	8009846 <GetLineCoding>
 8009786:	4603      	mov	r3, r0
 8009788:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d126      	bne.n	80097de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a2:	791b      	ldrb	r3, [r3, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d13b      	bne.n	8009820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d133      	bne.n	8009820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d12b      	bne.n	8009820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d124      	bne.n	8009820 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f982 	bl	8009ae0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80097dc:	e020      	b.n	8009820 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d01d      	beq.n	8009820 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2204      	movs	r2, #4
 80097e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80097ec:	e018      	b.n	8009820 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f867 	bl	80098c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f8f6 	bl	80099e6 <CDC_ProcessReception>
      break;
 80097fa:	e014      	b.n	8009826 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 f984 	bl	800ab0c <USBH_ClrFeature>
 8009804:	4603      	mov	r3, r0
 8009806:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009816:	e005      	b.n	8009824 <USBH_CDC_Process+0x120>

    default:
      break;
 8009818:	bf00      	nop
 800981a:	e004      	b.n	8009826 <USBH_CDC_Process+0x122>
      break;
 800981c:	bf00      	nop
 800981e:	e002      	b.n	8009826 <USBH_CDC_Process+0x122>
      break;
 8009820:	bf00      	nop
 8009822:	e000      	b.n	8009826 <USBH_CDC_Process+0x122>
      break;
 8009824:	bf00      	nop

  }

  return status;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	22a1      	movs	r2, #161	@ 0xa1
 8009854:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2221      	movs	r2, #33	@ 0x21
 800985a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2207      	movs	r2, #7
 800986c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2207      	movs	r2, #7
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f001 fc7e 	bl	800b176 <USBH_CtlReq>
 800987a:	4603      	mov	r3, r0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2221      	movs	r2, #33	@ 0x21
 8009892:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2207      	movs	r2, #7
 80098aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2207      	movs	r2, #7
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 fc5f 	bl	800b176 <USBH_CtlReq>
 80098b8:	4603      	mov	r3, r0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b086      	sub	sp, #24
 80098c6:	af02      	add	r7, sp, #8
 80098c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098d4:	2300      	movs	r3, #0
 80098d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d002      	beq.n	80098e8 <CDC_ProcessTransmission+0x26>
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d023      	beq.n	800992e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80098e6:	e07a      	b.n	80099de <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	8b12      	ldrh	r2, [r2, #24]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d90b      	bls.n	800990c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	69d9      	ldr	r1, [r3, #28]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8b1a      	ldrh	r2, [r3, #24]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	7b5b      	ldrb	r3, [r3, #13]
 8009900:	2001      	movs	r0, #1
 8009902:	9000      	str	r0, [sp, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 ff34 	bl	800b772 <USBH_BulkSendData>
 800990a:	e00b      	b.n	8009924 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	7b5b      	ldrb	r3, [r3, #13]
 800991a:	2001      	movs	r0, #1
 800991c:	9000      	str	r0, [sp, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 ff27 	bl	800b772 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800992c:	e057      	b.n	80099de <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	7b5b      	ldrb	r3, [r3, #13]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f006 f8b7 	bl	800faa8 <USBH_LL_GetURBState>
 800993a:	4603      	mov	r3, r0
 800993c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d136      	bne.n	80099b2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	8b12      	ldrh	r2, [r2, #24]
 800994c:	4293      	cmp	r3, r2
 800994e:	d90e      	bls.n	800996e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	8b12      	ldrh	r2, [r2, #24]
 8009958:	1a9a      	subs	r2, r3, r2
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	8b12      	ldrh	r2, [r2, #24]
 8009966:	441a      	add	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	61da      	str	r2, [r3, #28]
 800996c:	e002      	b.n	8009974 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009978:	2b00      	cmp	r3, #0
 800997a:	d004      	beq.n	8009986 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009984:	e006      	b.n	8009994 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f892 	bl	8009ab8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2204      	movs	r2, #4
 8009998:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80099a8:	2300      	movs	r3, #0
 80099aa:	2200      	movs	r2, #0
 80099ac:	f002 fa34 	bl	800be18 <osMessageQueuePut>
      break;
 80099b0:	e014      	b.n	80099dc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80099b2:	7afb      	ldrb	r3, [r7, #11]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d111      	bne.n	80099dc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2204      	movs	r2, #4
 80099c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80099d4:	2300      	movs	r3, #0
 80099d6:	2200      	movs	r2, #0
 80099d8:	f002 fa1e 	bl	800be18 <osMessageQueuePut>
      break;
 80099dc:	bf00      	nop
  }
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d002      	beq.n	8009a0c <CDC_ProcessReception+0x26>
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d00e      	beq.n	8009a28 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009a0a:	e051      	b.n	8009ab0 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	6a19      	ldr	r1, [r3, #32]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	8b5a      	ldrh	r2, [r3, #26]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	7b1b      	ldrb	r3, [r3, #12]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fecf 	bl	800b7bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2204      	movs	r2, #4
 8009a22:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009a26:	e043      	b.n	8009ab0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	7b1b      	ldrb	r3, [r3, #12]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f006 f83a 	bl	800faa8 <USBH_LL_GetURBState>
 8009a34:	4603      	mov	r3, r0
 8009a36:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009a38:	7cfb      	ldrb	r3, [r7, #19]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d137      	bne.n	8009aae <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	7b1b      	ldrb	r3, [r3, #12]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f005 ff9d 	bl	800f984 <USBH_LL_GetLastXferSize>
 8009a4a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d016      	beq.n	8009a84 <CDC_ProcessReception+0x9e>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	8b5b      	ldrh	r3, [r3, #26]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d910      	bls.n	8009a84 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	6a1a      	ldr	r2, [r3, #32]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	441a      	add	r2, r3
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8009a82:	e006      	b.n	8009a92 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f81d 	bl	8009acc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2204      	movs	r2, #4
 8009a96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f002 f9b5 	bl	800be18 <osMessageQueuePut>
      break;
 8009aae:	bf00      	nop
  }
}
 8009ab0:	bf00      	nop
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	4613      	mov	r3, r2
 8009b00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e044      	b.n	8009b96 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	79fa      	ldrb	r2, [r7, #7]
 8009b10:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f841 	bl	8009bac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2104      	movs	r1, #4
 8009b5c:	2010      	movs	r0, #16
 8009b5e:	f002 f8e7 	bl	800bd30 <osMessageQueueNew>
 8009b62:	4602      	mov	r2, r0
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba0 <USBH_Init+0xac>)
 8009b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ba4 <USBH_Init+0xb0>)
 8009b6e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009b70:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba0 <USBH_Init+0xac>)
 8009b72:	2280      	movs	r2, #128	@ 0x80
 8009b74:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009b76:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba0 <USBH_Init+0xac>)
 8009b78:	2218      	movs	r2, #24
 8009b7a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009b7c:	4a08      	ldr	r2, [pc, #32]	@ (8009ba0 <USBH_Init+0xac>)
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	4809      	ldr	r0, [pc, #36]	@ (8009ba8 <USBH_Init+0xb4>)
 8009b82:	f001 ff59 	bl	800ba38 <osThreadNew>
 8009b86:	4602      	mov	r2, r0
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f005 fe44 	bl	800f81c <USBH_LL_Init>

  return USBH_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2000285c 	.word	0x2000285c
 8009ba4:	080106e4 	.word	0x080106e4
 8009ba8:	0800a85d 	.word	0x0800a85d

08009bac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e009      	b.n	8009bd2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	33e0      	adds	r3, #224	@ 0xe0
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	2200      	movs	r2, #0
 8009bca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b0f      	cmp	r3, #15
 8009bd6:	d9f2      	bls.n	8009bbe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	e009      	b.n	8009bf2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf8:	d3f1      	bcc.n	8009bde <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2240      	movs	r2, #64	@ 0x40
 8009c1e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	331c      	adds	r3, #28
 8009c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f006 f8b7 	bl	800fdc4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f006 f8ae 	bl	800fdc4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009c6e:	2212      	movs	r2, #18
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f006 f8a6 	bl	800fdc4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c7e:	223e      	movs	r2, #62	@ 0x3e
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f006 f89e 	bl	800fdc4 <memset>

  return USBH_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d016      	beq.n	8009cd4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10e      	bne.n	8009cce <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cb6:	1c59      	adds	r1, r3, #1
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	33de      	adds	r3, #222	@ 0xde
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
 8009ccc:	e004      	b.n	8009cd8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009cce:	2302      	movs	r3, #2
 8009cd0:	73fb      	strb	r3, [r7, #15]
 8009cd2:	e001      	b.n	8009cd8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d204      	bcs.n	8009d0c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	78fa      	ldrb	r2, [r7, #3]
 8009d06:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009d0a:	e001      	b.n	8009d10 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b087      	sub	sp, #28
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	4608      	mov	r0, r1
 8009d28:	4611      	mov	r1, r2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	70fb      	strb	r3, [r7, #3]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70bb      	strb	r3, [r7, #2]
 8009d34:	4613      	mov	r3, r2
 8009d36:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d46:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d48:	e025      	b.n	8009d96 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	221a      	movs	r2, #26
 8009d4e:	fb02 f303 	mul.w	r3, r2, r3
 8009d52:	3308      	adds	r3, #8
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	3302      	adds	r3, #2
 8009d5a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	795b      	ldrb	r3, [r3, #5]
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d002      	beq.n	8009d6c <USBH_FindInterface+0x4e>
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	2bff      	cmp	r3, #255	@ 0xff
 8009d6a:	d111      	bne.n	8009d90 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d70:	78ba      	ldrb	r2, [r7, #2]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d002      	beq.n	8009d7c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d76:	78bb      	ldrb	r3, [r7, #2]
 8009d78:	2bff      	cmp	r3, #255	@ 0xff
 8009d7a:	d109      	bne.n	8009d90 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d80:	787a      	ldrb	r2, [r7, #1]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d002      	beq.n	8009d8c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d86:	787b      	ldrb	r3, [r7, #1]
 8009d88:	2bff      	cmp	r3, #255	@ 0xff
 8009d8a:	d101      	bne.n	8009d90 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	e006      	b.n	8009d9e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	3301      	adds	r3, #1
 8009d94:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d9d6      	bls.n	8009d4a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d9c:	23ff      	movs	r3, #255	@ 0xff
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	371c      	adds	r7, #28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f005 fd6e 	bl	800f894 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009db8:	2101      	movs	r1, #1
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f005 fe87 	bl	800face <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af04      	add	r7, sp, #16
 8009dd2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d102      	bne.n	8009dee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2203      	movs	r2, #3
 8009dec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b0b      	cmp	r3, #11
 8009df6:	f200 8244 	bhi.w	800a282 <USBH_Process+0x4b6>
 8009dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <USBH_Process+0x34>)
 8009dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e7f 	.word	0x08009e7f
 8009e08:	08009f03 	.word	0x08009f03
 8009e0c:	0800a201 	.word	0x0800a201
 8009e10:	0800a283 	.word	0x0800a283
 8009e14:	08009fbf 	.word	0x08009fbf
 8009e18:	0800a18b 	.word	0x0800a18b
 8009e1c:	0800a011 	.word	0x0800a011
 8009e20:	0800a04d 	.word	0x0800a04d
 8009e24:	0800a085 	.word	0x0800a085
 8009e28:	0800a0e3 	.word	0x0800a0e3
 8009e2c:	0800a1e9 	.word	0x0800a1e9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 8224 	beq.w	800a286 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e44:	20c8      	movs	r0, #200	@ 0xc8
 8009e46:	f005 fe8c 	bl	800fb62 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f005 fd7f 	bl	800f94e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009e74:	2300      	movs	r3, #0
 8009e76:	2200      	movs	r2, #0
 8009e78:	f001 ffce 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009e7c:	e203      	b.n	800a286 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d107      	bne.n	8009e98 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	e025      	b.n	8009ee4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ea2:	d914      	bls.n	8009ece <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d903      	bls.n	8009ec6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	220d      	movs	r2, #13
 8009ec2:	701a      	strb	r2, [r3, #0]
 8009ec4:	e00e      	b.n	8009ee4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	701a      	strb	r2, [r3, #0]
 8009ecc:	e00a      	b.n	8009ee4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009ed4:	f103 020a 	add.w	r2, r3, #10
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009ede:	200a      	movs	r0, #10
 8009ee0:	f005 fe3f 	bl	800fb62 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	2200      	movs	r2, #0
 8009efc:	f001 ff8c 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 8009f00:	e1c8      	b.n	800a294 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d005      	beq.n	8009f18 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f12:	2104      	movs	r1, #4
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f18:	2064      	movs	r0, #100	@ 0x64
 8009f1a:	f005 fe22 	bl	800fb62 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f005 fcee 	bl	800f900 <USBH_LL_GetSpeed>
 8009f24:	4603      	mov	r3, r0
 8009f26:	461a      	mov	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2205      	movs	r2, #5
 8009f32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f34:	2100      	movs	r1, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fc8d 	bl	800b856 <USBH_AllocPipe>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f44:	2180      	movs	r1, #128	@ 0x80
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fc85 	bl	800b856 <USBH_AllocPipe>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7919      	ldrb	r1, [r3, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f68:	9202      	str	r2, [sp, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	9201      	str	r2, [sp, #4]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4603      	mov	r3, r0
 8009f72:	2280      	movs	r2, #128	@ 0x80
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 fc3f 	bl	800b7f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7959      	ldrb	r1, [r3, #5]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f8e:	9202      	str	r2, [sp, #8]
 8009f90:	2200      	movs	r2, #0
 8009f92:	9201      	str	r2, [sp, #4]
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	4603      	mov	r3, r0
 8009f98:	2200      	movs	r2, #0
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 fc2c 	bl	800b7f8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f001 ff2e 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 8009fbc:	e16a      	b.n	800a294 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f96e 	bl	800a2a0 <USBH_HandleEnum>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 815c 	bne.w	800a28a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d103      	bne.n	8009fec <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2207      	movs	r2, #7
 8009ff0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a006:	2300      	movs	r3, #0
 800a008:	2200      	movs	r2, #0
 800a00a:	f001 ff05 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a00e:	e13c      	b.n	800a28a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 8139 	beq.w	800a28e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a022:	2101      	movs	r1, #1
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2208      	movs	r2, #8
 800a02c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2205      	movs	r2, #5
 800a032:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a042:	2300      	movs	r3, #0
 800a044:	2200      	movs	r2, #0
 800a046:	f001 fee7 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a04a:	e120      	b.n	800a28e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fd12 	bl	800aa7e <USBH_SetCfg>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2209      	movs	r2, #9
 800a064:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a07a:	2300      	movs	r3, #0
 800a07c:	2200      	movs	r2, #0
 800a07e:	f001 fecb 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 800a082:	e107      	b.n	800a294 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d015      	beq.n	800a0be <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a092:	2101      	movs	r1, #1
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fd15 	bl	800aac4 <USBH_SetFeature>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d103      	bne.n	800a0ae <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	220a      	movs	r2, #10
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e00a      	b.n	800a0c4 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d106      	bne.n	800a0c4 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	e002      	b.n	800a0c4 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	220a      	movs	r2, #10
 800a0c2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a0d8:	2300      	movs	r3, #0
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f001 fe9c 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 800a0e0:	e0d8      	b.n	800a294 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d03f      	beq.n	800a16c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
 800a0f8:	e016      	b.n	800a128 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a0fa:	7bfa      	ldrb	r2, [r7, #15]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	32de      	adds	r2, #222	@ 0xde
 800a100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a104:	791a      	ldrb	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d108      	bne.n	800a122 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a110:	7bfa      	ldrb	r2, [r7, #15]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	32de      	adds	r2, #222	@ 0xde
 800a116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a120:	e005      	b.n	800a12e <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	3301      	adds	r3, #1
 800a126:	73fb      	strb	r3, [r7, #15]
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0e5      	beq.n	800a0fa <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d016      	beq.n	800a166 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	4798      	blx	r3
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2206      	movs	r2, #6
 800a14e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a156:	2103      	movs	r1, #3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
 800a15c:	e006      	b.n	800a16c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	220d      	movs	r2, #13
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	e002      	b.n	800a16c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	220d      	movs	r2, #13
 800a16a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2205      	movs	r2, #5
 800a170:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a180:	2300      	movs	r3, #0
 800a182:	2200      	movs	r2, #0
 800a184:	f001 fe48 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 800a188:	e084      	b.n	800a294 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d017      	beq.n	800a1c4 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	220b      	movs	r2, #11
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	e00a      	b.n	800a1ca <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d106      	bne.n	800a1ca <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	220d      	movs	r2, #13
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	220d      	movs	r2, #13
 800a1c8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2205      	movs	r2, #5
 800a1ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f001 fe19 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 800a1e6:	e055      	b.n	800a294 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d04f      	beq.n	800a292 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	4798      	blx	r3
      }
      break;
 800a1fe:	e048      	b.n	800a292 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fccf 	bl	8009bac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d009      	beq.n	800a22c <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a23c:	2105      	movs	r1, #5
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d107      	bne.n	800a25e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fda7 	bl	8009daa <USBH_Start>
 800a25c:	e002      	b.n	800a264 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f005 fb18 	bl	800f894 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a278:	2300      	movs	r3, #0
 800a27a:	2200      	movs	r2, #0
 800a27c:	f001 fdcc 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      break;
 800a280:	e008      	b.n	800a294 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a282:	bf00      	nop
 800a284:	e006      	b.n	800a294 <USBH_Process+0x4c8>
      break;
 800a286:	bf00      	nop
 800a288:	e004      	b.n	800a294 <USBH_Process+0x4c8>
      break;
 800a28a:	bf00      	nop
 800a28c:	e002      	b.n	800a294 <USBH_Process+0x4c8>
    break;
 800a28e:	bf00      	nop
 800a290:	e000      	b.n	800a294 <USBH_Process+0x4c8>
      break;
 800a292:	bf00      	nop
  }
  return USBH_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop

0800a2a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	785b      	ldrb	r3, [r3, #1]
 800a2b4:	2b07      	cmp	r3, #7
 800a2b6:	f200 8204 	bhi.w	800a6c2 <USBH_HandleEnum+0x422>
 800a2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c0 <USBH_HandleEnum+0x20>)
 800a2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c0:	0800a2e1 	.word	0x0800a2e1
 800a2c4:	0800a39b 	.word	0x0800a39b
 800a2c8:	0800a405 	.word	0x0800a405
 800a2cc:	0800a48f 	.word	0x0800a48f
 800a2d0:	0800a4f9 	.word	0x0800a4f9
 800a2d4:	0800a569 	.word	0x0800a569
 800a2d8:	0800a605 	.word	0x0800a605
 800a2dc:	0800a683 	.word	0x0800a683
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a2e0:	2108      	movs	r1, #8
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fae8 	bl	800a8b8 <USBH_Get_DevDesc>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d12e      	bne.n	800a350 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	7919      	ldrb	r1, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a316:	9202      	str	r2, [sp, #8]
 800a318:	2200      	movs	r2, #0
 800a31a:	9201      	str	r2, [sp, #4]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	4603      	mov	r3, r0
 800a320:	2280      	movs	r2, #128	@ 0x80
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fa68 	bl	800b7f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7959      	ldrb	r1, [r3, #5]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a33c:	9202      	str	r2, [sp, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	9201      	str	r2, [sp, #4]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	4603      	mov	r3, r0
 800a346:	2200      	movs	r2, #0
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 fa55 	bl	800b7f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a34e:	e1ba      	b.n	800a6c6 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b03      	cmp	r3, #3
 800a354:	f040 81b7 	bne.w	800a6c6 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a35e:	3301      	adds	r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d903      	bls.n	800a37a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220d      	movs	r2, #13
 800a376:	701a      	strb	r2, [r3, #0]
      break;
 800a378:	e1a5      	b.n	800a6c6 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	795b      	ldrb	r3, [r3, #5]
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f001 fa89 	bl	800b898 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 fa83 	bl	800b898 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	701a      	strb	r2, [r3, #0]
      break;
 800a398:	e195      	b.n	800a6c6 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a39a:	2112      	movs	r1, #18
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa8b 	bl	800a8b8 <USBH_Get_DevDesc>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d103      	bne.n	800a3b4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3b2:	e18a      	b.n	800a6ca <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	f040 8187 	bne.w	800a6ca <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d903      	bls.n	800a3de <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	220d      	movs	r2, #13
 800a3da:	701a      	strb	r2, [r3, #0]
      break;
 800a3dc:	e175      	b.n	800a6ca <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	795b      	ldrb	r3, [r3, #5]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 fa57 	bl	800b898 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fa51 	bl	800b898 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
      break;
 800a402:	e162      	b.n	800a6ca <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a404:	2101      	movs	r1, #1
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fb15 	bl	800aa36 <USBH_SetAddress>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d130      	bne.n	800a478 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a416:	2002      	movs	r0, #2
 800a418:	f005 fba3 	bl	800fb62 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2203      	movs	r2, #3
 800a428:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	7919      	ldrb	r1, [r3, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a43e:	9202      	str	r2, [sp, #8]
 800a440:	2200      	movs	r2, #0
 800a442:	9201      	str	r2, [sp, #4]
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4603      	mov	r3, r0
 800a448:	2280      	movs	r2, #128	@ 0x80
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 f9d4 	bl	800b7f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7959      	ldrb	r1, [r3, #5]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a464:	9202      	str	r2, [sp, #8]
 800a466:	2200      	movs	r2, #0
 800a468:	9201      	str	r2, [sp, #4]
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4603      	mov	r3, r0
 800a46e:	2200      	movs	r2, #0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 f9c1 	bl	800b7f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a476:	e12a      	b.n	800a6ce <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	f040 8127 	bne.w	800a6ce <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	220d      	movs	r2, #13
 800a484:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	705a      	strb	r2, [r3, #1]
      break;
 800a48c:	e11f      	b.n	800a6ce <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a48e:	2109      	movs	r1, #9
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fa3d 	bl	800a910 <USBH_Get_CfgDesc>
 800a496:	4603      	mov	r3, r0
 800a498:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d103      	bne.n	800a4a8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a4a6:	e114      	b.n	800a6d2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	f040 8111 	bne.w	800a6d2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d903      	bls.n	800a4d2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	220d      	movs	r2, #13
 800a4ce:	701a      	strb	r2, [r3, #0]
      break;
 800a4d0:	e0ff      	b.n	800a6d2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	795b      	ldrb	r3, [r3, #5]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 f9dd 	bl	800b898 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	791b      	ldrb	r3, [r3, #4]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 f9d7 	bl	800b898 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
      break;
 800a4f6:	e0ec      	b.n	800a6d2 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fa05 	bl	800a910 <USBH_Get_CfgDesc>
 800a506:	4603      	mov	r3, r0
 800a508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2205      	movs	r2, #5
 800a514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a516:	e0de      	b.n	800a6d6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	f040 80db 	bne.w	800a6d6 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a526:	3301      	adds	r3, #1
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a536:	2b03      	cmp	r3, #3
 800a538:	d903      	bls.n	800a542 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	220d      	movs	r2, #13
 800a53e:	701a      	strb	r2, [r3, #0]
      break;
 800a540:	e0c9      	b.n	800a6d6 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	795b      	ldrb	r3, [r3, #5]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f001 f9a5 	bl	800b898 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	791b      	ldrb	r3, [r3, #4]
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 f99f 	bl	800b898 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
      break;
 800a566:	e0b6      	b.n	800a6d6 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d036      	beq.n	800a5e0 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a57e:	23ff      	movs	r3, #255	@ 0xff
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f9ef 	bl	800a964 <USBH_Get_StringDesc>
 800a586:	4603      	mov	r3, r0
 800a588:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d111      	bne.n	800a5b4 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2206      	movs	r2, #6
 800a594:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2205      	movs	r2, #5
 800a59a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f001 fc33 	bl	800be18 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a5b2:	e092      	b.n	800a6da <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	f040 808f 	bne.w	800a6da <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2206      	movs	r2, #6
 800a5c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2205      	movs	r2, #5
 800a5c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f001 fc1d 	bl	800be18 <osMessageQueuePut>
      break;
 800a5de:	e07c      	b.n	800a6da <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2206      	movs	r2, #6
 800a5e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2205      	movs	r2, #5
 800a5ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f001 fc0b 	bl	800be18 <osMessageQueuePut>
      break;
 800a602:	e06a      	b.n	800a6da <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d027      	beq.n	800a65e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a61a:	23ff      	movs	r3, #255	@ 0xff
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f9a1 	bl	800a964 <USBH_Get_StringDesc>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d103      	bne.n	800a634 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2207      	movs	r2, #7
 800a630:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a632:	e054      	b.n	800a6de <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2b03      	cmp	r3, #3
 800a638:	d151      	bne.n	800a6de <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2207      	movs	r2, #7
 800a63e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2205      	movs	r2, #5
 800a644:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a654:	2300      	movs	r3, #0
 800a656:	2200      	movs	r2, #0
 800a658:	f001 fbde 	bl	800be18 <osMessageQueuePut>
      break;
 800a65c:	e03f      	b.n	800a6de <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2207      	movs	r2, #7
 800a662:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2205      	movs	r2, #5
 800a668:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a678:	2300      	movs	r3, #0
 800a67a:	2200      	movs	r2, #0
 800a67c:	f001 fbcc 	bl	800be18 <osMessageQueuePut>
      break;
 800a680:	e02d      	b.n	800a6de <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d017      	beq.n	800a6bc <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a698:	23ff      	movs	r3, #255	@ 0xff
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f962 	bl	800a964 <USBH_Get_StringDesc>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a6ae:	e018      	b.n	800a6e2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d115      	bne.n	800a6e2 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ba:	e012      	b.n	800a6e2 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c0:	e00f      	b.n	800a6e2 <USBH_HandleEnum+0x442>

    default:
      break;
 800a6c2:	bf00      	nop
 800a6c4:	e00e      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6c6:	bf00      	nop
 800a6c8:	e00c      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6ca:	bf00      	nop
 800a6cc:	e00a      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6ce:	bf00      	nop
 800a6d0:	e008      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6d2:	bf00      	nop
 800a6d4:	e006      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6d6:	bf00      	nop
 800a6d8:	e004      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6da:	bf00      	nop
 800a6dc:	e002      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6de:	bf00      	nop
 800a6e0:	e000      	b.n	800a6e4 <USBH_HandleEnum+0x444>
      break;
 800a6e2:	bf00      	nop
  }
  return Status;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop

0800a6f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f804 	bl	800a732 <USBH_HandleSof>
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b0b      	cmp	r3, #11
 800a742:	d10a      	bne.n	800a75a <USBH_HandleSof+0x28>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
  }
}
 800a75a:	bf00      	nop
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a786:	2300      	movs	r3, #0
 800a788:	2200      	movs	r2, #0
 800a78a:	f001 fb45 	bl	800be18 <osMessageQueuePut>
#endif
#endif

  return;
 800a78e:	bf00      	nop
}
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a7a6:	bf00      	nop
}
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f001 fb15 	bl	800be18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f005 f856 	bl	800f8ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	791b      	ldrb	r3, [r3, #4]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f837 	bl	800b898 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	795b      	ldrb	r3, [r3, #5]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 f831 	bl	800b898 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a84a:	2300      	movs	r3, #0
 800a84c:	2200      	movs	r2, #0
 800a84e:	f001 fae3 	bl	800be18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a874:	2200      	movs	r2, #0
 800a876:	f001 fb2f 	bl	800bed8 <osMessageQueueGet>
 800a87a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1f0      	bne.n	800a864 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff faa2 	bl	8009dcc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a888:	e7ec      	b.n	800a864 <USBH_Process_OS+0x8>

0800a88a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f001 fab5 	bl	800be18 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a8c4:	887b      	ldrh	r3, [r7, #2]
 800a8c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8ca:	d901      	bls.n	800a8d0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e01b      	b.n	800a908 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a8d6:	887b      	ldrh	r3, [r7, #2]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f872 	bl	800a9cc <USBH_GetDescriptor>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a8f8:	887a      	ldrh	r2, [r7, #2]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f929 	bl	800ab54 <USBH_ParseDevDesc>
 800a902:	4603      	mov	r3, r0
 800a904:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af02      	add	r7, sp, #8
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	331c      	adds	r3, #28
 800a920:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a922:	887b      	ldrh	r3, [r7, #2]
 800a924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a928:	d901      	bls.n	800a92e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e016      	b.n	800a95c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a92e:	887b      	ldrh	r3, [r7, #2]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a938:	2100      	movs	r1, #0
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f846 	bl	800a9cc <USBH_GetDescriptor>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d107      	bne.n	800a95a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a94a:	887b      	ldrh	r3, [r7, #2]
 800a94c:	461a      	mov	r2, r3
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f9af 	bl	800acb4 <USBH_ParseCfgDesc>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af02      	add	r7, sp, #8
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	461a      	mov	r2, r3
 800a970:	460b      	mov	r3, r1
 800a972:	72fb      	strb	r3, [r7, #11]
 800a974:	4613      	mov	r3, r2
 800a976:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a978:	893b      	ldrh	r3, [r7, #8]
 800a97a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a97e:	d802      	bhi.n	800a986 <USBH_Get_StringDesc+0x22>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a986:	2303      	movs	r3, #3
 800a988:	e01c      	b.n	800a9c4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a98a:	7afb      	ldrb	r3, [r7, #11]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a992:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a99a:	893b      	ldrh	r3, [r7, #8]
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f812 	bl	800a9cc <USBH_GetDescriptor>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a9b8:	893a      	ldrh	r2, [r7, #8]
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fb8d 	bl	800b0dc <USBH_ParseStringDesc>
  }

  return status;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	72fb      	strb	r3, [r7, #11]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	789b      	ldrb	r3, [r3, #2]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d11c      	bne.n	800aa20 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2206      	movs	r2, #6
 800a9f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	893a      	ldrh	r2, [r7, #8]
 800a9fc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a9fe:	893b      	ldrh	r3, [r7, #8]
 800aa00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aa04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa08:	d104      	bne.n	800aa14 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f240 4209 	movw	r2, #1033	@ 0x409
 800aa10:	829a      	strh	r2, [r3, #20]
 800aa12:	e002      	b.n	800aa1a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8b3a      	ldrh	r2, [r7, #24]
 800aa1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa20:	8b3b      	ldrh	r3, [r7, #24]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 fba5 	bl	800b176 <USBH_CtlReq>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	789b      	ldrb	r3, [r3, #2]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10f      	bne.n	800aa6a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2205      	movs	r2, #5
 800aa54:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb81 	bl	800b176 <USBH_CtlReq>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	789b      	ldrb	r3, [r3, #2]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d10e      	bne.n	800aab0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2209      	movs	r2, #9
 800aa9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	887a      	ldrh	r2, [r7, #2]
 800aaa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aab0:	2200      	movs	r2, #0
 800aab2:	2100      	movs	r1, #0
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb5e 	bl	800b176 <USBH_CtlReq>
 800aaba:	4603      	mov	r3, r0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	789b      	ldrb	r3, [r3, #2]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d10f      	bne.n	800aaf8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2203      	movs	r2, #3
 800aae2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aae4:	78fb      	ldrb	r3, [r7, #3]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2100      	movs	r1, #0
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fb3a 	bl	800b176 <USBH_CtlReq>
 800ab02:	4603      	mov	r3, r0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	789b      	ldrb	r3, [r3, #2]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10f      	bne.n	800ab40 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fb16 	bl	800b176 <USBH_CtlReq>
 800ab4a:	4603      	mov	r3, r0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ab68:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ab74:	2302      	movs	r3, #2
 800ab76:	e094      	b.n	800aca2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	781a      	ldrb	r2, [r3, #0]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	785a      	ldrb	r2, [r3, #1]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3303      	adds	r3, #3
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	021b      	lsls	r3, r3, #8
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	791a      	ldrb	r2, [r3, #4]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	795a      	ldrb	r2, [r3, #5]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	799a      	ldrb	r2, [r3, #6]
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	79da      	ldrb	r2, [r3, #7]
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d11b      	bne.n	800ac0e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	79db      	ldrb	r3, [r3, #7]
 800abda:	2b20      	cmp	r3, #32
 800abdc:	dc0f      	bgt.n	800abfe <USBH_ParseDevDesc+0xaa>
 800abde:	2b08      	cmp	r3, #8
 800abe0:	db0f      	blt.n	800ac02 <USBH_ParseDevDesc+0xae>
 800abe2:	3b08      	subs	r3, #8
 800abe4:	4a32      	ldr	r2, [pc, #200]	@ (800acb0 <USBH_ParseDevDesc+0x15c>)
 800abe6:	fa22 f303 	lsr.w	r3, r2, r3
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bf14      	ite	ne
 800abf2:	2301      	movne	r3, #1
 800abf4:	2300      	moveq	r3, #0
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <USBH_ParseDevDesc+0xb6>
 800abfc:	e001      	b.n	800ac02 <USBH_ParseDevDesc+0xae>
 800abfe:	2b40      	cmp	r3, #64	@ 0x40
 800ac00:	d003      	beq.n	800ac0a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2208      	movs	r2, #8
 800ac06:	71da      	strb	r2, [r3, #7]
        break;
 800ac08:	e000      	b.n	800ac0c <USBH_ParseDevDesc+0xb8>
        break;
 800ac0a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ac0c:	e00e      	b.n	800ac2c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d107      	bne.n	800ac28 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	79db      	ldrb	r3, [r3, #7]
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d005      	beq.n	800ac2c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2208      	movs	r2, #8
 800ac24:	71da      	strb	r2, [r3, #7]
 800ac26:	e001      	b.n	800ac2c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ac2c:	88fb      	ldrh	r3, [r7, #6]
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d936      	bls.n	800aca0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	3308      	adds	r3, #8
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	3309      	adds	r3, #9
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	4313      	orrs	r3, r2
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	330a      	adds	r3, #10
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	330b      	adds	r3, #11
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	330c      	adds	r3, #12
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	330d      	adds	r3, #13
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	7b9a      	ldrb	r2, [r3, #14]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	7bda      	ldrb	r2, [r3, #15]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	7c1a      	ldrb	r2, [r3, #16]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	7c5a      	ldrb	r2, [r3, #17]
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	371c      	adds	r7, #28
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	01000101 	.word	0x01000101

0800acb4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08c      	sub	sp, #48	@ 0x30
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800acc8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ace2:	2302      	movs	r3, #2
 800ace4:	e0da      	b.n	800ae9c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	781a      	ldrb	r2, [r3, #0]
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	785a      	ldrb	r2, [r3, #1]
 800acf6:	6a3b      	ldr	r3, [r7, #32]
 800acf8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	3302      	adds	r3, #2
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	461a      	mov	r2, r3
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	3303      	adds	r3, #3
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad14:	bf28      	it	cs
 800ad16:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	791a      	ldrb	r2, [r3, #4]
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	795a      	ldrb	r2, [r3, #5]
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	799a      	ldrb	r2, [r3, #6]
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	79da      	ldrb	r2, [r3, #7]
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	7a1a      	ldrb	r2, [r3, #8]
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ad48:	6a3b      	ldr	r3, [r7, #32]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d002      	beq.n	800ad56 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	2209      	movs	r2, #9
 800ad54:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ad56:	88fb      	ldrh	r3, [r7, #6]
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	f240 809d 	bls.w	800ae98 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800ad5e:	2309      	movs	r3, #9
 800ad60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad66:	e081      	b.n	800ae6c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad68:	f107 0316 	add.w	r3, r7, #22
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad70:	f000 f9e7 	bl	800b142 <USBH_GetNextDesc>
 800ad74:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d176      	bne.n	800ae6c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b09      	cmp	r3, #9
 800ad84:	d002      	beq.n	800ad8c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	2209      	movs	r2, #9
 800ad8a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad90:	221a      	movs	r2, #26
 800ad92:	fb02 f303 	mul.w	r3, r2, r3
 800ad96:	3308      	adds	r3, #8
 800ad98:	6a3a      	ldr	r2, [r7, #32]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ada0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ada2:	69f8      	ldr	r0, [r7, #28]
 800ada4:	f000 f87e 	bl	800aea4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800adb2:	e043      	b.n	800ae3c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800adb4:	f107 0316 	add.w	r3, r7, #22
 800adb8:	4619      	mov	r1, r3
 800adba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adbc:	f000 f9c1 	bl	800b142 <USBH_GetNextDesc>
 800adc0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	2b05      	cmp	r3, #5
 800adc8:	d138      	bne.n	800ae3c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d113      	bne.n	800adfa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800add6:	2b02      	cmp	r3, #2
 800add8:	d003      	beq.n	800ade2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	799b      	ldrb	r3, [r3, #6]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d10b      	bne.n	800adfa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	79db      	ldrb	r3, [r3, #7]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <USBH_ParseCfgDesc+0x14e>
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d007      	beq.n	800ae02 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	2209      	movs	r2, #9
 800adf6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800adf8:	e003      	b.n	800ae02 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800adfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfc:	2207      	movs	r2, #7
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e000      	b.n	800ae04 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae02:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae0c:	3201      	adds	r2, #1
 800ae0e:	00d2      	lsls	r2, r2, #3
 800ae10:	211a      	movs	r1, #26
 800ae12:	fb01 f303 	mul.w	r3, r1, r3
 800ae16:	4413      	add	r3, r2
 800ae18:	3308      	adds	r3, #8
 800ae1a:	6a3a      	ldr	r2, [r7, #32]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	3304      	adds	r3, #4
 800ae20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ae22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae24:	69b9      	ldr	r1, [r7, #24]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 f870 	bl	800af0c <USBH_ParseEPDesc>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ae32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae36:	3301      	adds	r3, #1
 800ae38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	791b      	ldrb	r3, [r3, #4]
 800ae40:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d204      	bcs.n	800ae52 <USBH_ParseCfgDesc+0x19e>
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	885a      	ldrh	r2, [r3, #2]
 800ae4c:	8afb      	ldrh	r3, [r7, #22]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d8b0      	bhi.n	800adb4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	791b      	ldrb	r3, [r3, #4]
 800ae56:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d201      	bcs.n	800ae62 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e01c      	b.n	800ae9c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800ae62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae66:	3301      	adds	r3, #1
 800ae68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d805      	bhi.n	800ae80 <USBH_ParseCfgDesc+0x1cc>
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	885a      	ldrh	r2, [r3, #2]
 800ae78:	8afb      	ldrh	r3, [r7, #22]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	f63f af74 	bhi.w	800ad68 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	791b      	ldrb	r3, [r3, #4]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	bf28      	it	cs
 800ae88:	2302      	movcs	r3, #2
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d201      	bcs.n	800ae98 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e001      	b.n	800ae9c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800ae98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3730      	adds	r7, #48	@ 0x30
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781a      	ldrb	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	785a      	ldrb	r2, [r3, #1]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	789a      	ldrb	r2, [r3, #2]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	78da      	ldrb	r2, [r3, #3]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	3304      	adds	r3, #4
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	bf28      	it	cs
 800aed8:	2302      	movcs	r3, #2
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	795a      	ldrb	r2, [r3, #5]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	799a      	ldrb	r2, [r3, #6]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	79da      	ldrb	r2, [r3, #7]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	7a1a      	ldrb	r2, [r3, #8]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	721a      	strb	r2, [r3, #8]
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	785a      	ldrb	r2, [r3, #1]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	789a      	ldrb	r2, [r3, #2]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	78da      	ldrb	r2, [r3, #3]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3304      	adds	r3, #4
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3305      	adds	r3, #5
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	021b      	lsls	r3, r3, #8
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	4313      	orrs	r3, r2
 800af50:	b29a      	uxth	r2, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	799a      	ldrb	r2, [r3, #6]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	889b      	ldrh	r3, [r3, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d009      	beq.n	800af7a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800af6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af6e:	d804      	bhi.n	800af7a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800af74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af78:	d901      	bls.n	800af7e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800af7a:	2303      	movs	r3, #3
 800af7c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af84:	2b00      	cmp	r3, #0
 800af86:	d136      	bne.n	800aff6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	78db      	ldrb	r3, [r3, #3]
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d108      	bne.n	800afa6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	889b      	ldrh	r3, [r3, #4]
 800af98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af9c:	f240 8097 	bls.w	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800afa0:	2303      	movs	r3, #3
 800afa2:	75fb      	strb	r3, [r7, #23]
 800afa4:	e093      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	78db      	ldrb	r3, [r3, #3]
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d107      	bne.n	800afc2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	889b      	ldrh	r3, [r3, #4]
 800afb6:	2b40      	cmp	r3, #64	@ 0x40
 800afb8:	f240 8089 	bls.w	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800afbc:	2303      	movs	r3, #3
 800afbe:	75fb      	strb	r3, [r7, #23]
 800afc0:	e085      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	78db      	ldrb	r3, [r3, #3]
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d005      	beq.n	800afda <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	78db      	ldrb	r3, [r3, #3]
 800afd2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d10a      	bne.n	800aff0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	799b      	ldrb	r3, [r3, #6]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <USBH_ParseEPDesc+0xde>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	799b      	ldrb	r3, [r3, #6]
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d970      	bls.n	800b0cc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800afea:	2303      	movs	r3, #3
 800afec:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800afee:	e06d      	b.n	800b0cc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aff0:	2303      	movs	r3, #3
 800aff2:	75fb      	strb	r3, [r7, #23]
 800aff4:	e06b      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800affc:	2b01      	cmp	r3, #1
 800affe:	d13c      	bne.n	800b07a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	78db      	ldrb	r3, [r3, #3]
 800b004:	f003 0303 	and.w	r3, r3, #3
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d005      	beq.n	800b018 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b014:	2b00      	cmp	r3, #0
 800b016:	d106      	bne.n	800b026 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	889b      	ldrh	r3, [r3, #4]
 800b01c:	2b40      	cmp	r3, #64	@ 0x40
 800b01e:	d956      	bls.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b020:	2303      	movs	r3, #3
 800b022:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b024:	e053      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	78db      	ldrb	r3, [r3, #3]
 800b02a:	f003 0303 	and.w	r3, r3, #3
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d10e      	bne.n	800b050 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	799b      	ldrb	r3, [r3, #6]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d007      	beq.n	800b04a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b03e:	2b10      	cmp	r3, #16
 800b040:	d803      	bhi.n	800b04a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b046:	2b40      	cmp	r3, #64	@ 0x40
 800b048:	d941      	bls.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b04a:	2303      	movs	r3, #3
 800b04c:	75fb      	strb	r3, [r7, #23]
 800b04e:	e03e      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	78db      	ldrb	r3, [r3, #3]
 800b054:	f003 0303 	and.w	r3, r3, #3
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d10b      	bne.n	800b074 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	799b      	ldrb	r3, [r3, #6]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <USBH_ParseEPDesc+0x162>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	889b      	ldrh	r3, [r3, #4]
 800b068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b06c:	d32f      	bcc.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b06e:	2303      	movs	r3, #3
 800b070:	75fb      	strb	r3, [r7, #23]
 800b072:	e02c      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b074:	2303      	movs	r3, #3
 800b076:	75fb      	strb	r3, [r7, #23]
 800b078:	e029      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b080:	2b02      	cmp	r3, #2
 800b082:	d120      	bne.n	800b0c6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	78db      	ldrb	r3, [r3, #3]
 800b088:	f003 0303 	and.w	r3, r3, #3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d106      	bne.n	800b09e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	889b      	ldrh	r3, [r3, #4]
 800b094:	2b08      	cmp	r3, #8
 800b096:	d01a      	beq.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b098:	2303      	movs	r3, #3
 800b09a:	75fb      	strb	r3, [r7, #23]
 800b09c:	e017      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	78db      	ldrb	r3, [r3, #3]
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d10a      	bne.n	800b0c0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	799b      	ldrb	r3, [r3, #6]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <USBH_ParseEPDesc+0x1ae>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	889b      	ldrh	r3, [r3, #4]
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d909      	bls.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	75fb      	strb	r3, [r7, #23]
 800b0be:	e006      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	75fb      	strb	r3, [r7, #23]
 800b0c4:	e003      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	75fb      	strb	r3, [r7, #23]
 800b0ca:	e000      	b.n	800b0ce <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0cc:	bf00      	nop
  }

  return status;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	371c      	adds	r7, #28
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d120      	bne.n	800b136 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	1e9a      	subs	r2, r3, #2
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bf28      	it	cs
 800b100:	4613      	movcs	r3, r2
 800b102:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3302      	adds	r3, #2
 800b108:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b10a:	2300      	movs	r3, #0
 800b10c:	82fb      	strh	r3, [r7, #22]
 800b10e:	e00b      	b.n	800b128 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b110:	8afb      	ldrh	r3, [r7, #22]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4413      	add	r3, r2
 800b116:	781a      	ldrb	r2, [r3, #0]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	3301      	adds	r3, #1
 800b120:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b122:	8afb      	ldrh	r3, [r7, #22]
 800b124:	3302      	adds	r3, #2
 800b126:	82fb      	strh	r3, [r7, #22]
 800b128:	8afa      	ldrh	r2, [r7, #22]
 800b12a:	8abb      	ldrh	r3, [r7, #20]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d3ef      	bcc.n	800b110 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	701a      	strb	r2, [r3, #0]
  }
}
 800b136:	bf00      	nop
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	7812      	ldrb	r2, [r2, #0]
 800b154:	4413      	add	r3, r2
 800b156:	b29a      	uxth	r2, r3
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4413      	add	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b168:	68fb      	ldr	r3, [r7, #12]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b086      	sub	sp, #24
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	4613      	mov	r3, r2
 800b182:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b184:	2301      	movs	r3, #1
 800b186:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	789b      	ldrb	r3, [r3, #2]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d002      	beq.n	800b196 <USBH_CtlReq+0x20>
 800b190:	2b02      	cmp	r3, #2
 800b192:	d01d      	beq.n	800b1d0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b194:	e043      	b.n	800b21e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	88fa      	ldrh	r2, [r7, #6]
 800b1a0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2203      	movs	r2, #3
 800b1b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f000 fe25 	bl	800be18 <osMessageQueuePut>
      break;
 800b1ce:	e026      	b.n	800b21e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 f829 	bl	800b228 <USBH_HandleControl>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <USBH_CtlReq+0x70>
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d106      	bne.n	800b1f4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	761a      	strb	r2, [r3, #24]
 800b1f2:	e005      	b.n	800b200 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d102      	bne.n	800b200 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2203      	movs	r2, #3
 800b204:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b214:	2300      	movs	r3, #0
 800b216:	2200      	movs	r2, #0
 800b218:	f000 fdfe 	bl	800be18 <osMessageQueuePut>
      break;
 800b21c:	bf00      	nop
  }
  return status;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af02      	add	r7, sp, #8
 800b22e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b230:	2301      	movs	r3, #1
 800b232:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b234:	2300      	movs	r3, #0
 800b236:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	7e1b      	ldrb	r3, [r3, #24]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	2b0a      	cmp	r3, #10
 800b240:	f200 8229 	bhi.w	800b696 <USBH_HandleControl+0x46e>
 800b244:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <USBH_HandleControl+0x24>)
 800b246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24a:	bf00      	nop
 800b24c:	0800b279 	.word	0x0800b279
 800b250:	0800b293 	.word	0x0800b293
 800b254:	0800b335 	.word	0x0800b335
 800b258:	0800b35b 	.word	0x0800b35b
 800b25c:	0800b3e7 	.word	0x0800b3e7
 800b260:	0800b411 	.word	0x0800b411
 800b264:	0800b4d3 	.word	0x0800b4d3
 800b268:	0800b4f5 	.word	0x0800b4f5
 800b26c:	0800b587 	.word	0x0800b587
 800b270:	0800b5ad 	.word	0x0800b5ad
 800b274:	0800b63f 	.word	0x0800b63f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f103 0110 	add.w	r1, r3, #16
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	795b      	ldrb	r3, [r3, #5]
 800b282:	461a      	mov	r2, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa17 	bl	800b6b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	761a      	strb	r2, [r3, #24]
      break;
 800b290:	e20c      	b.n	800b6ac <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	795b      	ldrb	r3, [r3, #5]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f004 fc05 	bl	800faa8 <USBH_LL_GetURBState>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d12c      	bne.n	800b302 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	7c1b      	ldrb	r3, [r3, #16]
 800b2ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b2b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	8adb      	ldrh	r3, [r3, #22]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b2ba:	7b7b      	ldrb	r3, [r7, #13]
 800b2bc:	2b80      	cmp	r3, #128	@ 0x80
 800b2be:	d103      	bne.n	800b2c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	761a      	strb	r2, [r3, #24]
 800b2c6:	e00d      	b.n	800b2e4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2205      	movs	r2, #5
 800b2cc:	761a      	strb	r2, [r3, #24]
 800b2ce:	e009      	b.n	800b2e4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b2d0:	7b7b      	ldrb	r3, [r7, #13]
 800b2d2:	2b80      	cmp	r3, #128	@ 0x80
 800b2d4:	d103      	bne.n	800b2de <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2209      	movs	r2, #9
 800b2da:	761a      	strb	r2, [r3, #24]
 800b2dc:	e002      	b.n	800b2e4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f000 fd8c 	bl	800be18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b300:	e1cb      	b.n	800b69a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b04      	cmp	r3, #4
 800b306:	d003      	beq.n	800b310 <USBH_HandleControl+0xe8>
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	f040 81c5 	bne.w	800b69a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	220b      	movs	r2, #11
 800b314:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2203      	movs	r2, #3
 800b31a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b32a:	2300      	movs	r3, #0
 800b32c:	2200      	movs	r2, #0
 800b32e:	f000 fd73 	bl	800be18 <osMessageQueuePut>
      break;
 800b332:	e1b2      	b.n	800b69a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6899      	ldr	r1, [r3, #8]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	899a      	ldrh	r2, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	791b      	ldrb	r3, [r3, #4]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f9f2 	bl	800b736 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2204      	movs	r2, #4
 800b356:	761a      	strb	r2, [r3, #24]
      break;
 800b358:	e1a8      	b.n	800b6ac <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	791b      	ldrb	r3, [r3, #4]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f004 fba1 	bl	800faa8 <USBH_LL_GetURBState>
 800b366:	4603      	mov	r3, r0
 800b368:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b36a:	7bbb      	ldrb	r3, [r7, #14]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d110      	bne.n	800b392 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2209      	movs	r2, #9
 800b374:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2203      	movs	r2, #3
 800b37a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b38a:	2300      	movs	r3, #0
 800b38c:	2200      	movs	r2, #0
 800b38e:	f000 fd43 	bl	800be18 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	2b05      	cmp	r3, #5
 800b396:	d110      	bne.n	800b3ba <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b398:	2303      	movs	r3, #3
 800b39a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2203      	movs	r2, #3
 800b3a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f000 fd30 	bl	800be18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3b8:	e171      	b.n	800b69e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b3ba:	7bbb      	ldrb	r3, [r7, #14]
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	f040 816e 	bne.w	800b69e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	220b      	movs	r2, #11
 800b3c6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2203      	movs	r2, #3
 800b3cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f000 fd1a 	bl	800be18 <osMessageQueuePut>
      break;
 800b3e4:	e15b      	b.n	800b69e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6899      	ldr	r1, [r3, #8]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	899a      	ldrh	r2, [r3, #12]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	795b      	ldrb	r3, [r3, #5]
 800b3f2:	2001      	movs	r0, #1
 800b3f4:	9000      	str	r0, [sp, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f978 	bl	800b6ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b402:	b29a      	uxth	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2206      	movs	r2, #6
 800b40c:	761a      	strb	r2, [r3, #24]
      break;
 800b40e:	e14d      	b.n	800b6ac <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	795b      	ldrb	r3, [r3, #5]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f004 fb46 	bl	800faa8 <USBH_LL_GetURBState>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b420:	7bbb      	ldrb	r3, [r7, #14]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d111      	bne.n	800b44a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2207      	movs	r2, #7
 800b42a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2203      	movs	r2, #3
 800b430:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b440:	2300      	movs	r3, #0
 800b442:	2200      	movs	r2, #0
 800b444:	f000 fce8 	bl	800be18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b448:	e12b      	b.n	800b6a2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b05      	cmp	r3, #5
 800b44e:	d113      	bne.n	800b478 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	220c      	movs	r2, #12
 800b454:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b456:	2303      	movs	r3, #3
 800b458:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2203      	movs	r2, #3
 800b45e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b46e:	2300      	movs	r3, #0
 800b470:	2200      	movs	r2, #0
 800b472:	f000 fcd1 	bl	800be18 <osMessageQueuePut>
      break;
 800b476:	e114      	b.n	800b6a2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d111      	bne.n	800b4a2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2205      	movs	r2, #5
 800b482:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2203      	movs	r2, #3
 800b488:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b498:	2300      	movs	r3, #0
 800b49a:	2200      	movs	r2, #0
 800b49c:	f000 fcbc 	bl	800be18 <osMessageQueuePut>
      break;
 800b4a0:	e0ff      	b.n	800b6a2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b4a2:	7bbb      	ldrb	r3, [r7, #14]
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	f040 80fc 	bne.w	800b6a2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	220b      	movs	r2, #11
 800b4ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2203      	movs	r2, #3
 800b4b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f000 fca4 	bl	800be18 <osMessageQueuePut>
      break;
 800b4d0:	e0e7      	b.n	800b6a2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	791b      	ldrb	r3, [r3, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2100      	movs	r1, #0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f92b 	bl	800b736 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2208      	movs	r2, #8
 800b4f0:	761a      	strb	r2, [r3, #24]

      break;
 800b4f2:	e0db      	b.n	800b6ac <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	791b      	ldrb	r3, [r3, #4]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f004 fad4 	bl	800faa8 <USBH_LL_GetURBState>
 800b500:	4603      	mov	r3, r0
 800b502:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d113      	bne.n	800b532 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	220d      	movs	r2, #13
 800b50e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2203      	movs	r2, #3
 800b518:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b528:	2300      	movs	r3, #0
 800b52a:	2200      	movs	r2, #0
 800b52c:	f000 fc74 	bl	800be18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b530:	e0b9      	b.n	800b6a6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	2b04      	cmp	r3, #4
 800b536:	d111      	bne.n	800b55c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	220b      	movs	r2, #11
 800b53c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2203      	movs	r2, #3
 800b542:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b552:	2300      	movs	r3, #0
 800b554:	2200      	movs	r2, #0
 800b556:	f000 fc5f 	bl	800be18 <osMessageQueuePut>
      break;
 800b55a:	e0a4      	b.n	800b6a6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	2b05      	cmp	r3, #5
 800b560:	f040 80a1 	bne.w	800b6a6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b564:	2303      	movs	r3, #3
 800b566:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2203      	movs	r2, #3
 800b56c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b57c:	2300      	movs	r3, #0
 800b57e:	2200      	movs	r2, #0
 800b580:	f000 fc4a 	bl	800be18 <osMessageQueuePut>
      break;
 800b584:	e08f      	b.n	800b6a6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	795b      	ldrb	r3, [r3, #5]
 800b58a:	2201      	movs	r2, #1
 800b58c:	9200      	str	r2, [sp, #0]
 800b58e:	2200      	movs	r2, #0
 800b590:	2100      	movs	r1, #0
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f8aa 	bl	800b6ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	761a      	strb	r2, [r3, #24]
      break;
 800b5aa:	e07f      	b.n	800b6ac <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	795b      	ldrb	r3, [r3, #5]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f004 fa78 	bl	800faa8 <USBH_LL_GetURBState>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d113      	bne.n	800b5ea <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	220d      	movs	r2, #13
 800b5ca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f000 fc18 	bl	800be18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5e8:	e05f      	b.n	800b6aa <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5ea:	7bbb      	ldrb	r3, [r7, #14]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d111      	bne.n	800b614 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2209      	movs	r2, #9
 800b5f4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2203      	movs	r2, #3
 800b5fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b60a:	2300      	movs	r3, #0
 800b60c:	2200      	movs	r2, #0
 800b60e:	f000 fc03 	bl	800be18 <osMessageQueuePut>
      break;
 800b612:	e04a      	b.n	800b6aa <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	2b04      	cmp	r3, #4
 800b618:	d147      	bne.n	800b6aa <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	220b      	movs	r2, #11
 800b61e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2203      	movs	r2, #3
 800b624:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	f000 fbee 	bl	800be18 <osMessageQueuePut>
      break;
 800b63c:	e035      	b.n	800b6aa <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	7e5b      	ldrb	r3, [r3, #25]
 800b642:	3301      	adds	r3, #1
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	765a      	strb	r2, [r3, #25]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	7e5b      	ldrb	r3, [r3, #25]
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d806      	bhi.n	800b660 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b65e:	e025      	b.n	800b6ac <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b666:	2106      	movs	r1, #6
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	795b      	ldrb	r3, [r3, #5]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f90d 	bl	800b898 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	791b      	ldrb	r3, [r3, #4]
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f907 	bl	800b898 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b690:	2302      	movs	r3, #2
 800b692:	73fb      	strb	r3, [r7, #15]
      break;
 800b694:	e00a      	b.n	800b6ac <USBH_HandleControl+0x484>

    default:
      break;
 800b696:	bf00      	nop
 800b698:	e008      	b.n	800b6ac <USBH_HandleControl+0x484>
      break;
 800b69a:	bf00      	nop
 800b69c:	e006      	b.n	800b6ac <USBH_HandleControl+0x484>
      break;
 800b69e:	bf00      	nop
 800b6a0:	e004      	b.n	800b6ac <USBH_HandleControl+0x484>
      break;
 800b6a2:	bf00      	nop
 800b6a4:	e002      	b.n	800b6ac <USBH_HandleControl+0x484>
      break;
 800b6a6:	bf00      	nop
 800b6a8:	e000      	b.n	800b6ac <USBH_HandleControl+0x484>
      break;
 800b6aa:	bf00      	nop
  }

  return status;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop

0800b6b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af04      	add	r7, sp, #16
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b6c6:	79f9      	ldrb	r1, [r7, #7]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	9303      	str	r3, [sp, #12]
 800b6cc:	2308      	movs	r3, #8
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2200      	movs	r2, #0
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f004 f9b2 	bl	800fa46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af04      	add	r7, sp, #16
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	80fb      	strh	r3, [r7, #6]
 800b6fe:	4613      	mov	r3, r2
 800b700:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b710:	7979      	ldrb	r1, [r7, #5]
 800b712:	7e3b      	ldrb	r3, [r7, #24]
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	9302      	str	r3, [sp, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	2301      	movs	r3, #1
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	2300      	movs	r3, #0
 800b724:	2200      	movs	r2, #0
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f004 f98d 	bl	800fa46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af04      	add	r7, sp, #16
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	4611      	mov	r1, r2
 800b742:	461a      	mov	r2, r3
 800b744:	460b      	mov	r3, r1
 800b746:	80fb      	strh	r3, [r7, #6]
 800b748:	4613      	mov	r3, r2
 800b74a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b74c:	7979      	ldrb	r1, [r7, #5]
 800b74e:	2300      	movs	r3, #0
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	88fb      	ldrh	r3, [r7, #6]
 800b754:	9302      	str	r3, [sp, #8]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	2301      	movs	r3, #1
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	2300      	movs	r3, #0
 800b760:	2201      	movs	r2, #1
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f004 f96f 	bl	800fa46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b768:	2300      	movs	r3, #0

}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b088      	sub	sp, #32
 800b776:	af04      	add	r7, sp, #16
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	4611      	mov	r1, r2
 800b77e:	461a      	mov	r2, r3
 800b780:	460b      	mov	r3, r1
 800b782:	80fb      	strh	r3, [r7, #6]
 800b784:	4613      	mov	r3, r2
 800b786:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b796:	7979      	ldrb	r1, [r7, #5]
 800b798:	7e3b      	ldrb	r3, [r7, #24]
 800b79a:	9303      	str	r3, [sp, #12]
 800b79c:	88fb      	ldrh	r3, [r7, #6]
 800b79e:	9302      	str	r3, [sp, #8]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f004 f94a 	bl	800fa46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af04      	add	r7, sp, #16
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	80fb      	strh	r3, [r7, #6]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b7d2:	7979      	ldrb	r1, [r7, #5]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9303      	str	r3, [sp, #12]
 800b7d8:	88fb      	ldrh	r3, [r7, #6]
 800b7da:	9302      	str	r3, [sp, #8]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f004 f92c 	bl	800fa46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af04      	add	r7, sp, #16
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	461a      	mov	r2, r3
 800b806:	4603      	mov	r3, r0
 800b808:	70fb      	strb	r3, [r7, #3]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70bb      	strb	r3, [r7, #2]
 800b80e:	4613      	mov	r3, r2
 800b810:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b812:	7878      	ldrb	r0, [r7, #1]
 800b814:	78ba      	ldrb	r2, [r7, #2]
 800b816:	78f9      	ldrb	r1, [r7, #3]
 800b818:	8b3b      	ldrh	r3, [r7, #24]
 800b81a:	9302      	str	r3, [sp, #8]
 800b81c:	7d3b      	ldrb	r3, [r7, #20]
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	7c3b      	ldrb	r3, [r7, #16]
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	4603      	mov	r3, r0
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f004 f8bf 	bl	800f9aa <USBH_LL_OpenPipe>

  return USBH_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	460b      	mov	r3, r1
 800b840:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b842:	78fb      	ldrb	r3, [r7, #3]
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f004 f8de 	bl	800fa08 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	460b      	mov	r3, r1
 800b860:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f836 	bl	800b8d4 <USBH_GetFreePipe>
 800b868:	4603      	mov	r3, r0
 800b86a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b86c:	89fb      	ldrh	r3, [r7, #14]
 800b86e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b872:	4293      	cmp	r3, r2
 800b874:	d00a      	beq.n	800b88c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b876:	78fa      	ldrb	r2, [r7, #3]
 800b878:	89fb      	ldrh	r3, [r7, #14]
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	33e0      	adds	r3, #224	@ 0xe0
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	440b      	add	r3, r1
 800b88a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b88c:	89fb      	ldrh	r3, [r7, #14]
 800b88e:	b2db      	uxtb	r3, r3
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	2b0f      	cmp	r3, #15
 800b8a8:	d80d      	bhi.n	800b8c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b8aa:	78fb      	ldrb	r3, [r7, #3]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	33e0      	adds	r3, #224	@ 0xe0
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	78fb      	ldrb	r3, [r7, #3]
 800b8b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	33e0      	adds	r3, #224	@ 0xe0
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	440b      	add	r3, r1
 800b8c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
 800b8e4:	e00f      	b.n	800b906 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	33e0      	adds	r3, #224	@ 0xe0
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	e007      	b.n	800b910 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	3301      	adds	r3, #1
 800b904:	73fb      	strb	r3, [r7, #15]
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b0f      	cmp	r3, #15
 800b90a:	d9ec      	bls.n	800b8e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b90c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <__NVIC_SetPriority>:
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db0a      	blt.n	800b946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	b2da      	uxtb	r2, r3
 800b934:	490c      	ldr	r1, [pc, #48]	@ (800b968 <__NVIC_SetPriority+0x4c>)
 800b936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b93a:	0112      	lsls	r2, r2, #4
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	440b      	add	r3, r1
 800b940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b944:	e00a      	b.n	800b95c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	4908      	ldr	r1, [pc, #32]	@ (800b96c <__NVIC_SetPriority+0x50>)
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	f003 030f 	and.w	r3, r3, #15
 800b952:	3b04      	subs	r3, #4
 800b954:	0112      	lsls	r2, r2, #4
 800b956:	b2d2      	uxtb	r2, r2
 800b958:	440b      	add	r3, r1
 800b95a:	761a      	strb	r2, [r3, #24]
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	e000e100 	.word	0xe000e100
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b974:	4b05      	ldr	r3, [pc, #20]	@ (800b98c <SysTick_Handler+0x1c>)
 800b976:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b978:	f002 fa6e 	bl	800de58 <xTaskGetSchedulerState>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d001      	beq.n	800b986 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b982:	f003 fbb1 	bl	800f0e8 <xPortSysTickHandler>
  }
}
 800b986:	bf00      	nop
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	e000e010 	.word	0xe000e010

0800b990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b994:	2100      	movs	r1, #0
 800b996:	f06f 0004 	mvn.w	r0, #4
 800b99a:	f7ff ffbf 	bl	800b91c <__NVIC_SetPriority>
#endif
}
 800b99e:	bf00      	nop
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9aa:	f3ef 8305 	mrs	r3, IPSR
 800b9ae:	603b      	str	r3, [r7, #0]
  return(result);
 800b9b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b9b6:	f06f 0305 	mvn.w	r3, #5
 800b9ba:	607b      	str	r3, [r7, #4]
 800b9bc:	e00c      	b.n	800b9d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9be:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <osKernelInitialize+0x44>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d105      	bne.n	800b9d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9c6:	4b08      	ldr	r3, [pc, #32]	@ (800b9e8 <osKernelInitialize+0x44>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	607b      	str	r3, [r7, #4]
 800b9d0:	e002      	b.n	800b9d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9d8:	687b      	ldr	r3, [r7, #4]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20002880 	.word	0x20002880

0800b9ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9f2:	f3ef 8305 	mrs	r3, IPSR
 800b9f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b9f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9fe:	f06f 0305 	mvn.w	r3, #5
 800ba02:	607b      	str	r3, [r7, #4]
 800ba04:	e010      	b.n	800ba28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba06:	4b0b      	ldr	r3, [pc, #44]	@ (800ba34 <osKernelStart+0x48>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d109      	bne.n	800ba22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba0e:	f7ff ffbf 	bl	800b990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba12:	4b08      	ldr	r3, [pc, #32]	@ (800ba34 <osKernelStart+0x48>)
 800ba14:	2202      	movs	r2, #2
 800ba16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba18:	f001 fc30 	bl	800d27c <vTaskStartScheduler>
      stat = osOK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	607b      	str	r3, [r7, #4]
 800ba20:	e002      	b.n	800ba28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba28:	687b      	ldr	r3, [r7, #4]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20002880 	.word	0x20002880

0800ba38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08e      	sub	sp, #56	@ 0x38
 800ba3c:	af04      	add	r7, sp, #16
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba48:	f3ef 8305 	mrs	r3, IPSR
 800ba4c:	617b      	str	r3, [r7, #20]
  return(result);
 800ba4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d17e      	bne.n	800bb52 <osThreadNew+0x11a>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d07b      	beq.n	800bb52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba5a:	2380      	movs	r3, #128	@ 0x80
 800ba5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba5e:	2318      	movs	r3, #24
 800ba60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d045      	beq.n	800bafe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <osThreadNew+0x48>
        name = attr->name;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <osThreadNew+0x6e>
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	2b38      	cmp	r3, #56	@ 0x38
 800ba98:	d805      	bhi.n	800baa6 <osThreadNew+0x6e>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <osThreadNew+0x72>
        return (NULL);
 800baa6:	2300      	movs	r3, #0
 800baa8:	e054      	b.n	800bb54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	089b      	lsrs	r3, r3, #2
 800bab8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00e      	beq.n	800bae0 <osThreadNew+0xa8>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	2bbb      	cmp	r3, #187	@ 0xbb
 800bac8:	d90a      	bls.n	800bae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d006      	beq.n	800bae0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <osThreadNew+0xa8>
        mem = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	e010      	b.n	800bb02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10c      	bne.n	800bb02 <osThreadNew+0xca>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d108      	bne.n	800bb02 <osThreadNew+0xca>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d104      	bne.n	800bb02 <osThreadNew+0xca>
          mem = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	61bb      	str	r3, [r7, #24]
 800bafc:	e001      	b.n	800bb02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d110      	bne.n	800bb2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bb10:	9202      	str	r2, [sp, #8]
 800bb12:	9301      	str	r3, [sp, #4]
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	6a3a      	ldr	r2, [r7, #32]
 800bb1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f001 f8d8 	bl	800ccd4 <xTaskCreateStatic>
 800bb24:	4603      	mov	r3, r0
 800bb26:	613b      	str	r3, [r7, #16]
 800bb28:	e013      	b.n	800bb52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d110      	bne.n	800bb52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	f107 0310 	add.w	r3, r7, #16
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f001 f926 	bl	800cd94 <xTaskCreate>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d001      	beq.n	800bb52 <osThreadNew+0x11a>
            hTask = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bb52:	693b      	ldr	r3, [r7, #16]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3728      	adds	r7, #40	@ 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <osThreadFlagsSet+0x1a>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	da03      	bge.n	800bb7e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800bb76:	f06f 0303 	mvn.w	r3, #3
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	e035      	b.n	800bbea <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800bb7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb84:	f3ef 8305 	mrs	r3, IPSR
 800bb88:	613b      	str	r3, [r7, #16]
  return(result);
 800bb8a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01f      	beq.n	800bbd0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800bb94:	f107 0308 	add.w	r3, r7, #8
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6978      	ldr	r0, [r7, #20]
 800bba2:	f002 fc49 	bl	800e438 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800bba6:	f107 030c 	add.w	r3, r7, #12
 800bbaa:	2200      	movs	r2, #0
 800bbac:	9200      	str	r2, [sp, #0]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	6978      	ldr	r0, [r7, #20]
 800bbb4:	f002 fc40 	bl	800e438 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d015      	beq.n	800bbea <osThreadFlagsSet+0x8e>
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf4 <osThreadFlagsSet+0x98>)
 800bbc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	e00c      	b.n	800bbea <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	6978      	ldr	r0, [r7, #20]
 800bbd8:	f002 fb6c 	bl	800e2b4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800bbdc:	f107 030c 	add.w	r3, r7, #12
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	6978      	ldr	r0, [r7, #20]
 800bbe6:	f002 fb65 	bl	800e2b4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800bbea:	68fb      	ldr	r3, [r7, #12]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	e000ed04 	.word	0xe000ed04

0800bbf8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08c      	sub	sp, #48	@ 0x30
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc04:	f3ef 8305 	mrs	r3, IPSR
 800bc08:	617b      	str	r3, [r7, #20]
  return(result);
 800bc0a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800bc10:	f06f 0305 	mvn.w	r3, #5
 800bc14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc16:	e06b      	b.n	800bcf0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	da03      	bge.n	800bc26 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800bc1e:	f06f 0303 	mvn.w	r3, #3
 800bc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc24:	e064      	b.n	800bcf0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc34:	e001      	b.n	800bc3a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800bc42:	f001 fc3d 	bl	800d4c0 <xTaskGetTickCount>
 800bc46:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800bc48:	f107 0210 	add.w	r2, r7, #16
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc50:	2000      	movs	r0, #0
 800bc52:	f002 facf 	bl	800e1f4 <xTaskNotifyWait>
 800bc56:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d137      	bne.n	800bcce <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800bc5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4013      	ands	r3, r2
 800bc64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00c      	beq.n	800bc92 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d032      	beq.n	800bcea <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10f      	bne.n	800bcaa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800bc8a:	f06f 0302 	mvn.w	r3, #2
 800bc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800bc90:	e02e      	b.n	800bcf0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc96:	4013      	ands	r3, r2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d128      	bne.n	800bcee <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d103      	bne.n	800bcaa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800bca2:	f06f 0302 	mvn.w	r3, #2
 800bca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800bca8:	e022      	b.n	800bcf0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800bcaa:	f001 fc09 	bl	800d4c0 <xTaskGetTickCount>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d902      	bls.n	800bcc4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcc2:	e00e      	b.n	800bce2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800bcc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	627b      	str	r3, [r7, #36]	@ 0x24
 800bccc:	e009      	b.n	800bce2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d103      	bne.n	800bcdc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800bcd4:	f06f 0302 	mvn.w	r3, #2
 800bcd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcda:	e002      	b.n	800bce2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800bcdc:	f06f 0301 	mvn.w	r3, #1
 800bce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1af      	bne.n	800bc48 <osThreadFlagsWait+0x50>
 800bce8:	e002      	b.n	800bcf0 <osThreadFlagsWait+0xf8>
            break;
 800bcea:	bf00      	nop
 800bcec:	e000      	b.n	800bcf0 <osThreadFlagsWait+0xf8>
            break;
 800bcee:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800bcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3730      	adds	r7, #48	@ 0x30
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd02:	f3ef 8305 	mrs	r3, IPSR
 800bd06:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <osDelay+0x1c>
    stat = osErrorISR;
 800bd0e:	f06f 0305 	mvn.w	r3, #5
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	e007      	b.n	800bd26 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 f997 	bl	800d054 <vTaskDelay>
    }
  }

  return (stat);
 800bd26:	68fb      	ldr	r3, [r7, #12]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08a      	sub	sp, #40	@ 0x28
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd40:	f3ef 8305 	mrs	r3, IPSR
 800bd44:	613b      	str	r3, [r7, #16]
  return(result);
 800bd46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d15f      	bne.n	800be0c <osMessageQueueNew+0xdc>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d05c      	beq.n	800be0c <osMessageQueueNew+0xdc>
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d059      	beq.n	800be0c <osMessageQueueNew+0xdc>
    mem = -1;
 800bd58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d029      	beq.n	800bdb8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d012      	beq.n	800bd92 <osMessageQueueNew+0x62>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd72:	d90e      	bls.n	800bd92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00a      	beq.n	800bd92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	695a      	ldr	r2, [r3, #20]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	fb01 f303 	mul.w	r3, r1, r3
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d302      	bcc.n	800bd92 <osMessageQueueNew+0x62>
        mem = 1;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	61bb      	str	r3, [r7, #24]
 800bd90:	e014      	b.n	800bdbc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d110      	bne.n	800bdbc <osMessageQueueNew+0x8c>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10c      	bne.n	800bdbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d108      	bne.n	800bdbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d104      	bne.n	800bdbc <osMessageQueueNew+0x8c>
          mem = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	61bb      	str	r3, [r7, #24]
 800bdb6:	e001      	b.n	800bdbc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d10b      	bne.n	800bdda <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	691a      	ldr	r2, [r3, #16]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	2100      	movs	r1, #0
 800bdcc:	9100      	str	r1, [sp, #0]
 800bdce:	68b9      	ldr	r1, [r7, #8]
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f000 fa31 	bl	800c238 <xQueueGenericCreateStatic>
 800bdd6:	61f8      	str	r0, [r7, #28]
 800bdd8:	e008      	b.n	800bdec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d105      	bne.n	800bdec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bde0:	2200      	movs	r2, #0
 800bde2:	68b9      	ldr	r1, [r7, #8]
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 faa4 	bl	800c332 <xQueueGenericCreate>
 800bdea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00c      	beq.n	800be0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d003      	beq.n	800be00 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	617b      	str	r3, [r7, #20]
 800bdfe:	e001      	b.n	800be04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800be04:	6979      	ldr	r1, [r7, #20]
 800be06:	69f8      	ldr	r0, [r7, #28]
 800be08:	f000 ff06 	bl	800cc18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800be0c:	69fb      	ldr	r3, [r7, #28]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3720      	adds	r7, #32
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	4613      	mov	r3, r2
 800be26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be30:	f3ef 8305 	mrs	r3, IPSR
 800be34:	617b      	str	r3, [r7, #20]
  return(result);
 800be36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d028      	beq.n	800be8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d005      	beq.n	800be4e <osMessageQueuePut+0x36>
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <osMessageQueuePut+0x36>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800be4e:	f06f 0303 	mvn.w	r3, #3
 800be52:	61fb      	str	r3, [r7, #28]
 800be54:	e038      	b.n	800bec8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800be56:	2300      	movs	r3, #0
 800be58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800be5a:	f107 0210 	add.w	r2, r7, #16
 800be5e:	2300      	movs	r3, #0
 800be60:	68b9      	ldr	r1, [r7, #8]
 800be62:	69b8      	ldr	r0, [r7, #24]
 800be64:	f000 fbc6 	bl	800c5f4 <xQueueGenericSendFromISR>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d003      	beq.n	800be76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800be6e:	f06f 0302 	mvn.w	r3, #2
 800be72:	61fb      	str	r3, [r7, #28]
 800be74:	e028      	b.n	800bec8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d025      	beq.n	800bec8 <osMessageQueuePut+0xb0>
 800be7c:	4b15      	ldr	r3, [pc, #84]	@ (800bed4 <osMessageQueuePut+0xbc>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	e01c      	b.n	800bec8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <osMessageQueuePut+0x82>
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d103      	bne.n	800bea2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800be9a:	f06f 0303 	mvn.w	r3, #3
 800be9e:	61fb      	str	r3, [r7, #28]
 800bea0:	e012      	b.n	800bec8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bea2:	2300      	movs	r3, #0
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	68b9      	ldr	r1, [r7, #8]
 800bea8:	69b8      	ldr	r0, [r7, #24]
 800beaa:	f000 faa1 	bl	800c3f0 <xQueueGenericSend>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d009      	beq.n	800bec8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800beba:	f06f 0301 	mvn.w	r3, #1
 800bebe:	61fb      	str	r3, [r7, #28]
 800bec0:	e002      	b.n	800bec8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bec2:	f06f 0302 	mvn.w	r3, #2
 800bec6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bec8:	69fb      	ldr	r3, [r7, #28]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3720      	adds	r7, #32
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800beea:	2300      	movs	r3, #0
 800beec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beee:	f3ef 8305 	mrs	r3, IPSR
 800bef2:	617b      	str	r3, [r7, #20]
  return(result);
 800bef4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d028      	beq.n	800bf4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <osMessageQueueGet+0x34>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <osMessageQueueGet+0x34>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bf0c:	f06f 0303 	mvn.w	r3, #3
 800bf10:	61fb      	str	r3, [r7, #28]
 800bf12:	e037      	b.n	800bf84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bf18:	f107 0310 	add.w	r3, r7, #16
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	68b9      	ldr	r1, [r7, #8]
 800bf20:	69b8      	ldr	r0, [r7, #24]
 800bf22:	f000 fce7 	bl	800c8f4 <xQueueReceiveFromISR>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d003      	beq.n	800bf34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bf2c:	f06f 0302 	mvn.w	r3, #2
 800bf30:	61fb      	str	r3, [r7, #28]
 800bf32:	e027      	b.n	800bf84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d024      	beq.n	800bf84 <osMessageQueueGet+0xac>
 800bf3a:	4b15      	ldr	r3, [pc, #84]	@ (800bf90 <osMessageQueueGet+0xb8>)
 800bf3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	e01b      	b.n	800bf84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <osMessageQueueGet+0x80>
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bf58:	f06f 0303 	mvn.w	r3, #3
 800bf5c:	61fb      	str	r3, [r7, #28]
 800bf5e:	e011      	b.n	800bf84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	69b8      	ldr	r0, [r7, #24]
 800bf66:	f000 fbe3 	bl	800c730 <xQueueReceive>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d009      	beq.n	800bf84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bf76:	f06f 0301 	mvn.w	r3, #1
 800bf7a:	61fb      	str	r3, [r7, #28]
 800bf7c:	e002      	b.n	800bf84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bf7e:	f06f 0302 	mvn.w	r3, #2
 800bf82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bf84:	69fb      	ldr	r3, [r7, #28]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	e000ed04 	.word	0xe000ed04

0800bf94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	4a07      	ldr	r2, [pc, #28]	@ (800bfc0 <vApplicationGetIdleTaskMemory+0x2c>)
 800bfa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	4a06      	ldr	r2, [pc, #24]	@ (800bfc4 <vApplicationGetIdleTaskMemory+0x30>)
 800bfaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2280      	movs	r2, #128	@ 0x80
 800bfb0:	601a      	str	r2, [r3, #0]
}
 800bfb2:	bf00      	nop
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20002884 	.word	0x20002884
 800bfc4:	20002940 	.word	0x20002940

0800bfc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	4a07      	ldr	r2, [pc, #28]	@ (800bff4 <vApplicationGetTimerTaskMemory+0x2c>)
 800bfd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	4a06      	ldr	r2, [pc, #24]	@ (800bff8 <vApplicationGetTimerTaskMemory+0x30>)
 800bfde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bfe6:	601a      	str	r2, [r3, #0]
}
 800bfe8:	bf00      	nop
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	20002b40 	.word	0x20002b40
 800bff8:	20002bfc 	.word	0x20002bfc

0800bffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f103 0208 	add.w	r2, r3, #8
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f103 0208 	add.w	r2, r3, #8
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f103 0208 	add.w	r2, r3, #8
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c04a:	bf00      	nop
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c056:	b480      	push	{r7}
 800c058:	b085      	sub	sp, #20
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	1c5a      	adds	r2, r3, #1
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	601a      	str	r2, [r3, #0]
}
 800c092:	bf00      	nop
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b085      	sub	sp, #20
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0b4:	d103      	bne.n	800c0be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	e00c      	b.n	800c0d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e002      	b.n	800c0cc <vListInsert+0x2e>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d2f6      	bcs.n	800c0c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	601a      	str	r2, [r3, #0]
}
 800c104:	bf00      	nop
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	6892      	ldr	r2, [r2, #8]
 800c126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	6852      	ldr	r2, [r2, #4]
 800c130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d103      	bne.n	800c144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689a      	ldr	r2, [r3, #8]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	1e5a      	subs	r2, r3, #1
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c18a:	bf00      	nop
 800c18c:	bf00      	nop
 800c18e:	e7fd      	b.n	800c18c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c190:	f002 ff1a 	bl	800efc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c19c:	68f9      	ldr	r1, [r7, #12]
 800c19e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1a0:	fb01 f303 	mul.w	r3, r1, r3
 800c1a4:	441a      	add	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	68f9      	ldr	r1, [r7, #12]
 800c1c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1c6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ca:	441a      	add	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	22ff      	movs	r2, #255	@ 0xff
 800c1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	22ff      	movs	r2, #255	@ 0xff
 800c1dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d114      	bne.n	800c210 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d01a      	beq.n	800c224 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3310      	adds	r3, #16
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f001 fb94 	bl	800d920 <xTaskRemoveFromEventList>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d012      	beq.n	800c224 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c234 <xQueueGenericReset+0xd0>)
 800c200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c204:	601a      	str	r2, [r3, #0]
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	e009      	b.n	800c224 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3310      	adds	r3, #16
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff fef1 	bl	800bffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3324      	adds	r3, #36	@ 0x24
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff feec 	bl	800bffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c224:	f002 ff02 	bl	800f02c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c228:	2301      	movs	r3, #1
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	e000ed04 	.word	0xe000ed04

0800c238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08e      	sub	sp, #56	@ 0x38
 800c23c:	af02      	add	r7, sp, #8
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10b      	bne.n	800c264 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c25e:	bf00      	nop
 800c260:	bf00      	nop
 800c262:	e7fd      	b.n	800c260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d10b      	bne.n	800c282 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c27c:	bf00      	nop
 800c27e:	bf00      	nop
 800c280:	e7fd      	b.n	800c27e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <xQueueGenericCreateStatic+0x56>
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <xQueueGenericCreateStatic+0x5a>
 800c28e:	2301      	movs	r3, #1
 800c290:	e000      	b.n	800c294 <xQueueGenericCreateStatic+0x5c>
 800c292:	2300      	movs	r3, #0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10b      	bne.n	800c2b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	623b      	str	r3, [r7, #32]
}
 800c2aa:	bf00      	nop
 800c2ac:	bf00      	nop
 800c2ae:	e7fd      	b.n	800c2ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d102      	bne.n	800c2bc <xQueueGenericCreateStatic+0x84>
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <xQueueGenericCreateStatic+0x88>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e000      	b.n	800c2c2 <xQueueGenericCreateStatic+0x8a>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10b      	bne.n	800c2de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	61fb      	str	r3, [r7, #28]
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e7fd      	b.n	800c2da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2de:	2350      	movs	r3, #80	@ 0x50
 800c2e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b50      	cmp	r3, #80	@ 0x50
 800c2e6:	d00b      	beq.n	800c300 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	61bb      	str	r3, [r7, #24]
}
 800c2fa:	bf00      	nop
 800c2fc:	bf00      	nop
 800c2fe:	e7fd      	b.n	800c2fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c300:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00d      	beq.n	800c328 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c314:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	4613      	mov	r3, r2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 f840 	bl	800c3a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3730      	adds	r7, #48	@ 0x30
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c332:	b580      	push	{r7, lr}
 800c334:	b08a      	sub	sp, #40	@ 0x28
 800c336:	af02      	add	r7, sp, #8
 800c338:	60f8      	str	r0, [r7, #12]
 800c33a:	60b9      	str	r1, [r7, #8]
 800c33c:	4613      	mov	r3, r2
 800c33e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10b      	bne.n	800c35e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	613b      	str	r3, [r7, #16]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	fb02 f303 	mul.w	r3, r2, r3
 800c366:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3350      	adds	r3, #80	@ 0x50
 800c36c:	4618      	mov	r0, r3
 800c36e:	f002 ff4d 	bl	800f20c <pvPortMalloc>
 800c372:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d011      	beq.n	800c39e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	3350      	adds	r3, #80	@ 0x50
 800c382:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c38c:	79fa      	ldrb	r2, [r7, #7]
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	4613      	mov	r3, r2
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	68b9      	ldr	r1, [r7, #8]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f000 f805 	bl	800c3a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c39e:	69bb      	ldr	r3, [r7, #24]
	}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3720      	adds	r7, #32
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d103      	bne.n	800c3c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e002      	b.n	800c3ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	69b8      	ldr	r0, [r7, #24]
 800c3da:	f7ff fec3 	bl	800c164 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	78fa      	ldrb	r2, [r7, #3]
 800c3e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3e6:	bf00      	nop
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
	...

0800c3f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b08e      	sub	sp, #56	@ 0x38
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c3fe:	2300      	movs	r3, #0
 800c400:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10b      	bne.n	800c424 <xQueueGenericSend+0x34>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	e7fd      	b.n	800c420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <xQueueGenericSend+0x42>
 800c42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <xQueueGenericSend+0x46>
 800c432:	2301      	movs	r3, #1
 800c434:	e000      	b.n	800c438 <xQueueGenericSend+0x48>
 800c436:	2300      	movs	r3, #0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10b      	bne.n	800c454 <xQueueGenericSend+0x64>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	e7fd      	b.n	800c450 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b02      	cmp	r3, #2
 800c458:	d103      	bne.n	800c462 <xQueueGenericSend+0x72>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d101      	bne.n	800c466 <xQueueGenericSend+0x76>
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <xQueueGenericSend+0x78>
 800c466:	2300      	movs	r3, #0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10b      	bne.n	800c484 <xQueueGenericSend+0x94>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	623b      	str	r3, [r7, #32]
}
 800c47e:	bf00      	nop
 800c480:	bf00      	nop
 800c482:	e7fd      	b.n	800c480 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c484:	f001 fce8 	bl	800de58 <xTaskGetSchedulerState>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <xQueueGenericSend+0xa4>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <xQueueGenericSend+0xa8>
 800c494:	2301      	movs	r3, #1
 800c496:	e000      	b.n	800c49a <xQueueGenericSend+0xaa>
 800c498:	2300      	movs	r3, #0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10b      	bne.n	800c4b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	61fb      	str	r3, [r7, #28]
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	e7fd      	b.n	800c4b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4b6:	f002 fd87 	bl	800efc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d302      	bcc.n	800c4cc <xQueueGenericSend+0xdc>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d129      	bne.n	800c520 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4d2:	f000 fa91 	bl	800c9f8 <prvCopyDataToQueue>
 800c4d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d010      	beq.n	800c502 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e2:	3324      	adds	r3, #36	@ 0x24
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f001 fa1b 	bl	800d920 <xTaskRemoveFromEventList>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d013      	beq.n	800c518 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c4f0:	4b3f      	ldr	r3, [pc, #252]	@ (800c5f0 <xQueueGenericSend+0x200>)
 800c4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	e00a      	b.n	800c518 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d007      	beq.n	800c518 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c508:	4b39      	ldr	r3, [pc, #228]	@ (800c5f0 <xQueueGenericSend+0x200>)
 800c50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c518:	f002 fd88 	bl	800f02c <vPortExitCritical>
				return pdPASS;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e063      	b.n	800c5e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d103      	bne.n	800c52e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c526:	f002 fd81 	bl	800f02c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	e05c      	b.n	800c5e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c530:	2b00      	cmp	r3, #0
 800c532:	d106      	bne.n	800c542 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c534:	f107 0314 	add.w	r3, r7, #20
 800c538:	4618      	mov	r0, r3
 800c53a:	f001 fa55 	bl	800d9e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c53e:	2301      	movs	r3, #1
 800c540:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c542:	f002 fd73 	bl	800f02c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c546:	f000 ff0f 	bl	800d368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c54a:	f002 fd3d 	bl	800efc8 <vPortEnterCritical>
 800c54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c554:	b25b      	sxtb	r3, r3
 800c556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c55a:	d103      	bne.n	800c564 <xQueueGenericSend+0x174>
 800c55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c56a:	b25b      	sxtb	r3, r3
 800c56c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c570:	d103      	bne.n	800c57a <xQueueGenericSend+0x18a>
 800c572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c57a:	f002 fd57 	bl	800f02c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c57e:	1d3a      	adds	r2, r7, #4
 800c580:	f107 0314 	add.w	r3, r7, #20
 800c584:	4611      	mov	r1, r2
 800c586:	4618      	mov	r0, r3
 800c588:	f001 fa44 	bl	800da14 <xTaskCheckForTimeOut>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d124      	bne.n	800c5dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c594:	f000 fb28 	bl	800cbe8 <prvIsQueueFull>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d018      	beq.n	800c5d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a0:	3310      	adds	r3, #16
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 f968 	bl	800d87c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ae:	f000 fab3 	bl	800cb18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5b2:	f000 fee7 	bl	800d384 <xTaskResumeAll>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f47f af7c 	bne.w	800c4b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c5be:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f0 <xQueueGenericSend+0x200>)
 800c5c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	e772      	b.n	800c4b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5d2:	f000 faa1 	bl	800cb18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5d6:	f000 fed5 	bl	800d384 <xTaskResumeAll>
 800c5da:	e76c      	b.n	800c4b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c5dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5de:	f000 fa9b 	bl	800cb18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5e2:	f000 fecf 	bl	800d384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3738      	adds	r7, #56	@ 0x38
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b090      	sub	sp, #64	@ 0x40
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10b      	bne.n	800c624 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c61e:	bf00      	nop
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <xQueueGenericSendFromISR+0x3e>
 800c62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <xQueueGenericSendFromISR+0x42>
 800c632:	2301      	movs	r3, #1
 800c634:	e000      	b.n	800c638 <xQueueGenericSendFromISR+0x44>
 800c636:	2300      	movs	r3, #0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10b      	bne.n	800c654 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
 800c652:	e7fd      	b.n	800c650 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d103      	bne.n	800c662 <xQueueGenericSendFromISR+0x6e>
 800c65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d101      	bne.n	800c666 <xQueueGenericSendFromISR+0x72>
 800c662:	2301      	movs	r3, #1
 800c664:	e000      	b.n	800c668 <xQueueGenericSendFromISR+0x74>
 800c666:	2300      	movs	r3, #0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10b      	bne.n	800c684 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	623b      	str	r3, [r7, #32]
}
 800c67e:	bf00      	nop
 800c680:	bf00      	nop
 800c682:	e7fd      	b.n	800c680 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c684:	f002 fd80 	bl	800f188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c688:	f3ef 8211 	mrs	r2, BASEPRI
 800c68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	61fa      	str	r2, [r7, #28]
 800c69e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d302      	bcc.n	800c6b6 <xQueueGenericSendFromISR+0xc2>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d12f      	bne.n	800c716 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	68b9      	ldr	r1, [r7, #8]
 800c6ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c6cc:	f000 f994 	bl	800c9f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6d8:	d112      	bne.n	800c700 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d016      	beq.n	800c710 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e4:	3324      	adds	r3, #36	@ 0x24
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f001 f91a 	bl	800d920 <xTaskRemoveFromEventList>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00e      	beq.n	800c710 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	e007      	b.n	800c710 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c700:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c704:	3301      	adds	r3, #1
 800c706:	b2db      	uxtb	r3, r3
 800c708:	b25a      	sxtb	r2, r3
 800c70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c710:	2301      	movs	r3, #1
 800c712:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c714:	e001      	b.n	800c71a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c716:	2300      	movs	r3, #0
 800c718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c71c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c724:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3740      	adds	r7, #64	@ 0x40
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08c      	sub	sp, #48	@ 0x30
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c73c:	2300      	movs	r3, #0
 800c73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10b      	bne.n	800c762 <xQueueReceive+0x32>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	623b      	str	r3, [r7, #32]
}
 800c75c:	bf00      	nop
 800c75e:	bf00      	nop
 800c760:	e7fd      	b.n	800c75e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d103      	bne.n	800c770 <xQueueReceive+0x40>
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <xQueueReceive+0x44>
 800c770:	2301      	movs	r3, #1
 800c772:	e000      	b.n	800c776 <xQueueReceive+0x46>
 800c774:	2300      	movs	r3, #0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10b      	bne.n	800c792 <xQueueReceive+0x62>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	61fb      	str	r3, [r7, #28]
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	e7fd      	b.n	800c78e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c792:	f001 fb61 	bl	800de58 <xTaskGetSchedulerState>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <xQueueReceive+0x72>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <xQueueReceive+0x76>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <xQueueReceive+0x78>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10b      	bne.n	800c7c4 <xQueueReceive+0x94>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	61bb      	str	r3, [r7, #24]
}
 800c7be:	bf00      	nop
 800c7c0:	bf00      	nop
 800c7c2:	e7fd      	b.n	800c7c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7c4:	f002 fc00 	bl	800efc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d01f      	beq.n	800c814 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7d4:	68b9      	ldr	r1, [r7, #8]
 800c7d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7d8:	f000 f978 	bl	800cacc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	1e5a      	subs	r2, r3, #1
 800c7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00f      	beq.n	800c80c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ee:	3310      	adds	r3, #16
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f001 f895 	bl	800d920 <xTaskRemoveFromEventList>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c7fc:	4b3c      	ldr	r3, [pc, #240]	@ (800c8f0 <xQueueReceive+0x1c0>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c80c:	f002 fc0e 	bl	800f02c <vPortExitCritical>
				return pdPASS;
 800c810:	2301      	movs	r3, #1
 800c812:	e069      	b.n	800c8e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d103      	bne.n	800c822 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c81a:	f002 fc07 	bl	800f02c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c81e:	2300      	movs	r3, #0
 800c820:	e062      	b.n	800c8e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c828:	f107 0310 	add.w	r3, r7, #16
 800c82c:	4618      	mov	r0, r3
 800c82e:	f001 f8db 	bl	800d9e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c832:	2301      	movs	r3, #1
 800c834:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c836:	f002 fbf9 	bl	800f02c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c83a:	f000 fd95 	bl	800d368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c83e:	f002 fbc3 	bl	800efc8 <vPortEnterCritical>
 800c842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c848:	b25b      	sxtb	r3, r3
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c84e:	d103      	bne.n	800c858 <xQueueReceive+0x128>
 800c850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c85e:	b25b      	sxtb	r3, r3
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c864:	d103      	bne.n	800c86e <xQueueReceive+0x13e>
 800c866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c86e:	f002 fbdd 	bl	800f02c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c872:	1d3a      	adds	r2, r7, #4
 800c874:	f107 0310 	add.w	r3, r7, #16
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f001 f8ca 	bl	800da14 <xTaskCheckForTimeOut>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d123      	bne.n	800c8ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c888:	f000 f998 	bl	800cbbc <prvIsQueueEmpty>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d017      	beq.n	800c8c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c894:	3324      	adds	r3, #36	@ 0x24
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4611      	mov	r1, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 ffee 	bl	800d87c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8a2:	f000 f939 	bl	800cb18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8a6:	f000 fd6d 	bl	800d384 <xTaskResumeAll>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d189      	bne.n	800c7c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c8f0 <xQueueReceive+0x1c0>)
 800c8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	e780      	b.n	800c7c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8c4:	f000 f928 	bl	800cb18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8c8:	f000 fd5c 	bl	800d384 <xTaskResumeAll>
 800c8cc:	e77a      	b.n	800c7c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8d0:	f000 f922 	bl	800cb18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8d4:	f000 fd56 	bl	800d384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8da:	f000 f96f 	bl	800cbbc <prvIsQueueEmpty>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f43f af6f 	beq.w	800c7c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3730      	adds	r7, #48	@ 0x30
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	e000ed04 	.word	0xe000ed04

0800c8f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08e      	sub	sp, #56	@ 0x38
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10b      	bne.n	800c922 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	623b      	str	r3, [r7, #32]
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	e7fd      	b.n	800c91e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d103      	bne.n	800c930 <xQueueReceiveFromISR+0x3c>
 800c928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <xQueueReceiveFromISR+0x40>
 800c930:	2301      	movs	r3, #1
 800c932:	e000      	b.n	800c936 <xQueueReceiveFromISR+0x42>
 800c934:	2300      	movs	r3, #0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10b      	bne.n	800c952 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	61fb      	str	r3, [r7, #28]
}
 800c94c:	bf00      	nop
 800c94e:	bf00      	nop
 800c950:	e7fd      	b.n	800c94e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c952:	f002 fc19 	bl	800f188 <vPortValidateInterruptPriority>
	__asm volatile
 800c956:	f3ef 8211 	mrs	r2, BASEPRI
 800c95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	61ba      	str	r2, [r7, #24]
 800c96c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c96e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c976:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d02f      	beq.n	800c9de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c98c:	f000 f89e 	bl	800cacc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c992:	1e5a      	subs	r2, r3, #1
 800c994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c996:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c998:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9a0:	d112      	bne.n	800c9c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d016      	beq.n	800c9d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ac:	3310      	adds	r3, #16
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 ffb6 	bl	800d920 <xTaskRemoveFromEventList>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00e      	beq.n	800c9d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00b      	beq.n	800c9d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	e007      	b.n	800c9d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	b25a      	sxtb	r2, r3
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9dc:	e001      	b.n	800c9e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f383 8811 	msr	BASEPRI, r3
}
 800c9ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3738      	adds	r7, #56	@ 0x38
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca04:	2300      	movs	r3, #0
 800ca06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10d      	bne.n	800ca32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d14d      	bne.n	800caba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f001 fa36 	bl	800de94 <xTaskPriorityDisinherit>
 800ca28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	609a      	str	r2, [r3, #8]
 800ca30:	e043      	b.n	800caba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d119      	bne.n	800ca6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6858      	ldr	r0, [r3, #4]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca40:	461a      	mov	r2, r3
 800ca42:	68b9      	ldr	r1, [r7, #8]
 800ca44:	f003 fa60 	bl	800ff08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca50:	441a      	add	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d32b      	bcc.n	800caba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	605a      	str	r2, [r3, #4]
 800ca6a:	e026      	b.n	800caba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	68d8      	ldr	r0, [r3, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca74:	461a      	mov	r2, r3
 800ca76:	68b9      	ldr	r1, [r7, #8]
 800ca78:	f003 fa46 	bl	800ff08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	68da      	ldr	r2, [r3, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca84:	425b      	negs	r3, r3
 800ca86:	441a      	add	r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68da      	ldr	r2, [r3, #12]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d207      	bcs.n	800caa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	689a      	ldr	r2, [r3, #8]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa0:	425b      	negs	r3, r3
 800caa2:	441a      	add	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d105      	bne.n	800caba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cac2:	697b      	ldr	r3, [r7, #20]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d018      	beq.n	800cb10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae6:	441a      	add	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68da      	ldr	r2, [r3, #12]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d303      	bcc.n	800cb00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68d9      	ldr	r1, [r3, #12]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6838      	ldr	r0, [r7, #0]
 800cb0c:	f003 f9fc 	bl	800ff08 <memcpy>
	}
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb20:	f002 fa52 	bl	800efc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb2c:	e011      	b.n	800cb52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d012      	beq.n	800cb5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3324      	adds	r3, #36	@ 0x24
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fef0 	bl	800d920 <xTaskRemoveFromEventList>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb46:	f000 ffc9 	bl	800dadc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	dce9      	bgt.n	800cb2e <prvUnlockQueue+0x16>
 800cb5a:	e000      	b.n	800cb5e <prvUnlockQueue+0x46>
					break;
 800cb5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	22ff      	movs	r2, #255	@ 0xff
 800cb62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb66:	f002 fa61 	bl	800f02c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb6a:	f002 fa2d 	bl	800efc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb76:	e011      	b.n	800cb9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d012      	beq.n	800cba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3310      	adds	r3, #16
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 fecb 	bl	800d920 <xTaskRemoveFromEventList>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb90:	f000 ffa4 	bl	800dadc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb94:	7bbb      	ldrb	r3, [r7, #14]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dce9      	bgt.n	800cb78 <prvUnlockQueue+0x60>
 800cba4:	e000      	b.n	800cba8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cba6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	22ff      	movs	r2, #255	@ 0xff
 800cbac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cbb0:	f002 fa3c 	bl	800f02c <vPortExitCritical>
}
 800cbb4:	bf00      	nop
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbc4:	f002 fa00 	bl	800efc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	e001      	b.n	800cbda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbda:	f002 fa27 	bl	800f02c <vPortExitCritical>

	return xReturn;
 800cbde:	68fb      	ldr	r3, [r7, #12]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbf0:	f002 f9ea 	bl	800efc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d102      	bne.n	800cc06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc00:	2301      	movs	r3, #1
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	e001      	b.n	800cc0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc06:	2300      	movs	r3, #0
 800cc08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc0a:	f002 fa0f 	bl	800f02c <vPortExitCritical>

	return xReturn;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc22:	2300      	movs	r3, #0
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	e014      	b.n	800cc52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc28:	4a0f      	ldr	r2, [pc, #60]	@ (800cc68 <vQueueAddToRegistry+0x50>)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc34:	490c      	ldr	r1, [pc, #48]	@ (800cc68 <vQueueAddToRegistry+0x50>)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc3e:	4a0a      	ldr	r2, [pc, #40]	@ (800cc68 <vQueueAddToRegistry+0x50>)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	4413      	add	r3, r2
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc4a:	e006      	b.n	800cc5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2b07      	cmp	r3, #7
 800cc56:	d9e7      	bls.n	800cc28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc58:	bf00      	nop
 800cc5a:	bf00      	nop
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	20002ffc 	.word	0x20002ffc

0800cc6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b086      	sub	sp, #24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc7c:	f002 f9a4 	bl	800efc8 <vPortEnterCritical>
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc86:	b25b      	sxtb	r3, r3
 800cc88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc8c:	d103      	bne.n	800cc96 <vQueueWaitForMessageRestricted+0x2a>
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc9c:	b25b      	sxtb	r3, r3
 800cc9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cca2:	d103      	bne.n	800ccac <vQueueWaitForMessageRestricted+0x40>
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccac:	f002 f9be 	bl	800f02c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	3324      	adds	r3, #36	@ 0x24
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	68b9      	ldr	r1, [r7, #8]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 fe01 	bl	800d8c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccc6:	6978      	ldr	r0, [r7, #20]
 800ccc8:	f7ff ff26 	bl	800cb18 <prvUnlockQueue>
	}
 800cccc:	bf00      	nop
 800ccce:	3718      	adds	r7, #24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08e      	sub	sp, #56	@ 0x38
 800ccd8:	af04      	add	r7, sp, #16
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10b      	bne.n	800cd00 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	623b      	str	r3, [r7, #32]
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	e7fd      	b.n	800ccfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	61fb      	str	r3, [r7, #28]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd1e:	23bc      	movs	r3, #188	@ 0xbc
 800cd20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	2bbc      	cmp	r3, #188	@ 0xbc
 800cd26:	d00b      	beq.n	800cd40 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	61bb      	str	r3, [r7, #24]
}
 800cd3a:	bf00      	nop
 800cd3c:	bf00      	nop
 800cd3e:	e7fd      	b.n	800cd3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d01e      	beq.n	800cd86 <xTaskCreateStatic+0xb2>
 800cd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d01b      	beq.n	800cd86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd60:	2300      	movs	r3, #0
 800cd62:	9303      	str	r3, [sp, #12]
 800cd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd66:	9302      	str	r3, [sp, #8]
 800cd68:	f107 0314 	add.w	r3, r7, #20
 800cd6c:	9301      	str	r3, [sp, #4]
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 f851 	bl	800ce20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd80:	f000 f8f8 	bl	800cf74 <prvAddNewTaskToReadyList>
 800cd84:	e001      	b.n	800cd8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd8a:	697b      	ldr	r3, [r7, #20]
	}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3728      	adds	r7, #40	@ 0x28
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08c      	sub	sp, #48	@ 0x30
 800cd98:	af04      	add	r7, sp, #16
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	4613      	mov	r3, r2
 800cda2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cda4:	88fb      	ldrh	r3, [r7, #6]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f002 fa2f 	bl	800f20c <pvPortMalloc>
 800cdae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00e      	beq.n	800cdd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdb6:	20bc      	movs	r0, #188	@ 0xbc
 800cdb8:	f002 fa28 	bl	800f20c <pvPortMalloc>
 800cdbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d003      	beq.n	800cdcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdca:	e005      	b.n	800cdd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdcc:	6978      	ldr	r0, [r7, #20]
 800cdce:	f002 faeb 	bl	800f3a8 <vPortFree>
 800cdd2:	e001      	b.n	800cdd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d017      	beq.n	800ce0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cde6:	88fa      	ldrh	r2, [r7, #6]
 800cde8:	2300      	movs	r3, #0
 800cdea:	9303      	str	r3, [sp, #12]
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	9302      	str	r3, [sp, #8]
 800cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	68b9      	ldr	r1, [r7, #8]
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f000 f80f 	bl	800ce20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce02:	69f8      	ldr	r0, [r7, #28]
 800ce04:	f000 f8b6 	bl	800cf74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	61bb      	str	r3, [r7, #24]
 800ce0c:	e002      	b.n	800ce14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce14:	69bb      	ldr	r3, [r7, #24]
	}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3720      	adds	r7, #32
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	461a      	mov	r2, r3
 800ce38:	21a5      	movs	r1, #165	@ 0xa5
 800ce3a:	f002 ffc3 	bl	800fdc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	f023 0307 	bic.w	r3, r3, #7
 800ce56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	f003 0307 	and.w	r3, r3, #7
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00b      	beq.n	800ce7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	617b      	str	r3, [r7, #20]
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop
 800ce78:	e7fd      	b.n	800ce76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d01f      	beq.n	800cec0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce80:	2300      	movs	r3, #0
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	e012      	b.n	800ceac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	7819      	ldrb	r1, [r3, #0]
 800ce8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	4413      	add	r3, r2
 800ce94:	3334      	adds	r3, #52	@ 0x34
 800ce96:	460a      	mov	r2, r1
 800ce98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2b1f      	cmp	r3, #31
 800ceb0:	d9e9      	bls.n	800ce86 <prvInitialiseNewTask+0x66>
 800ceb2:	e000      	b.n	800ceb6 <prvInitialiseNewTask+0x96>
			{
				break;
 800ceb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800cebe:	e003      	b.n	800cec8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceca:	2b37      	cmp	r3, #55	@ 0x37
 800cecc:	d901      	bls.n	800ced2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cece:	2337      	movs	r3, #55	@ 0x37
 800ced0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ced6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cedc:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800cede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee0:	2200      	movs	r2, #0
 800cee2:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee6:	3304      	adds	r3, #4
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff f8a7 	bl	800c03c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	3318      	adds	r3, #24
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff f8a2 	bl	800c03c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cefc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf10:	2200      	movs	r2, #0
 800cf12:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf16:	2200      	movs	r2, #0
 800cf18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf26:	3368      	adds	r3, #104	@ 0x68
 800cf28:	224c      	movs	r2, #76	@ 0x4c
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f002 ff49 	bl	800fdc4 <memset>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	4a0c      	ldr	r2, [pc, #48]	@ (800cf68 <prvInitialiseNewTask+0x148>)
 800cf36:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf6c <prvInitialiseNewTask+0x14c>)
 800cf3c:	671a      	str	r2, [r3, #112]	@ 0x70
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	4a0b      	ldr	r2, [pc, #44]	@ (800cf70 <prvInitialiseNewTask+0x150>)
 800cf42:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	68f9      	ldr	r1, [r7, #12]
 800cf48:	69b8      	ldr	r0, [r7, #24]
 800cf4a:	f001 ff09 	bl	800ed60 <pxPortInitialiseStack>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf60:	bf00      	nop
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20007a68 	.word	0x20007a68
 800cf6c:	20007ad0 	.word	0x20007ad0
 800cf70:	20007b38 	.word	0x20007b38

0800cf74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf7c:	f002 f824 	bl	800efc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf80:	4b2d      	ldr	r3, [pc, #180]	@ (800d038 <prvAddNewTaskToReadyList+0xc4>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3301      	adds	r3, #1
 800cf86:	4a2c      	ldr	r2, [pc, #176]	@ (800d038 <prvAddNewTaskToReadyList+0xc4>)
 800cf88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf8a:	4b2c      	ldr	r3, [pc, #176]	@ (800d03c <prvAddNewTaskToReadyList+0xc8>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d109      	bne.n	800cfa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf92:	4a2a      	ldr	r2, [pc, #168]	@ (800d03c <prvAddNewTaskToReadyList+0xc8>)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf98:	4b27      	ldr	r3, [pc, #156]	@ (800d038 <prvAddNewTaskToReadyList+0xc4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d110      	bne.n	800cfc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfa0:	f000 fdc2 	bl	800db28 <prvInitialiseTaskLists>
 800cfa4:	e00d      	b.n	800cfc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfa6:	4b26      	ldr	r3, [pc, #152]	@ (800d040 <prvAddNewTaskToReadyList+0xcc>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d109      	bne.n	800cfc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfae:	4b23      	ldr	r3, [pc, #140]	@ (800d03c <prvAddNewTaskToReadyList+0xc8>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d802      	bhi.n	800cfc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfbc:	4a1f      	ldr	r2, [pc, #124]	@ (800d03c <prvAddNewTaskToReadyList+0xc8>)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfc2:	4b20      	ldr	r3, [pc, #128]	@ (800d044 <prvAddNewTaskToReadyList+0xd0>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	4a1e      	ldr	r2, [pc, #120]	@ (800d044 <prvAddNewTaskToReadyList+0xd0>)
 800cfca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfcc:	4b1d      	ldr	r3, [pc, #116]	@ (800d044 <prvAddNewTaskToReadyList+0xd0>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd8:	4b1b      	ldr	r3, [pc, #108]	@ (800d048 <prvAddNewTaskToReadyList+0xd4>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d903      	bls.n	800cfe8 <prvAddNewTaskToReadyList+0x74>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe4:	4a18      	ldr	r2, [pc, #96]	@ (800d048 <prvAddNewTaskToReadyList+0xd4>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfec:	4613      	mov	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4413      	add	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4a15      	ldr	r2, [pc, #84]	@ (800d04c <prvAddNewTaskToReadyList+0xd8>)
 800cff6:	441a      	add	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3304      	adds	r3, #4
 800cffc:	4619      	mov	r1, r3
 800cffe:	4610      	mov	r0, r2
 800d000:	f7ff f829 	bl	800c056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d004:	f002 f812 	bl	800f02c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d008:	4b0d      	ldr	r3, [pc, #52]	@ (800d040 <prvAddNewTaskToReadyList+0xcc>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00e      	beq.n	800d02e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d010:	4b0a      	ldr	r3, [pc, #40]	@ (800d03c <prvAddNewTaskToReadyList+0xc8>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d207      	bcs.n	800d02e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d01e:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <prvAddNewTaskToReadyList+0xdc>)
 800d020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20003510 	.word	0x20003510
 800d03c:	2000303c 	.word	0x2000303c
 800d040:	2000351c 	.word	0x2000351c
 800d044:	2000352c 	.word	0x2000352c
 800d048:	20003518 	.word	0x20003518
 800d04c:	20003040 	.word	0x20003040
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d018      	beq.n	800d098 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d066:	4b14      	ldr	r3, [pc, #80]	@ (800d0b8 <vTaskDelay+0x64>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00b      	beq.n	800d086 <vTaskDelay+0x32>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	60bb      	str	r3, [r7, #8]
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	e7fd      	b.n	800d082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d086:	f000 f96f 	bl	800d368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d08a:	2100      	movs	r1, #0
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f001 fab9 	bl	800e604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d092:	f000 f977 	bl	800d384 <xTaskResumeAll>
 800d096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d107      	bne.n	800d0ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d09e:	4b07      	ldr	r3, [pc, #28]	@ (800d0bc <vTaskDelay+0x68>)
 800d0a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20003538 	.word	0x20003538
 800d0bc:	e000ed04 	.word	0xe000ed04

0800d0c0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b088      	sub	sp, #32
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <eTaskGetState+0x2a>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	60bb      	str	r3, [r7, #8]
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	e7fd      	b.n	800d0e6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800d0ea:	4b24      	ldr	r3, [pc, #144]	@ (800d17c <eTaskGetState+0xbc>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	69ba      	ldr	r2, [r7, #24]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d102      	bne.n	800d0fa <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	77fb      	strb	r3, [r7, #31]
 800d0f8:	e03a      	b.n	800d170 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800d0fa:	f001 ff65 	bl	800efc8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	695b      	ldr	r3, [r3, #20]
 800d102:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d104:	4b1e      	ldr	r3, [pc, #120]	@ (800d180 <eTaskGetState+0xc0>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d10a:	4b1e      	ldr	r3, [pc, #120]	@ (800d184 <eTaskGetState+0xc4>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d110:	f001 ff8c 	bl	800f02c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d003      	beq.n	800d124 <eTaskGetState+0x64>
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	429a      	cmp	r2, r3
 800d122:	d102      	bne.n	800d12a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d124:	2302      	movs	r3, #2
 800d126:	77fb      	strb	r3, [r7, #31]
 800d128:	e022      	b.n	800d170 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	4a16      	ldr	r2, [pc, #88]	@ (800d188 <eTaskGetState+0xc8>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d112      	bne.n	800d158 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10b      	bne.n	800d152 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b01      	cmp	r3, #1
 800d144:	d102      	bne.n	800d14c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800d146:	2302      	movs	r3, #2
 800d148:	77fb      	strb	r3, [r7, #31]
 800d14a:	e011      	b.n	800d170 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800d14c:	2303      	movs	r3, #3
 800d14e:	77fb      	strb	r3, [r7, #31]
 800d150:	e00e      	b.n	800d170 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d152:	2302      	movs	r3, #2
 800d154:	77fb      	strb	r3, [r7, #31]
 800d156:	e00b      	b.n	800d170 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	4a0c      	ldr	r2, [pc, #48]	@ (800d18c <eTaskGetState+0xcc>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d002      	beq.n	800d166 <eTaskGetState+0xa6>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d166:	2304      	movs	r3, #4
 800d168:	77fb      	strb	r3, [r7, #31]
 800d16a:	e001      	b.n	800d170 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d16c:	2301      	movs	r3, #1
 800d16e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d170:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d172:	4618      	mov	r0, r3
 800d174:	3720      	adds	r7, #32
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	2000303c 	.word	0x2000303c
 800d180:	200034c8 	.word	0x200034c8
 800d184:	200034cc 	.word	0x200034cc
 800d188:	200034fc 	.word	0x200034fc
 800d18c:	200034e4 	.word	0x200034e4

0800d190 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d198:	f001 ff16 	bl	800efc8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <vTaskSuspend+0x18>
 800d1a2:	4b30      	ldr	r3, [pc, #192]	@ (800d264 <vTaskSuspend+0xd4>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	e000      	b.n	800d1aa <vTaskSuspend+0x1a>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe ffad 	bl	800c110 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d004      	beq.n	800d1c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3318      	adds	r3, #24
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe ffa4 	bl	800c110 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4826      	ldr	r0, [pc, #152]	@ (800d268 <vTaskSuspend+0xd8>)
 800d1d0:	f7fe ff41 	bl	800c056 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d103      	bne.n	800d1e8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d1e8:	f001 ff20 	bl	800f02c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d1ec:	4b1f      	ldr	r3, [pc, #124]	@ (800d26c <vTaskSuspend+0xdc>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d005      	beq.n	800d200 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d1f4:	f001 fee8 	bl	800efc8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d1f8:	f000 fe0e 	bl	800de18 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d1fc:	f001 ff16 	bl	800f02c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d200:	4b18      	ldr	r3, [pc, #96]	@ (800d264 <vTaskSuspend+0xd4>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	429a      	cmp	r2, r3
 800d208:	d128      	bne.n	800d25c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800d20a:	4b18      	ldr	r3, [pc, #96]	@ (800d26c <vTaskSuspend+0xdc>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d018      	beq.n	800d244 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d212:	4b17      	ldr	r3, [pc, #92]	@ (800d270 <vTaskSuspend+0xe0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00b      	beq.n	800d232 <vTaskSuspend+0xa2>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	60bb      	str	r3, [r7, #8]
}
 800d22c:	bf00      	nop
 800d22e:	bf00      	nop
 800d230:	e7fd      	b.n	800d22e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d232:	4b10      	ldr	r3, [pc, #64]	@ (800d274 <vTaskSuspend+0xe4>)
 800d234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d238:	601a      	str	r2, [r3, #0]
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d242:	e00b      	b.n	800d25c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d244:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <vTaskSuspend+0xd8>)
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	4b0b      	ldr	r3, [pc, #44]	@ (800d278 <vTaskSuspend+0xe8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d103      	bne.n	800d258 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800d250:	4b04      	ldr	r3, [pc, #16]	@ (800d264 <vTaskSuspend+0xd4>)
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]
	}
 800d256:	e001      	b.n	800d25c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800d258:	f000 fa8c 	bl	800d774 <vTaskSwitchContext>
	}
 800d25c:	bf00      	nop
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	2000303c 	.word	0x2000303c
 800d268:	200034fc 	.word	0x200034fc
 800d26c:	2000351c 	.word	0x2000351c
 800d270:	20003538 	.word	0x20003538
 800d274:	e000ed04 	.word	0xe000ed04
 800d278:	20003510 	.word	0x20003510

0800d27c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08a      	sub	sp, #40	@ 0x28
 800d280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d28a:	463a      	mov	r2, r7
 800d28c:	1d39      	adds	r1, r7, #4
 800d28e:	f107 0308 	add.w	r3, r7, #8
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fe7e 	bl	800bf94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	9202      	str	r2, [sp, #8]
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	460a      	mov	r2, r1
 800d2aa:	4926      	ldr	r1, [pc, #152]	@ (800d344 <vTaskStartScheduler+0xc8>)
 800d2ac:	4826      	ldr	r0, [pc, #152]	@ (800d348 <vTaskStartScheduler+0xcc>)
 800d2ae:	f7ff fd11 	bl	800ccd4 <xTaskCreateStatic>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	4a25      	ldr	r2, [pc, #148]	@ (800d34c <vTaskStartScheduler+0xd0>)
 800d2b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2b8:	4b24      	ldr	r3, [pc, #144]	@ (800d34c <vTaskStartScheduler+0xd0>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	617b      	str	r3, [r7, #20]
 800d2c4:	e001      	b.n	800d2ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d102      	bne.n	800d2d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2d0:	f001 f9ec 	bl	800e6ac <xTimerCreateTimerTask>
 800d2d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d11e      	bne.n	800d31a <vTaskStartScheduler+0x9e>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	613b      	str	r3, [r7, #16]
}
 800d2ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2f0:	4b17      	ldr	r3, [pc, #92]	@ (800d350 <vTaskStartScheduler+0xd4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3368      	adds	r3, #104	@ 0x68
 800d2f6:	4a17      	ldr	r2, [pc, #92]	@ (800d354 <vTaskStartScheduler+0xd8>)
 800d2f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2fa:	4b17      	ldr	r3, [pc, #92]	@ (800d358 <vTaskStartScheduler+0xdc>)
 800d2fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d302:	4b16      	ldr	r3, [pc, #88]	@ (800d35c <vTaskStartScheduler+0xe0>)
 800d304:	2201      	movs	r2, #1
 800d306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d308:	4b15      	ldr	r3, [pc, #84]	@ (800d360 <vTaskStartScheduler+0xe4>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d30e:	4b15      	ldr	r3, [pc, #84]	@ (800d364 <vTaskStartScheduler+0xe8>)
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d314:	f001 fdb4 	bl	800ee80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d318:	e00f      	b.n	800d33a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d320:	d10b      	bne.n	800d33a <vTaskStartScheduler+0xbe>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	60fb      	str	r3, [r7, #12]
}
 800d334:	bf00      	nop
 800d336:	bf00      	nop
 800d338:	e7fd      	b.n	800d336 <vTaskStartScheduler+0xba>
}
 800d33a:	bf00      	nop
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	080106f0 	.word	0x080106f0
 800d348:	0800daf5 	.word	0x0800daf5
 800d34c:	20003534 	.word	0x20003534
 800d350:	2000303c 	.word	0x2000303c
 800d354:	20000040 	.word	0x20000040
 800d358:	20003530 	.word	0x20003530
 800d35c:	2000351c 	.word	0x2000351c
 800d360:	20003514 	.word	0x20003514
 800d364:	200003cc 	.word	0x200003cc

0800d368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d368:	b480      	push	{r7}
 800d36a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d36c:	4b04      	ldr	r3, [pc, #16]	@ (800d380 <vTaskSuspendAll+0x18>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	3301      	adds	r3, #1
 800d372:	4a03      	ldr	r2, [pc, #12]	@ (800d380 <vTaskSuspendAll+0x18>)
 800d374:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d376:	bf00      	nop
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	20003538 	.word	0x20003538

0800d384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d38e:	2300      	movs	r3, #0
 800d390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d392:	4b42      	ldr	r3, [pc, #264]	@ (800d49c <xTaskResumeAll+0x118>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10b      	bne.n	800d3b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	603b      	str	r3, [r7, #0]
}
 800d3ac:	bf00      	nop
 800d3ae:	bf00      	nop
 800d3b0:	e7fd      	b.n	800d3ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d3b2:	f001 fe09 	bl	800efc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d3b6:	4b39      	ldr	r3, [pc, #228]	@ (800d49c <xTaskResumeAll+0x118>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	4a37      	ldr	r2, [pc, #220]	@ (800d49c <xTaskResumeAll+0x118>)
 800d3be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3c0:	4b36      	ldr	r3, [pc, #216]	@ (800d49c <xTaskResumeAll+0x118>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d162      	bne.n	800d48e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3c8:	4b35      	ldr	r3, [pc, #212]	@ (800d4a0 <xTaskResumeAll+0x11c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d05e      	beq.n	800d48e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3d0:	e02f      	b.n	800d432 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d2:	4b34      	ldr	r3, [pc, #208]	@ (800d4a4 <xTaskResumeAll+0x120>)
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3318      	adds	r3, #24
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fe96 	bl	800c110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe fe91 	bl	800c110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3f2:	4b2d      	ldr	r3, [pc, #180]	@ (800d4a8 <xTaskResumeAll+0x124>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d903      	bls.n	800d402 <xTaskResumeAll+0x7e>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3fe:	4a2a      	ldr	r2, [pc, #168]	@ (800d4a8 <xTaskResumeAll+0x124>)
 800d400:	6013      	str	r3, [r2, #0]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4a27      	ldr	r2, [pc, #156]	@ (800d4ac <xTaskResumeAll+0x128>)
 800d410:	441a      	add	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3304      	adds	r3, #4
 800d416:	4619      	mov	r1, r3
 800d418:	4610      	mov	r0, r2
 800d41a:	f7fe fe1c 	bl	800c056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d422:	4b23      	ldr	r3, [pc, #140]	@ (800d4b0 <xTaskResumeAll+0x12c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d428:	429a      	cmp	r2, r3
 800d42a:	d302      	bcc.n	800d432 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d42c:	4b21      	ldr	r3, [pc, #132]	@ (800d4b4 <xTaskResumeAll+0x130>)
 800d42e:	2201      	movs	r2, #1
 800d430:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d432:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a4 <xTaskResumeAll+0x120>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1cb      	bne.n	800d3d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d440:	f000 fcea 	bl	800de18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d444:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b8 <xTaskResumeAll+0x134>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d010      	beq.n	800d472 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d450:	f000 f8d6 	bl	800d600 <xTaskIncrementTick>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d45a:	4b16      	ldr	r3, [pc, #88]	@ (800d4b4 <xTaskResumeAll+0x130>)
 800d45c:	2201      	movs	r2, #1
 800d45e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	3b01      	subs	r3, #1
 800d464:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1f1      	bne.n	800d450 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d46c:	4b12      	ldr	r3, [pc, #72]	@ (800d4b8 <xTaskResumeAll+0x134>)
 800d46e:	2200      	movs	r2, #0
 800d470:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d472:	4b10      	ldr	r3, [pc, #64]	@ (800d4b4 <xTaskResumeAll+0x130>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d009      	beq.n	800d48e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d47e:	4b0f      	ldr	r3, [pc, #60]	@ (800d4bc <xTaskResumeAll+0x138>)
 800d480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d48e:	f001 fdcd 	bl	800f02c <vPortExitCritical>

	return xAlreadyYielded;
 800d492:	68bb      	ldr	r3, [r7, #8]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	20003538 	.word	0x20003538
 800d4a0:	20003510 	.word	0x20003510
 800d4a4:	200034d0 	.word	0x200034d0
 800d4a8:	20003518 	.word	0x20003518
 800d4ac:	20003040 	.word	0x20003040
 800d4b0:	2000303c 	.word	0x2000303c
 800d4b4:	20003524 	.word	0x20003524
 800d4b8:	20003520 	.word	0x20003520
 800d4bc:	e000ed04 	.word	0xe000ed04

0800d4c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4c6:	4b05      	ldr	r3, [pc, #20]	@ (800d4dc <xTaskGetTickCount+0x1c>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4cc:	687b      	ldr	r3, [r7, #4]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	20003514 	.word	0x20003514

0800d4e0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	617b      	str	r3, [r7, #20]
 800d4f0:	2338      	movs	r3, #56	@ 0x38
 800d4f2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800d4f4:	f7ff ff38 	bl	800d368 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800d4f8:	4b3a      	ldr	r3, [pc, #232]	@ (800d5e4 <uxTaskGetSystemState+0x104>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68ba      	ldr	r2, [r7, #8]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d369      	bcc.n	800d5d6 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	3b01      	subs	r3, #1
 800d506:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	4613      	mov	r3, r2
 800d50c:	00db      	lsls	r3, r3, #3
 800d50e:	4413      	add	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	461a      	mov	r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	1898      	adds	r0, r3, r2
 800d518:	693a      	ldr	r2, [r7, #16]
 800d51a:	4613      	mov	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4413      	add	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4a31      	ldr	r2, [pc, #196]	@ (800d5e8 <uxTaskGetSystemState+0x108>)
 800d524:	4413      	add	r3, r2
 800d526:	2201      	movs	r2, #1
 800d528:	4619      	mov	r1, r3
 800d52a:	f000 fbd1 	bl	800dcd0 <prvListTasksWithinSingleList>
 800d52e:	4602      	mov	r2, r0
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	4413      	add	r3, r2
 800d534:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1e2      	bne.n	800d502 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	4613      	mov	r3, r2
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	4413      	add	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	461a      	mov	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	4413      	add	r3, r2
 800d54c:	4a27      	ldr	r2, [pc, #156]	@ (800d5ec <uxTaskGetSystemState+0x10c>)
 800d54e:	6811      	ldr	r1, [r2, #0]
 800d550:	2202      	movs	r2, #2
 800d552:	4618      	mov	r0, r3
 800d554:	f000 fbbc 	bl	800dcd0 <prvListTasksWithinSingleList>
 800d558:	4602      	mov	r2, r0
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	4413      	add	r3, r2
 800d55e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800d560:	697a      	ldr	r2, [r7, #20]
 800d562:	4613      	mov	r3, r2
 800d564:	00db      	lsls	r3, r3, #3
 800d566:	4413      	add	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	461a      	mov	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	4413      	add	r3, r2
 800d570:	4a1f      	ldr	r2, [pc, #124]	@ (800d5f0 <uxTaskGetSystemState+0x110>)
 800d572:	6811      	ldr	r1, [r2, #0]
 800d574:	2202      	movs	r2, #2
 800d576:	4618      	mov	r0, r3
 800d578:	f000 fbaa 	bl	800dcd0 <prvListTasksWithinSingleList>
 800d57c:	4602      	mov	r2, r0
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	4413      	add	r3, r2
 800d582:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4613      	mov	r3, r2
 800d588:	00db      	lsls	r3, r3, #3
 800d58a:	4413      	add	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	461a      	mov	r2, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	4413      	add	r3, r2
 800d594:	2204      	movs	r2, #4
 800d596:	4917      	ldr	r1, [pc, #92]	@ (800d5f4 <uxTaskGetSystemState+0x114>)
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 fb99 	bl	800dcd0 <prvListTasksWithinSingleList>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	4413      	add	r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	2203      	movs	r2, #3
 800d5b8:	490f      	ldr	r1, [pc, #60]	@ (800d5f8 <uxTaskGetSystemState+0x118>)
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 fb88 	bl	800dcd0 <prvListTasksWithinSingleList>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d003      	beq.n	800d5d6 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d5fc <uxTaskGetSystemState+0x11c>)
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800d5d6:	f7ff fed5 	bl	800d384 <xTaskResumeAll>

		return uxTask;
 800d5da:	697b      	ldr	r3, [r7, #20]
	}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3718      	adds	r7, #24
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	20003510 	.word	0x20003510
 800d5e8:	20003040 	.word	0x20003040
 800d5ec:	200034c8 	.word	0x200034c8
 800d5f0:	200034cc 	.word	0x200034cc
 800d5f4:	200034e4 	.word	0x200034e4
 800d5f8:	200034fc 	.word	0x200034fc
 800d5fc:	200003cc 	.word	0x200003cc

0800d600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d60a:	4b4f      	ldr	r3, [pc, #316]	@ (800d748 <xTaskIncrementTick+0x148>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f040 8090 	bne.w	800d734 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d614:	4b4d      	ldr	r3, [pc, #308]	@ (800d74c <xTaskIncrementTick+0x14c>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3301      	adds	r3, #1
 800d61a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d61c:	4a4b      	ldr	r2, [pc, #300]	@ (800d74c <xTaskIncrementTick+0x14c>)
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d121      	bne.n	800d66c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d628:	4b49      	ldr	r3, [pc, #292]	@ (800d750 <xTaskIncrementTick+0x150>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00b      	beq.n	800d64a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	603b      	str	r3, [r7, #0]
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop
 800d648:	e7fd      	b.n	800d646 <xTaskIncrementTick+0x46>
 800d64a:	4b41      	ldr	r3, [pc, #260]	@ (800d750 <xTaskIncrementTick+0x150>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	4b40      	ldr	r3, [pc, #256]	@ (800d754 <xTaskIncrementTick+0x154>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a3e      	ldr	r2, [pc, #248]	@ (800d750 <xTaskIncrementTick+0x150>)
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	4a3e      	ldr	r2, [pc, #248]	@ (800d754 <xTaskIncrementTick+0x154>)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6013      	str	r3, [r2, #0]
 800d65e:	4b3e      	ldr	r3, [pc, #248]	@ (800d758 <xTaskIncrementTick+0x158>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3301      	adds	r3, #1
 800d664:	4a3c      	ldr	r2, [pc, #240]	@ (800d758 <xTaskIncrementTick+0x158>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	f000 fbd6 	bl	800de18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d66c:	4b3b      	ldr	r3, [pc, #236]	@ (800d75c <xTaskIncrementTick+0x15c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	429a      	cmp	r2, r3
 800d674:	d349      	bcc.n	800d70a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d676:	4b36      	ldr	r3, [pc, #216]	@ (800d750 <xTaskIncrementTick+0x150>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d104      	bne.n	800d68a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d680:	4b36      	ldr	r3, [pc, #216]	@ (800d75c <xTaskIncrementTick+0x15c>)
 800d682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d686:	601a      	str	r2, [r3, #0]
					break;
 800d688:	e03f      	b.n	800d70a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d68a:	4b31      	ldr	r3, [pc, #196]	@ (800d750 <xTaskIncrementTick+0x150>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d69a:	693a      	ldr	r2, [r7, #16]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d203      	bcs.n	800d6aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6a2:	4a2e      	ldr	r2, [pc, #184]	@ (800d75c <xTaskIncrementTick+0x15c>)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6a8:	e02f      	b.n	800d70a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fd2e 	bl	800c110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	3318      	adds	r3, #24
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fd25 	bl	800c110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ca:	4b25      	ldr	r3, [pc, #148]	@ (800d760 <xTaskIncrementTick+0x160>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d903      	bls.n	800d6da <xTaskIncrementTick+0xda>
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d6:	4a22      	ldr	r2, [pc, #136]	@ (800d760 <xTaskIncrementTick+0x160>)
 800d6d8:	6013      	str	r3, [r2, #0]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4a1f      	ldr	r2, [pc, #124]	@ (800d764 <xTaskIncrementTick+0x164>)
 800d6e8:	441a      	add	r2, r3
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7fe fcb0 	bl	800c056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d768 <xTaskIncrementTick+0x168>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d700:	429a      	cmp	r2, r3
 800d702:	d3b8      	bcc.n	800d676 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d704:	2301      	movs	r3, #1
 800d706:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d708:	e7b5      	b.n	800d676 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d70a:	4b17      	ldr	r3, [pc, #92]	@ (800d768 <xTaskIncrementTick+0x168>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d710:	4914      	ldr	r1, [pc, #80]	@ (800d764 <xTaskIncrementTick+0x164>)
 800d712:	4613      	mov	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	440b      	add	r3, r1
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d901      	bls.n	800d726 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d722:	2301      	movs	r3, #1
 800d724:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d726:	4b11      	ldr	r3, [pc, #68]	@ (800d76c <xTaskIncrementTick+0x16c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d007      	beq.n	800d73e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d72e:	2301      	movs	r3, #1
 800d730:	617b      	str	r3, [r7, #20]
 800d732:	e004      	b.n	800d73e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d734:	4b0e      	ldr	r3, [pc, #56]	@ (800d770 <xTaskIncrementTick+0x170>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3301      	adds	r3, #1
 800d73a:	4a0d      	ldr	r2, [pc, #52]	@ (800d770 <xTaskIncrementTick+0x170>)
 800d73c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d73e:	697b      	ldr	r3, [r7, #20]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	20003538 	.word	0x20003538
 800d74c:	20003514 	.word	0x20003514
 800d750:	200034c8 	.word	0x200034c8
 800d754:	200034cc 	.word	0x200034cc
 800d758:	20003528 	.word	0x20003528
 800d75c:	20003530 	.word	0x20003530
 800d760:	20003518 	.word	0x20003518
 800d764:	20003040 	.word	0x20003040
 800d768:	2000303c 	.word	0x2000303c
 800d76c:	20003524 	.word	0x20003524
 800d770:	20003520 	.word	0x20003520

0800d774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d77a:	4b37      	ldr	r3, [pc, #220]	@ (800d858 <vTaskSwitchContext+0xe4>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d782:	4b36      	ldr	r3, [pc, #216]	@ (800d85c <vTaskSwitchContext+0xe8>)
 800d784:	2201      	movs	r2, #1
 800d786:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d788:	e05f      	b.n	800d84a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800d78a:	4b34      	ldr	r3, [pc, #208]	@ (800d85c <vTaskSwitchContext+0xe8>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d790:	4b33      	ldr	r3, [pc, #204]	@ (800d860 <vTaskSwitchContext+0xec>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a33      	ldr	r2, [pc, #204]	@ (800d864 <vTaskSwitchContext+0xf0>)
 800d796:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d798:	4b32      	ldr	r3, [pc, #200]	@ (800d864 <vTaskSwitchContext+0xf0>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	4b32      	ldr	r3, [pc, #200]	@ (800d868 <vTaskSwitchContext+0xf4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d909      	bls.n	800d7b8 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d7a4:	4b31      	ldr	r3, [pc, #196]	@ (800d86c <vTaskSwitchContext+0xf8>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800d7aa:	4a2e      	ldr	r2, [pc, #184]	@ (800d864 <vTaskSwitchContext+0xf0>)
 800d7ac:	6810      	ldr	r0, [r2, #0]
 800d7ae:	4a2e      	ldr	r2, [pc, #184]	@ (800d868 <vTaskSwitchContext+0xf4>)
 800d7b0:	6812      	ldr	r2, [r2, #0]
 800d7b2:	1a82      	subs	r2, r0, r2
 800d7b4:	440a      	add	r2, r1
 800d7b6:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d7b8:	4b2a      	ldr	r3, [pc, #168]	@ (800d864 <vTaskSwitchContext+0xf0>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a2a      	ldr	r2, [pc, #168]	@ (800d868 <vTaskSwitchContext+0xf4>)
 800d7be:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c0:	4b2b      	ldr	r3, [pc, #172]	@ (800d870 <vTaskSwitchContext+0xfc>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	60fb      	str	r3, [r7, #12]
 800d7c6:	e011      	b.n	800d7ec <vTaskSwitchContext+0x78>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10b      	bne.n	800d7e6 <vTaskSwitchContext+0x72>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	607b      	str	r3, [r7, #4]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <vTaskSwitchContext+0x6e>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	4921      	ldr	r1, [pc, #132]	@ (800d874 <vTaskSwitchContext+0x100>)
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	440b      	add	r3, r1
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0e3      	beq.n	800d7c8 <vTaskSwitchContext+0x54>
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	4613      	mov	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4a1a      	ldr	r2, [pc, #104]	@ (800d874 <vTaskSwitchContext+0x100>)
 800d80c:	4413      	add	r3, r2
 800d80e:	60bb      	str	r3, [r7, #8]
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	605a      	str	r2, [r3, #4]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	3308      	adds	r3, #8
 800d822:	429a      	cmp	r2, r3
 800d824:	d104      	bne.n	800d830 <vTaskSwitchContext+0xbc>
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	605a      	str	r2, [r3, #4]
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	4a0d      	ldr	r2, [pc, #52]	@ (800d86c <vTaskSwitchContext+0xf8>)
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	4a0d      	ldr	r2, [pc, #52]	@ (800d870 <vTaskSwitchContext+0xfc>)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d840:	4b0a      	ldr	r3, [pc, #40]	@ (800d86c <vTaskSwitchContext+0xf8>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3368      	adds	r3, #104	@ 0x68
 800d846:	4a0c      	ldr	r2, [pc, #48]	@ (800d878 <vTaskSwitchContext+0x104>)
 800d848:	6013      	str	r3, [r2, #0]
}
 800d84a:	bf00      	nop
 800d84c:	3714      	adds	r7, #20
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	20003538 	.word	0x20003538
 800d85c:	20003524 	.word	0x20003524
 800d860:	200003cc 	.word	0x200003cc
 800d864:	20003540 	.word	0x20003540
 800d868:	2000353c 	.word	0x2000353c
 800d86c:	2000303c 	.word	0x2000303c
 800d870:	20003518 	.word	0x20003518
 800d874:	20003040 	.word	0x20003040
 800d878:	20000040 	.word	0x20000040

0800d87c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10b      	bne.n	800d8a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	60fb      	str	r3, [r7, #12]
}
 800d89e:	bf00      	nop
 800d8a0:	bf00      	nop
 800d8a2:	e7fd      	b.n	800d8a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8a4:	4b07      	ldr	r3, [pc, #28]	@ (800d8c4 <vTaskPlaceOnEventList+0x48>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3318      	adds	r3, #24
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7fe fbf6 	bl	800c09e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	6838      	ldr	r0, [r7, #0]
 800d8b6:	f000 fea5 	bl	800e604 <prvAddCurrentTaskToDelayedList>
}
 800d8ba:	bf00      	nop
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	2000303c 	.word	0x2000303c

0800d8c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10b      	bne.n	800d8f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	617b      	str	r3, [r7, #20]
}
 800d8ec:	bf00      	nop
 800d8ee:	bf00      	nop
 800d8f0:	e7fd      	b.n	800d8ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d91c <vTaskPlaceOnEventListRestricted+0x54>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3318      	adds	r3, #24
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f7fe fbab 	bl	800c056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d90a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d90c:	6879      	ldr	r1, [r7, #4]
 800d90e:	68b8      	ldr	r0, [r7, #8]
 800d910:	f000 fe78 	bl	800e604 <prvAddCurrentTaskToDelayedList>
	}
 800d914:	bf00      	nop
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	2000303c 	.word	0x2000303c

0800d920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10b      	bne.n	800d94e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	60fb      	str	r3, [r7, #12]
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	3318      	adds	r3, #24
 800d952:	4618      	mov	r0, r3
 800d954:	f7fe fbdc 	bl	800c110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d958:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d0 <xTaskRemoveFromEventList+0xb0>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d11d      	bne.n	800d99c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	3304      	adds	r3, #4
 800d964:	4618      	mov	r0, r3
 800d966:	f7fe fbd3 	bl	800c110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96e:	4b19      	ldr	r3, [pc, #100]	@ (800d9d4 <xTaskRemoveFromEventList+0xb4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	429a      	cmp	r2, r3
 800d974:	d903      	bls.n	800d97e <xTaskRemoveFromEventList+0x5e>
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97a:	4a16      	ldr	r2, [pc, #88]	@ (800d9d4 <xTaskRemoveFromEventList+0xb4>)
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d982:	4613      	mov	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4a13      	ldr	r2, [pc, #76]	@ (800d9d8 <xTaskRemoveFromEventList+0xb8>)
 800d98c:	441a      	add	r2, r3
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	3304      	adds	r3, #4
 800d992:	4619      	mov	r1, r3
 800d994:	4610      	mov	r0, r2
 800d996:	f7fe fb5e 	bl	800c056 <vListInsertEnd>
 800d99a:	e005      	b.n	800d9a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	3318      	adds	r3, #24
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	480e      	ldr	r0, [pc, #56]	@ (800d9dc <xTaskRemoveFromEventList+0xbc>)
 800d9a4:	f7fe fb57 	bl	800c056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e0 <xTaskRemoveFromEventList+0xc0>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d905      	bls.n	800d9c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d9e4 <xTaskRemoveFromEventList+0xc4>)
 800d9bc:	2201      	movs	r2, #1
 800d9be:	601a      	str	r2, [r3, #0]
 800d9c0:	e001      	b.n	800d9c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d9c6:	697b      	ldr	r3, [r7, #20]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20003538 	.word	0x20003538
 800d9d4:	20003518 	.word	0x20003518
 800d9d8:	20003040 	.word	0x20003040
 800d9dc:	200034d0 	.word	0x200034d0
 800d9e0:	2000303c 	.word	0x2000303c
 800d9e4:	20003524 	.word	0x20003524

0800d9e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9f0:	4b06      	ldr	r3, [pc, #24]	@ (800da0c <vTaskInternalSetTimeOutState+0x24>)
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9f8:	4b05      	ldr	r3, [pc, #20]	@ (800da10 <vTaskInternalSetTimeOutState+0x28>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	605a      	str	r2, [r3, #4]
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	20003528 	.word	0x20003528
 800da10:	20003514 	.word	0x20003514

0800da14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	613b      	str	r3, [r7, #16]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10b      	bne.n	800da5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	60fb      	str	r3, [r7, #12]
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop
 800da58:	e7fd      	b.n	800da56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800da5a:	f001 fab5 	bl	800efc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da5e:	4b1d      	ldr	r3, [pc, #116]	@ (800dad4 <xTaskCheckForTimeOut+0xc0>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da76:	d102      	bne.n	800da7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da78:	2300      	movs	r3, #0
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	e023      	b.n	800dac6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4b15      	ldr	r3, [pc, #84]	@ (800dad8 <xTaskCheckForTimeOut+0xc4>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d007      	beq.n	800da9a <xTaskCheckForTimeOut+0x86>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	69ba      	ldr	r2, [r7, #24]
 800da90:	429a      	cmp	r2, r3
 800da92:	d302      	bcc.n	800da9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da94:	2301      	movs	r3, #1
 800da96:	61fb      	str	r3, [r7, #28]
 800da98:	e015      	b.n	800dac6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	697a      	ldr	r2, [r7, #20]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d20b      	bcs.n	800dabc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	1ad2      	subs	r2, r2, r3
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7ff ff99 	bl	800d9e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	61fb      	str	r3, [r7, #28]
 800daba:	e004      	b.n	800dac6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	2200      	movs	r2, #0
 800dac0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dac2:	2301      	movs	r3, #1
 800dac4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dac6:	f001 fab1 	bl	800f02c <vPortExitCritical>

	return xReturn;
 800daca:	69fb      	ldr	r3, [r7, #28]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3720      	adds	r7, #32
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20003514 	.word	0x20003514
 800dad8:	20003528 	.word	0x20003528

0800dadc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dae0:	4b03      	ldr	r3, [pc, #12]	@ (800daf0 <vTaskMissedYield+0x14>)
 800dae2:	2201      	movs	r2, #1
 800dae4:	601a      	str	r2, [r3, #0]
}
 800dae6:	bf00      	nop
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	20003524 	.word	0x20003524

0800daf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dafc:	f000 f854 	bl	800dba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db00:	4b07      	ldr	r3, [pc, #28]	@ (800db20 <prvIdleTask+0x2c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b01      	cmp	r3, #1
 800db06:	d907      	bls.n	800db18 <prvIdleTask+0x24>
			{
				taskYIELD();
 800db08:	4b06      	ldr	r3, [pc, #24]	@ (800db24 <prvIdleTask+0x30>)
 800db0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db0e:	601a      	str	r2, [r3, #0]
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800db18:	f7f2 ff28 	bl	800096c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800db1c:	e7ee      	b.n	800dafc <prvIdleTask+0x8>
 800db1e:	bf00      	nop
 800db20:	20003040 	.word	0x20003040
 800db24:	e000ed04 	.word	0xe000ed04

0800db28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db2e:	2300      	movs	r3, #0
 800db30:	607b      	str	r3, [r7, #4]
 800db32:	e00c      	b.n	800db4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	4613      	mov	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4413      	add	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4a12      	ldr	r2, [pc, #72]	@ (800db88 <prvInitialiseTaskLists+0x60>)
 800db40:	4413      	add	r3, r2
 800db42:	4618      	mov	r0, r3
 800db44:	f7fe fa5a 	bl	800bffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	3301      	adds	r3, #1
 800db4c:	607b      	str	r3, [r7, #4]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b37      	cmp	r3, #55	@ 0x37
 800db52:	d9ef      	bls.n	800db34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db54:	480d      	ldr	r0, [pc, #52]	@ (800db8c <prvInitialiseTaskLists+0x64>)
 800db56:	f7fe fa51 	bl	800bffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db5a:	480d      	ldr	r0, [pc, #52]	@ (800db90 <prvInitialiseTaskLists+0x68>)
 800db5c:	f7fe fa4e 	bl	800bffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db60:	480c      	ldr	r0, [pc, #48]	@ (800db94 <prvInitialiseTaskLists+0x6c>)
 800db62:	f7fe fa4b 	bl	800bffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db66:	480c      	ldr	r0, [pc, #48]	@ (800db98 <prvInitialiseTaskLists+0x70>)
 800db68:	f7fe fa48 	bl	800bffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db6c:	480b      	ldr	r0, [pc, #44]	@ (800db9c <prvInitialiseTaskLists+0x74>)
 800db6e:	f7fe fa45 	bl	800bffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db72:	4b0b      	ldr	r3, [pc, #44]	@ (800dba0 <prvInitialiseTaskLists+0x78>)
 800db74:	4a05      	ldr	r2, [pc, #20]	@ (800db8c <prvInitialiseTaskLists+0x64>)
 800db76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db78:	4b0a      	ldr	r3, [pc, #40]	@ (800dba4 <prvInitialiseTaskLists+0x7c>)
 800db7a:	4a05      	ldr	r2, [pc, #20]	@ (800db90 <prvInitialiseTaskLists+0x68>)
 800db7c:	601a      	str	r2, [r3, #0]
}
 800db7e:	bf00      	nop
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20003040 	.word	0x20003040
 800db8c:	200034a0 	.word	0x200034a0
 800db90:	200034b4 	.word	0x200034b4
 800db94:	200034d0 	.word	0x200034d0
 800db98:	200034e4 	.word	0x200034e4
 800db9c:	200034fc 	.word	0x200034fc
 800dba0:	200034c8 	.word	0x200034c8
 800dba4:	200034cc 	.word	0x200034cc

0800dba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbae:	e019      	b.n	800dbe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dbb0:	f001 fa0a 	bl	800efc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb4:	4b10      	ldr	r3, [pc, #64]	@ (800dbf8 <prvCheckTasksWaitingTermination+0x50>)
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fe faa5 	bl	800c110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800dbfc <prvCheckTasksWaitingTermination+0x54>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	4a0b      	ldr	r2, [pc, #44]	@ (800dbfc <prvCheckTasksWaitingTermination+0x54>)
 800dbce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbd0:	4b0b      	ldr	r3, [pc, #44]	@ (800dc00 <prvCheckTasksWaitingTermination+0x58>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3b01      	subs	r3, #1
 800dbd6:	4a0a      	ldr	r2, [pc, #40]	@ (800dc00 <prvCheckTasksWaitingTermination+0x58>)
 800dbd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dbda:	f001 fa27 	bl	800f02c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f8e4 	bl	800ddac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbe4:	4b06      	ldr	r3, [pc, #24]	@ (800dc00 <prvCheckTasksWaitingTermination+0x58>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1e1      	bne.n	800dbb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	200034e4 	.word	0x200034e4
 800dbfc:	20003510 	.word	0x20003510
 800dc00:	200034f8 	.word	0x200034f8

0800dc04 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <vTaskGetInfo+0x1a>
 800dc18:	4b2c      	ldr	r3, [pc, #176]	@ (800dccc <vTaskGetInfo+0xc8>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	e000      	b.n	800dc20 <vTaskGetInfo+0x1c>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800dc5a:	78fb      	ldrb	r3, [r7, #3]
 800dc5c:	2b05      	cmp	r3, #5
 800dc5e:	d01a      	beq.n	800dc96 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800dc60:	4b1a      	ldr	r3, [pc, #104]	@ (800dccc <vTaskGetInfo+0xc8>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d103      	bne.n	800dc72 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	731a      	strb	r2, [r3, #12]
 800dc70:	e018      	b.n	800dca4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	78fa      	ldrb	r2, [r7, #3]
 800dc76:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800dc78:	78fb      	ldrb	r3, [r7, #3]
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d112      	bne.n	800dca4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800dc7e:	f7ff fb73 	bl	800d368 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800dc90:	f7ff fb78 	bl	800d384 <xTaskResumeAll>
 800dc94:	e006      	b.n	800dca4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800dc96:	6978      	ldr	r0, [r7, #20]
 800dc98:	f7ff fa12 	bl	800d0c0 <eTaskGetState>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d009      	beq.n	800dcbe <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 f860 	bl	800dd74 <prvTaskCheckFreeStackSpace>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800dcbc:	e002      	b.n	800dcc4 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	841a      	strh	r2, [r3, #32]
	}
 800dcc4:	bf00      	nop
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	2000303c 	.word	0x2000303c

0800dcd0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b08a      	sub	sp, #40	@ 0x28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d03f      	beq.n	800dd6a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	623b      	str	r3, [r7, #32]
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	605a      	str	r2, [r3, #4]
 800dcf8:	6a3b      	ldr	r3, [r7, #32]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	3308      	adds	r3, #8
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d104      	bne.n	800dd0e <prvListTasksWithinSingleList+0x3e>
 800dd04:	6a3b      	ldr	r3, [r7, #32]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	6a3b      	ldr	r3, [r7, #32]
 800dd0c:	605a      	str	r2, [r3, #4]
 800dd0e:	6a3b      	ldr	r3, [r7, #32]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	61bb      	str	r3, [r7, #24]
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	605a      	str	r2, [r3, #4]
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	3308      	adds	r3, #8
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d104      	bne.n	800dd3a <prvListTasksWithinSingleList+0x6a>
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800dd42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd44:	4613      	mov	r3, r2
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	4413      	add	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	1899      	adds	r1, r3, r2
 800dd52:	79fb      	ldrb	r3, [r7, #7]
 800dd54:	2201      	movs	r2, #1
 800dd56:	6978      	ldr	r0, [r7, #20]
 800dd58:	f7ff ff54 	bl	800dc04 <vTaskGetInfo>
				uxTask++;
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5e:	3301      	adds	r3, #1
 800dd60:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800dd62:	697a      	ldr	r2, [r7, #20]
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d1d5      	bne.n	800dd16 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3728      	adds	r7, #40	@ 0x28
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800dd80:	e005      	b.n	800dd8e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3301      	adds	r3, #1
 800dd86:	607b      	str	r3, [r7, #4]
			ulCount++;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2ba5      	cmp	r3, #165	@ 0xa5
 800dd94:	d0f5      	beq.n	800dd82 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	089b      	lsrs	r3, r3, #2
 800dd9a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	b29b      	uxth	r3, r3
	}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3368      	adds	r3, #104	@ 0x68
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f002 f80b 	bl	800fdd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d108      	bne.n	800ddda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f001 faeb 	bl	800f3a8 <vPortFree>
				vPortFree( pxTCB );
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f001 fae8 	bl	800f3a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddd8:	e019      	b.n	800de0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d103      	bne.n	800ddec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f001 fadf 	bl	800f3a8 <vPortFree>
	}
 800ddea:	e010      	b.n	800de0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d00b      	beq.n	800de0e <prvDeleteTCB+0x62>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	60fb      	str	r3, [r7, #12]
}
 800de08:	bf00      	nop
 800de0a:	bf00      	nop
 800de0c:	e7fd      	b.n	800de0a <prvDeleteTCB+0x5e>
	}
 800de0e:	bf00      	nop
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
	...

0800de18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de1e:	4b0c      	ldr	r3, [pc, #48]	@ (800de50 <prvResetNextTaskUnblockTime+0x38>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d104      	bne.n	800de32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de28:	4b0a      	ldr	r3, [pc, #40]	@ (800de54 <prvResetNextTaskUnblockTime+0x3c>)
 800de2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de30:	e008      	b.n	800de44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de32:	4b07      	ldr	r3, [pc, #28]	@ (800de50 <prvResetNextTaskUnblockTime+0x38>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	4a04      	ldr	r2, [pc, #16]	@ (800de54 <prvResetNextTaskUnblockTime+0x3c>)
 800de42:	6013      	str	r3, [r2, #0]
}
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	200034c8 	.word	0x200034c8
 800de54:	20003530 	.word	0x20003530

0800de58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de5e:	4b0b      	ldr	r3, [pc, #44]	@ (800de8c <xTaskGetSchedulerState+0x34>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d102      	bne.n	800de6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de66:	2301      	movs	r3, #1
 800de68:	607b      	str	r3, [r7, #4]
 800de6a:	e008      	b.n	800de7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de6c:	4b08      	ldr	r3, [pc, #32]	@ (800de90 <xTaskGetSchedulerState+0x38>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de74:	2302      	movs	r3, #2
 800de76:	607b      	str	r3, [r7, #4]
 800de78:	e001      	b.n	800de7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de7a:	2300      	movs	r3, #0
 800de7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de7e:	687b      	ldr	r3, [r7, #4]
	}
 800de80:	4618      	mov	r0, r3
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr
 800de8c:	2000351c 	.word	0x2000351c
 800de90:	20003538 	.word	0x20003538

0800de94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dea0:	2300      	movs	r3, #0
 800dea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d058      	beq.n	800df5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800deaa:	4b2f      	ldr	r3, [pc, #188]	@ (800df68 <xTaskPriorityDisinherit+0xd4>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	693a      	ldr	r2, [r7, #16]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d00b      	beq.n	800decc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	60fb      	str	r3, [r7, #12]
}
 800dec6:	bf00      	nop
 800dec8:	bf00      	nop
 800deca:	e7fd      	b.n	800dec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10b      	bne.n	800deec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ded4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	60bb      	str	r3, [r7, #8]
}
 800dee6:	bf00      	nop
 800dee8:	bf00      	nop
 800deea:	e7fd      	b.n	800dee8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800def0:	1e5a      	subs	r2, r3, #1
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800defe:	429a      	cmp	r2, r3
 800df00:	d02c      	beq.n	800df5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df06:	2b00      	cmp	r3, #0
 800df08:	d128      	bne.n	800df5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	3304      	adds	r3, #4
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe f8fe 	bl	800c110 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df2c:	4b0f      	ldr	r3, [pc, #60]	@ (800df6c <xTaskPriorityDisinherit+0xd8>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d903      	bls.n	800df3c <xTaskPriorityDisinherit+0xa8>
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df38:	4a0c      	ldr	r2, [pc, #48]	@ (800df6c <xTaskPriorityDisinherit+0xd8>)
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4a09      	ldr	r2, [pc, #36]	@ (800df70 <xTaskPriorityDisinherit+0xdc>)
 800df4a:	441a      	add	r2, r3
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	3304      	adds	r3, #4
 800df50:	4619      	mov	r1, r3
 800df52:	4610      	mov	r0, r2
 800df54:	f7fe f87f 	bl	800c056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df58:	2301      	movs	r3, #1
 800df5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df5c:	697b      	ldr	r3, [r7, #20]
	}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	2000303c 	.word	0x2000303c
 800df6c:	20003518 	.word	0x20003518
 800df70:	20003040 	.word	0x20003040

0800df74 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800df7e:	6839      	ldr	r1, [r7, #0]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f001 ffb9 	bl	800fef8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7f2 f922 	bl	80001d0 <strlen>
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	e007      	b.n	800dfa0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	4413      	add	r3, r2
 800df96:	2220      	movs	r2, #32
 800df98:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3301      	adds	r3, #1
 800df9e:	60fb      	str	r3, [r7, #12]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2b1e      	cmp	r3, #30
 800dfa4:	d9f4      	bls.n	800df90 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	4413      	add	r3, r2
 800dfac:	2200      	movs	r2, #0
 800dfae:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	4413      	add	r3, r2
	}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
	...

0800dfc0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800dfc0:	b590      	push	{r4, r7, lr}
 800dfc2:	b089      	sub	sp, #36	@ 0x24
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800dfce:	4b45      	ldr	r3, [pc, #276]	@ (800e0e4 <vTaskList+0x124>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800dfd4:	4b43      	ldr	r3, [pc, #268]	@ (800e0e4 <vTaskList+0x124>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	4413      	add	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f001 f913 	bl	800f20c <pvPortMalloc>
 800dfe6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d076      	beq.n	800e0dc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800dfee:	2200      	movs	r2, #0
 800dff0:	68f9      	ldr	r1, [r7, #12]
 800dff2:	68b8      	ldr	r0, [r7, #8]
 800dff4:	f7ff fa74 	bl	800d4e0 <uxTaskGetSystemState>
 800dff8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	e066      	b.n	800e0ce <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	4613      	mov	r3, r2
 800e004:	00db      	lsls	r3, r3, #3
 800e006:	4413      	add	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	461a      	mov	r2, r3
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	4413      	add	r3, r2
 800e010:	7b1b      	ldrb	r3, [r3, #12]
 800e012:	2b04      	cmp	r3, #4
 800e014:	d81b      	bhi.n	800e04e <vTaskList+0x8e>
 800e016:	a201      	add	r2, pc, #4	@ (adr r2, 800e01c <vTaskList+0x5c>)
 800e018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01c:	0800e031 	.word	0x0800e031
 800e020:	0800e037 	.word	0x0800e037
 800e024:	0800e03d 	.word	0x0800e03d
 800e028:	0800e043 	.word	0x0800e043
 800e02c:	0800e049 	.word	0x0800e049
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800e030:	2358      	movs	r3, #88	@ 0x58
 800e032:	74fb      	strb	r3, [r7, #19]
										break;
 800e034:	e00e      	b.n	800e054 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800e036:	2352      	movs	r3, #82	@ 0x52
 800e038:	74fb      	strb	r3, [r7, #19]
										break;
 800e03a:	e00b      	b.n	800e054 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800e03c:	2342      	movs	r3, #66	@ 0x42
 800e03e:	74fb      	strb	r3, [r7, #19]
										break;
 800e040:	e008      	b.n	800e054 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800e042:	2353      	movs	r3, #83	@ 0x53
 800e044:	74fb      	strb	r3, [r7, #19]
										break;
 800e046:	e005      	b.n	800e054 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800e048:	2344      	movs	r3, #68	@ 0x44
 800e04a:	74fb      	strb	r3, [r7, #19]
										break;
 800e04c:	e002      	b.n	800e054 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800e04e:	2300      	movs	r3, #0
 800e050:	74fb      	strb	r3, [r7, #19]
										break;
 800e052:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	4613      	mov	r3, r2
 800e058:	00db      	lsls	r3, r3, #3
 800e05a:	4413      	add	r3, r2
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	461a      	mov	r2, r3
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	4413      	add	r3, r2
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	4619      	mov	r1, r3
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7ff ff83 	bl	800df74 <prvWriteNameToBuffer>
 800e06e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e070:	7cf9      	ldrb	r1, [r7, #19]
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	4613      	mov	r3, r2
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	4413      	add	r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	461a      	mov	r2, r3
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	4413      	add	r3, r2
 800e082:	6918      	ldr	r0, [r3, #16]
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	4613      	mov	r3, r2
 800e088:	00db      	lsls	r3, r3, #3
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	461a      	mov	r2, r3
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	4413      	add	r3, r2
 800e094:	8c1b      	ldrh	r3, [r3, #32]
 800e096:	461c      	mov	r4, r3
 800e098:	697a      	ldr	r2, [r7, #20]
 800e09a:	4613      	mov	r3, r2
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	4413      	add	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	9301      	str	r3, [sp, #4]
 800e0ac:	9400      	str	r4, [sp, #0]
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	460a      	mov	r2, r1
 800e0b2:	490d      	ldr	r1, [pc, #52]	@ (800e0e8 <vTaskList+0x128>)
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f001 fe65 	bl	800fd84 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7f2 f888 	bl	80001d0 <strlen>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	617b      	str	r3, [r7, #20]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d394      	bcc.n	800e000 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800e0d6:	68b8      	ldr	r0, [r7, #8]
 800e0d8:	f001 f966 	bl	800f3a8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0dc:	bf00      	nop
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd90      	pop	{r4, r7, pc}
 800e0e4:	20003510 	.word	0x20003510
 800e0e8:	080106f8 	.word	0x080106f8

0800e0ec <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800e0fa:	4b3a      	ldr	r3, [pc, #232]	@ (800e1e4 <vTaskGetRunTimeStats+0xf8>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800e100:	4b38      	ldr	r3, [pc, #224]	@ (800e1e4 <vTaskGetRunTimeStats+0xf8>)
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	4613      	mov	r3, r2
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f001 f87d 	bl	800f20c <pvPortMalloc>
 800e112:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d05f      	beq.n	800e1da <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800e11a:	f107 030c 	add.w	r3, r7, #12
 800e11e:	461a      	mov	r2, r3
 800e120:	69b9      	ldr	r1, [r7, #24]
 800e122:	6978      	ldr	r0, [r7, #20]
 800e124:	f7ff f9dc 	bl	800d4e0 <uxTaskGetSystemState>
 800e128:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	4a2e      	ldr	r2, [pc, #184]	@ (800e1e8 <vTaskGetRunTimeStats+0xfc>)
 800e12e:	fba2 2303 	umull	r2, r3, r2, r3
 800e132:	095b      	lsrs	r3, r3, #5
 800e134:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d04b      	beq.n	800e1d4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800e13c:	2300      	movs	r3, #0
 800e13e:	61fb      	str	r3, [r7, #28]
 800e140:	e044      	b.n	800e1cc <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	4613      	mov	r3, r2
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	4413      	add	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	461a      	mov	r2, r3
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	4413      	add	r3, r2
 800e152:	699a      	ldr	r2, [r3, #24]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800e15c:	69fa      	ldr	r2, [r7, #28]
 800e15e:	4613      	mov	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	461a      	mov	r2, r3
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	4413      	add	r3, r2
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	4619      	mov	r1, r3
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f7ff feff 	bl	800df74 <prvWriteNameToBuffer>
 800e176:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00e      	beq.n	800e19c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e17e:	69fa      	ldr	r2, [r7, #28]
 800e180:	4613      	mov	r3, r2
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	4413      	add	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	461a      	mov	r2, r3
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	4413      	add	r3, r2
 800e18e:	699a      	ldr	r2, [r3, #24]
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	4916      	ldr	r1, [pc, #88]	@ (800e1ec <vTaskGetRunTimeStats+0x100>)
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f001 fdf5 	bl	800fd84 <siprintf>
 800e19a:	e00d      	b.n	800e1b8 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800e19c:	69fa      	ldr	r2, [r7, #28]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	699b      	ldr	r3, [r3, #24]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	490f      	ldr	r1, [pc, #60]	@ (800e1f0 <vTaskGetRunTimeStats+0x104>)
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f001 fde6 	bl	800fd84 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7f2 f809 	bl	80001d0 <strlen>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	61fb      	str	r3, [r7, #28]
 800e1cc:	69fa      	ldr	r2, [r7, #28]
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d3b6      	bcc.n	800e142 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800e1d4:	6978      	ldr	r0, [r7, #20]
 800e1d6:	f001 f8e7 	bl	800f3a8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1da:	bf00      	nop
 800e1dc:	3720      	adds	r7, #32
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	20003510 	.word	0x20003510
 800e1e8:	51eb851f 	.word	0x51eb851f
 800e1ec:	08010708 	.word	0x08010708
 800e1f0:	08010714 	.word	0x08010714

0800e1f4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
 800e200:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e202:	f000 fee1 	bl	800efc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e206:	4b29      	ldr	r3, [pc, #164]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	2b02      	cmp	r3, #2
 800e212:	d01c      	beq.n	800e24e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e214:	4b25      	ldr	r3, [pc, #148]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	43d2      	mvns	r2, r2
 800e220:	400a      	ands	r2, r1
 800e222:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e226:	4b21      	ldr	r3, [pc, #132]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00b      	beq.n	800e24e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e236:	2101      	movs	r1, #1
 800e238:	6838      	ldr	r0, [r7, #0]
 800e23a:	f000 f9e3 	bl	800e604 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e23e:	4b1c      	ldr	r3, [pc, #112]	@ (800e2b0 <xTaskNotifyWait+0xbc>)
 800e240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e24e:	f000 feed 	bl	800f02c <vPortExitCritical>

		taskENTER_CRITICAL();
 800e252:	f000 feb9 	bl	800efc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d005      	beq.n	800e268 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e25c:	4b13      	ldr	r3, [pc, #76]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e268:	4b10      	ldr	r3, [pc, #64]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b02      	cmp	r3, #2
 800e274:	d002      	beq.n	800e27c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e276:	2300      	movs	r3, #0
 800e278:	617b      	str	r3, [r7, #20]
 800e27a:	e00a      	b.n	800e292 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e27c:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	43d2      	mvns	r2, r2
 800e288:	400a      	ands	r2, r1
 800e28a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 800e28e:	2301      	movs	r3, #1
 800e290:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e292:	4b06      	ldr	r3, [pc, #24]	@ (800e2ac <xTaskNotifyWait+0xb8>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2200      	movs	r2, #0
 800e298:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 800e29c:	f000 fec6 	bl	800f02c <vPortExitCritical>

		return xReturn;
 800e2a0:	697b      	ldr	r3, [r7, #20]
	}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	2000303c 	.word	0x2000303c
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b08a      	sub	sp, #40	@ 0x28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10b      	bne.n	800e2e6 <xTaskGenericNotify+0x32>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	61bb      	str	r3, [r7, #24]
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	e7fd      	b.n	800e2e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e2ea:	f000 fe6d 	bl	800efc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e2f4:	6a3b      	ldr	r3, [r7, #32]
 800e2f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e304:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	2202      	movs	r2, #2
 800e30a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	2b04      	cmp	r3, #4
 800e312:	d82e      	bhi.n	800e372 <xTaskGenericNotify+0xbe>
 800e314:	a201      	add	r2, pc, #4	@ (adr r2, 800e31c <xTaskGenericNotify+0x68>)
 800e316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31a:	bf00      	nop
 800e31c:	0800e397 	.word	0x0800e397
 800e320:	0800e331 	.word	0x0800e331
 800e324:	0800e343 	.word	0x0800e343
 800e328:	0800e353 	.word	0x0800e353
 800e32c:	0800e35d 	.word	0x0800e35d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	431a      	orrs	r2, r3
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800e340:	e02c      	b.n	800e39c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e348:	1c5a      	adds	r2, r3, #1
 800e34a:	6a3b      	ldr	r3, [r7, #32]
 800e34c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800e350:	e024      	b.n	800e39c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800e35a:	e01f      	b.n	800e39c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e35c:	7ffb      	ldrb	r3, [r7, #31]
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d004      	beq.n	800e36c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	68ba      	ldr	r2, [r7, #8]
 800e366:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e36a:	e017      	b.n	800e39c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800e36c:	2300      	movs	r3, #0
 800e36e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800e370:	e014      	b.n	800e39c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e378:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e37c:	d00d      	beq.n	800e39a <xTaskGenericNotify+0xe6>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	617b      	str	r3, [r7, #20]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <xTaskGenericNotify+0xde>
					break;
 800e396:	bf00      	nop
 800e398:	e000      	b.n	800e39c <xTaskGenericNotify+0xe8>

					break;
 800e39a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e39c:	7ffb      	ldrb	r3, [r7, #31]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d13b      	bne.n	800e41a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a2:	6a3b      	ldr	r3, [r7, #32]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd feb2 	bl	800c110 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e428 <xTaskGenericNotify+0x174>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d903      	bls.n	800e3c0 <xTaskGenericNotify+0x10c>
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3bc:	4a1a      	ldr	r2, [pc, #104]	@ (800e428 <xTaskGenericNotify+0x174>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4a17      	ldr	r2, [pc, #92]	@ (800e42c <xTaskGenericNotify+0x178>)
 800e3ce:	441a      	add	r2, r3
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7fd fe3d 	bl	800c056 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e3dc:	6a3b      	ldr	r3, [r7, #32]
 800e3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00b      	beq.n	800e3fc <xTaskGenericNotify+0x148>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e8:	f383 8811 	msr	BASEPRI, r3
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	613b      	str	r3, [r7, #16]
}
 800e3f6:	bf00      	nop
 800e3f8:	bf00      	nop
 800e3fa:	e7fd      	b.n	800e3f8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e400:	4b0b      	ldr	r3, [pc, #44]	@ (800e430 <xTaskGenericNotify+0x17c>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e406:	429a      	cmp	r2, r3
 800e408:	d907      	bls.n	800e41a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e40a:	4b0a      	ldr	r3, [pc, #40]	@ (800e434 <xTaskGenericNotify+0x180>)
 800e40c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e41a:	f000 fe07 	bl	800f02c <vPortExitCritical>

		return xReturn;
 800e41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e420:	4618      	mov	r0, r3
 800e422:	3728      	adds	r7, #40	@ 0x28
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	20003518 	.word	0x20003518
 800e42c:	20003040 	.word	0x20003040
 800e430:	2000303c 	.word	0x2000303c
 800e434:	e000ed04 	.word	0xe000ed04

0800e438 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08e      	sub	sp, #56	@ 0x38
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	4613      	mov	r3, r2
 800e446:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e448:	2301      	movs	r3, #1
 800e44a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10b      	bne.n	800e46a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop
 800e468:	e7fd      	b.n	800e466 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e46a:	f000 fe8d 	bl	800f188 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800e472:	f3ef 8211 	mrs	r2, BASEPRI
 800e476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e47a:	f383 8811 	msr	BASEPRI, r3
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	623a      	str	r2, [r7, #32]
 800e488:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e48a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d004      	beq.n	800e49e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e496:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a0:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e4a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800e4b0:	79fb      	ldrb	r3, [r7, #7]
 800e4b2:	2b04      	cmp	r3, #4
 800e4b4:	d82e      	bhi.n	800e514 <xTaskGenericNotifyFromISR+0xdc>
 800e4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4bc <xTaskGenericNotifyFromISR+0x84>)
 800e4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4bc:	0800e539 	.word	0x0800e539
 800e4c0:	0800e4d1 	.word	0x0800e4d1
 800e4c4:	0800e4e3 	.word	0x0800e4e3
 800e4c8:	0800e4f3 	.word	0x0800e4f3
 800e4cc:	0800e4fd 	.word	0x0800e4fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	431a      	orrs	r2, r3
 800e4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800e4e0:	e02d      	b.n	800e53e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800e4f0:	e025      	b.n	800e53e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f4:	68ba      	ldr	r2, [r7, #8]
 800e4f6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800e4fa:	e020      	b.n	800e53e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e4fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e500:	2b02      	cmp	r3, #2
 800e502:	d004      	beq.n	800e50e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e50c:	e017      	b.n	800e53e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800e50e:	2300      	movs	r3, #0
 800e510:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800e512:	e014      	b.n	800e53e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e51a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e51e:	d00d      	beq.n	800e53c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	61bb      	str	r3, [r7, #24]
}
 800e532:	bf00      	nop
 800e534:	bf00      	nop
 800e536:	e7fd      	b.n	800e534 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800e538:	bf00      	nop
 800e53a:	e000      	b.n	800e53e <xTaskGenericNotifyFromISR+0x106>
					break;
 800e53c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e53e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e542:	2b01      	cmp	r3, #1
 800e544:	d147      	bne.n	800e5d6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00b      	beq.n	800e566 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	617b      	str	r3, [r7, #20]
}
 800e560:	bf00      	nop
 800e562:	bf00      	nop
 800e564:	e7fd      	b.n	800e562 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e566:	4b21      	ldr	r3, [pc, #132]	@ (800e5ec <xTaskGenericNotifyFromISR+0x1b4>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d11d      	bne.n	800e5aa <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e570:	3304      	adds	r3, #4
 800e572:	4618      	mov	r0, r3
 800e574:	f7fd fdcc 	bl	800c110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e57c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	429a      	cmp	r2, r3
 800e582:	d903      	bls.n	800e58c <xTaskGenericNotifyFromISR+0x154>
 800e584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e588:	4a19      	ldr	r2, [pc, #100]	@ (800e5f0 <xTaskGenericNotifyFromISR+0x1b8>)
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e590:	4613      	mov	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4a16      	ldr	r2, [pc, #88]	@ (800e5f4 <xTaskGenericNotifyFromISR+0x1bc>)
 800e59a:	441a      	add	r2, r3
 800e59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7fd fd57 	bl	800c056 <vListInsertEnd>
 800e5a8:	e005      	b.n	800e5b6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ac:	3318      	adds	r3, #24
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	4811      	ldr	r0, [pc, #68]	@ (800e5f8 <xTaskGenericNotifyFromISR+0x1c0>)
 800e5b2:	f7fd fd50 	bl	800c056 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ba:	4b10      	ldr	r3, [pc, #64]	@ (800e5fc <xTaskGenericNotifyFromISR+0x1c4>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d908      	bls.n	800e5d6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e5c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d002      	beq.n	800e5d0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e5ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e600 <xTaskGenericNotifyFromISR+0x1c8>)
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	601a      	str	r2, [r3, #0]
 800e5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	f383 8811 	msr	BASEPRI, r3
}
 800e5e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3738      	adds	r7, #56	@ 0x38
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20003538 	.word	0x20003538
 800e5f0:	20003518 	.word	0x20003518
 800e5f4:	20003040 	.word	0x20003040
 800e5f8:	200034d0 	.word	0x200034d0
 800e5fc:	2000303c 	.word	0x2000303c
 800e600:	20003524 	.word	0x20003524

0800e604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e60e:	4b21      	ldr	r3, [pc, #132]	@ (800e694 <prvAddCurrentTaskToDelayedList+0x90>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e614:	4b20      	ldr	r3, [pc, #128]	@ (800e698 <prvAddCurrentTaskToDelayedList+0x94>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3304      	adds	r3, #4
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fd fd78 	bl	800c110 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e626:	d10a      	bne.n	800e63e <prvAddCurrentTaskToDelayedList+0x3a>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d007      	beq.n	800e63e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e62e:	4b1a      	ldr	r3, [pc, #104]	@ (800e698 <prvAddCurrentTaskToDelayedList+0x94>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3304      	adds	r3, #4
 800e634:	4619      	mov	r1, r3
 800e636:	4819      	ldr	r0, [pc, #100]	@ (800e69c <prvAddCurrentTaskToDelayedList+0x98>)
 800e638:	f7fd fd0d 	bl	800c056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e63c:	e026      	b.n	800e68c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4413      	add	r3, r2
 800e644:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e646:	4b14      	ldr	r3, [pc, #80]	@ (800e698 <prvAddCurrentTaskToDelayedList+0x94>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	429a      	cmp	r2, r3
 800e654:	d209      	bcs.n	800e66a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e656:	4b12      	ldr	r3, [pc, #72]	@ (800e6a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	4b0f      	ldr	r3, [pc, #60]	@ (800e698 <prvAddCurrentTaskToDelayedList+0x94>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	3304      	adds	r3, #4
 800e660:	4619      	mov	r1, r3
 800e662:	4610      	mov	r0, r2
 800e664:	f7fd fd1b 	bl	800c09e <vListInsert>
}
 800e668:	e010      	b.n	800e68c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e66a:	4b0e      	ldr	r3, [pc, #56]	@ (800e6a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	4b0a      	ldr	r3, [pc, #40]	@ (800e698 <prvAddCurrentTaskToDelayedList+0x94>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	3304      	adds	r3, #4
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	f7fd fd11 	bl	800c09e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e67c:	4b0a      	ldr	r3, [pc, #40]	@ (800e6a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	429a      	cmp	r2, r3
 800e684:	d202      	bcs.n	800e68c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e686:	4a08      	ldr	r2, [pc, #32]	@ (800e6a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	6013      	str	r3, [r2, #0]
}
 800e68c:	bf00      	nop
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	20003514 	.word	0x20003514
 800e698:	2000303c 	.word	0x2000303c
 800e69c:	200034fc 	.word	0x200034fc
 800e6a0:	200034cc 	.word	0x200034cc
 800e6a4:	200034c8 	.word	0x200034c8
 800e6a8:	20003530 	.word	0x20003530

0800e6ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b08a      	sub	sp, #40	@ 0x28
 800e6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e6b6:	f000 fb13 	bl	800ece0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e730 <xTimerCreateTimerTask+0x84>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d021      	beq.n	800e706 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e6ca:	1d3a      	adds	r2, r7, #4
 800e6cc:	f107 0108 	add.w	r1, r7, #8
 800e6d0:	f107 030c 	add.w	r3, r7, #12
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fd fc77 	bl	800bfc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e6da:	6879      	ldr	r1, [r7, #4]
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	9202      	str	r2, [sp, #8]
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	2302      	movs	r3, #2
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	460a      	mov	r2, r1
 800e6ec:	4911      	ldr	r1, [pc, #68]	@ (800e734 <xTimerCreateTimerTask+0x88>)
 800e6ee:	4812      	ldr	r0, [pc, #72]	@ (800e738 <xTimerCreateTimerTask+0x8c>)
 800e6f0:	f7fe faf0 	bl	800ccd4 <xTaskCreateStatic>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	4a11      	ldr	r2, [pc, #68]	@ (800e73c <xTimerCreateTimerTask+0x90>)
 800e6f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e6fa:	4b10      	ldr	r3, [pc, #64]	@ (800e73c <xTimerCreateTimerTask+0x90>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e702:	2301      	movs	r3, #1
 800e704:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10b      	bne.n	800e724 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e710:	f383 8811 	msr	BASEPRI, r3
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	613b      	str	r3, [r7, #16]
}
 800e71e:	bf00      	nop
 800e720:	bf00      	nop
 800e722:	e7fd      	b.n	800e720 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e724:	697b      	ldr	r3, [r7, #20]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3718      	adds	r7, #24
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20003574 	.word	0x20003574
 800e734:	08010720 	.word	0x08010720
 800e738:	0800e879 	.word	0x0800e879
 800e73c:	20003578 	.word	0x20003578

0800e740 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b08a      	sub	sp, #40	@ 0x28
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
 800e74c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e74e:	2300      	movs	r3, #0
 800e750:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10b      	bne.n	800e770 <xTimerGenericCommand+0x30>
	__asm volatile
 800e758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75c:	f383 8811 	msr	BASEPRI, r3
 800e760:	f3bf 8f6f 	isb	sy
 800e764:	f3bf 8f4f 	dsb	sy
 800e768:	623b      	str	r3, [r7, #32]
}
 800e76a:	bf00      	nop
 800e76c:	bf00      	nop
 800e76e:	e7fd      	b.n	800e76c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e770:	4b19      	ldr	r3, [pc, #100]	@ (800e7d8 <xTimerGenericCommand+0x98>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d02a      	beq.n	800e7ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2b05      	cmp	r3, #5
 800e788:	dc18      	bgt.n	800e7bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e78a:	f7ff fb65 	bl	800de58 <xTaskGetSchedulerState>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b02      	cmp	r3, #2
 800e792:	d109      	bne.n	800e7a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e794:	4b10      	ldr	r3, [pc, #64]	@ (800e7d8 <xTimerGenericCommand+0x98>)
 800e796:	6818      	ldr	r0, [r3, #0]
 800e798:	f107 0110 	add.w	r1, r7, #16
 800e79c:	2300      	movs	r3, #0
 800e79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7a0:	f7fd fe26 	bl	800c3f0 <xQueueGenericSend>
 800e7a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7a6:	e012      	b.n	800e7ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e7a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e7d8 <xTimerGenericCommand+0x98>)
 800e7aa:	6818      	ldr	r0, [r3, #0]
 800e7ac:	f107 0110 	add.w	r1, r7, #16
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f7fd fe1c 	bl	800c3f0 <xQueueGenericSend>
 800e7b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7ba:	e008      	b.n	800e7ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7bc:	4b06      	ldr	r3, [pc, #24]	@ (800e7d8 <xTimerGenericCommand+0x98>)
 800e7be:	6818      	ldr	r0, [r3, #0]
 800e7c0:	f107 0110 	add.w	r1, r7, #16
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	683a      	ldr	r2, [r7, #0]
 800e7c8:	f7fd ff14 	bl	800c5f4 <xQueueGenericSendFromISR>
 800e7cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3728      	adds	r7, #40	@ 0x28
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	20003574 	.word	0x20003574

0800e7dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b088      	sub	sp, #32
 800e7e0:	af02      	add	r7, sp, #8
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e6:	4b23      	ldr	r3, [pc, #140]	@ (800e874 <prvProcessExpiredTimer+0x98>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fd fc8b 	bl	800c110 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e800:	f003 0304 	and.w	r3, r3, #4
 800e804:	2b00      	cmp	r3, #0
 800e806:	d023      	beq.n	800e850 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	699a      	ldr	r2, [r3, #24]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	18d1      	adds	r1, r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	6978      	ldr	r0, [r7, #20]
 800e816:	f000 f8d5 	bl	800e9c4 <prvInsertTimerInActiveList>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d020      	beq.n	800e862 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e820:	2300      	movs	r3, #0
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	2300      	movs	r3, #0
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	2100      	movs	r1, #0
 800e82a:	6978      	ldr	r0, [r7, #20]
 800e82c:	f7ff ff88 	bl	800e740 <xTimerGenericCommand>
 800e830:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d114      	bne.n	800e862 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	60fb      	str	r3, [r7, #12]
}
 800e84a:	bf00      	nop
 800e84c:	bf00      	nop
 800e84e:	e7fd      	b.n	800e84c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e856:	f023 0301 	bic.w	r3, r3, #1
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	4798      	blx	r3
}
 800e86a:	bf00      	nop
 800e86c:	3718      	adds	r7, #24
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000356c 	.word	0x2000356c

0800e878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e880:	f107 0308 	add.w	r3, r7, #8
 800e884:	4618      	mov	r0, r3
 800e886:	f000 f859 	bl	800e93c <prvGetNextExpireTime>
 800e88a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	4619      	mov	r1, r3
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f000 f805 	bl	800e8a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e896:	f000 f8d7 	bl	800ea48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e89a:	bf00      	nop
 800e89c:	e7f0      	b.n	800e880 <prvTimerTask+0x8>
	...

0800e8a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e8aa:	f7fe fd5d 	bl	800d368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8ae:	f107 0308 	add.w	r3, r7, #8
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 f866 	bl	800e984 <prvSampleTimeNow>
 800e8b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d130      	bne.n	800e922 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10a      	bne.n	800e8dc <prvProcessTimerOrBlockTask+0x3c>
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d806      	bhi.n	800e8dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e8ce:	f7fe fd59 	bl	800d384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e8d2:	68f9      	ldr	r1, [r7, #12]
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff ff81 	bl	800e7dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e8da:	e024      	b.n	800e926 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d008      	beq.n	800e8f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e8e2:	4b13      	ldr	r3, [pc, #76]	@ (800e930 <prvProcessTimerOrBlockTask+0x90>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <prvProcessTimerOrBlockTask+0x50>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e000      	b.n	800e8f2 <prvProcessTimerOrBlockTask+0x52>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e934 <prvProcessTimerOrBlockTask+0x94>)
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	1ad3      	subs	r3, r2, r3
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	4619      	mov	r1, r3
 800e902:	f7fe f9b3 	bl	800cc6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e906:	f7fe fd3d 	bl	800d384 <xTaskResumeAll>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10a      	bne.n	800e926 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e910:	4b09      	ldr	r3, [pc, #36]	@ (800e938 <prvProcessTimerOrBlockTask+0x98>)
 800e912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e916:	601a      	str	r2, [r3, #0]
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	f3bf 8f6f 	isb	sy
}
 800e920:	e001      	b.n	800e926 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e922:	f7fe fd2f 	bl	800d384 <xTaskResumeAll>
}
 800e926:	bf00      	nop
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20003570 	.word	0x20003570
 800e934:	20003574 	.word	0x20003574
 800e938:	e000ed04 	.word	0xe000ed04

0800e93c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e93c:	b480      	push	{r7}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e944:	4b0e      	ldr	r3, [pc, #56]	@ (800e980 <prvGetNextExpireTime+0x44>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <prvGetNextExpireTime+0x16>
 800e94e:	2201      	movs	r2, #1
 800e950:	e000      	b.n	800e954 <prvGetNextExpireTime+0x18>
 800e952:	2200      	movs	r2, #0
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d105      	bne.n	800e96c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e960:	4b07      	ldr	r3, [pc, #28]	@ (800e980 <prvGetNextExpireTime+0x44>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	60fb      	str	r3, [r7, #12]
 800e96a:	e001      	b.n	800e970 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e96c:	2300      	movs	r3, #0
 800e96e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e970:	68fb      	ldr	r3, [r7, #12]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3714      	adds	r7, #20
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	2000356c 	.word	0x2000356c

0800e984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e98c:	f7fe fd98 	bl	800d4c0 <xTaskGetTickCount>
 800e990:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e992:	4b0b      	ldr	r3, [pc, #44]	@ (800e9c0 <prvSampleTimeNow+0x3c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d205      	bcs.n	800e9a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e99c:	f000 f93a 	bl	800ec14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	601a      	str	r2, [r3, #0]
 800e9a6:	e002      	b.n	800e9ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e9ae:	4a04      	ldr	r2, [pc, #16]	@ (800e9c0 <prvSampleTimeNow+0x3c>)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	2000357c 	.word	0x2000357c

0800e9c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	68ba      	ldr	r2, [r7, #8]
 800e9da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d812      	bhi.n	800ea10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	699b      	ldr	r3, [r3, #24]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d302      	bcc.n	800e9fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	e01b      	b.n	800ea36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e9fe:	4b10      	ldr	r3, [pc, #64]	@ (800ea40 <prvInsertTimerInActiveList+0x7c>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	3304      	adds	r3, #4
 800ea06:	4619      	mov	r1, r3
 800ea08:	4610      	mov	r0, r2
 800ea0a:	f7fd fb48 	bl	800c09e <vListInsert>
 800ea0e:	e012      	b.n	800ea36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d206      	bcs.n	800ea26 <prvInsertTimerInActiveList+0x62>
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d302      	bcc.n	800ea26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ea20:	2301      	movs	r3, #1
 800ea22:	617b      	str	r3, [r7, #20]
 800ea24:	e007      	b.n	800ea36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea26:	4b07      	ldr	r3, [pc, #28]	@ (800ea44 <prvInsertTimerInActiveList+0x80>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	4619      	mov	r1, r3
 800ea30:	4610      	mov	r0, r2
 800ea32:	f7fd fb34 	bl	800c09e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ea36:	697b      	ldr	r3, [r7, #20]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3718      	adds	r7, #24
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	20003570 	.word	0x20003570
 800ea44:	2000356c 	.word	0x2000356c

0800ea48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b08e      	sub	sp, #56	@ 0x38
 800ea4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea4e:	e0ce      	b.n	800ebee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	da19      	bge.n	800ea8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ea56:	1d3b      	adds	r3, r7, #4
 800ea58:	3304      	adds	r3, #4
 800ea5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ea62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea66:	f383 8811 	msr	BASEPRI, r3
 800ea6a:	f3bf 8f6f 	isb	sy
 800ea6e:	f3bf 8f4f 	dsb	sy
 800ea72:	61fb      	str	r3, [r7, #28]
}
 800ea74:	bf00      	nop
 800ea76:	bf00      	nop
 800ea78:	e7fd      	b.n	800ea76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea80:	6850      	ldr	r0, [r2, #4]
 800ea82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea84:	6892      	ldr	r2, [r2, #8]
 800ea86:	4611      	mov	r1, r2
 800ea88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f2c0 80ae 	blt.w	800ebee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d004      	beq.n	800eaa8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fd fb34 	bl	800c110 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eaa8:	463b      	mov	r3, r7
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff ff6a 	bl	800e984 <prvSampleTimeNow>
 800eab0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b09      	cmp	r3, #9
 800eab6:	f200 8097 	bhi.w	800ebe8 <prvProcessReceivedCommands+0x1a0>
 800eaba:	a201      	add	r2, pc, #4	@ (adr r2, 800eac0 <prvProcessReceivedCommands+0x78>)
 800eabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac0:	0800eae9 	.word	0x0800eae9
 800eac4:	0800eae9 	.word	0x0800eae9
 800eac8:	0800eae9 	.word	0x0800eae9
 800eacc:	0800eb5f 	.word	0x0800eb5f
 800ead0:	0800eb73 	.word	0x0800eb73
 800ead4:	0800ebbf 	.word	0x0800ebbf
 800ead8:	0800eae9 	.word	0x0800eae9
 800eadc:	0800eae9 	.word	0x0800eae9
 800eae0:	0800eb5f 	.word	0x0800eb5f
 800eae4:	0800eb73 	.word	0x0800eb73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eaee:	f043 0301 	orr.w	r3, r3, #1
 800eaf2:	b2da      	uxtb	r2, r3
 800eaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eafa:	68ba      	ldr	r2, [r7, #8]
 800eafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	18d1      	adds	r1, r2, r3
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb08:	f7ff ff5c 	bl	800e9c4 <prvInsertTimerInActiveList>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d06c      	beq.n	800ebec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d061      	beq.n	800ebec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	441a      	add	r2, r3
 800eb30:	2300      	movs	r3, #0
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	2300      	movs	r3, #0
 800eb36:	2100      	movs	r1, #0
 800eb38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb3a:	f7ff fe01 	bl	800e740 <xTimerGenericCommand>
 800eb3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb40:	6a3b      	ldr	r3, [r7, #32]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d152      	bne.n	800ebec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb4a:	f383 8811 	msr	BASEPRI, r3
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	61bb      	str	r3, [r7, #24]
}
 800eb58:	bf00      	nop
 800eb5a:	bf00      	nop
 800eb5c:	e7fd      	b.n	800eb5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb64:	f023 0301 	bic.w	r3, r3, #1
 800eb68:	b2da      	uxtb	r2, r3
 800eb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb70:	e03d      	b.n	800ebee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb78:	f043 0301 	orr.w	r3, r3, #1
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10b      	bne.n	800ebaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	617b      	str	r3, [r7, #20]
}
 800eba4:	bf00      	nop
 800eba6:	bf00      	nop
 800eba8:	e7fd      	b.n	800eba6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ebaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb0:	18d1      	adds	r1, r2, r3
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebb8:	f7ff ff04 	bl	800e9c4 <prvInsertTimerInActiveList>
					break;
 800ebbc:	e017      	b.n	800ebee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ebbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebc4:	f003 0302 	and.w	r3, r3, #2
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d103      	bne.n	800ebd4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ebcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebce:	f000 fbeb 	bl	800f3a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ebd2:	e00c      	b.n	800ebee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebda:	f023 0301 	bic.w	r3, r3, #1
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ebe6:	e002      	b.n	800ebee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ebe8:	bf00      	nop
 800ebea:	e000      	b.n	800ebee <prvProcessReceivedCommands+0x1a6>
					break;
 800ebec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebee:	4b08      	ldr	r3, [pc, #32]	@ (800ec10 <prvProcessReceivedCommands+0x1c8>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	1d39      	adds	r1, r7, #4
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fd fd9a 	bl	800c730 <xQueueReceive>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f47f af26 	bne.w	800ea50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ec04:	bf00      	nop
 800ec06:	bf00      	nop
 800ec08:	3730      	adds	r7, #48	@ 0x30
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20003574 	.word	0x20003574

0800ec14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec1a:	e049      	b.n	800ecb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec1c:	4b2e      	ldr	r3, [pc, #184]	@ (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec26:	4b2c      	ldr	r3, [pc, #176]	@ (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3304      	adds	r3, #4
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fd fa6b 	bl	800c110 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6a1b      	ldr	r3, [r3, #32]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d02f      	beq.n	800ecb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	693a      	ldr	r2, [r7, #16]
 800ec56:	4413      	add	r3, r2
 800ec58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d90e      	bls.n	800ec80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4619      	mov	r1, r3
 800ec78:	4610      	mov	r0, r2
 800ec7a:	f7fd fa10 	bl	800c09e <vListInsert>
 800ec7e:	e017      	b.n	800ecb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec80:	2300      	movs	r3, #0
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	2300      	movs	r3, #0
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	2100      	movs	r1, #0
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f7ff fd58 	bl	800e740 <xTimerGenericCommand>
 800ec90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10b      	bne.n	800ecb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ec98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9c:	f383 8811 	msr	BASEPRI, r3
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	603b      	str	r3, [r7, #0]
}
 800ecaa:	bf00      	nop
 800ecac:	bf00      	nop
 800ecae:	e7fd      	b.n	800ecac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecb0:	4b09      	ldr	r3, [pc, #36]	@ (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d1b0      	bne.n	800ec1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ecba:	4b07      	ldr	r3, [pc, #28]	@ (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ecc0:	4b06      	ldr	r3, [pc, #24]	@ (800ecdc <prvSwitchTimerLists+0xc8>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4a04      	ldr	r2, [pc, #16]	@ (800ecd8 <prvSwitchTimerLists+0xc4>)
 800ecc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ecc8:	4a04      	ldr	r2, [pc, #16]	@ (800ecdc <prvSwitchTimerLists+0xc8>)
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	6013      	str	r3, [r2, #0]
}
 800ecce:	bf00      	nop
 800ecd0:	3718      	adds	r7, #24
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	2000356c 	.word	0x2000356c
 800ecdc:	20003570 	.word	0x20003570

0800ece0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ece6:	f000 f96f 	bl	800efc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ecea:	4b15      	ldr	r3, [pc, #84]	@ (800ed40 <prvCheckForValidListAndQueue+0x60>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d120      	bne.n	800ed34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ecf2:	4814      	ldr	r0, [pc, #80]	@ (800ed44 <prvCheckForValidListAndQueue+0x64>)
 800ecf4:	f7fd f982 	bl	800bffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ecf8:	4813      	ldr	r0, [pc, #76]	@ (800ed48 <prvCheckForValidListAndQueue+0x68>)
 800ecfa:	f7fd f97f 	bl	800bffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ecfe:	4b13      	ldr	r3, [pc, #76]	@ (800ed4c <prvCheckForValidListAndQueue+0x6c>)
 800ed00:	4a10      	ldr	r2, [pc, #64]	@ (800ed44 <prvCheckForValidListAndQueue+0x64>)
 800ed02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed04:	4b12      	ldr	r3, [pc, #72]	@ (800ed50 <prvCheckForValidListAndQueue+0x70>)
 800ed06:	4a10      	ldr	r2, [pc, #64]	@ (800ed48 <prvCheckForValidListAndQueue+0x68>)
 800ed08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	4b11      	ldr	r3, [pc, #68]	@ (800ed54 <prvCheckForValidListAndQueue+0x74>)
 800ed10:	4a11      	ldr	r2, [pc, #68]	@ (800ed58 <prvCheckForValidListAndQueue+0x78>)
 800ed12:	2110      	movs	r1, #16
 800ed14:	200a      	movs	r0, #10
 800ed16:	f7fd fa8f 	bl	800c238 <xQueueGenericCreateStatic>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	4a08      	ldr	r2, [pc, #32]	@ (800ed40 <prvCheckForValidListAndQueue+0x60>)
 800ed1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed20:	4b07      	ldr	r3, [pc, #28]	@ (800ed40 <prvCheckForValidListAndQueue+0x60>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d005      	beq.n	800ed34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed28:	4b05      	ldr	r3, [pc, #20]	@ (800ed40 <prvCheckForValidListAndQueue+0x60>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	490b      	ldr	r1, [pc, #44]	@ (800ed5c <prvCheckForValidListAndQueue+0x7c>)
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fd ff72 	bl	800cc18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed34:	f000 f97a 	bl	800f02c <vPortExitCritical>
}
 800ed38:	bf00      	nop
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	20003574 	.word	0x20003574
 800ed44:	20003544 	.word	0x20003544
 800ed48:	20003558 	.word	0x20003558
 800ed4c:	2000356c 	.word	0x2000356c
 800ed50:	20003570 	.word	0x20003570
 800ed54:	20003620 	.word	0x20003620
 800ed58:	20003580 	.word	0x20003580
 800ed5c:	08010728 	.word	0x08010728

0800ed60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	3b04      	subs	r3, #4
 800ed70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ed78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	3b04      	subs	r3, #4
 800ed7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f023 0201 	bic.w	r2, r3, #1
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3b04      	subs	r3, #4
 800ed8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed90:	4a0c      	ldr	r2, [pc, #48]	@ (800edc4 <pxPortInitialiseStack+0x64>)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	3b14      	subs	r3, #20
 800ed9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	3b04      	subs	r3, #4
 800eda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f06f 0202 	mvn.w	r2, #2
 800edae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3b20      	subs	r3, #32
 800edb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800edb6:	68fb      	ldr	r3, [r7, #12]
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	0800edc9 	.word	0x0800edc9

0800edc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	b085      	sub	sp, #20
 800edcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800edd2:	4b13      	ldr	r3, [pc, #76]	@ (800ee20 <prvTaskExitError+0x58>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800edda:	d00b      	beq.n	800edf4 <prvTaskExitError+0x2c>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	60fb      	str	r3, [r7, #12]
}
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	e7fd      	b.n	800edf0 <prvTaskExitError+0x28>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	60bb      	str	r3, [r7, #8]
}
 800ee06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee08:	bf00      	nop
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d0fc      	beq.n	800ee0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	3714      	adds	r7, #20
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	2000003c 	.word	0x2000003c
	...

0800ee30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee30:	4b07      	ldr	r3, [pc, #28]	@ (800ee50 <pxCurrentTCBConst2>)
 800ee32:	6819      	ldr	r1, [r3, #0]
 800ee34:	6808      	ldr	r0, [r1, #0]
 800ee36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3a:	f380 8809 	msr	PSP, r0
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f04f 0000 	mov.w	r0, #0
 800ee46:	f380 8811 	msr	BASEPRI, r0
 800ee4a:	4770      	bx	lr
 800ee4c:	f3af 8000 	nop.w

0800ee50 <pxCurrentTCBConst2>:
 800ee50:	2000303c 	.word	0x2000303c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop

0800ee58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee58:	4808      	ldr	r0, [pc, #32]	@ (800ee7c <prvPortStartFirstTask+0x24>)
 800ee5a:	6800      	ldr	r0, [r0, #0]
 800ee5c:	6800      	ldr	r0, [r0, #0]
 800ee5e:	f380 8808 	msr	MSP, r0
 800ee62:	f04f 0000 	mov.w	r0, #0
 800ee66:	f380 8814 	msr	CONTROL, r0
 800ee6a:	b662      	cpsie	i
 800ee6c:	b661      	cpsie	f
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	df00      	svc	0
 800ee78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee7a:	bf00      	nop
 800ee7c:	e000ed08 	.word	0xe000ed08

0800ee80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ee86:	4b47      	ldr	r3, [pc, #284]	@ (800efa4 <xPortStartScheduler+0x124>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a47      	ldr	r2, [pc, #284]	@ (800efa8 <xPortStartScheduler+0x128>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d10b      	bne.n	800eea8 <xPortStartScheduler+0x28>
	__asm volatile
 800ee90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee94:	f383 8811 	msr	BASEPRI, r3
 800ee98:	f3bf 8f6f 	isb	sy
 800ee9c:	f3bf 8f4f 	dsb	sy
 800eea0:	613b      	str	r3, [r7, #16]
}
 800eea2:	bf00      	nop
 800eea4:	bf00      	nop
 800eea6:	e7fd      	b.n	800eea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eea8:	4b3e      	ldr	r3, [pc, #248]	@ (800efa4 <xPortStartScheduler+0x124>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a3f      	ldr	r2, [pc, #252]	@ (800efac <xPortStartScheduler+0x12c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d10b      	bne.n	800eeca <xPortStartScheduler+0x4a>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	60fb      	str	r3, [r7, #12]
}
 800eec4:	bf00      	nop
 800eec6:	bf00      	nop
 800eec8:	e7fd      	b.n	800eec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eeca:	4b39      	ldr	r3, [pc, #228]	@ (800efb0 <xPortStartScheduler+0x130>)
 800eecc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	22ff      	movs	r2, #255	@ 0xff
 800eeda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eee4:	78fb      	ldrb	r3, [r7, #3]
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	4b31      	ldr	r3, [pc, #196]	@ (800efb4 <xPortStartScheduler+0x134>)
 800eef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eef2:	4b31      	ldr	r3, [pc, #196]	@ (800efb8 <xPortStartScheduler+0x138>)
 800eef4:	2207      	movs	r2, #7
 800eef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eef8:	e009      	b.n	800ef0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800eefa:	4b2f      	ldr	r3, [pc, #188]	@ (800efb8 <xPortStartScheduler+0x138>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	3b01      	subs	r3, #1
 800ef00:	4a2d      	ldr	r2, [pc, #180]	@ (800efb8 <xPortStartScheduler+0x138>)
 800ef02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef04:	78fb      	ldrb	r3, [r7, #3]
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef0e:	78fb      	ldrb	r3, [r7, #3]
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef16:	2b80      	cmp	r3, #128	@ 0x80
 800ef18:	d0ef      	beq.n	800eefa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef1a:	4b27      	ldr	r3, [pc, #156]	@ (800efb8 <xPortStartScheduler+0x138>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f1c3 0307 	rsb	r3, r3, #7
 800ef22:	2b04      	cmp	r3, #4
 800ef24:	d00b      	beq.n	800ef3e <xPortStartScheduler+0xbe>
	__asm volatile
 800ef26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef2a:	f383 8811 	msr	BASEPRI, r3
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	60bb      	str	r3, [r7, #8]
}
 800ef38:	bf00      	nop
 800ef3a:	bf00      	nop
 800ef3c:	e7fd      	b.n	800ef3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef3e:	4b1e      	ldr	r3, [pc, #120]	@ (800efb8 <xPortStartScheduler+0x138>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	021b      	lsls	r3, r3, #8
 800ef44:	4a1c      	ldr	r2, [pc, #112]	@ (800efb8 <xPortStartScheduler+0x138>)
 800ef46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef48:	4b1b      	ldr	r3, [pc, #108]	@ (800efb8 <xPortStartScheduler+0x138>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ef50:	4a19      	ldr	r2, [pc, #100]	@ (800efb8 <xPortStartScheduler+0x138>)
 800ef52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef5c:	4b17      	ldr	r3, [pc, #92]	@ (800efbc <xPortStartScheduler+0x13c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a16      	ldr	r2, [pc, #88]	@ (800efbc <xPortStartScheduler+0x13c>)
 800ef62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef68:	4b14      	ldr	r3, [pc, #80]	@ (800efbc <xPortStartScheduler+0x13c>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a13      	ldr	r2, [pc, #76]	@ (800efbc <xPortStartScheduler+0x13c>)
 800ef6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ef72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef74:	f000 f8da 	bl	800f12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef78:	4b11      	ldr	r3, [pc, #68]	@ (800efc0 <xPortStartScheduler+0x140>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef7e:	f000 f8f9 	bl	800f174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef82:	4b10      	ldr	r3, [pc, #64]	@ (800efc4 <xPortStartScheduler+0x144>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a0f      	ldr	r2, [pc, #60]	@ (800efc4 <xPortStartScheduler+0x144>)
 800ef88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ef8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef8e:	f7ff ff63 	bl	800ee58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef92:	f7fe fbef 	bl	800d774 <vTaskSwitchContext>
	prvTaskExitError();
 800ef96:	f7ff ff17 	bl	800edc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3718      	adds	r7, #24
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	e000ed00 	.word	0xe000ed00
 800efa8:	410fc271 	.word	0x410fc271
 800efac:	410fc270 	.word	0x410fc270
 800efb0:	e000e400 	.word	0xe000e400
 800efb4:	20003670 	.word	0x20003670
 800efb8:	20003674 	.word	0x20003674
 800efbc:	e000ed20 	.word	0xe000ed20
 800efc0:	2000003c 	.word	0x2000003c
 800efc4:	e000ef34 	.word	0xe000ef34

0800efc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	607b      	str	r3, [r7, #4]
}
 800efe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800efe2:	4b10      	ldr	r3, [pc, #64]	@ (800f024 <vPortEnterCritical+0x5c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	3301      	adds	r3, #1
 800efe8:	4a0e      	ldr	r2, [pc, #56]	@ (800f024 <vPortEnterCritical+0x5c>)
 800efea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800efec:	4b0d      	ldr	r3, [pc, #52]	@ (800f024 <vPortEnterCritical+0x5c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d110      	bne.n	800f016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eff4:	4b0c      	ldr	r3, [pc, #48]	@ (800f028 <vPortEnterCritical+0x60>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00b      	beq.n	800f016 <vPortEnterCritical+0x4e>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	603b      	str	r3, [r7, #0]
}
 800f010:	bf00      	nop
 800f012:	bf00      	nop
 800f014:	e7fd      	b.n	800f012 <vPortEnterCritical+0x4a>
	}
}
 800f016:	bf00      	nop
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	2000003c 	.word	0x2000003c
 800f028:	e000ed04 	.word	0xe000ed04

0800f02c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f032:	4b12      	ldr	r3, [pc, #72]	@ (800f07c <vPortExitCritical+0x50>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10b      	bne.n	800f052 <vPortExitCritical+0x26>
	__asm volatile
 800f03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f03e:	f383 8811 	msr	BASEPRI, r3
 800f042:	f3bf 8f6f 	isb	sy
 800f046:	f3bf 8f4f 	dsb	sy
 800f04a:	607b      	str	r3, [r7, #4]
}
 800f04c:	bf00      	nop
 800f04e:	bf00      	nop
 800f050:	e7fd      	b.n	800f04e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f052:	4b0a      	ldr	r3, [pc, #40]	@ (800f07c <vPortExitCritical+0x50>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3b01      	subs	r3, #1
 800f058:	4a08      	ldr	r2, [pc, #32]	@ (800f07c <vPortExitCritical+0x50>)
 800f05a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f05c:	4b07      	ldr	r3, [pc, #28]	@ (800f07c <vPortExitCritical+0x50>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d105      	bne.n	800f070 <vPortExitCritical+0x44>
 800f064:	2300      	movs	r3, #0
 800f066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	f383 8811 	msr	BASEPRI, r3
}
 800f06e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	2000003c 	.word	0x2000003c

0800f080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f080:	f3ef 8009 	mrs	r0, PSP
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	4b15      	ldr	r3, [pc, #84]	@ (800f0e0 <pxCurrentTCBConst>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	f01e 0f10 	tst.w	lr, #16
 800f090:	bf08      	it	eq
 800f092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09a:	6010      	str	r0, [r2, #0]
 800f09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f0a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f0a4:	f380 8811 	msr	BASEPRI, r0
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f7fe fb60 	bl	800d774 <vTaskSwitchContext>
 800f0b4:	f04f 0000 	mov.w	r0, #0
 800f0b8:	f380 8811 	msr	BASEPRI, r0
 800f0bc:	bc09      	pop	{r0, r3}
 800f0be:	6819      	ldr	r1, [r3, #0]
 800f0c0:	6808      	ldr	r0, [r1, #0]
 800f0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c6:	f01e 0f10 	tst.w	lr, #16
 800f0ca:	bf08      	it	eq
 800f0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f0d0:	f380 8809 	msr	PSP, r0
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	f3af 8000 	nop.w

0800f0e0 <pxCurrentTCBConst>:
 800f0e0:	2000303c 	.word	0x2000303c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop

0800f0e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	607b      	str	r3, [r7, #4]
}
 800f100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f102:	f7fe fa7d 	bl	800d600 <xTaskIncrementTick>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f10c:	4b06      	ldr	r3, [pc, #24]	@ (800f128 <xPortSysTickHandler+0x40>)
 800f10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	2300      	movs	r3, #0
 800f116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	f383 8811 	msr	BASEPRI, r3
}
 800f11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f120:	bf00      	nop
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	e000ed04 	.word	0xe000ed04

0800f12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f12c:	b480      	push	{r7}
 800f12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f130:	4b0b      	ldr	r3, [pc, #44]	@ (800f160 <vPortSetupTimerInterrupt+0x34>)
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f136:	4b0b      	ldr	r3, [pc, #44]	@ (800f164 <vPortSetupTimerInterrupt+0x38>)
 800f138:	2200      	movs	r2, #0
 800f13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f13c:	4b0a      	ldr	r3, [pc, #40]	@ (800f168 <vPortSetupTimerInterrupt+0x3c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a0a      	ldr	r2, [pc, #40]	@ (800f16c <vPortSetupTimerInterrupt+0x40>)
 800f142:	fba2 2303 	umull	r2, r3, r2, r3
 800f146:	099b      	lsrs	r3, r3, #6
 800f148:	4a09      	ldr	r2, [pc, #36]	@ (800f170 <vPortSetupTimerInterrupt+0x44>)
 800f14a:	3b01      	subs	r3, #1
 800f14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f14e:	4b04      	ldr	r3, [pc, #16]	@ (800f160 <vPortSetupTimerInterrupt+0x34>)
 800f150:	2207      	movs	r2, #7
 800f152:	601a      	str	r2, [r3, #0]
}
 800f154:	bf00      	nop
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	e000e010 	.word	0xe000e010
 800f164:	e000e018 	.word	0xe000e018
 800f168:	20000010 	.word	0x20000010
 800f16c:	10624dd3 	.word	0x10624dd3
 800f170:	e000e014 	.word	0xe000e014

0800f174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f184 <vPortEnableVFP+0x10>
 800f178:	6801      	ldr	r1, [r0, #0]
 800f17a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f17e:	6001      	str	r1, [r0, #0]
 800f180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f182:	bf00      	nop
 800f184:	e000ed88 	.word	0xe000ed88

0800f188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f18e:	f3ef 8305 	mrs	r3, IPSR
 800f192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b0f      	cmp	r3, #15
 800f198:	d915      	bls.n	800f1c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f19a:	4a18      	ldr	r2, [pc, #96]	@ (800f1fc <vPortValidateInterruptPriority+0x74>)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	4413      	add	r3, r2
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f1a4:	4b16      	ldr	r3, [pc, #88]	@ (800f200 <vPortValidateInterruptPriority+0x78>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	7afa      	ldrb	r2, [r7, #11]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d20b      	bcs.n	800f1c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b2:	f383 8811 	msr	BASEPRI, r3
 800f1b6:	f3bf 8f6f 	isb	sy
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	607b      	str	r3, [r7, #4]
}
 800f1c0:	bf00      	nop
 800f1c2:	bf00      	nop
 800f1c4:	e7fd      	b.n	800f1c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f204 <vPortValidateInterruptPriority+0x7c>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f208 <vPortValidateInterruptPriority+0x80>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d90b      	bls.n	800f1ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1da:	f383 8811 	msr	BASEPRI, r3
 800f1de:	f3bf 8f6f 	isb	sy
 800f1e2:	f3bf 8f4f 	dsb	sy
 800f1e6:	603b      	str	r3, [r7, #0]
}
 800f1e8:	bf00      	nop
 800f1ea:	bf00      	nop
 800f1ec:	e7fd      	b.n	800f1ea <vPortValidateInterruptPriority+0x62>
	}
 800f1ee:	bf00      	nop
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	e000e3f0 	.word	0xe000e3f0
 800f200:	20003670 	.word	0x20003670
 800f204:	e000ed0c 	.word	0xe000ed0c
 800f208:	20003674 	.word	0x20003674

0800f20c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b08a      	sub	sp, #40	@ 0x28
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f214:	2300      	movs	r3, #0
 800f216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f218:	f7fe f8a6 	bl	800d368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f21c:	4b5c      	ldr	r3, [pc, #368]	@ (800f390 <pvPortMalloc+0x184>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f224:	f000 f930 	bl	800f488 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f228:	4b5a      	ldr	r3, [pc, #360]	@ (800f394 <pvPortMalloc+0x188>)
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4013      	ands	r3, r2
 800f230:	2b00      	cmp	r3, #0
 800f232:	f040 8095 	bne.w	800f360 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d01e      	beq.n	800f27a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f23c:	2208      	movs	r2, #8
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f003 0307 	and.w	r3, r3, #7
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d015      	beq.n	800f27a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f023 0307 	bic.w	r3, r3, #7
 800f254:	3308      	adds	r3, #8
 800f256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f003 0307 	and.w	r3, r3, #7
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00b      	beq.n	800f27a <pvPortMalloc+0x6e>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f266:	f383 8811 	msr	BASEPRI, r3
 800f26a:	f3bf 8f6f 	isb	sy
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	617b      	str	r3, [r7, #20]
}
 800f274:	bf00      	nop
 800f276:	bf00      	nop
 800f278:	e7fd      	b.n	800f276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d06f      	beq.n	800f360 <pvPortMalloc+0x154>
 800f280:	4b45      	ldr	r3, [pc, #276]	@ (800f398 <pvPortMalloc+0x18c>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	429a      	cmp	r2, r3
 800f288:	d86a      	bhi.n	800f360 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f28a:	4b44      	ldr	r3, [pc, #272]	@ (800f39c <pvPortMalloc+0x190>)
 800f28c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f28e:	4b43      	ldr	r3, [pc, #268]	@ (800f39c <pvPortMalloc+0x190>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f294:	e004      	b.n	800f2a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d903      	bls.n	800f2b2 <pvPortMalloc+0xa6>
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1f1      	bne.n	800f296 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f2b2:	4b37      	ldr	r3, [pc, #220]	@ (800f390 <pvPortMalloc+0x184>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d051      	beq.n	800f360 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2bc:	6a3b      	ldr	r3, [r7, #32]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2208      	movs	r2, #8
 800f2c2:	4413      	add	r3, r2
 800f2c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	6a3b      	ldr	r3, [r7, #32]
 800f2cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d0:	685a      	ldr	r2, [r3, #4]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	1ad2      	subs	r2, r2, r3
 800f2d6:	2308      	movs	r3, #8
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d920      	bls.n	800f320 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	f003 0307 	and.w	r3, r3, #7
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00b      	beq.n	800f308 <pvPortMalloc+0xfc>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	613b      	str	r3, [r7, #16]
}
 800f302:	bf00      	nop
 800f304:	bf00      	nop
 800f306:	e7fd      	b.n	800f304 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	1ad2      	subs	r2, r2, r3
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f31a:	69b8      	ldr	r0, [r7, #24]
 800f31c:	f000 f916 	bl	800f54c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f320:	4b1d      	ldr	r3, [pc, #116]	@ (800f398 <pvPortMalloc+0x18c>)
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	4a1b      	ldr	r2, [pc, #108]	@ (800f398 <pvPortMalloc+0x18c>)
 800f32c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f32e:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <pvPortMalloc+0x18c>)
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	4b1b      	ldr	r3, [pc, #108]	@ (800f3a0 <pvPortMalloc+0x194>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	429a      	cmp	r2, r3
 800f338:	d203      	bcs.n	800f342 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f33a:	4b17      	ldr	r3, [pc, #92]	@ (800f398 <pvPortMalloc+0x18c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a18      	ldr	r2, [pc, #96]	@ (800f3a0 <pvPortMalloc+0x194>)
 800f340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	4b13      	ldr	r3, [pc, #76]	@ (800f394 <pvPortMalloc+0x188>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	431a      	orrs	r2, r3
 800f34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f352:	2200      	movs	r2, #0
 800f354:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f356:	4b13      	ldr	r3, [pc, #76]	@ (800f3a4 <pvPortMalloc+0x198>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	3301      	adds	r3, #1
 800f35c:	4a11      	ldr	r2, [pc, #68]	@ (800f3a4 <pvPortMalloc+0x198>)
 800f35e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f360:	f7fe f810 	bl	800d384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	f003 0307 	and.w	r3, r3, #7
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00b      	beq.n	800f386 <pvPortMalloc+0x17a>
	__asm volatile
 800f36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	60fb      	str	r3, [r7, #12]
}
 800f380:	bf00      	nop
 800f382:	bf00      	nop
 800f384:	e7fd      	b.n	800f382 <pvPortMalloc+0x176>
	return pvReturn;
 800f386:	69fb      	ldr	r3, [r7, #28]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3728      	adds	r7, #40	@ 0x28
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	20007280 	.word	0x20007280
 800f394:	20007294 	.word	0x20007294
 800f398:	20007284 	.word	0x20007284
 800f39c:	20007278 	.word	0x20007278
 800f3a0:	20007288 	.word	0x20007288
 800f3a4:	2000728c 	.word	0x2000728c

0800f3a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d04f      	beq.n	800f45a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f3ba:	2308      	movs	r3, #8
 800f3bc:	425b      	negs	r3, r3
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	685a      	ldr	r2, [r3, #4]
 800f3cc:	4b25      	ldr	r3, [pc, #148]	@ (800f464 <vPortFree+0xbc>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4013      	ands	r3, r2
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10b      	bne.n	800f3ee <vPortFree+0x46>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	60fb      	str	r3, [r7, #12]
}
 800f3e8:	bf00      	nop
 800f3ea:	bf00      	nop
 800f3ec:	e7fd      	b.n	800f3ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00b      	beq.n	800f40e <vPortFree+0x66>
	__asm volatile
 800f3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fa:	f383 8811 	msr	BASEPRI, r3
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	f3bf 8f4f 	dsb	sy
 800f406:	60bb      	str	r3, [r7, #8]
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	e7fd      	b.n	800f40a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	685a      	ldr	r2, [r3, #4]
 800f412:	4b14      	ldr	r3, [pc, #80]	@ (800f464 <vPortFree+0xbc>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4013      	ands	r3, r2
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01e      	beq.n	800f45a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d11a      	bne.n	800f45a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	4b0e      	ldr	r3, [pc, #56]	@ (800f464 <vPortFree+0xbc>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	43db      	mvns	r3, r3
 800f42e:	401a      	ands	r2, r3
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f434:	f7fd ff98 	bl	800d368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	4b0a      	ldr	r3, [pc, #40]	@ (800f468 <vPortFree+0xc0>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4413      	add	r3, r2
 800f442:	4a09      	ldr	r2, [pc, #36]	@ (800f468 <vPortFree+0xc0>)
 800f444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f446:	6938      	ldr	r0, [r7, #16]
 800f448:	f000 f880 	bl	800f54c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f44c:	4b07      	ldr	r3, [pc, #28]	@ (800f46c <vPortFree+0xc4>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3301      	adds	r3, #1
 800f452:	4a06      	ldr	r2, [pc, #24]	@ (800f46c <vPortFree+0xc4>)
 800f454:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f456:	f7fd ff95 	bl	800d384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f45a:	bf00      	nop
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20007294 	.word	0x20007294
 800f468:	20007284 	.word	0x20007284
 800f46c:	20007290 	.word	0x20007290

0800f470 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800f470:	b480      	push	{r7}
 800f472:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800f474:	4b03      	ldr	r3, [pc, #12]	@ (800f484 <xPortGetFreeHeapSize+0x14>)
 800f476:	681b      	ldr	r3, [r3, #0]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	20007284 	.word	0x20007284

0800f488 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f48e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f492:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f494:	4b27      	ldr	r3, [pc, #156]	@ (800f534 <prvHeapInit+0xac>)
 800f496:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f003 0307 	and.w	r3, r3, #7
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00c      	beq.n	800f4bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3307      	adds	r3, #7
 800f4a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f023 0307 	bic.w	r3, r3, #7
 800f4ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f534 <prvHeapInit+0xac>)
 800f4b8:	4413      	add	r3, r2
 800f4ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f538 <prvHeapInit+0xb0>)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4c6:	4b1c      	ldr	r3, [pc, #112]	@ (800f538 <prvHeapInit+0xb0>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68ba      	ldr	r2, [r7, #8]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f4d4:	2208      	movs	r2, #8
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	1a9b      	subs	r3, r3, r2
 800f4da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f023 0307 	bic.w	r3, r3, #7
 800f4e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	4a15      	ldr	r2, [pc, #84]	@ (800f53c <prvHeapInit+0xb4>)
 800f4e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f4ea:	4b14      	ldr	r3, [pc, #80]	@ (800f53c <prvHeapInit+0xb4>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f4f2:	4b12      	ldr	r3, [pc, #72]	@ (800f53c <prvHeapInit+0xb4>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	1ad2      	subs	r2, r2, r3
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f508:	4b0c      	ldr	r3, [pc, #48]	@ (800f53c <prvHeapInit+0xb4>)
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	4a0a      	ldr	r2, [pc, #40]	@ (800f540 <prvHeapInit+0xb8>)
 800f516:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	4a09      	ldr	r2, [pc, #36]	@ (800f544 <prvHeapInit+0xbc>)
 800f51e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f520:	4b09      	ldr	r3, [pc, #36]	@ (800f548 <prvHeapInit+0xc0>)
 800f522:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f526:	601a      	str	r2, [r3, #0]
}
 800f528:	bf00      	nop
 800f52a:	3714      	adds	r7, #20
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	20003678 	.word	0x20003678
 800f538:	20007278 	.word	0x20007278
 800f53c:	20007280 	.word	0x20007280
 800f540:	20007288 	.word	0x20007288
 800f544:	20007284 	.word	0x20007284
 800f548:	20007294 	.word	0x20007294

0800f54c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f554:	4b28      	ldr	r3, [pc, #160]	@ (800f5f8 <prvInsertBlockIntoFreeList+0xac>)
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	e002      	b.n	800f560 <prvInsertBlockIntoFreeList+0x14>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	60fb      	str	r3, [r7, #12]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	429a      	cmp	r2, r3
 800f568:	d8f7      	bhi.n	800f55a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	4413      	add	r3, r2
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d108      	bne.n	800f58e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	685a      	ldr	r2, [r3, #4]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	441a      	add	r2, r3
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	441a      	add	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d118      	bne.n	800f5d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	4b15      	ldr	r3, [pc, #84]	@ (800f5fc <prvInsertBlockIntoFreeList+0xb0>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d00d      	beq.n	800f5ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	441a      	add	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	601a      	str	r2, [r3, #0]
 800f5c8:	e008      	b.n	800f5dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f5ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f5fc <prvInsertBlockIntoFreeList+0xb0>)
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	601a      	str	r2, [r3, #0]
 800f5d2:	e003      	b.n	800f5dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d002      	beq.n	800f5ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5ea:	bf00      	nop
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	20007278 	.word	0x20007278
 800f5fc:	20007280 	.word	0x20007280

0800f600 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f604:	2201      	movs	r2, #1
 800f606:	490e      	ldr	r1, [pc, #56]	@ (800f640 <MX_USB_HOST_Init+0x40>)
 800f608:	480e      	ldr	r0, [pc, #56]	@ (800f644 <MX_USB_HOST_Init+0x44>)
 800f60a:	f7fa fa73 	bl	8009af4 <USBH_Init>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f614:	f7f1 ffb4 	bl	8001580 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f618:	490b      	ldr	r1, [pc, #44]	@ (800f648 <MX_USB_HOST_Init+0x48>)
 800f61a:	480a      	ldr	r0, [pc, #40]	@ (800f644 <MX_USB_HOST_Init+0x44>)
 800f61c:	f7fa fb39 	bl	8009c92 <USBH_RegisterClass>
 800f620:	4603      	mov	r3, r0
 800f622:	2b00      	cmp	r3, #0
 800f624:	d001      	beq.n	800f62a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f626:	f7f1 ffab 	bl	8001580 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f62a:	4806      	ldr	r0, [pc, #24]	@ (800f644 <MX_USB_HOST_Init+0x44>)
 800f62c:	f7fa fbbd 	bl	8009daa <USBH_Start>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f636:	f7f1 ffa3 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f63a:	bf00      	nop
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	0800f64d 	.word	0x0800f64d
 800f644:	20007298 	.word	0x20007298
 800f648:	2000001c 	.word	0x2000001c

0800f64c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	460b      	mov	r3, r1
 800f656:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f658:	78fb      	ldrb	r3, [r7, #3]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d819      	bhi.n	800f694 <USBH_UserProcess+0x48>
 800f660:	a201      	add	r2, pc, #4	@ (adr r2, 800f668 <USBH_UserProcess+0x1c>)
 800f662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f666:	bf00      	nop
 800f668:	0800f695 	.word	0x0800f695
 800f66c:	0800f685 	.word	0x0800f685
 800f670:	0800f695 	.word	0x0800f695
 800f674:	0800f68d 	.word	0x0800f68d
 800f678:	0800f67d 	.word	0x0800f67d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f67c:	4b09      	ldr	r3, [pc, #36]	@ (800f6a4 <USBH_UserProcess+0x58>)
 800f67e:	2203      	movs	r2, #3
 800f680:	701a      	strb	r2, [r3, #0]
  break;
 800f682:	e008      	b.n	800f696 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f684:	4b07      	ldr	r3, [pc, #28]	@ (800f6a4 <USBH_UserProcess+0x58>)
 800f686:	2202      	movs	r2, #2
 800f688:	701a      	strb	r2, [r3, #0]
  break;
 800f68a:	e004      	b.n	800f696 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f68c:	4b05      	ldr	r3, [pc, #20]	@ (800f6a4 <USBH_UserProcess+0x58>)
 800f68e:	2201      	movs	r2, #1
 800f690:	701a      	strb	r2, [r3, #0]
  break;
 800f692:	e000      	b.n	800f696 <USBH_UserProcess+0x4a>

  default:
  break;
 800f694:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f696:	bf00      	nop
 800f698:	370c      	adds	r7, #12
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	2000767c 	.word	0x2000767c

0800f6a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b08a      	sub	sp, #40	@ 0x28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6b0:	f107 0314 	add.w	r3, r7, #20
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	605a      	str	r2, [r3, #4]
 800f6ba:	609a      	str	r2, [r3, #8]
 800f6bc:	60da      	str	r2, [r3, #12]
 800f6be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f6c8:	d147      	bne.n	800f75a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	613b      	str	r3, [r7, #16]
 800f6ce:	4b25      	ldr	r3, [pc, #148]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f6d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6d2:	4a24      	ldr	r2, [pc, #144]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f6d4:	f043 0301 	orr.w	r3, r3, #1
 800f6d8:	6313      	str	r3, [r2, #48]	@ 0x30
 800f6da:	4b22      	ldr	r3, [pc, #136]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6de:	f003 0301 	and.w	r3, r3, #1
 800f6e2:	613b      	str	r3, [r7, #16]
 800f6e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f6e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f6f4:	f107 0314 	add.w	r3, r7, #20
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	481b      	ldr	r0, [pc, #108]	@ (800f768 <HAL_HCD_MspInit+0xc0>)
 800f6fc:	f7f2 fef4 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f700:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800f704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f706:	2302      	movs	r3, #2
 800f708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f70e:	2300      	movs	r3, #0
 800f710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f712:	230a      	movs	r3, #10
 800f714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f716:	f107 0314 	add.w	r3, r7, #20
 800f71a:	4619      	mov	r1, r3
 800f71c:	4812      	ldr	r0, [pc, #72]	@ (800f768 <HAL_HCD_MspInit+0xc0>)
 800f71e:	f7f2 fee3 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f722:	4b10      	ldr	r3, [pc, #64]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f726:	4a0f      	ldr	r2, [pc, #60]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f72c:	6353      	str	r3, [r2, #52]	@ 0x34
 800f72e:	2300      	movs	r3, #0
 800f730:	60fb      	str	r3, [r7, #12]
 800f732:	4b0c      	ldr	r3, [pc, #48]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f736:	4a0b      	ldr	r2, [pc, #44]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f73c:	6453      	str	r3, [r2, #68]	@ 0x44
 800f73e:	4b09      	ldr	r3, [pc, #36]	@ (800f764 <HAL_HCD_MspInit+0xbc>)
 800f740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f74a:	2200      	movs	r2, #0
 800f74c:	2105      	movs	r1, #5
 800f74e:	2043      	movs	r0, #67	@ 0x43
 800f750:	f7f2 fbb6 	bl	8001ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f754:	2043      	movs	r0, #67	@ 0x43
 800f756:	f7f2 fbcf 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f75a:	bf00      	nop
 800f75c:	3728      	adds	r7, #40	@ 0x28
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	40023800 	.word	0x40023800
 800f768:	40020000 	.word	0x40020000

0800f76c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fa ffc7 	bl	800a70e <USBH_LL_IncTimer>
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f796:	4618      	mov	r0, r3
 800f798:	f7fb f80b 	bl	800a7b2 <USBH_LL_Connect>
}
 800f79c:	bf00      	nop
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fb f820 	bl	800a7f8 <USBH_LL_Disconnect>
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	70fb      	strb	r3, [r7, #3]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fb f857 	bl	800a88a <USBH_LL_NotifyURBChange>
#endif
}
 800f7dc:	bf00      	nop
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fa ffb5 	bl	800a762 <USBH_LL_PortEnabled>
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fa ffc1 	bl	800a796 <USBH_LL_PortDisabled>
}
 800f814:	bf00      	nop
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d12a      	bne.n	800f884 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f82e:	4a18      	ldr	r2, [pc, #96]	@ (800f890 <USBH_LL_Init+0x74>)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a15      	ldr	r2, [pc, #84]	@ (800f890 <USBH_LL_Init+0x74>)
 800f83a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f83e:	4b14      	ldr	r3, [pc, #80]	@ (800f890 <USBH_LL_Init+0x74>)
 800f840:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f844:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f846:	4b12      	ldr	r3, [pc, #72]	@ (800f890 <USBH_LL_Init+0x74>)
 800f848:	2208      	movs	r2, #8
 800f84a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f84c:	4b10      	ldr	r3, [pc, #64]	@ (800f890 <USBH_LL_Init+0x74>)
 800f84e:	2201      	movs	r2, #1
 800f850:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f852:	4b0f      	ldr	r3, [pc, #60]	@ (800f890 <USBH_LL_Init+0x74>)
 800f854:	2200      	movs	r2, #0
 800f856:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f858:	4b0d      	ldr	r3, [pc, #52]	@ (800f890 <USBH_LL_Init+0x74>)
 800f85a:	2202      	movs	r2, #2
 800f85c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f85e:	4b0c      	ldr	r3, [pc, #48]	@ (800f890 <USBH_LL_Init+0x74>)
 800f860:	2200      	movs	r2, #0
 800f862:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f864:	480a      	ldr	r0, [pc, #40]	@ (800f890 <USBH_LL_Init+0x74>)
 800f866:	f7f3 f827 	bl	80028b8 <HAL_HCD_Init>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d001      	beq.n	800f874 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f870:	f7f1 fe86 	bl	8001580 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f874:	4806      	ldr	r0, [pc, #24]	@ (800f890 <USBH_LL_Init+0x74>)
 800f876:	f7f3 fc87 	bl	8003188 <HAL_HCD_GetCurrentFrame>
 800f87a:	4603      	mov	r3, r0
 800f87c:	4619      	mov	r1, r3
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7fa ff36 	bl	800a6f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f884:	2300      	movs	r3, #0
}
 800f886:	4618      	mov	r0, r3
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	20007680 	.word	0x20007680

0800f894 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f3 fbf4 	bl	8003098 <HAL_HCD_Start>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f8b4:	7bfb      	ldrb	r3, [r7, #15]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f000 f95e 	bl	800fb78 <USBH_Get_USB_Status>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7f3 fbfc 	bl	80030de <HAL_HCD_Stop>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f8ea:	7bfb      	ldrb	r3, [r7, #15]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 f943 	bl	800fb78 <USBH_Get_USB_Status>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3710      	adds	r7, #16
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f908:	2301      	movs	r3, #1
 800f90a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f912:	4618      	mov	r0, r3
 800f914:	f7f3 fc46 	bl	80031a4 <HAL_HCD_GetCurrentSpeed>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d00c      	beq.n	800f938 <USBH_LL_GetSpeed+0x38>
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d80d      	bhi.n	800f93e <USBH_LL_GetSpeed+0x3e>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d002      	beq.n	800f92c <USBH_LL_GetSpeed+0x2c>
 800f926:	2b01      	cmp	r3, #1
 800f928:	d003      	beq.n	800f932 <USBH_LL_GetSpeed+0x32>
 800f92a:	e008      	b.n	800f93e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f92c:	2300      	movs	r3, #0
 800f92e:	73fb      	strb	r3, [r7, #15]
    break;
 800f930:	e008      	b.n	800f944 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f932:	2301      	movs	r3, #1
 800f934:	73fb      	strb	r3, [r7, #15]
    break;
 800f936:	e005      	b.n	800f944 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f938:	2302      	movs	r3, #2
 800f93a:	73fb      	strb	r3, [r7, #15]
    break;
 800f93c:	e002      	b.n	800f944 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f93e:	2301      	movs	r3, #1
 800f940:	73fb      	strb	r3, [r7, #15]
    break;
 800f942:	bf00      	nop
  }
  return  speed;
 800f944:	7bfb      	ldrb	r3, [r7, #15]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f956:	2300      	movs	r3, #0
 800f958:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f964:	4618      	mov	r0, r3
 800f966:	f7f3 fbd7 	bl	8003118 <HAL_HCD_ResetPort>
 800f96a:	4603      	mov	r3, r0
 800f96c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
 800f970:	4618      	mov	r0, r3
 800f972:	f000 f901 	bl	800fb78 <USBH_Get_USB_Status>
 800f976:	4603      	mov	r3, r0
 800f978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f996:	78fa      	ldrb	r2, [r7, #3]
 800f998:	4611      	mov	r1, r2
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f3 fbdf 	bl	800315e <HAL_HCD_HC_GetXferCount>
 800f9a0:	4603      	mov	r3, r0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f9aa:	b590      	push	{r4, r7, lr}
 800f9ac:	b089      	sub	sp, #36	@ 0x24
 800f9ae:	af04      	add	r7, sp, #16
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	4608      	mov	r0, r1
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	70fb      	strb	r3, [r7, #3]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	70bb      	strb	r3, [r7, #2]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f9d2:	787c      	ldrb	r4, [r7, #1]
 800f9d4:	78ba      	ldrb	r2, [r7, #2]
 800f9d6:	78f9      	ldrb	r1, [r7, #3]
 800f9d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f9da:	9302      	str	r3, [sp, #8]
 800f9dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4623      	mov	r3, r4
 800f9ea:	f7f2 ffcc 	bl	8002986 <HAL_HCD_HC_Init>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9f2:	7bfb      	ldrb	r3, [r7, #15]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 f8bf 	bl	800fb78 <USBH_Get_USB_Status>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3714      	adds	r7, #20
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd90      	pop	{r4, r7, pc}

0800fa08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa22:	78fa      	ldrb	r2, [r7, #3]
 800fa24:	4611      	mov	r1, r2
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7f3 f865 	bl	8002af6 <HAL_HCD_HC_Halt>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f000 f8a0 	bl	800fb78 <USBH_Get_USB_Status>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fa46:	b590      	push	{r4, r7, lr}
 800fa48:	b089      	sub	sp, #36	@ 0x24
 800fa4a:	af04      	add	r7, sp, #16
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	4608      	mov	r0, r1
 800fa50:	4611      	mov	r1, r2
 800fa52:	461a      	mov	r2, r3
 800fa54:	4603      	mov	r3, r0
 800fa56:	70fb      	strb	r3, [r7, #3]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	70bb      	strb	r3, [r7, #2]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa60:	2300      	movs	r3, #0
 800fa62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fa6e:	787c      	ldrb	r4, [r7, #1]
 800fa70:	78ba      	ldrb	r2, [r7, #2]
 800fa72:	78f9      	ldrb	r1, [r7, #3]
 800fa74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa78:	9303      	str	r3, [sp, #12]
 800fa7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fa7c:	9302      	str	r3, [sp, #8]
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa80:	9301      	str	r3, [sp, #4]
 800fa82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	4623      	mov	r3, r4
 800fa8a:	f7f3 f857 	bl	8002b3c <HAL_HCD_HC_SubmitRequest>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 f86f 	bl	800fb78 <USBH_Get_USB_Status>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd90      	pop	{r4, r7, pc}

0800faa8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	460b      	mov	r3, r1
 800fab2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800faba:	78fa      	ldrb	r2, [r7, #3]
 800fabc:	4611      	mov	r1, r2
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7f3 fb38 	bl	8003134 <HAL_HCD_HC_GetURBState>
 800fac4:	4603      	mov	r3, r0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	460b      	mov	r3, r1
 800fad8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d103      	bne.n	800faec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fae4:	78fb      	ldrb	r3, [r7, #3]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 f872 	bl	800fbd0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800faec:	20c8      	movs	r0, #200	@ 0xc8
 800faee:	f7f2 f90b 	bl	8001d08 <HAL_Delay>
  return USBH_OK;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	70fb      	strb	r3, [r7, #3]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fb14:	78fa      	ldrb	r2, [r7, #3]
 800fb16:	68f9      	ldr	r1, [r7, #12]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	011b      	lsls	r3, r3, #4
 800fb1c:	1a9b      	subs	r3, r3, r2
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	440b      	add	r3, r1
 800fb22:	3317      	adds	r3, #23
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00a      	beq.n	800fb40 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fb2a:	78fa      	ldrb	r2, [r7, #3]
 800fb2c:	68f9      	ldr	r1, [r7, #12]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	011b      	lsls	r3, r3, #4
 800fb32:	1a9b      	subs	r3, r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	440b      	add	r3, r1
 800fb38:	333c      	adds	r3, #60	@ 0x3c
 800fb3a:	78ba      	ldrb	r2, [r7, #2]
 800fb3c:	701a      	strb	r2, [r3, #0]
 800fb3e:	e009      	b.n	800fb54 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fb40:	78fa      	ldrb	r2, [r7, #3]
 800fb42:	68f9      	ldr	r1, [r7, #12]
 800fb44:	4613      	mov	r3, r2
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	1a9b      	subs	r3, r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	440b      	add	r3, r1
 800fb4e:	333d      	adds	r3, #61	@ 0x3d
 800fb50:	78ba      	ldrb	r2, [r7, #2]
 800fb52:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fb54:	2300      	movs	r3, #0
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr

0800fb62 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b082      	sub	sp, #8
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7f2 f8cc 	bl	8001d08 <HAL_Delay>
}
 800fb70:	bf00      	nop
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	4603      	mov	r3, r0
 800fb80:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb86:	79fb      	ldrb	r3, [r7, #7]
 800fb88:	2b03      	cmp	r3, #3
 800fb8a:	d817      	bhi.n	800fbbc <USBH_Get_USB_Status+0x44>
 800fb8c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb94 <USBH_Get_USB_Status+0x1c>)
 800fb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb92:	bf00      	nop
 800fb94:	0800fba5 	.word	0x0800fba5
 800fb98:	0800fbab 	.word	0x0800fbab
 800fb9c:	0800fbb1 	.word	0x0800fbb1
 800fba0:	0800fbb7 	.word	0x0800fbb7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]
    break;
 800fba8:	e00b      	b.n	800fbc2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fbaa:	2302      	movs	r3, #2
 800fbac:	73fb      	strb	r3, [r7, #15]
    break;
 800fbae:	e008      	b.n	800fbc2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800fbb4:	e005      	b.n	800fbc2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	73fb      	strb	r3, [r7, #15]
    break;
 800fbba:	e002      	b.n	800fbc2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800fbc0:	bf00      	nop
  }
  return usb_status;
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fbde:	79fb      	ldrb	r3, [r7, #7]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	73fb      	strb	r3, [r7, #15]
 800fbe8:	e001      	b.n	800fbee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fbea:	2301      	movs	r3, #1
 800fbec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fbee:	7bfb      	ldrb	r3, [r7, #15]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	2101      	movs	r1, #1
 800fbf4:	4803      	ldr	r0, [pc, #12]	@ (800fc04 <MX_DriverVbusFS+0x34>)
 800fbf6:	f7f2 fe13 	bl	8002820 <HAL_GPIO_WritePin>
}
 800fbfa:	bf00      	nop
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	40020800 	.word	0x40020800

0800fc08 <malloc>:
 800fc08:	4b02      	ldr	r3, [pc, #8]	@ (800fc14 <malloc+0xc>)
 800fc0a:	4601      	mov	r1, r0
 800fc0c:	6818      	ldr	r0, [r3, #0]
 800fc0e:	f000 b82d 	b.w	800fc6c <_malloc_r>
 800fc12:	bf00      	nop
 800fc14:	20000040 	.word	0x20000040

0800fc18 <free>:
 800fc18:	4b02      	ldr	r3, [pc, #8]	@ (800fc24 <free+0xc>)
 800fc1a:	4601      	mov	r1, r0
 800fc1c:	6818      	ldr	r0, [r3, #0]
 800fc1e:	f000 b981 	b.w	800ff24 <_free_r>
 800fc22:	bf00      	nop
 800fc24:	20000040 	.word	0x20000040

0800fc28 <sbrk_aligned>:
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	4e0f      	ldr	r6, [pc, #60]	@ (800fc68 <sbrk_aligned+0x40>)
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	6831      	ldr	r1, [r6, #0]
 800fc30:	4605      	mov	r5, r0
 800fc32:	b911      	cbnz	r1, 800fc3a <sbrk_aligned+0x12>
 800fc34:	f000 f924 	bl	800fe80 <_sbrk_r>
 800fc38:	6030      	str	r0, [r6, #0]
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	f000 f91f 	bl	800fe80 <_sbrk_r>
 800fc42:	1c43      	adds	r3, r0, #1
 800fc44:	d103      	bne.n	800fc4e <sbrk_aligned+0x26>
 800fc46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	bd70      	pop	{r4, r5, r6, pc}
 800fc4e:	1cc4      	adds	r4, r0, #3
 800fc50:	f024 0403 	bic.w	r4, r4, #3
 800fc54:	42a0      	cmp	r0, r4
 800fc56:	d0f8      	beq.n	800fc4a <sbrk_aligned+0x22>
 800fc58:	1a21      	subs	r1, r4, r0
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f910 	bl	800fe80 <_sbrk_r>
 800fc60:	3001      	adds	r0, #1
 800fc62:	d1f2      	bne.n	800fc4a <sbrk_aligned+0x22>
 800fc64:	e7ef      	b.n	800fc46 <sbrk_aligned+0x1e>
 800fc66:	bf00      	nop
 800fc68:	20007a60 	.word	0x20007a60

0800fc6c <_malloc_r>:
 800fc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc70:	1ccd      	adds	r5, r1, #3
 800fc72:	f025 0503 	bic.w	r5, r5, #3
 800fc76:	3508      	adds	r5, #8
 800fc78:	2d0c      	cmp	r5, #12
 800fc7a:	bf38      	it	cc
 800fc7c:	250c      	movcc	r5, #12
 800fc7e:	2d00      	cmp	r5, #0
 800fc80:	4606      	mov	r6, r0
 800fc82:	db01      	blt.n	800fc88 <_malloc_r+0x1c>
 800fc84:	42a9      	cmp	r1, r5
 800fc86:	d904      	bls.n	800fc92 <_malloc_r+0x26>
 800fc88:	230c      	movs	r3, #12
 800fc8a:	6033      	str	r3, [r6, #0]
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd68 <_malloc_r+0xfc>
 800fc96:	f000 f869 	bl	800fd6c <__malloc_lock>
 800fc9a:	f8d8 3000 	ldr.w	r3, [r8]
 800fc9e:	461c      	mov	r4, r3
 800fca0:	bb44      	cbnz	r4, 800fcf4 <_malloc_r+0x88>
 800fca2:	4629      	mov	r1, r5
 800fca4:	4630      	mov	r0, r6
 800fca6:	f7ff ffbf 	bl	800fc28 <sbrk_aligned>
 800fcaa:	1c43      	adds	r3, r0, #1
 800fcac:	4604      	mov	r4, r0
 800fcae:	d158      	bne.n	800fd62 <_malloc_r+0xf6>
 800fcb0:	f8d8 4000 	ldr.w	r4, [r8]
 800fcb4:	4627      	mov	r7, r4
 800fcb6:	2f00      	cmp	r7, #0
 800fcb8:	d143      	bne.n	800fd42 <_malloc_r+0xd6>
 800fcba:	2c00      	cmp	r4, #0
 800fcbc:	d04b      	beq.n	800fd56 <_malloc_r+0xea>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	4639      	mov	r1, r7
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	eb04 0903 	add.w	r9, r4, r3
 800fcc8:	f000 f8da 	bl	800fe80 <_sbrk_r>
 800fccc:	4581      	cmp	r9, r0
 800fcce:	d142      	bne.n	800fd56 <_malloc_r+0xea>
 800fcd0:	6821      	ldr	r1, [r4, #0]
 800fcd2:	1a6d      	subs	r5, r5, r1
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	f7ff ffa6 	bl	800fc28 <sbrk_aligned>
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d03a      	beq.n	800fd56 <_malloc_r+0xea>
 800fce0:	6823      	ldr	r3, [r4, #0]
 800fce2:	442b      	add	r3, r5
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcea:	685a      	ldr	r2, [r3, #4]
 800fcec:	bb62      	cbnz	r2, 800fd48 <_malloc_r+0xdc>
 800fcee:	f8c8 7000 	str.w	r7, [r8]
 800fcf2:	e00f      	b.n	800fd14 <_malloc_r+0xa8>
 800fcf4:	6822      	ldr	r2, [r4, #0]
 800fcf6:	1b52      	subs	r2, r2, r5
 800fcf8:	d420      	bmi.n	800fd3c <_malloc_r+0xd0>
 800fcfa:	2a0b      	cmp	r2, #11
 800fcfc:	d917      	bls.n	800fd2e <_malloc_r+0xc2>
 800fcfe:	1961      	adds	r1, r4, r5
 800fd00:	42a3      	cmp	r3, r4
 800fd02:	6025      	str	r5, [r4, #0]
 800fd04:	bf18      	it	ne
 800fd06:	6059      	strne	r1, [r3, #4]
 800fd08:	6863      	ldr	r3, [r4, #4]
 800fd0a:	bf08      	it	eq
 800fd0c:	f8c8 1000 	streq.w	r1, [r8]
 800fd10:	5162      	str	r2, [r4, r5]
 800fd12:	604b      	str	r3, [r1, #4]
 800fd14:	4630      	mov	r0, r6
 800fd16:	f000 f82f 	bl	800fd78 <__malloc_unlock>
 800fd1a:	f104 000b 	add.w	r0, r4, #11
 800fd1e:	1d23      	adds	r3, r4, #4
 800fd20:	f020 0007 	bic.w	r0, r0, #7
 800fd24:	1ac2      	subs	r2, r0, r3
 800fd26:	bf1c      	itt	ne
 800fd28:	1a1b      	subne	r3, r3, r0
 800fd2a:	50a3      	strne	r3, [r4, r2]
 800fd2c:	e7af      	b.n	800fc8e <_malloc_r+0x22>
 800fd2e:	6862      	ldr	r2, [r4, #4]
 800fd30:	42a3      	cmp	r3, r4
 800fd32:	bf0c      	ite	eq
 800fd34:	f8c8 2000 	streq.w	r2, [r8]
 800fd38:	605a      	strne	r2, [r3, #4]
 800fd3a:	e7eb      	b.n	800fd14 <_malloc_r+0xa8>
 800fd3c:	4623      	mov	r3, r4
 800fd3e:	6864      	ldr	r4, [r4, #4]
 800fd40:	e7ae      	b.n	800fca0 <_malloc_r+0x34>
 800fd42:	463c      	mov	r4, r7
 800fd44:	687f      	ldr	r7, [r7, #4]
 800fd46:	e7b6      	b.n	800fcb6 <_malloc_r+0x4a>
 800fd48:	461a      	mov	r2, r3
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	d1fb      	bne.n	800fd48 <_malloc_r+0xdc>
 800fd50:	2300      	movs	r3, #0
 800fd52:	6053      	str	r3, [r2, #4]
 800fd54:	e7de      	b.n	800fd14 <_malloc_r+0xa8>
 800fd56:	230c      	movs	r3, #12
 800fd58:	6033      	str	r3, [r6, #0]
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f000 f80c 	bl	800fd78 <__malloc_unlock>
 800fd60:	e794      	b.n	800fc8c <_malloc_r+0x20>
 800fd62:	6005      	str	r5, [r0, #0]
 800fd64:	e7d6      	b.n	800fd14 <_malloc_r+0xa8>
 800fd66:	bf00      	nop
 800fd68:	20007a64 	.word	0x20007a64

0800fd6c <__malloc_lock>:
 800fd6c:	4801      	ldr	r0, [pc, #4]	@ (800fd74 <__malloc_lock+0x8>)
 800fd6e:	f000 b8c1 	b.w	800fef4 <__retarget_lock_acquire_recursive>
 800fd72:	bf00      	nop
 800fd74:	20007ba4 	.word	0x20007ba4

0800fd78 <__malloc_unlock>:
 800fd78:	4801      	ldr	r0, [pc, #4]	@ (800fd80 <__malloc_unlock+0x8>)
 800fd7a:	f000 b8bc 	b.w	800fef6 <__retarget_lock_release_recursive>
 800fd7e:	bf00      	nop
 800fd80:	20007ba4 	.word	0x20007ba4

0800fd84 <siprintf>:
 800fd84:	b40e      	push	{r1, r2, r3}
 800fd86:	b500      	push	{lr}
 800fd88:	b09c      	sub	sp, #112	@ 0x70
 800fd8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800fd8c:	9002      	str	r0, [sp, #8]
 800fd8e:	9006      	str	r0, [sp, #24]
 800fd90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd94:	4809      	ldr	r0, [pc, #36]	@ (800fdbc <siprintf+0x38>)
 800fd96:	9107      	str	r1, [sp, #28]
 800fd98:	9104      	str	r1, [sp, #16]
 800fd9a:	4909      	ldr	r1, [pc, #36]	@ (800fdc0 <siprintf+0x3c>)
 800fd9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda0:	9105      	str	r1, [sp, #20]
 800fda2:	6800      	ldr	r0, [r0, #0]
 800fda4:	9301      	str	r3, [sp, #4]
 800fda6:	a902      	add	r1, sp, #8
 800fda8:	f000 f962 	bl	8010070 <_svfiprintf_r>
 800fdac:	9b02      	ldr	r3, [sp, #8]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	701a      	strb	r2, [r3, #0]
 800fdb2:	b01c      	add	sp, #112	@ 0x70
 800fdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb8:	b003      	add	sp, #12
 800fdba:	4770      	bx	lr
 800fdbc:	20000040 	.word	0x20000040
 800fdc0:	ffff0208 	.word	0xffff0208

0800fdc4 <memset>:
 800fdc4:	4402      	add	r2, r0
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d100      	bne.n	800fdce <memset+0xa>
 800fdcc:	4770      	bx	lr
 800fdce:	f803 1b01 	strb.w	r1, [r3], #1
 800fdd2:	e7f9      	b.n	800fdc8 <memset+0x4>

0800fdd4 <_reclaim_reent>:
 800fdd4:	4b29      	ldr	r3, [pc, #164]	@ (800fe7c <_reclaim_reent+0xa8>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4283      	cmp	r3, r0
 800fdda:	b570      	push	{r4, r5, r6, lr}
 800fddc:	4604      	mov	r4, r0
 800fdde:	d04b      	beq.n	800fe78 <_reclaim_reent+0xa4>
 800fde0:	69c3      	ldr	r3, [r0, #28]
 800fde2:	b1ab      	cbz	r3, 800fe10 <_reclaim_reent+0x3c>
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	b16b      	cbz	r3, 800fe04 <_reclaim_reent+0x30>
 800fde8:	2500      	movs	r5, #0
 800fdea:	69e3      	ldr	r3, [r4, #28]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	5959      	ldr	r1, [r3, r5]
 800fdf0:	2900      	cmp	r1, #0
 800fdf2:	d13b      	bne.n	800fe6c <_reclaim_reent+0x98>
 800fdf4:	3504      	adds	r5, #4
 800fdf6:	2d80      	cmp	r5, #128	@ 0x80
 800fdf8:	d1f7      	bne.n	800fdea <_reclaim_reent+0x16>
 800fdfa:	69e3      	ldr	r3, [r4, #28]
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	68d9      	ldr	r1, [r3, #12]
 800fe00:	f000 f890 	bl	800ff24 <_free_r>
 800fe04:	69e3      	ldr	r3, [r4, #28]
 800fe06:	6819      	ldr	r1, [r3, #0]
 800fe08:	b111      	cbz	r1, 800fe10 <_reclaim_reent+0x3c>
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 f88a 	bl	800ff24 <_free_r>
 800fe10:	6961      	ldr	r1, [r4, #20]
 800fe12:	b111      	cbz	r1, 800fe1a <_reclaim_reent+0x46>
 800fe14:	4620      	mov	r0, r4
 800fe16:	f000 f885 	bl	800ff24 <_free_r>
 800fe1a:	69e1      	ldr	r1, [r4, #28]
 800fe1c:	b111      	cbz	r1, 800fe24 <_reclaim_reent+0x50>
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 f880 	bl	800ff24 <_free_r>
 800fe24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fe26:	b111      	cbz	r1, 800fe2e <_reclaim_reent+0x5a>
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f000 f87b 	bl	800ff24 <_free_r>
 800fe2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe30:	b111      	cbz	r1, 800fe38 <_reclaim_reent+0x64>
 800fe32:	4620      	mov	r0, r4
 800fe34:	f000 f876 	bl	800ff24 <_free_r>
 800fe38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fe3a:	b111      	cbz	r1, 800fe42 <_reclaim_reent+0x6e>
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f000 f871 	bl	800ff24 <_free_r>
 800fe42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fe44:	b111      	cbz	r1, 800fe4c <_reclaim_reent+0x78>
 800fe46:	4620      	mov	r0, r4
 800fe48:	f000 f86c 	bl	800ff24 <_free_r>
 800fe4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fe4e:	b111      	cbz	r1, 800fe56 <_reclaim_reent+0x82>
 800fe50:	4620      	mov	r0, r4
 800fe52:	f000 f867 	bl	800ff24 <_free_r>
 800fe56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fe58:	b111      	cbz	r1, 800fe60 <_reclaim_reent+0x8c>
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 f862 	bl	800ff24 <_free_r>
 800fe60:	6a23      	ldr	r3, [r4, #32]
 800fe62:	b14b      	cbz	r3, 800fe78 <_reclaim_reent+0xa4>
 800fe64:	4620      	mov	r0, r4
 800fe66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe6a:	4718      	bx	r3
 800fe6c:	680e      	ldr	r6, [r1, #0]
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f000 f858 	bl	800ff24 <_free_r>
 800fe74:	4631      	mov	r1, r6
 800fe76:	e7bb      	b.n	800fdf0 <_reclaim_reent+0x1c>
 800fe78:	bd70      	pop	{r4, r5, r6, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20000040 	.word	0x20000040

0800fe80 <_sbrk_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d06      	ldr	r5, [pc, #24]	@ (800fe9c <_sbrk_r+0x1c>)
 800fe84:	2300      	movs	r3, #0
 800fe86:	4604      	mov	r4, r0
 800fe88:	4608      	mov	r0, r1
 800fe8a:	602b      	str	r3, [r5, #0]
 800fe8c:	f7f1 fe88 	bl	8001ba0 <_sbrk>
 800fe90:	1c43      	adds	r3, r0, #1
 800fe92:	d102      	bne.n	800fe9a <_sbrk_r+0x1a>
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	b103      	cbz	r3, 800fe9a <_sbrk_r+0x1a>
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	bd38      	pop	{r3, r4, r5, pc}
 800fe9c:	20007ba0 	.word	0x20007ba0

0800fea0 <__errno>:
 800fea0:	4b01      	ldr	r3, [pc, #4]	@ (800fea8 <__errno+0x8>)
 800fea2:	6818      	ldr	r0, [r3, #0]
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	20000040 	.word	0x20000040

0800feac <__libc_init_array>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	4d0d      	ldr	r5, [pc, #52]	@ (800fee4 <__libc_init_array+0x38>)
 800feb0:	4c0d      	ldr	r4, [pc, #52]	@ (800fee8 <__libc_init_array+0x3c>)
 800feb2:	1b64      	subs	r4, r4, r5
 800feb4:	10a4      	asrs	r4, r4, #2
 800feb6:	2600      	movs	r6, #0
 800feb8:	42a6      	cmp	r6, r4
 800feba:	d109      	bne.n	800fed0 <__libc_init_array+0x24>
 800febc:	4d0b      	ldr	r5, [pc, #44]	@ (800feec <__libc_init_array+0x40>)
 800febe:	4c0c      	ldr	r4, [pc, #48]	@ (800fef0 <__libc_init_array+0x44>)
 800fec0:	f000 fbb0 	bl	8010624 <_init>
 800fec4:	1b64      	subs	r4, r4, r5
 800fec6:	10a4      	asrs	r4, r4, #2
 800fec8:	2600      	movs	r6, #0
 800feca:	42a6      	cmp	r6, r4
 800fecc:	d105      	bne.n	800feda <__libc_init_array+0x2e>
 800fece:	bd70      	pop	{r4, r5, r6, pc}
 800fed0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fed4:	4798      	blx	r3
 800fed6:	3601      	adds	r6, #1
 800fed8:	e7ee      	b.n	800feb8 <__libc_init_array+0xc>
 800feda:	f855 3b04 	ldr.w	r3, [r5], #4
 800fede:	4798      	blx	r3
 800fee0:	3601      	adds	r6, #1
 800fee2:	e7f2      	b.n	800feca <__libc_init_array+0x1e>
 800fee4:	080108d0 	.word	0x080108d0
 800fee8:	080108d0 	.word	0x080108d0
 800feec:	080108d0 	.word	0x080108d0
 800fef0:	080108d4 	.word	0x080108d4

0800fef4 <__retarget_lock_acquire_recursive>:
 800fef4:	4770      	bx	lr

0800fef6 <__retarget_lock_release_recursive>:
 800fef6:	4770      	bx	lr

0800fef8 <strcpy>:
 800fef8:	4603      	mov	r3, r0
 800fefa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fefe:	f803 2b01 	strb.w	r2, [r3], #1
 800ff02:	2a00      	cmp	r2, #0
 800ff04:	d1f9      	bne.n	800fefa <strcpy+0x2>
 800ff06:	4770      	bx	lr

0800ff08 <memcpy>:
 800ff08:	440a      	add	r2, r1
 800ff0a:	4291      	cmp	r1, r2
 800ff0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ff10:	d100      	bne.n	800ff14 <memcpy+0xc>
 800ff12:	4770      	bx	lr
 800ff14:	b510      	push	{r4, lr}
 800ff16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff1e:	4291      	cmp	r1, r2
 800ff20:	d1f9      	bne.n	800ff16 <memcpy+0xe>
 800ff22:	bd10      	pop	{r4, pc}

0800ff24 <_free_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4605      	mov	r5, r0
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	d041      	beq.n	800ffb0 <_free_r+0x8c>
 800ff2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff30:	1f0c      	subs	r4, r1, #4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	bfb8      	it	lt
 800ff36:	18e4      	addlt	r4, r4, r3
 800ff38:	f7ff ff18 	bl	800fd6c <__malloc_lock>
 800ff3c:	4a1d      	ldr	r2, [pc, #116]	@ (800ffb4 <_free_r+0x90>)
 800ff3e:	6813      	ldr	r3, [r2, #0]
 800ff40:	b933      	cbnz	r3, 800ff50 <_free_r+0x2c>
 800ff42:	6063      	str	r3, [r4, #4]
 800ff44:	6014      	str	r4, [r2, #0]
 800ff46:	4628      	mov	r0, r5
 800ff48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff4c:	f7ff bf14 	b.w	800fd78 <__malloc_unlock>
 800ff50:	42a3      	cmp	r3, r4
 800ff52:	d908      	bls.n	800ff66 <_free_r+0x42>
 800ff54:	6820      	ldr	r0, [r4, #0]
 800ff56:	1821      	adds	r1, r4, r0
 800ff58:	428b      	cmp	r3, r1
 800ff5a:	bf01      	itttt	eq
 800ff5c:	6819      	ldreq	r1, [r3, #0]
 800ff5e:	685b      	ldreq	r3, [r3, #4]
 800ff60:	1809      	addeq	r1, r1, r0
 800ff62:	6021      	streq	r1, [r4, #0]
 800ff64:	e7ed      	b.n	800ff42 <_free_r+0x1e>
 800ff66:	461a      	mov	r2, r3
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	b10b      	cbz	r3, 800ff70 <_free_r+0x4c>
 800ff6c:	42a3      	cmp	r3, r4
 800ff6e:	d9fa      	bls.n	800ff66 <_free_r+0x42>
 800ff70:	6811      	ldr	r1, [r2, #0]
 800ff72:	1850      	adds	r0, r2, r1
 800ff74:	42a0      	cmp	r0, r4
 800ff76:	d10b      	bne.n	800ff90 <_free_r+0x6c>
 800ff78:	6820      	ldr	r0, [r4, #0]
 800ff7a:	4401      	add	r1, r0
 800ff7c:	1850      	adds	r0, r2, r1
 800ff7e:	4283      	cmp	r3, r0
 800ff80:	6011      	str	r1, [r2, #0]
 800ff82:	d1e0      	bne.n	800ff46 <_free_r+0x22>
 800ff84:	6818      	ldr	r0, [r3, #0]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	6053      	str	r3, [r2, #4]
 800ff8a:	4408      	add	r0, r1
 800ff8c:	6010      	str	r0, [r2, #0]
 800ff8e:	e7da      	b.n	800ff46 <_free_r+0x22>
 800ff90:	d902      	bls.n	800ff98 <_free_r+0x74>
 800ff92:	230c      	movs	r3, #12
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	e7d6      	b.n	800ff46 <_free_r+0x22>
 800ff98:	6820      	ldr	r0, [r4, #0]
 800ff9a:	1821      	adds	r1, r4, r0
 800ff9c:	428b      	cmp	r3, r1
 800ff9e:	bf04      	itt	eq
 800ffa0:	6819      	ldreq	r1, [r3, #0]
 800ffa2:	685b      	ldreq	r3, [r3, #4]
 800ffa4:	6063      	str	r3, [r4, #4]
 800ffa6:	bf04      	itt	eq
 800ffa8:	1809      	addeq	r1, r1, r0
 800ffaa:	6021      	streq	r1, [r4, #0]
 800ffac:	6054      	str	r4, [r2, #4]
 800ffae:	e7ca      	b.n	800ff46 <_free_r+0x22>
 800ffb0:	bd38      	pop	{r3, r4, r5, pc}
 800ffb2:	bf00      	nop
 800ffb4:	20007a64 	.word	0x20007a64

0800ffb8 <__ssputs_r>:
 800ffb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffbc:	688e      	ldr	r6, [r1, #8]
 800ffbe:	461f      	mov	r7, r3
 800ffc0:	42be      	cmp	r6, r7
 800ffc2:	680b      	ldr	r3, [r1, #0]
 800ffc4:	4682      	mov	sl, r0
 800ffc6:	460c      	mov	r4, r1
 800ffc8:	4690      	mov	r8, r2
 800ffca:	d82d      	bhi.n	8010028 <__ssputs_r+0x70>
 800ffcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ffd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ffd4:	d026      	beq.n	8010024 <__ssputs_r+0x6c>
 800ffd6:	6965      	ldr	r5, [r4, #20]
 800ffd8:	6909      	ldr	r1, [r1, #16]
 800ffda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ffde:	eba3 0901 	sub.w	r9, r3, r1
 800ffe2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ffe6:	1c7b      	adds	r3, r7, #1
 800ffe8:	444b      	add	r3, r9
 800ffea:	106d      	asrs	r5, r5, #1
 800ffec:	429d      	cmp	r5, r3
 800ffee:	bf38      	it	cc
 800fff0:	461d      	movcc	r5, r3
 800fff2:	0553      	lsls	r3, r2, #21
 800fff4:	d527      	bpl.n	8010046 <__ssputs_r+0x8e>
 800fff6:	4629      	mov	r1, r5
 800fff8:	f7ff fe38 	bl	800fc6c <_malloc_r>
 800fffc:	4606      	mov	r6, r0
 800fffe:	b360      	cbz	r0, 801005a <__ssputs_r+0xa2>
 8010000:	6921      	ldr	r1, [r4, #16]
 8010002:	464a      	mov	r2, r9
 8010004:	f7ff ff80 	bl	800ff08 <memcpy>
 8010008:	89a3      	ldrh	r3, [r4, #12]
 801000a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801000e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010012:	81a3      	strh	r3, [r4, #12]
 8010014:	6126      	str	r6, [r4, #16]
 8010016:	6165      	str	r5, [r4, #20]
 8010018:	444e      	add	r6, r9
 801001a:	eba5 0509 	sub.w	r5, r5, r9
 801001e:	6026      	str	r6, [r4, #0]
 8010020:	60a5      	str	r5, [r4, #8]
 8010022:	463e      	mov	r6, r7
 8010024:	42be      	cmp	r6, r7
 8010026:	d900      	bls.n	801002a <__ssputs_r+0x72>
 8010028:	463e      	mov	r6, r7
 801002a:	6820      	ldr	r0, [r4, #0]
 801002c:	4632      	mov	r2, r6
 801002e:	4641      	mov	r1, r8
 8010030:	f000 faa8 	bl	8010584 <memmove>
 8010034:	68a3      	ldr	r3, [r4, #8]
 8010036:	1b9b      	subs	r3, r3, r6
 8010038:	60a3      	str	r3, [r4, #8]
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	4433      	add	r3, r6
 801003e:	6023      	str	r3, [r4, #0]
 8010040:	2000      	movs	r0, #0
 8010042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010046:	462a      	mov	r2, r5
 8010048:	f000 fab6 	bl	80105b8 <_realloc_r>
 801004c:	4606      	mov	r6, r0
 801004e:	2800      	cmp	r0, #0
 8010050:	d1e0      	bne.n	8010014 <__ssputs_r+0x5c>
 8010052:	6921      	ldr	r1, [r4, #16]
 8010054:	4650      	mov	r0, sl
 8010056:	f7ff ff65 	bl	800ff24 <_free_r>
 801005a:	230c      	movs	r3, #12
 801005c:	f8ca 3000 	str.w	r3, [sl]
 8010060:	89a3      	ldrh	r3, [r4, #12]
 8010062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010066:	81a3      	strh	r3, [r4, #12]
 8010068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801006c:	e7e9      	b.n	8010042 <__ssputs_r+0x8a>
	...

08010070 <_svfiprintf_r>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	4698      	mov	r8, r3
 8010076:	898b      	ldrh	r3, [r1, #12]
 8010078:	061b      	lsls	r3, r3, #24
 801007a:	b09d      	sub	sp, #116	@ 0x74
 801007c:	4607      	mov	r7, r0
 801007e:	460d      	mov	r5, r1
 8010080:	4614      	mov	r4, r2
 8010082:	d510      	bpl.n	80100a6 <_svfiprintf_r+0x36>
 8010084:	690b      	ldr	r3, [r1, #16]
 8010086:	b973      	cbnz	r3, 80100a6 <_svfiprintf_r+0x36>
 8010088:	2140      	movs	r1, #64	@ 0x40
 801008a:	f7ff fdef 	bl	800fc6c <_malloc_r>
 801008e:	6028      	str	r0, [r5, #0]
 8010090:	6128      	str	r0, [r5, #16]
 8010092:	b930      	cbnz	r0, 80100a2 <_svfiprintf_r+0x32>
 8010094:	230c      	movs	r3, #12
 8010096:	603b      	str	r3, [r7, #0]
 8010098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801009c:	b01d      	add	sp, #116	@ 0x74
 801009e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a2:	2340      	movs	r3, #64	@ 0x40
 80100a4:	616b      	str	r3, [r5, #20]
 80100a6:	2300      	movs	r3, #0
 80100a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80100aa:	2320      	movs	r3, #32
 80100ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80100b4:	2330      	movs	r3, #48	@ 0x30
 80100b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010254 <_svfiprintf_r+0x1e4>
 80100ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100be:	f04f 0901 	mov.w	r9, #1
 80100c2:	4623      	mov	r3, r4
 80100c4:	469a      	mov	sl, r3
 80100c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100ca:	b10a      	cbz	r2, 80100d0 <_svfiprintf_r+0x60>
 80100cc:	2a25      	cmp	r2, #37	@ 0x25
 80100ce:	d1f9      	bne.n	80100c4 <_svfiprintf_r+0x54>
 80100d0:	ebba 0b04 	subs.w	fp, sl, r4
 80100d4:	d00b      	beq.n	80100ee <_svfiprintf_r+0x7e>
 80100d6:	465b      	mov	r3, fp
 80100d8:	4622      	mov	r2, r4
 80100da:	4629      	mov	r1, r5
 80100dc:	4638      	mov	r0, r7
 80100de:	f7ff ff6b 	bl	800ffb8 <__ssputs_r>
 80100e2:	3001      	adds	r0, #1
 80100e4:	f000 80a7 	beq.w	8010236 <_svfiprintf_r+0x1c6>
 80100e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100ea:	445a      	add	r2, fp
 80100ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80100ee:	f89a 3000 	ldrb.w	r3, [sl]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f000 809f 	beq.w	8010236 <_svfiprintf_r+0x1c6>
 80100f8:	2300      	movs	r3, #0
 80100fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010102:	f10a 0a01 	add.w	sl, sl, #1
 8010106:	9304      	str	r3, [sp, #16]
 8010108:	9307      	str	r3, [sp, #28]
 801010a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801010e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010110:	4654      	mov	r4, sl
 8010112:	2205      	movs	r2, #5
 8010114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010118:	484e      	ldr	r0, [pc, #312]	@ (8010254 <_svfiprintf_r+0x1e4>)
 801011a:	f7f0 f861 	bl	80001e0 <memchr>
 801011e:	9a04      	ldr	r2, [sp, #16]
 8010120:	b9d8      	cbnz	r0, 801015a <_svfiprintf_r+0xea>
 8010122:	06d0      	lsls	r0, r2, #27
 8010124:	bf44      	itt	mi
 8010126:	2320      	movmi	r3, #32
 8010128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801012c:	0711      	lsls	r1, r2, #28
 801012e:	bf44      	itt	mi
 8010130:	232b      	movmi	r3, #43	@ 0x2b
 8010132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010136:	f89a 3000 	ldrb.w	r3, [sl]
 801013a:	2b2a      	cmp	r3, #42	@ 0x2a
 801013c:	d015      	beq.n	801016a <_svfiprintf_r+0xfa>
 801013e:	9a07      	ldr	r2, [sp, #28]
 8010140:	4654      	mov	r4, sl
 8010142:	2000      	movs	r0, #0
 8010144:	f04f 0c0a 	mov.w	ip, #10
 8010148:	4621      	mov	r1, r4
 801014a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801014e:	3b30      	subs	r3, #48	@ 0x30
 8010150:	2b09      	cmp	r3, #9
 8010152:	d94b      	bls.n	80101ec <_svfiprintf_r+0x17c>
 8010154:	b1b0      	cbz	r0, 8010184 <_svfiprintf_r+0x114>
 8010156:	9207      	str	r2, [sp, #28]
 8010158:	e014      	b.n	8010184 <_svfiprintf_r+0x114>
 801015a:	eba0 0308 	sub.w	r3, r0, r8
 801015e:	fa09 f303 	lsl.w	r3, r9, r3
 8010162:	4313      	orrs	r3, r2
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	46a2      	mov	sl, r4
 8010168:	e7d2      	b.n	8010110 <_svfiprintf_r+0xa0>
 801016a:	9b03      	ldr	r3, [sp, #12]
 801016c:	1d19      	adds	r1, r3, #4
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	9103      	str	r1, [sp, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	bfbb      	ittet	lt
 8010176:	425b      	neglt	r3, r3
 8010178:	f042 0202 	orrlt.w	r2, r2, #2
 801017c:	9307      	strge	r3, [sp, #28]
 801017e:	9307      	strlt	r3, [sp, #28]
 8010180:	bfb8      	it	lt
 8010182:	9204      	strlt	r2, [sp, #16]
 8010184:	7823      	ldrb	r3, [r4, #0]
 8010186:	2b2e      	cmp	r3, #46	@ 0x2e
 8010188:	d10a      	bne.n	80101a0 <_svfiprintf_r+0x130>
 801018a:	7863      	ldrb	r3, [r4, #1]
 801018c:	2b2a      	cmp	r3, #42	@ 0x2a
 801018e:	d132      	bne.n	80101f6 <_svfiprintf_r+0x186>
 8010190:	9b03      	ldr	r3, [sp, #12]
 8010192:	1d1a      	adds	r2, r3, #4
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	9203      	str	r2, [sp, #12]
 8010198:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801019c:	3402      	adds	r4, #2
 801019e:	9305      	str	r3, [sp, #20]
 80101a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010264 <_svfiprintf_r+0x1f4>
 80101a4:	7821      	ldrb	r1, [r4, #0]
 80101a6:	2203      	movs	r2, #3
 80101a8:	4650      	mov	r0, sl
 80101aa:	f7f0 f819 	bl	80001e0 <memchr>
 80101ae:	b138      	cbz	r0, 80101c0 <_svfiprintf_r+0x150>
 80101b0:	9b04      	ldr	r3, [sp, #16]
 80101b2:	eba0 000a 	sub.w	r0, r0, sl
 80101b6:	2240      	movs	r2, #64	@ 0x40
 80101b8:	4082      	lsls	r2, r0
 80101ba:	4313      	orrs	r3, r2
 80101bc:	3401      	adds	r4, #1
 80101be:	9304      	str	r3, [sp, #16]
 80101c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101c4:	4824      	ldr	r0, [pc, #144]	@ (8010258 <_svfiprintf_r+0x1e8>)
 80101c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101ca:	2206      	movs	r2, #6
 80101cc:	f7f0 f808 	bl	80001e0 <memchr>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d036      	beq.n	8010242 <_svfiprintf_r+0x1d2>
 80101d4:	4b21      	ldr	r3, [pc, #132]	@ (801025c <_svfiprintf_r+0x1ec>)
 80101d6:	bb1b      	cbnz	r3, 8010220 <_svfiprintf_r+0x1b0>
 80101d8:	9b03      	ldr	r3, [sp, #12]
 80101da:	3307      	adds	r3, #7
 80101dc:	f023 0307 	bic.w	r3, r3, #7
 80101e0:	3308      	adds	r3, #8
 80101e2:	9303      	str	r3, [sp, #12]
 80101e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101e6:	4433      	add	r3, r6
 80101e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ea:	e76a      	b.n	80100c2 <_svfiprintf_r+0x52>
 80101ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80101f0:	460c      	mov	r4, r1
 80101f2:	2001      	movs	r0, #1
 80101f4:	e7a8      	b.n	8010148 <_svfiprintf_r+0xd8>
 80101f6:	2300      	movs	r3, #0
 80101f8:	3401      	adds	r4, #1
 80101fa:	9305      	str	r3, [sp, #20]
 80101fc:	4619      	mov	r1, r3
 80101fe:	f04f 0c0a 	mov.w	ip, #10
 8010202:	4620      	mov	r0, r4
 8010204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010208:	3a30      	subs	r2, #48	@ 0x30
 801020a:	2a09      	cmp	r2, #9
 801020c:	d903      	bls.n	8010216 <_svfiprintf_r+0x1a6>
 801020e:	2b00      	cmp	r3, #0
 8010210:	d0c6      	beq.n	80101a0 <_svfiprintf_r+0x130>
 8010212:	9105      	str	r1, [sp, #20]
 8010214:	e7c4      	b.n	80101a0 <_svfiprintf_r+0x130>
 8010216:	fb0c 2101 	mla	r1, ip, r1, r2
 801021a:	4604      	mov	r4, r0
 801021c:	2301      	movs	r3, #1
 801021e:	e7f0      	b.n	8010202 <_svfiprintf_r+0x192>
 8010220:	ab03      	add	r3, sp, #12
 8010222:	9300      	str	r3, [sp, #0]
 8010224:	462a      	mov	r2, r5
 8010226:	4b0e      	ldr	r3, [pc, #56]	@ (8010260 <_svfiprintf_r+0x1f0>)
 8010228:	a904      	add	r1, sp, #16
 801022a:	4638      	mov	r0, r7
 801022c:	f3af 8000 	nop.w
 8010230:	1c42      	adds	r2, r0, #1
 8010232:	4606      	mov	r6, r0
 8010234:	d1d6      	bne.n	80101e4 <_svfiprintf_r+0x174>
 8010236:	89ab      	ldrh	r3, [r5, #12]
 8010238:	065b      	lsls	r3, r3, #25
 801023a:	f53f af2d 	bmi.w	8010098 <_svfiprintf_r+0x28>
 801023e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010240:	e72c      	b.n	801009c <_svfiprintf_r+0x2c>
 8010242:	ab03      	add	r3, sp, #12
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	462a      	mov	r2, r5
 8010248:	4b05      	ldr	r3, [pc, #20]	@ (8010260 <_svfiprintf_r+0x1f0>)
 801024a:	a904      	add	r1, sp, #16
 801024c:	4638      	mov	r0, r7
 801024e:	f000 f879 	bl	8010344 <_printf_i>
 8010252:	e7ed      	b.n	8010230 <_svfiprintf_r+0x1c0>
 8010254:	08010894 	.word	0x08010894
 8010258:	0801089e 	.word	0x0801089e
 801025c:	00000000 	.word	0x00000000
 8010260:	0800ffb9 	.word	0x0800ffb9
 8010264:	0801089a 	.word	0x0801089a

08010268 <_printf_common>:
 8010268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801026c:	4616      	mov	r6, r2
 801026e:	4698      	mov	r8, r3
 8010270:	688a      	ldr	r2, [r1, #8]
 8010272:	690b      	ldr	r3, [r1, #16]
 8010274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010278:	4293      	cmp	r3, r2
 801027a:	bfb8      	it	lt
 801027c:	4613      	movlt	r3, r2
 801027e:	6033      	str	r3, [r6, #0]
 8010280:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010284:	4607      	mov	r7, r0
 8010286:	460c      	mov	r4, r1
 8010288:	b10a      	cbz	r2, 801028e <_printf_common+0x26>
 801028a:	3301      	adds	r3, #1
 801028c:	6033      	str	r3, [r6, #0]
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	0699      	lsls	r1, r3, #26
 8010292:	bf42      	ittt	mi
 8010294:	6833      	ldrmi	r3, [r6, #0]
 8010296:	3302      	addmi	r3, #2
 8010298:	6033      	strmi	r3, [r6, #0]
 801029a:	6825      	ldr	r5, [r4, #0]
 801029c:	f015 0506 	ands.w	r5, r5, #6
 80102a0:	d106      	bne.n	80102b0 <_printf_common+0x48>
 80102a2:	f104 0a19 	add.w	sl, r4, #25
 80102a6:	68e3      	ldr	r3, [r4, #12]
 80102a8:	6832      	ldr	r2, [r6, #0]
 80102aa:	1a9b      	subs	r3, r3, r2
 80102ac:	42ab      	cmp	r3, r5
 80102ae:	dc26      	bgt.n	80102fe <_printf_common+0x96>
 80102b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102b4:	6822      	ldr	r2, [r4, #0]
 80102b6:	3b00      	subs	r3, #0
 80102b8:	bf18      	it	ne
 80102ba:	2301      	movne	r3, #1
 80102bc:	0692      	lsls	r2, r2, #26
 80102be:	d42b      	bmi.n	8010318 <_printf_common+0xb0>
 80102c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102c4:	4641      	mov	r1, r8
 80102c6:	4638      	mov	r0, r7
 80102c8:	47c8      	blx	r9
 80102ca:	3001      	adds	r0, #1
 80102cc:	d01e      	beq.n	801030c <_printf_common+0xa4>
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	6922      	ldr	r2, [r4, #16]
 80102d2:	f003 0306 	and.w	r3, r3, #6
 80102d6:	2b04      	cmp	r3, #4
 80102d8:	bf02      	ittt	eq
 80102da:	68e5      	ldreq	r5, [r4, #12]
 80102dc:	6833      	ldreq	r3, [r6, #0]
 80102de:	1aed      	subeq	r5, r5, r3
 80102e0:	68a3      	ldr	r3, [r4, #8]
 80102e2:	bf0c      	ite	eq
 80102e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102e8:	2500      	movne	r5, #0
 80102ea:	4293      	cmp	r3, r2
 80102ec:	bfc4      	itt	gt
 80102ee:	1a9b      	subgt	r3, r3, r2
 80102f0:	18ed      	addgt	r5, r5, r3
 80102f2:	2600      	movs	r6, #0
 80102f4:	341a      	adds	r4, #26
 80102f6:	42b5      	cmp	r5, r6
 80102f8:	d11a      	bne.n	8010330 <_printf_common+0xc8>
 80102fa:	2000      	movs	r0, #0
 80102fc:	e008      	b.n	8010310 <_printf_common+0xa8>
 80102fe:	2301      	movs	r3, #1
 8010300:	4652      	mov	r2, sl
 8010302:	4641      	mov	r1, r8
 8010304:	4638      	mov	r0, r7
 8010306:	47c8      	blx	r9
 8010308:	3001      	adds	r0, #1
 801030a:	d103      	bne.n	8010314 <_printf_common+0xac>
 801030c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010314:	3501      	adds	r5, #1
 8010316:	e7c6      	b.n	80102a6 <_printf_common+0x3e>
 8010318:	18e1      	adds	r1, r4, r3
 801031a:	1c5a      	adds	r2, r3, #1
 801031c:	2030      	movs	r0, #48	@ 0x30
 801031e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010322:	4422      	add	r2, r4
 8010324:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010328:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801032c:	3302      	adds	r3, #2
 801032e:	e7c7      	b.n	80102c0 <_printf_common+0x58>
 8010330:	2301      	movs	r3, #1
 8010332:	4622      	mov	r2, r4
 8010334:	4641      	mov	r1, r8
 8010336:	4638      	mov	r0, r7
 8010338:	47c8      	blx	r9
 801033a:	3001      	adds	r0, #1
 801033c:	d0e6      	beq.n	801030c <_printf_common+0xa4>
 801033e:	3601      	adds	r6, #1
 8010340:	e7d9      	b.n	80102f6 <_printf_common+0x8e>
	...

08010344 <_printf_i>:
 8010344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010348:	7e0f      	ldrb	r7, [r1, #24]
 801034a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801034c:	2f78      	cmp	r7, #120	@ 0x78
 801034e:	4691      	mov	r9, r2
 8010350:	4680      	mov	r8, r0
 8010352:	460c      	mov	r4, r1
 8010354:	469a      	mov	sl, r3
 8010356:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801035a:	d807      	bhi.n	801036c <_printf_i+0x28>
 801035c:	2f62      	cmp	r7, #98	@ 0x62
 801035e:	d80a      	bhi.n	8010376 <_printf_i+0x32>
 8010360:	2f00      	cmp	r7, #0
 8010362:	f000 80d2 	beq.w	801050a <_printf_i+0x1c6>
 8010366:	2f58      	cmp	r7, #88	@ 0x58
 8010368:	f000 80b9 	beq.w	80104de <_printf_i+0x19a>
 801036c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010370:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010374:	e03a      	b.n	80103ec <_printf_i+0xa8>
 8010376:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801037a:	2b15      	cmp	r3, #21
 801037c:	d8f6      	bhi.n	801036c <_printf_i+0x28>
 801037e:	a101      	add	r1, pc, #4	@ (adr r1, 8010384 <_printf_i+0x40>)
 8010380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010384:	080103dd 	.word	0x080103dd
 8010388:	080103f1 	.word	0x080103f1
 801038c:	0801036d 	.word	0x0801036d
 8010390:	0801036d 	.word	0x0801036d
 8010394:	0801036d 	.word	0x0801036d
 8010398:	0801036d 	.word	0x0801036d
 801039c:	080103f1 	.word	0x080103f1
 80103a0:	0801036d 	.word	0x0801036d
 80103a4:	0801036d 	.word	0x0801036d
 80103a8:	0801036d 	.word	0x0801036d
 80103ac:	0801036d 	.word	0x0801036d
 80103b0:	080104f1 	.word	0x080104f1
 80103b4:	0801041b 	.word	0x0801041b
 80103b8:	080104ab 	.word	0x080104ab
 80103bc:	0801036d 	.word	0x0801036d
 80103c0:	0801036d 	.word	0x0801036d
 80103c4:	08010513 	.word	0x08010513
 80103c8:	0801036d 	.word	0x0801036d
 80103cc:	0801041b 	.word	0x0801041b
 80103d0:	0801036d 	.word	0x0801036d
 80103d4:	0801036d 	.word	0x0801036d
 80103d8:	080104b3 	.word	0x080104b3
 80103dc:	6833      	ldr	r3, [r6, #0]
 80103de:	1d1a      	adds	r2, r3, #4
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	6032      	str	r2, [r6, #0]
 80103e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80103ec:	2301      	movs	r3, #1
 80103ee:	e09d      	b.n	801052c <_printf_i+0x1e8>
 80103f0:	6833      	ldr	r3, [r6, #0]
 80103f2:	6820      	ldr	r0, [r4, #0]
 80103f4:	1d19      	adds	r1, r3, #4
 80103f6:	6031      	str	r1, [r6, #0]
 80103f8:	0606      	lsls	r6, r0, #24
 80103fa:	d501      	bpl.n	8010400 <_printf_i+0xbc>
 80103fc:	681d      	ldr	r5, [r3, #0]
 80103fe:	e003      	b.n	8010408 <_printf_i+0xc4>
 8010400:	0645      	lsls	r5, r0, #25
 8010402:	d5fb      	bpl.n	80103fc <_printf_i+0xb8>
 8010404:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010408:	2d00      	cmp	r5, #0
 801040a:	da03      	bge.n	8010414 <_printf_i+0xd0>
 801040c:	232d      	movs	r3, #45	@ 0x2d
 801040e:	426d      	negs	r5, r5
 8010410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010414:	4859      	ldr	r0, [pc, #356]	@ (801057c <_printf_i+0x238>)
 8010416:	230a      	movs	r3, #10
 8010418:	e011      	b.n	801043e <_printf_i+0xfa>
 801041a:	6821      	ldr	r1, [r4, #0]
 801041c:	6833      	ldr	r3, [r6, #0]
 801041e:	0608      	lsls	r0, r1, #24
 8010420:	f853 5b04 	ldr.w	r5, [r3], #4
 8010424:	d402      	bmi.n	801042c <_printf_i+0xe8>
 8010426:	0649      	lsls	r1, r1, #25
 8010428:	bf48      	it	mi
 801042a:	b2ad      	uxthmi	r5, r5
 801042c:	2f6f      	cmp	r7, #111	@ 0x6f
 801042e:	4853      	ldr	r0, [pc, #332]	@ (801057c <_printf_i+0x238>)
 8010430:	6033      	str	r3, [r6, #0]
 8010432:	bf14      	ite	ne
 8010434:	230a      	movne	r3, #10
 8010436:	2308      	moveq	r3, #8
 8010438:	2100      	movs	r1, #0
 801043a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801043e:	6866      	ldr	r6, [r4, #4]
 8010440:	60a6      	str	r6, [r4, #8]
 8010442:	2e00      	cmp	r6, #0
 8010444:	bfa2      	ittt	ge
 8010446:	6821      	ldrge	r1, [r4, #0]
 8010448:	f021 0104 	bicge.w	r1, r1, #4
 801044c:	6021      	strge	r1, [r4, #0]
 801044e:	b90d      	cbnz	r5, 8010454 <_printf_i+0x110>
 8010450:	2e00      	cmp	r6, #0
 8010452:	d04b      	beq.n	80104ec <_printf_i+0x1a8>
 8010454:	4616      	mov	r6, r2
 8010456:	fbb5 f1f3 	udiv	r1, r5, r3
 801045a:	fb03 5711 	mls	r7, r3, r1, r5
 801045e:	5dc7      	ldrb	r7, [r0, r7]
 8010460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010464:	462f      	mov	r7, r5
 8010466:	42bb      	cmp	r3, r7
 8010468:	460d      	mov	r5, r1
 801046a:	d9f4      	bls.n	8010456 <_printf_i+0x112>
 801046c:	2b08      	cmp	r3, #8
 801046e:	d10b      	bne.n	8010488 <_printf_i+0x144>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	07df      	lsls	r7, r3, #31
 8010474:	d508      	bpl.n	8010488 <_printf_i+0x144>
 8010476:	6923      	ldr	r3, [r4, #16]
 8010478:	6861      	ldr	r1, [r4, #4]
 801047a:	4299      	cmp	r1, r3
 801047c:	bfde      	ittt	le
 801047e:	2330      	movle	r3, #48	@ 0x30
 8010480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010484:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010488:	1b92      	subs	r2, r2, r6
 801048a:	6122      	str	r2, [r4, #16]
 801048c:	f8cd a000 	str.w	sl, [sp]
 8010490:	464b      	mov	r3, r9
 8010492:	aa03      	add	r2, sp, #12
 8010494:	4621      	mov	r1, r4
 8010496:	4640      	mov	r0, r8
 8010498:	f7ff fee6 	bl	8010268 <_printf_common>
 801049c:	3001      	adds	r0, #1
 801049e:	d14a      	bne.n	8010536 <_printf_i+0x1f2>
 80104a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104a4:	b004      	add	sp, #16
 80104a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	f043 0320 	orr.w	r3, r3, #32
 80104b0:	6023      	str	r3, [r4, #0]
 80104b2:	4833      	ldr	r0, [pc, #204]	@ (8010580 <_printf_i+0x23c>)
 80104b4:	2778      	movs	r7, #120	@ 0x78
 80104b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	6831      	ldr	r1, [r6, #0]
 80104be:	061f      	lsls	r7, r3, #24
 80104c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80104c4:	d402      	bmi.n	80104cc <_printf_i+0x188>
 80104c6:	065f      	lsls	r7, r3, #25
 80104c8:	bf48      	it	mi
 80104ca:	b2ad      	uxthmi	r5, r5
 80104cc:	6031      	str	r1, [r6, #0]
 80104ce:	07d9      	lsls	r1, r3, #31
 80104d0:	bf44      	itt	mi
 80104d2:	f043 0320 	orrmi.w	r3, r3, #32
 80104d6:	6023      	strmi	r3, [r4, #0]
 80104d8:	b11d      	cbz	r5, 80104e2 <_printf_i+0x19e>
 80104da:	2310      	movs	r3, #16
 80104dc:	e7ac      	b.n	8010438 <_printf_i+0xf4>
 80104de:	4827      	ldr	r0, [pc, #156]	@ (801057c <_printf_i+0x238>)
 80104e0:	e7e9      	b.n	80104b6 <_printf_i+0x172>
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	f023 0320 	bic.w	r3, r3, #32
 80104e8:	6023      	str	r3, [r4, #0]
 80104ea:	e7f6      	b.n	80104da <_printf_i+0x196>
 80104ec:	4616      	mov	r6, r2
 80104ee:	e7bd      	b.n	801046c <_printf_i+0x128>
 80104f0:	6833      	ldr	r3, [r6, #0]
 80104f2:	6825      	ldr	r5, [r4, #0]
 80104f4:	6961      	ldr	r1, [r4, #20]
 80104f6:	1d18      	adds	r0, r3, #4
 80104f8:	6030      	str	r0, [r6, #0]
 80104fa:	062e      	lsls	r6, r5, #24
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	d501      	bpl.n	8010504 <_printf_i+0x1c0>
 8010500:	6019      	str	r1, [r3, #0]
 8010502:	e002      	b.n	801050a <_printf_i+0x1c6>
 8010504:	0668      	lsls	r0, r5, #25
 8010506:	d5fb      	bpl.n	8010500 <_printf_i+0x1bc>
 8010508:	8019      	strh	r1, [r3, #0]
 801050a:	2300      	movs	r3, #0
 801050c:	6123      	str	r3, [r4, #16]
 801050e:	4616      	mov	r6, r2
 8010510:	e7bc      	b.n	801048c <_printf_i+0x148>
 8010512:	6833      	ldr	r3, [r6, #0]
 8010514:	1d1a      	adds	r2, r3, #4
 8010516:	6032      	str	r2, [r6, #0]
 8010518:	681e      	ldr	r6, [r3, #0]
 801051a:	6862      	ldr	r2, [r4, #4]
 801051c:	2100      	movs	r1, #0
 801051e:	4630      	mov	r0, r6
 8010520:	f7ef fe5e 	bl	80001e0 <memchr>
 8010524:	b108      	cbz	r0, 801052a <_printf_i+0x1e6>
 8010526:	1b80      	subs	r0, r0, r6
 8010528:	6060      	str	r0, [r4, #4]
 801052a:	6863      	ldr	r3, [r4, #4]
 801052c:	6123      	str	r3, [r4, #16]
 801052e:	2300      	movs	r3, #0
 8010530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010534:	e7aa      	b.n	801048c <_printf_i+0x148>
 8010536:	6923      	ldr	r3, [r4, #16]
 8010538:	4632      	mov	r2, r6
 801053a:	4649      	mov	r1, r9
 801053c:	4640      	mov	r0, r8
 801053e:	47d0      	blx	sl
 8010540:	3001      	adds	r0, #1
 8010542:	d0ad      	beq.n	80104a0 <_printf_i+0x15c>
 8010544:	6823      	ldr	r3, [r4, #0]
 8010546:	079b      	lsls	r3, r3, #30
 8010548:	d413      	bmi.n	8010572 <_printf_i+0x22e>
 801054a:	68e0      	ldr	r0, [r4, #12]
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	4298      	cmp	r0, r3
 8010550:	bfb8      	it	lt
 8010552:	4618      	movlt	r0, r3
 8010554:	e7a6      	b.n	80104a4 <_printf_i+0x160>
 8010556:	2301      	movs	r3, #1
 8010558:	4632      	mov	r2, r6
 801055a:	4649      	mov	r1, r9
 801055c:	4640      	mov	r0, r8
 801055e:	47d0      	blx	sl
 8010560:	3001      	adds	r0, #1
 8010562:	d09d      	beq.n	80104a0 <_printf_i+0x15c>
 8010564:	3501      	adds	r5, #1
 8010566:	68e3      	ldr	r3, [r4, #12]
 8010568:	9903      	ldr	r1, [sp, #12]
 801056a:	1a5b      	subs	r3, r3, r1
 801056c:	42ab      	cmp	r3, r5
 801056e:	dcf2      	bgt.n	8010556 <_printf_i+0x212>
 8010570:	e7eb      	b.n	801054a <_printf_i+0x206>
 8010572:	2500      	movs	r5, #0
 8010574:	f104 0619 	add.w	r6, r4, #25
 8010578:	e7f5      	b.n	8010566 <_printf_i+0x222>
 801057a:	bf00      	nop
 801057c:	080108a5 	.word	0x080108a5
 8010580:	080108b6 	.word	0x080108b6

08010584 <memmove>:
 8010584:	4288      	cmp	r0, r1
 8010586:	b510      	push	{r4, lr}
 8010588:	eb01 0402 	add.w	r4, r1, r2
 801058c:	d902      	bls.n	8010594 <memmove+0x10>
 801058e:	4284      	cmp	r4, r0
 8010590:	4623      	mov	r3, r4
 8010592:	d807      	bhi.n	80105a4 <memmove+0x20>
 8010594:	1e43      	subs	r3, r0, #1
 8010596:	42a1      	cmp	r1, r4
 8010598:	d008      	beq.n	80105ac <memmove+0x28>
 801059a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801059e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105a2:	e7f8      	b.n	8010596 <memmove+0x12>
 80105a4:	4402      	add	r2, r0
 80105a6:	4601      	mov	r1, r0
 80105a8:	428a      	cmp	r2, r1
 80105aa:	d100      	bne.n	80105ae <memmove+0x2a>
 80105ac:	bd10      	pop	{r4, pc}
 80105ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105b6:	e7f7      	b.n	80105a8 <memmove+0x24>

080105b8 <_realloc_r>:
 80105b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105bc:	4680      	mov	r8, r0
 80105be:	4615      	mov	r5, r2
 80105c0:	460c      	mov	r4, r1
 80105c2:	b921      	cbnz	r1, 80105ce <_realloc_r+0x16>
 80105c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105c8:	4611      	mov	r1, r2
 80105ca:	f7ff bb4f 	b.w	800fc6c <_malloc_r>
 80105ce:	b92a      	cbnz	r2, 80105dc <_realloc_r+0x24>
 80105d0:	f7ff fca8 	bl	800ff24 <_free_r>
 80105d4:	2400      	movs	r4, #0
 80105d6:	4620      	mov	r0, r4
 80105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105dc:	f000 f81a 	bl	8010614 <_malloc_usable_size_r>
 80105e0:	4285      	cmp	r5, r0
 80105e2:	4606      	mov	r6, r0
 80105e4:	d802      	bhi.n	80105ec <_realloc_r+0x34>
 80105e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105ea:	d8f4      	bhi.n	80105d6 <_realloc_r+0x1e>
 80105ec:	4629      	mov	r1, r5
 80105ee:	4640      	mov	r0, r8
 80105f0:	f7ff fb3c 	bl	800fc6c <_malloc_r>
 80105f4:	4607      	mov	r7, r0
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d0ec      	beq.n	80105d4 <_realloc_r+0x1c>
 80105fa:	42b5      	cmp	r5, r6
 80105fc:	462a      	mov	r2, r5
 80105fe:	4621      	mov	r1, r4
 8010600:	bf28      	it	cs
 8010602:	4632      	movcs	r2, r6
 8010604:	f7ff fc80 	bl	800ff08 <memcpy>
 8010608:	4621      	mov	r1, r4
 801060a:	4640      	mov	r0, r8
 801060c:	f7ff fc8a 	bl	800ff24 <_free_r>
 8010610:	463c      	mov	r4, r7
 8010612:	e7e0      	b.n	80105d6 <_realloc_r+0x1e>

08010614 <_malloc_usable_size_r>:
 8010614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010618:	1f18      	subs	r0, r3, #4
 801061a:	2b00      	cmp	r3, #0
 801061c:	bfbc      	itt	lt
 801061e:	580b      	ldrlt	r3, [r1, r0]
 8010620:	18c0      	addlt	r0, r0, r3
 8010622:	4770      	bx	lr

08010624 <_init>:
 8010624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010626:	bf00      	nop
 8010628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801062a:	bc08      	pop	{r3}
 801062c:	469e      	mov	lr, r3
 801062e:	4770      	bx	lr

08010630 <_fini>:
 8010630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010632:	bf00      	nop
 8010634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010636:	bc08      	pop	{r3}
 8010638:	469e      	mov	lr, r3
 801063a:	4770      	bx	lr
