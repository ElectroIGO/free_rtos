
2024-IOS-MD02-Rodrigo-Laurinovics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013250  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080133e0  080133e0  000143e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080136f8  080136f8  000150b0  2**0
                  CONTENTS
  4 .ARM          00000008  080136f8  080136f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013700  08013700  000150b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013700  08013700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013704  08013704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08013708  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000150b0  2**0
                  CONTENTS
 10 .bss          000071e4  200000b0  200000b0  000150b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007294  20007294  000150b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d4f6  00000000  00000000  000150e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006423  00000000  00000000  000425d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002478  00000000  00000000  00048a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c49  00000000  00000000  0004ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a264  00000000  00000000  0004cac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d470  00000000  00000000  00076d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea3c2  00000000  00000000  000a4195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018e557  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a798  00000000  00000000  0018e59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00198d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080133c8 	.word	0x080133c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	080133c8 	.word	0x080133c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000efc:	2200      	movs	r2, #0
 8000efe:	2108      	movs	r1, #8
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LIS3DSH_WriteIO+0x4c>)
 8000f02:	f002 fcd9 	bl	80038b8 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000f06:	f107 010f 	add.w	r1, r7, #15
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	480a      	ldr	r0, [pc, #40]	@ (8000f38 <LIS3DSH_WriteIO+0x50>)
 8000f10:	f006 fc81 	bl	8007816 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	230a      	movs	r3, #10
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <LIS3DSH_WriteIO+0x50>)
 8000f1e:	f006 fc7a 	bl	8007816 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f22:	2201      	movs	r2, #1
 8000f24:	2108      	movs	r1, #8
 8000f26:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <LIS3DSH_WriteIO+0x4c>)
 8000f28:	f002 fcc6 	bl	80038b8 <HAL_GPIO_WritePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	200000cc 	.word	0x200000cc

08000f3c <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <LIS3DSH_ReadIO+0x80>)
 8000f5c:	f002 fcac 	bl	80038b8 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f60:	f107 0108 	add.w	r1, r7, #8
 8000f64:	230a      	movs	r3, #10
 8000f66:	2201      	movs	r2, #1
 8000f68:	4815      	ldr	r0, [pc, #84]	@ (8000fc0 <LIS3DSH_ReadIO+0x84>)
 8000f6a:	f006 fc54 	bl	8007816 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f107 0108 	add.w	r1, r7, #8
 8000f76:	230a      	movs	r3, #10
 8000f78:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <LIS3DSH_ReadIO+0x84>)
 8000f7a:	f006 fd8f 	bl	8007a9c <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2108      	movs	r1, #8
 8000f82:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <LIS3DSH_ReadIO+0x80>)
 8000f84:	f002 fc98 	bl	80038b8 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e00b      	b.n	8000fa6 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	6839      	ldr	r1, [r7, #0]
 8000f94:	440b      	add	r3, r1
 8000f96:	3210      	adds	r2, #16
 8000f98:	443a      	add	r2, r7
 8000f9a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f9e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbed      	blt.n	8000f8e <LIS3DSH_ReadIO+0x52>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	200000cc 	.word	0x200000cc

08000fc4 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000fd2:	2258      	movs	r2, #88	@ 0x58
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	485b      	ldr	r0, [pc, #364]	@ (8001144 <LIS3DSH_Init+0x180>)
 8000fd8:	f010 ffbd 	bl	8011f56 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	78db      	ldrb	r3, [r3, #3]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	b25a      	sxtb	r2, r3
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b25b      	sxtb	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800100c:	f107 030f 	add.w	r3, r7, #15
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	2020      	movs	r0, #32
 8001016:	f7ff ff67 	bl	8000ee8 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001028:	b25a      	sxtb	r2, r3
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001040:	b25a      	sxtb	r2, r3
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b25b      	sxtb	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800104e:	f107 030f 	add.w	r3, r7, #15
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	2024      	movs	r0, #36	@ 0x24
 8001058:	f7ff ff46 	bl	8000ee8 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8001064:	2388      	movs	r3, #136	@ 0x88
 8001066:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001068:	f107 030f 	add.w	r3, r7, #15
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	2023      	movs	r0, #35	@ 0x23
 8001072:	f7ff ff39 	bl	8000ee8 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	2b20      	cmp	r3, #32
 800107c:	d858      	bhi.n	8001130 <LIS3DSH_Init+0x16c>
 800107e:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <LIS3DSH_Init+0xc0>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001109 	.word	0x08001109
 8001088:	08001131 	.word	0x08001131
 800108c:	08001131 	.word	0x08001131
 8001090:	08001131 	.word	0x08001131
 8001094:	08001131 	.word	0x08001131
 8001098:	08001131 	.word	0x08001131
 800109c:	08001131 	.word	0x08001131
 80010a0:	08001131 	.word	0x08001131
 80010a4:	08001111 	.word	0x08001111
 80010a8:	08001131 	.word	0x08001131
 80010ac:	08001131 	.word	0x08001131
 80010b0:	08001131 	.word	0x08001131
 80010b4:	08001131 	.word	0x08001131
 80010b8:	08001131 	.word	0x08001131
 80010bc:	08001131 	.word	0x08001131
 80010c0:	08001131 	.word	0x08001131
 80010c4:	08001119 	.word	0x08001119
 80010c8:	08001131 	.word	0x08001131
 80010cc:	08001131 	.word	0x08001131
 80010d0:	08001131 	.word	0x08001131
 80010d4:	08001131 	.word	0x08001131
 80010d8:	08001131 	.word	0x08001131
 80010dc:	08001131 	.word	0x08001131
 80010e0:	08001131 	.word	0x08001131
 80010e4:	08001121 	.word	0x08001121
 80010e8:	08001131 	.word	0x08001131
 80010ec:	08001131 	.word	0x08001131
 80010f0:	08001131 	.word	0x08001131
 80010f4:	08001131 	.word	0x08001131
 80010f8:	08001131 	.word	0x08001131
 80010fc:	08001131 	.word	0x08001131
 8001100:	08001131 	.word	0x08001131
 8001104:	08001129 	.word	0x08001129
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <LIS3DSH_Init+0x184>)
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <LIS3DSH_Init+0x188>)
 800110c:	601a      	str	r2, [r3, #0]
			break;
 800110e:	e00f      	b.n	8001130 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <LIS3DSH_Init+0x184>)
 8001112:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <LIS3DSH_Init+0x18c>)
 8001114:	601a      	str	r2, [r3, #0]
			break;
 8001116:	e00b      	b.n	8001130 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <LIS3DSH_Init+0x184>)
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <LIS3DSH_Init+0x190>)
 800111c:	601a      	str	r2, [r3, #0]
			break;
 800111e:	e007      	b.n	8001130 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <LIS3DSH_Init+0x184>)
 8001122:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <LIS3DSH_Init+0x194>)
 8001124:	601a      	str	r2, [r3, #0]
			break;
 8001126:	e003      	b.n	8001130 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <LIS3DSH_Init+0x184>)
 800112a:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <LIS3DSH_Init+0x198>)
 800112c:	601a      	str	r2, [r3, #0]
			break;
 800112e:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001130:	2201      	movs	r2, #1
 8001132:	2108      	movs	r1, #8
 8001134:	480a      	ldr	r0, [pc, #40]	@ (8001160 <LIS3DSH_Init+0x19c>)
 8001136:	f002 fbbf 	bl	80038b8 <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000cc 	.word	0x200000cc
 8001148:	20000000 	.word	0x20000000
 800114c:	3d75c28f 	.word	0x3d75c28f
 8001150:	3df5c28f 	.word	0x3df5c28f
 8001154:	3e3851ec 	.word	0x3e3851ec
 8001158:	3e75c28f 	.word	0x3e75c28f
 800115c:	3f3ae148 	.word	0x3f3ae148
 8001160:	40021000 	.word	0x40021000

08001164 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2202      	movs	r2, #2
 8001172:	4619      	mov	r1, r3
 8001174:	2028      	movs	r0, #40	@ 0x28
 8001176:	f7ff fee1 	bl	8000f3c <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b29b      	uxth	r3, r3
 8001180:	7d3a      	ldrb	r2, [r7, #20]
 8001182:	4413      	add	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	b21b      	sxth	r3, r3
 8001188:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2202      	movs	r2, #2
 8001190:	4619      	mov	r1, r3
 8001192:	202a      	movs	r0, #42	@ 0x2a
 8001194:	f7ff fed2 	bl	8000f3c <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001198:	7d7b      	ldrb	r3, [r7, #21]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	7d3a      	ldrb	r2, [r7, #20]
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2202      	movs	r2, #2
 80011ae:	4619      	mov	r1, r3
 80011b0:	202c      	movs	r0, #44	@ 0x2c
 80011b2:	f7ff fec3 	bl	8000f3c <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	7d3a      	ldrb	r2, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	461a      	mov	r2, r3
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	6010      	str	r0, [r2, #0]
 80011d2:	889b      	ldrh	r3, [r3, #4]
 80011d4:	8093      	strh	r3, [r2, #4]

}
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffba 	bl	8001164 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80011f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <LIS3DSH_GetDataScaled+0xe4>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <LIS3DSH_GetDataScaled+0xe8>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001210:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80012cc <LIS3DSH_GetDataScaled+0xec>
 8001214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001218:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <LIS3DSH_GetDataScaled+0xf0>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001222:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001226:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	4b24      	ldr	r3, [pc, #144]	@ (80012c4 <LIS3DSH_GetDataScaled+0xe4>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123c:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <LIS3DSH_GetDataScaled+0xf4>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80012cc <LIS3DSH_GetDataScaled+0xec>
 800124a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <LIS3DSH_GetDataScaled+0xf8>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001258:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800125c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <LIS3DSH_GetDataScaled+0xe4>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <LIS3DSH_GetDataScaled+0xfc>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80012cc <LIS3DSH_GetDataScaled+0xec>
 8001280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <LIS3DSH_GetDataScaled+0x100>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	f107 0210 	add.w	r2, r7, #16
 800129a:	ca07      	ldmia	r2, {r0, r1, r2}
 800129c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	ee06 1a90 	vmov	s13, r1
 80012aa:	ee07 2a10 	vmov	s14, r2
 80012ae:	ee07 3a90 	vmov	s15, r3
}
 80012b2:	eeb0 0a66 	vmov.f32	s0, s13
 80012b6:	eef0 0a47 	vmov.f32	s1, s14
 80012ba:	eeb0 1a67 	vmov.f32	s2, s15
 80012be:	3730      	adds	r7, #48	@ 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004
 80012cc:	00000000 	.word	0x00000000
 80012d0:	20000124 	.word	0x20000124
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000128 	.word	0x20000128
 80012dc:	2000000c 	.word	0x2000000c
 80012e0:	2000012c 	.word	0x2000012c

080012e4 <vApplicationIdleHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012fe:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800130a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800130e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001312:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800131a:	e000      	b.n	800131e <ITM_SendChar+0x2c>
    {
      __NOP();
 800131c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800131e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f9      	beq.n	800131c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001328:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f001 fbd2 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f8c2 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 fb18 	bl	8001980 <MX_GPIO_Init>
  MX_DMA_Init();
 8001350:	f000 faf6 	bl	8001940 <MX_DMA_Init>
  MX_I2C1_Init();
 8001354:	f000 f928 	bl	80015a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001358:	f000 f954 	bl	8001604 <MX_I2S3_Init>
  MX_SPI1_Init();
 800135c:	f000 f9a8 	bl	80016b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001360:	f000 fac4 	bl	80018ec <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001364:	f000 f97e 	bl	8001664 <MX_RTC_Init>
  MX_TIM3_Init();
 8001368:	f000 fa26 	bl	80017b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800136c:	f000 fa70 	bl	8001850 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001370:	f000 f9d4 	bl	800171c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001374:	4835      	ldr	r0, [pc, #212]	@ (800144c <main+0x10c>)
 8001376:	f006 ffeb 	bl	8008350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800137a:	4835      	ldr	r0, [pc, #212]	@ (8001450 <main+0x110>)
 800137c:	f006 ffe8 	bl	8008350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001380:	4834      	ldr	r0, [pc, #208]	@ (8001454 <main+0x114>)
 8001382:	f006 ffe5 	bl	8008350 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_Buf, RXBUFF_SIZE);
 8001386:	220a      	movs	r2, #10
 8001388:	4933      	ldr	r1, [pc, #204]	@ (8001458 <main+0x118>)
 800138a:	4834      	ldr	r0, [pc, #208]	@ (800145c <main+0x11c>)
 800138c:	f007 fc56 	bl	8008c3c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001390:	4b33      	ldr	r3, [pc, #204]	@ (8001460 <main+0x120>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <main+0x120>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013a0:	f00c f9c2 	bl	800d728 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LIS3DSH_DataScaled */
  LIS3DSH_DataScaledHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_DataScaled_attributes);
 80013a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001464 <main+0x124>)
 80013a6:	210c      	movs	r1, #12
 80013a8:	2003      	movs	r0, #3
 80013aa:	f00c fb83 	bl	800dab4 <osMessageQueueNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <main+0x128>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* creation of LIS3DSH_ProcessedData */
  LIS3DSH_ProcessedDataHandle = osMessageQueueNew (3, sizeof(LIS3DSH_DataScaled), &LIS3DSH_ProcessedData_attributes);
 80013b4:	4a2d      	ldr	r2, [pc, #180]	@ (800146c <main+0x12c>)
 80013b6:	210c      	movs	r1, #12
 80013b8:	2003      	movs	r0, #3
 80013ba:	f00c fb7b 	bl	800dab4 <osMessageQueueNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001470 <main+0x130>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* creation of RTC_Data */
  RTC_DataHandle = osMessageQueueNew (3, sizeof(My_RTC_Data), &RTC_Data_attributes);
 80013c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001474 <main+0x134>)
 80013c6:	2118      	movs	r1, #24
 80013c8:	2003      	movs	r0, #3
 80013ca:	f00c fb73 	bl	800dab4 <osMessageQueueNew>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a29      	ldr	r2, [pc, #164]	@ (8001478 <main+0x138>)
 80013d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myUserMsg */
  myUserMsgHandle = osThreadNew(MY_User_Message, NULL, &myUserMsg_attributes);
 80013d4:	4a29      	ldr	r2, [pc, #164]	@ (800147c <main+0x13c>)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4829      	ldr	r0, [pc, #164]	@ (8001480 <main+0x140>)
 80013da:	f00c f9ef 	bl	800d7bc <osThreadNew>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a28      	ldr	r2, [pc, #160]	@ (8001484 <main+0x144>)
 80013e2:	6013      	str	r3, [r2, #0]

  /* creation of myRTCTime */
  myRTCTimeHandle = osThreadNew(MY_RTC_Time, NULL, &myRTCTime_attributes);
 80013e4:	4a28      	ldr	r2, [pc, #160]	@ (8001488 <main+0x148>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4828      	ldr	r0, [pc, #160]	@ (800148c <main+0x14c>)
 80013ea:	f00c f9e7 	bl	800d7bc <osThreadNew>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <main+0x150>)
 80013f2:	6013      	str	r3, [r2, #0]

  /* creation of myGetAccData */
  myGetAccDataHandle = osThreadNew(MY_Get_Acc_Data, NULL, &myGetAccData_attributes);
 80013f4:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <main+0x154>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4827      	ldr	r0, [pc, #156]	@ (8001498 <main+0x158>)
 80013fa:	f00c f9df 	bl	800d7bc <osThreadNew>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a26      	ldr	r2, [pc, #152]	@ (800149c <main+0x15c>)
 8001402:	6013      	str	r3, [r2, #0]

  /* creation of myIntTask */
  myIntTaskHandle = osThreadNew(my_Int_Task, NULL, &myIntTask_attributes);
 8001404:	4a26      	ldr	r2, [pc, #152]	@ (80014a0 <main+0x160>)
 8001406:	2100      	movs	r1, #0
 8001408:	4826      	ldr	r0, [pc, #152]	@ (80014a4 <main+0x164>)
 800140a:	f00c f9d7 	bl	800d7bc <osThreadNew>
 800140e:	4603      	mov	r3, r0
 8001410:	4a25      	ldr	r2, [pc, #148]	@ (80014a8 <main+0x168>)
 8001412:	6013      	str	r3, [r2, #0]

  /* creation of myfreeRTOSManager */
  myfreeRTOSManagerHandle = osThreadNew(MY_freeRTOS_Task_Manager, NULL, &myfreeRTOSManager_attributes);
 8001414:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <main+0x16c>)
 8001416:	2100      	movs	r1, #0
 8001418:	4825      	ldr	r0, [pc, #148]	@ (80014b0 <main+0x170>)
 800141a:	f00c f9cf 	bl	800d7bc <osThreadNew>
 800141e:	4603      	mov	r3, r0
 8001420:	4a24      	ldr	r2, [pc, #144]	@ (80014b4 <main+0x174>)
 8001422:	6013      	str	r3, [r2, #0]

  /* creation of myProcessAccData */
  myProcessAccDataHandle = osThreadNew(MY_Process_AccData, NULL, &myProcessAccData_attributes);
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <main+0x178>)
 8001426:	2100      	movs	r1, #0
 8001428:	4824      	ldr	r0, [pc, #144]	@ (80014bc <main+0x17c>)
 800142a:	f00c f9c7 	bl	800d7bc <osThreadNew>
 800142e:	4603      	mov	r3, r0
 8001430:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <main+0x180>)
 8001432:	6013      	str	r3, [r2, #0]

  /* creation of myProcessCMD */
  myProcessCMDHandle = osThreadNew(MY_Process_CMD, NULL, &myProcessCMD_attributes);
 8001434:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <main+0x184>)
 8001436:	2100      	movs	r1, #0
 8001438:	4823      	ldr	r0, [pc, #140]	@ (80014c8 <main+0x188>)
 800143a:	f00c f9bf 	bl	800d7bc <osThreadNew>
 800143e:	4603      	mov	r3, r0
 8001440:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <main+0x18c>)
 8001442:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001444:	f00c f994 	bl	800d770 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <main+0x108>
 800144c:	20000244 	.word	0x20000244
 8001450:	2000028c 	.word	0x2000028c
 8001454:	200002d4 	.word	0x200002d4
 8001458:	20001ecc 	.word	0x20001ecc
 800145c:	2000031c 	.word	0x2000031c
 8001460:	20000364 	.word	0x20000364
 8001464:	080135e8 	.word	0x080135e8
 8001468:	200003e0 	.word	0x200003e0
 800146c:	08013600 	.word	0x08013600
 8001470:	200003e4 	.word	0x200003e4
 8001474:	08013618 	.word	0x08013618
 8001478:	200003e8 	.word	0x200003e8
 800147c:	080134ec 	.word	0x080134ec
 8001480:	08001e89 	.word	0x08001e89
 8001484:	200003c4 	.word	0x200003c4
 8001488:	08013510 	.word	0x08013510
 800148c:	08001ed9 	.word	0x08001ed9
 8001490:	200003c8 	.word	0x200003c8
 8001494:	08013534 	.word	0x08013534
 8001498:	08001f29 	.word	0x08001f29
 800149c:	200003cc 	.word	0x200003cc
 80014a0:	08013558 	.word	0x08013558
 80014a4:	08001fa9 	.word	0x08001fa9
 80014a8:	200003d0 	.word	0x200003d0
 80014ac:	0801357c 	.word	0x0801357c
 80014b0:	08001fb9 	.word	0x08001fb9
 80014b4:	200003d4 	.word	0x200003d4
 80014b8:	080135a0 	.word	0x080135a0
 80014bc:	08001ff1 	.word	0x08001ff1
 80014c0:	200003d8 	.word	0x200003d8
 80014c4:	080135c4 	.word	0x080135c4
 80014c8:	080021e9 	.word	0x080021e9
 80014cc:	200003dc 	.word	0x200003dc

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	@ 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f010 fc4f 	bl	8011d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <SystemClock_Config+0xd0>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <SystemClock_Config+0xd0>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b23      	ldr	r3, [pc, #140]	@ (80015a4 <SystemClock_Config+0xd4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a22      	ldr	r2, [pc, #136]	@ (80015a4 <SystemClock_Config+0xd4>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <SystemClock_Config+0xd4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800152c:	2309      	movs	r3, #9
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001548:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800154c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001552:	2307      	movs	r3, #7
 8001554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4618      	mov	r0, r3
 800155c:	f005 f8f6 	bl	800674c <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001566:	f000 febf 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001576:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800157a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800157c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001580:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2105      	movs	r1, #5
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fb57 	bl	8006c3c <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001594:	f000 fea8 	bl	80022e8 <Error_Handler>
  }
}
 8001598:	bf00      	nop
 800159a:	3750      	adds	r7, #80	@ 0x50
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <MX_I2C1_Init+0x54>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <MX_I2C1_Init+0x58>)
 80015b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_I2C1_Init+0x50>)
 80015e6:	f004 facd 	bl	8005b84 <HAL_I2C_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f000 fe7a 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000130 	.word	0x20000130
 80015fc:	40005400 	.word	0x40005400
 8001600:	000186a0 	.word	0x000186a0

08001604 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_I2S3_Init+0x54>)
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <MX_I2S3_Init+0x58>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_I2S3_Init+0x54>)
 8001610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001614:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_I2S3_Init+0x54>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_I2S3_Init+0x54>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <MX_I2S3_Init+0x54>)
 8001624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001628:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_I2S3_Init+0x54>)
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <MX_I2S3_Init+0x5c>)
 800162e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_I2S3_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MX_I2S3_Init+0x54>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_I2S3_Init+0x54>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_I2S3_Init+0x54>)
 8001644:	f004 fbe2 	bl	8005e0c <HAL_I2S_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800164e:	f000 fe4b 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000184 	.word	0x20000184
 800165c:	40003c00 	.word	0x40003c00
 8001660:	00017700 	.word	0x00017700

08001664 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_RTC_Init+0x44>)
 800166a:	4a10      	ldr	r2, [pc, #64]	@ (80016ac <MX_RTC_Init+0x48>)
 800166c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_RTC_Init+0x44>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_RTC_Init+0x44>)
 8001676:	227f      	movs	r2, #127	@ 0x7f
 8001678:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_RTC_Init+0x44>)
 800167c:	22ff      	movs	r2, #255	@ 0xff
 800167e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_RTC_Init+0x44>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_RTC_Init+0x44>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_RTC_Init+0x44>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_RTC_Init+0x44>)
 8001694:	f005 fe66 	bl	8007364 <HAL_RTC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800169e:	f000 fe23 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001cc 	.word	0x200001cc
 80016ac:	40002800 	.word	0x40002800

080016b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016b6:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <MX_SPI1_Init+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016e4:	2228      	movs	r2, #40	@ 0x28
 80016e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_SPI1_Init+0x64>)
 80016fc:	220a      	movs	r2, #10
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	@ (8001714 <MX_SPI1_Init+0x64>)
 8001702:	f005 ffff 	bl	8007704 <HAL_SPI_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800170c:	f000 fdec 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200001ec 	.word	0x200001ec
 8001718:	40013000 	.word	0x40013000

0800171c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	463b      	mov	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_TIM2_Init+0x98>)
 800173a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800173e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_TIM2_Init+0x98>)
 8001742:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_TIM2_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_TIM2_Init+0x98>)
 8001750:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001754:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_TIM2_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <MX_TIM2_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001762:	4814      	ldr	r0, [pc, #80]	@ (80017b4 <MX_TIM2_Init+0x98>)
 8001764:	f006 fda4 	bl	80082b0 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800176e:	f000 fdbb 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4619      	mov	r1, r3
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_TIM2_Init+0x98>)
 8001780:	f006 ff46 	bl	8008610 <HAL_TIM_ConfigClockSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800178a:	f000 fdad 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001796:	463b      	mov	r3, r7
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <MX_TIM2_Init+0x98>)
 800179c:	f007 f96e 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017a6:	f000 fd9f 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000244 	.word	0x20000244

080017b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017d6:	4a1d      	ldr	r2, [pc, #116]	@ (800184c <MX_TIM3_Init+0x94>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017dc:	2254      	movs	r2, #84	@ 0x54
 80017de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017e8:	2264      	movs	r2, #100	@ 0x64
 80017ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f8:	4813      	ldr	r0, [pc, #76]	@ (8001848 <MX_TIM3_Init+0x90>)
 80017fa:	f006 fd59 	bl	80082b0 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001804:	f000 fd70 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4619      	mov	r1, r3
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <MX_TIM3_Init+0x90>)
 8001816:	f006 fefb 	bl	8008610 <HAL_TIM_ConfigClockSource>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001820:	f000 fd62 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_TIM3_Init+0x90>)
 8001832:	f007 f923 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800183c:	f000 fd54 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000028c 	.word	0x2000028c
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <MX_TIM4_Init+0x94>)
 800186e:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <MX_TIM4_Init+0x98>)
 8001870:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_TIM4_Init+0x94>)
 8001874:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_TIM4_Init+0x94>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_TIM4_Init+0x94>)
 8001882:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_TIM4_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_TIM4_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001894:	4813      	ldr	r0, [pc, #76]	@ (80018e4 <MX_TIM4_Init+0x94>)
 8001896:	f006 fd0b 	bl	80082b0 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80018a0:	f000 fd22 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <MX_TIM4_Init+0x94>)
 80018b2:	f006 fead 	bl	8008610 <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80018bc:	f000 fd14 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_TIM4_Init+0x94>)
 80018ce:	f007 f8d5 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f000 fd06 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002d4 	.word	0x200002d4
 80018e8:	40000800 	.word	0x40000800

080018ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <MX_USART2_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001924:	f007 f93a 	bl	8008b9c <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 fcdb 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000031c 	.word	0x2000031c
 800193c:	40004400 	.word	0x40004400

08001940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_DMA_Init+0x3c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <MX_DMA_Init+0x3c>)
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_DMA_Init+0x3c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2105      	movs	r1, #5
 8001966:	2010      	movs	r0, #16
 8001968:	f001 f9de 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800196c:	2010      	movs	r0, #16
 800196e:	f001 f9f7 	bl	8002d60 <HAL_NVIC_EnableIRQ>

}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	@ 0x30
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b76      	ldr	r3, [pc, #472]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a75      	ldr	r2, [pc, #468]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b68      	ldr	r3, [pc, #416]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a67      	ldr	r2, [pc, #412]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b61      	ldr	r3, [pc, #388]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a60      	ldr	r2, [pc, #384]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a59      	ldr	r2, [pc, #356]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b57      	ldr	r3, [pc, #348]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a52      	ldr	r2, [pc, #328]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	484d      	ldr	r0, [pc, #308]	@ (8001b78 <MX_GPIO_Init+0x1f8>)
 8001a44:	f001 ff38 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	484b      	ldr	r0, [pc, #300]	@ (8001b7c <MX_GPIO_Init+0x1fc>)
 8001a4e:	f001 ff33 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a52:	2200      	movs	r2, #0
 8001a54:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001a58:	4849      	ldr	r0, [pc, #292]	@ (8001b80 <MX_GPIO_Init+0x200>)
 8001a5a:	f001 ff2d 	bl	80038b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	4840      	ldr	r0, [pc, #256]	@ (8001b78 <MX_GPIO_Init+0x1f8>)
 8001a76:	f001 fd83 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	483a      	ldr	r0, [pc, #232]	@ (8001b7c <MX_GPIO_Init+0x1fc>)
 8001a92:	f001 fd75 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a96:	2308      	movs	r3, #8
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4832      	ldr	r0, [pc, #200]	@ (8001b7c <MX_GPIO_Init+0x1fc>)
 8001ab2:	f001 fd65 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	482e      	ldr	r0, [pc, #184]	@ (8001b84 <MX_GPIO_Init+0x204>)
 8001aca:	f001 fd59 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4826      	ldr	r0, [pc, #152]	@ (8001b84 <MX_GPIO_Init+0x204>)
 8001aec:	f001 fd48 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001af0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001af4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	481d      	ldr	r0, [pc, #116]	@ (8001b80 <MX_GPIO_Init+0x200>)
 8001b0a:	f001 fd39 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4817      	ldr	r0, [pc, #92]	@ (8001b80 <MX_GPIO_Init+0x200>)
 8001b22:	f001 fd2d 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT1_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480f      	ldr	r0, [pc, #60]	@ (8001b78 <MX_GPIO_Init+0x1f8>)
 8001b3c:	f001 fd20 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <MX_GPIO_Init+0x1f8>)
 8001b56:	f001 fd13 	bl	8003580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f001 f8e2 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b64:	2006      	movs	r0, #6
 8001b66:	f001 f8fb 	bl	8002d60 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	@ 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MEMS_INT1_Pin){
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10a      	bne.n	8001bae <HAL_GPIO_EXTI_Callback+0x26>
		osThreadFlagsSet(myGetAccDataHandle, 0x0001);
 8001b98:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00b fe9e 	bl	800d8e0 <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001ba4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0x34>)
 8001baa:	f001 fe9e 	bl	80038ea <HAL_GPIO_TogglePin>
	}
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200003cc 	.word	0x200003cc
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <__io_putchar>:

int __io_putchar(int ch) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fb91 	bl	80012f2 <ITM_SendChar>
    return ch;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_UARTEx_RxEventCallback>:
//        ITM_SendChar(*ptr++);
//
//    return len;
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <HAL_UARTEx_RxEventCallback+0x68>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d124      	bne.n	8001c3c <HAL_UARTEx_RxEventCallback+0x60>
//			 * we will simply copy the data into the buffer and update the position
//			 */
//			memcpy ((uint8_t *)Main_Buf+oldPos, Rx_Buf, Size);
//			newPos = Size+oldPos;
//		}
		if((Rx_Buf[0] == '<') && (Rx_Buf[9] == '>')){
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b3c      	cmp	r3, #60	@ 0x3c
 8001bf8:	d113      	bne.n	8001c22 <HAL_UARTEx_RxEventCallback+0x46>
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001bfc:	7a5b      	ldrb	r3, [r3, #9]
 8001bfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c00:	d10f      	bne.n	8001c22 <HAL_UARTEx_RxEventCallback+0x46>
			memcpy ((uint8_t *)Main_Buf, &Rx_Buf[1], 8);
 8001c02:	2208      	movs	r2, #8
 8001c04:	4911      	ldr	r1, [pc, #68]	@ (8001c4c <HAL_UARTEx_RxEventCallback+0x70>)
 8001c06:	4812      	ldr	r0, [pc, #72]	@ (8001c50 <HAL_UARTEx_RxEventCallback+0x74>)
 8001c08:	f010 f9a5 	bl	8011f56 <memcpy>
			osThreadFlagsSet(myProcessCMDHandle, 0x0001);
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_UARTEx_RxEventCallback+0x78>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00b fe64 	bl	800d8e0 <osThreadFlagsSet>
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001c18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c1c:	480e      	ldr	r0, [pc, #56]	@ (8001c58 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001c1e:	f001 fe64 	bl	80038ea <HAL_GPIO_TogglePin>
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) Rx_Buf, RXBUFF_SIZE);
 8001c22:	220a      	movs	r2, #10
 8001c24:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001c26:	480d      	ldr	r0, [pc, #52]	@ (8001c5c <HAL_UARTEx_RxEventCallback+0x80>)
 8001c28:	f007 f808 	bl	8008c3c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0x84>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0x84>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0208 	bic.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
	}
//	// check for *OK to indicate the end of the command



}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004400 	.word	0x40004400
 8001c48:	20001ecc 	.word	0x20001ecc
 8001c4c:	20001ecd 	.word	0x20001ecd
 8001c50:	20001ed8 	.word	0x20001ed8
 8001c54:	200003dc 	.word	0x200003dc
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	2000031c 	.word	0x2000031c
 8001c60:	20000364 	.word	0x20000364
 8001c64:	00000000 	.word	0x00000000

08001c68 <calculate_pitch_roll>:
void calculate_pitch_roll(float ax, float ay, float az, float *pitch, float *roll) {
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001c72:	edc7 0a04 	vstr	s1, [r7, #16]
 8001c76:	ed87 1a03 	vstr	s2, [r7, #12]
 8001c7a:	60b8      	str	r0, [r7, #8]
 8001c7c:	6079      	str	r1, [r7, #4]
//	float norm = sqrt(ax*ax + ay*ay + az*az);
//	ax /= norm;
//	ay /= norm;
//	az /= norm;
    *pitch = atan2(ax, sqrt(ay*ay + az*az));
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7fe fc62 	bl	8000548 <__aeabi_f2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	ee17 0a90 	vmov	r0, s15
 8001ca0:	f7fe fc52 	bl	8000548 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	ec43 2b10 	vmov	d0, r2, r3
 8001cac:	f011 f81e 	bl	8012cec <sqrt>
 8001cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb4:	eef0 7a60 	vmov.f32	s15, s1
 8001cb8:	eeb0 1a47 	vmov.f32	s2, s14
 8001cbc:	eef0 1a67 	vmov.f32	s3, s15
 8001cc0:	ec45 4b10 	vmov	d0, r4, r5
 8001cc4:	f011 f810 	bl	8012ce8 <atan2>
 8001cc8:	ec53 2b10 	vmov	r2, r3, d0
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff42 	bl	8000b58 <__aeabi_d2f>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]
    *roll = atan2(-ay, sqrt(ax*ax + az*az));
 8001cda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cde:	eef1 7a67 	vneg.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc2e 	bl	8000548 <__aeabi_f2d>
 8001cec:	4604      	mov	r4, r0
 8001cee:	460d      	mov	r5, r1
 8001cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	ee17 0a90 	vmov	r0, s15
 8001d08:	f7fe fc1e 	bl	8000548 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	ec43 2b10 	vmov	d0, r2, r3
 8001d14:	f010 ffea 	bl	8012cec <sqrt>
 8001d18:	eeb0 7a40 	vmov.f32	s14, s0
 8001d1c:	eef0 7a60 	vmov.f32	s15, s1
 8001d20:	eeb0 1a47 	vmov.f32	s2, s14
 8001d24:	eef0 1a67 	vmov.f32	s3, s15
 8001d28:	ec45 4b10 	vmov	d0, r4, r5
 8001d2c:	f010 ffdc 	bl	8012ce8 <atan2>
 8001d30:	ec53 2b10 	vmov	r2, r3, d0
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe ff0e 	bl	8000b58 <__aeabi_d2f>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	601a      	str	r2, [r3, #0]

    // Convert angles from radians to degrees
    *pitch = *pitch * 180.0 / M_PI;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbfe 	bl	8000548 <__aeabi_f2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <calculate_pitch_roll+0x160>)
 8001d52:	f7fe fc51 	bl	80005f8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	a318      	add	r3, pc, #96	@ (adr r3, 8001dc0 <calculate_pitch_roll+0x158>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fd72 	bl	800084c <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe fef2 	bl	8000b58 <__aeabi_d2f>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	601a      	str	r2, [r3, #0]
    *roll = *roll * 180.0 / M_PI;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbe2 	bl	8000548 <__aeabi_f2d>
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <calculate_pitch_roll+0x160>)
 8001d8a:	f7fe fc35 	bl	80005f8 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	a30a      	add	r3, pc, #40	@ (adr r3, 8001dc0 <calculate_pitch_roll+0x158>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fd56 	bl	800084c <__aeabi_ddiv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fed6 	bl	8000b58 <__aeabi_d2f>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	54442d18 	.word	0x54442d18
 8001dc4:	400921fb 	.word	0x400921fb
 8001dc8:	40668000 	.word	0x40668000

08001dcc <split_command>:

Command split_command(uint8_t *array, size_t arraySize) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b08b      	sub	sp, #44	@ 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
	Command cmd;
	size_t delimiterIndex = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
	while (delimiterIndex < arraySize && array[delimiterIndex] != ' ') {
 8001ddc:	e002      	b.n	8001de4 <split_command+0x18>
		delimiterIndex++;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
	while (delimiterIndex < arraySize && array[delimiterIndex] != ' ') {
 8001de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d205      	bcs.n	8001df8 <split_command+0x2c>
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d1f2      	bne.n	8001dde <split_command+0x12>
	}
	if (delimiterIndex < arraySize) {
 8001df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d233      	bcs.n	8001e68 <split_command+0x9c>
		for (size_t i = 0; i < 2 && i < delimiterIndex; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	e00c      	b.n	8001e20 <split_command+0x54>
			cmd.cmd_id[i] = array[i];
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	7819      	ldrb	r1, [r3, #0]
 8001e0e:	f107 0214 	add.w	r2, r7, #20
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	4413      	add	r3, r2
 8001e16:	460a      	mov	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 2 && i < delimiterIndex; i++) {
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d803      	bhi.n	8001e2e <split_command+0x62>
 8001e26:	6a3a      	ldr	r2, [r7, #32]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3eb      	bcc.n	8001e06 <split_command+0x3a>
		}
		for (size_t i = 0; i < 5 && i < arraySize - delimiterIndex - 1; i++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e00f      	b.n	8001e54 <split_command+0x88>
			cmd.cmd_data[i] = array[delimiterIndex + 1 + i];
 8001e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4413      	add	r3, r2
 8001e40:	7819      	ldrb	r1, [r3, #0]
 8001e42:	f107 0216 	add.w	r2, r7, #22
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 5 && i < arraySize - delimiterIndex - 1; i++) {
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d806      	bhi.n	8001e68 <split_command+0x9c>
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3e5      	bcc.n	8001e34 <split_command+0x68>
		}
	}

	return cmd;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	6010      	str	r0, [r2, #0]
 8001e74:	8899      	ldrh	r1, [r3, #4]
 8001e76:	799b      	ldrb	r3, [r3, #6]
 8001e78:	8091      	strh	r1, [r2, #4]
 8001e7a:	7193      	strb	r3, [r2, #6]
}
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	372c      	adds	r7, #44	@ 0x2c
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <MY_User_Message>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MY_User_Message */
void MY_User_Message(void *argument)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	@ 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001e90:	f00f fa76 	bl	8011380 <MX_USB_HOST_Init>
  LIS3DSH_DataScaled myLIS3DSH;
  My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
    osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MY_User_Message+0x48>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f00b fedb 	bl	800dc5c <osMessageQueueGet>
	osMessageQueueGet(RTC_DataHandle, &RTC_data, NULL, osWaitForever);
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <MY_User_Message+0x4c>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f107 010c 	add.w	r1, r7, #12
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f00b fed2 	bl	800dc5c <osMessageQueueGet>
	osMessageQueueGet(RTC_DataHandle, &RTC_data, NULL, osWaitForever);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MY_User_Message+0x4c>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f107 010c 	add.w	r1, r7, #12
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f00b fec9 	bl	800dc5c <osMessageQueueGet>
    osMessageQueueGet(LIS3DSH_ProcessedDataHandle, &myLIS3DSH, NULL, osWaitForever);
 8001eca:	bf00      	nop
 8001ecc:	e7e2      	b.n	8001e94 <MY_User_Message+0xc>
 8001ece:	bf00      	nop
 8001ed0:	200003e4 	.word	0x200003e4
 8001ed4:	200003e8 	.word	0x200003e8

08001ed8 <MY_RTC_Time>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_RTC_Time */
void MY_RTC_Time(void *argument)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_RTC_Time */
  My_RTC_Data RTC_data;
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f00b fd48 	bl	800d97c <osThreadFlagsWait>
	HAL_RTC_GetTime(&hrtc, &RTC_data.sTime, RTC_FORMAT_BCD);
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480a      	ldr	r0, [pc, #40]	@ (8001f20 <MY_RTC_Time+0x48>)
 8001ef8:	f005 fab7 	bl	800746a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_data.sDate, RTC_FORMAT_BCD);
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	2201      	movs	r2, #1
 8001f02:	4619      	mov	r1, r3
 8001f04:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <MY_RTC_Time+0x48>)
 8001f06:	f005 fb0e 	bl	8007526 <HAL_RTC_GetDate>
	osMessageQueuePut(RTC_DataHandle, &RTC_data, 10, 1);
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MY_RTC_Time+0x4c>)
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	f107 0108 	add.w	r1, r7, #8
 8001f12:	2301      	movs	r3, #1
 8001f14:	220a      	movs	r2, #10
 8001f16:	f00b fe41 	bl	800db9c <osMessageQueuePut>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001f1a:	bf00      	nop
 8001f1c:	e7e0      	b.n	8001ee0 <MY_RTC_Time+0x8>
 8001f1e:	bf00      	nop
 8001f20:	200001cc 	.word	0x200001cc
 8001f24:	200003e8 	.word	0x200003e8

08001f28 <MY_Get_Acc_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Get_Acc_Data */
void MY_Get_Acc_Data(void *argument)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Get_Acc_Data */
	LIS3DSH_InitTypeDef MY_LIS3DSH_Configuration;
	MY_LIS3DSH_Configuration.dataRate = LIS3DSH_DATARATE_1600;
 8001f30:	2390      	movs	r3, #144	@ 0x90
 8001f32:	763b      	strb	r3, [r7, #24]
	MY_LIS3DSH_Configuration.fullScale = LIS3DSH_FULLSCALE_4;
 8001f34:	2308      	movs	r3, #8
 8001f36:	767b      	strb	r3, [r7, #25]
	MY_LIS3DSH_Configuration.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001f38:	23c0      	movs	r3, #192	@ 0xc0
 8001f3a:	76bb      	strb	r3, [r7, #26]
	MY_LIS3DSH_Configuration.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	76fb      	strb	r3, [r7, #27]
	MY_LIS3DSH_Configuration.interruptEnable = true;
 8001f40:	2301      	movs	r3, #1
 8001f42:	773b      	strb	r3, [r7, #28]
	LIS3DSH_Init(&hspi1, &MY_LIS3DSH_Configuration);
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <MY_Get_Acc_Data+0x74>)
 8001f4c:	f7ff f83a 	bl	8000fc4 <LIS3DSH_Init>
	LIS3DSH_DataScaled myLIS3DSH;
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f54:	2101      	movs	r1, #1
 8001f56:	2001      	movs	r0, #1
 8001f58:	f00b fd10 	bl	800d97c <osThreadFlagsWait>
	  myLIS3DSH = LIS3DSH_GetDataScaled();
 8001f5c:	f7ff f940 	bl	80011e0 <LIS3DSH_GetDataScaled>
 8001f60:	eef0 6a40 	vmov.f32	s13, s0
 8001f64:	eeb0 7a60 	vmov.f32	s14, s1
 8001f68:	eef0 7a41 	vmov.f32	s15, s2
 8001f6c:	edc7 6a03 	vstr	s13, [r7, #12]
 8001f70:	ed87 7a04 	vstr	s14, [r7, #16]
 8001f74:	edc7 7a05 	vstr	s15, [r7, #20]
	  g_myLIS3DSH = myLIS3DSH;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MY_Get_Acc_Data+0x78>)
 8001f7a:	461c      	mov	r4, r3
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  osMessageQueuePut(LIS3DSH_DataScaledHandle, &myLIS3DSH, 10, 1);
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MY_Get_Acc_Data+0x7c>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f107 010c 	add.w	r1, r7, #12
 8001f90:	2301      	movs	r3, #1
 8001f92:	220a      	movs	r2, #10
 8001f94:	f00b fe02 	bl	800db9c <osMessageQueuePut>
	  osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8001f98:	bf00      	nop
 8001f9a:	e7d9      	b.n	8001f50 <MY_Get_Acc_Data+0x28>
 8001f9c:	200001ec 	.word	0x200001ec
 8001fa0:	20000bf4 	.word	0x20000bf4
 8001fa4:	200003e0 	.word	0x200003e0

08001fa8 <my_Int_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_my_Int_Task */
void my_Int_Task(void *argument)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN my_Int_Task */
  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f00c ffaf 	bl	800ef14 <vTaskSuspend>
 8001fb6:	e7fb      	b.n	8001fb0 <my_Int_Task+0x8>

08001fb8 <MY_freeRTOS_Task_Manager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_freeRTOS_Task_Manager */
void MY_freeRTOS_Task_Manager(void *argument)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_freeRTOS_Task_Manager */
  /* Infinite loop */
  for(;;)
  {
	  task_manager.freemem = xPortGetFreeHeapSize();
 8001fc0:	f00f f916 	bl	80111f0 <xPortGetFreeHeapSize>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MY_freeRTOS_Task_Manager+0x2c>)
 8001fca:	601a      	str	r2, [r3, #0]
	  vTaskList(task_manager.taskListBuffer);
 8001fcc:	4806      	ldr	r0, [pc, #24]	@ (8001fe8 <MY_freeRTOS_Task_Manager+0x30>)
 8001fce:	f00d feb9 	bl	800fd44 <vTaskList>
	  vTaskGetRunTimeStats(task_manager.taskTimingBuffer);
 8001fd2:	4806      	ldr	r0, [pc, #24]	@ (8001fec <MY_freeRTOS_Task_Manager+0x34>)
 8001fd4:	f00d ff4c 	bl	800fe70 <vTaskGetRunTimeStats>
	  osDelay(1000);
 8001fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fdc:	f00b fd4f 	bl	800da7e <osDelay>
	  task_manager.freemem = xPortGetFreeHeapSize();
 8001fe0:	bf00      	nop
 8001fe2:	e7ed      	b.n	8001fc0 <MY_freeRTOS_Task_Manager+0x8>
 8001fe4:	200003f0 	.word	0x200003f0
 8001fe8:	200003f4 	.word	0x200003f4
 8001fec:	200007f4 	.word	0x200007f4

08001ff0 <MY_Process_AccData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_AccData */
void MY_Process_AccData(void *argument)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b08f      	sub	sp, #60	@ 0x3c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MY_Process_AccData */
	float avg[3] = {0};
 8001ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
	LIS3DSH_DataScaled myLIS3DSH;
	LIS3DSH_DataScaled myLIS3DSH_after_filter;
	uint16_t fill = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 8002008:	4b70      	ldr	r3, [pc, #448]	@ (80021cc <MY_Process_AccData+0x1dc>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 0118 	add.w	r1, r7, #24
 8002010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002014:	2200      	movs	r2, #0
 8002016:	f00b fe21 	bl	800dc5c <osMessageQueueGet>
	// Couldn't make function, because of HEAP memory limitation 128.
	if(fill < sampling_rate){
 800201a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800201c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002020:	d219      	bcs.n	8002056 <MY_Process_AccData+0x66>
		moving_avg[0][fill] = myLIS3DSH.x;
 8002022:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	496a      	ldr	r1, [pc, #424]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	601a      	str	r2, [r3, #0]
		moving_avg[1][fill] = myLIS3DSH.y;
 800202e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	4967      	ldr	r1, [pc, #412]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 8002034:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	601a      	str	r2, [r3, #0]
		moving_avg[2][fill] = myLIS3DSH.z;
 800203e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002040:	6a3a      	ldr	r2, [r7, #32]
 8002042:	4963      	ldr	r1, [pc, #396]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 8002044:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	601a      	str	r2, [r3, #0]
		fill++;
 800204e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002050:	3301      	adds	r3, #1
 8002052:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002054:	e7d8      	b.n	8002008 <MY_Process_AccData+0x18>
	} else {
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
 8002056:	f240 138f 	movw	r3, #399	@ 0x18f
 800205a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800205c:	e02b      	b.n	80020b6 <MY_Process_AccData+0xc6>
			moving_avg[0][j] = moving_avg[0][j - 1];
 800205e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002064:	495a      	ldr	r1, [pc, #360]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	440a      	add	r2, r1
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4958      	ldr	r1, [pc, #352]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	601a      	str	r2, [r3, #0]
			moving_avg[1][j] = moving_avg[1][j - 1];
 8002074:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800207a:	4955      	ldr	r1, [pc, #340]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 800207c:	f502 72c8 	add.w	r2, r2, #400	@ 0x190
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	440a      	add	r2, r1
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4952      	ldr	r1, [pc, #328]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 8002088:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	601a      	str	r2, [r3, #0]
			moving_avg[2][j] = moving_avg[2][j - 1];
 8002092:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002098:	494d      	ldr	r1, [pc, #308]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 800209a:	f502 7248 	add.w	r2, r2, #800	@ 0x320
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	440a      	add	r2, r1
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	494a      	ldr	r1, [pc, #296]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 80020a6:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	601a      	str	r2, [r3, #0]
		for(uint16_t j = sampling_rate - 1; 0 < j; j--){
 80020b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80020b2:	3b01      	subs	r3, #1
 80020b4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80020b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1d0      	bne.n	800205e <MY_Process_AccData+0x6e>
		}
		moving_avg[0][0] = myLIS3DSH.x;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4a44      	ldr	r2, [pc, #272]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 80020c0:	6013      	str	r3, [r2, #0]
		moving_avg[1][0] = myLIS3DSH.y;
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	4b42      	ldr	r3, [pc, #264]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 80020c6:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80020ca:	601a      	str	r2, [r3, #0]
		moving_avg[2][0] = myLIS3DSH.z;
 80020cc:	6a3a      	ldr	r2, [r7, #32]
 80020ce:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 80020d0:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 80020d4:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 3; i++){
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80020dc:	e04a      	b.n	8002174 <MY_Process_AccData+0x184>
			avg[i] = 0.0;
 80020de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3338      	adds	r3, #56	@ 0x38
 80020e6:	443b      	add	r3, r7
 80020e8:	3b14      	subs	r3, #20
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
			for(uint16_t j = 0; j < sampling_rate; j++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	863b      	strh	r3, [r7, #48]	@ 0x30
 80020f4:	e021      	b.n	800213a <MY_Process_AccData+0x14a>
				avg[i] += moving_avg[i][j];
 80020f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3338      	adds	r3, #56	@ 0x38
 80020fe:	443b      	add	r3, r7
 8002100:	3b14      	subs	r3, #20
 8002102:	ed93 7a00 	vldr	s14, [r3]
 8002106:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800210a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800210c:	4930      	ldr	r1, [pc, #192]	@ (80021d0 <MY_Process_AccData+0x1e0>)
 800210e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002112:	fb00 f202 	mul.w	r2, r0, r2
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	3338      	adds	r3, #56	@ 0x38
 800212c:	443b      	add	r3, r7
 800212e:	3b14      	subs	r3, #20
 8002130:	edc3 7a00 	vstr	s15, [r3]
			for(uint16_t j = 0; j < sampling_rate; j++)
 8002134:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002136:	3301      	adds	r3, #1
 8002138:	863b      	strh	r3, [r7, #48]	@ 0x30
 800213a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800213c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002140:	d3d9      	bcc.n	80020f6 <MY_Process_AccData+0x106>
			avg[i] /= sampling_rate;
 8002142:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	3338      	adds	r3, #56	@ 0x38
 800214a:	443b      	add	r3, r7
 800214c:	3b14      	subs	r3, #20
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002156:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80021d4 <MY_Process_AccData+0x1e4>
 800215a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3338      	adds	r3, #56	@ 0x38
 8002162:	443b      	add	r3, r7
 8002164:	3b14      	subs	r3, #20
 8002166:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i = 0; i < 3; i++){
 800216a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800216e:	3301      	adds	r3, #1
 8002170:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002174:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002178:	2b02      	cmp	r3, #2
 800217a:	d9b0      	bls.n	80020de <MY_Process_AccData+0xee>
		}
		myLIS3DSH_after_filter.x = avg[0];
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	60fb      	str	r3, [r7, #12]
		myLIS3DSH_after_filter.y = avg[1];
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	613b      	str	r3, [r7, #16]
		myLIS3DSH_after_filter.z = avg[2];
 8002184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002186:	617b      	str	r3, [r7, #20]
		sg_myLIS3DSH = myLIS3DSH_after_filter;
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <MY_Process_AccData+0x1e8>)
 800218a:	461c      	mov	r4, r3
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		calculate_pitch_roll(myLIS3DSH_after_filter.x, myLIS3DSH_after_filter.y , myLIS3DSH_after_filter.z, &pitch, &roll);
 8002198:	edd7 7a03 	vldr	s15, [r7, #12]
 800219c:	ed97 7a04 	vldr	s14, [r7, #16]
 80021a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80021a4:	490d      	ldr	r1, [pc, #52]	@ (80021dc <MY_Process_AccData+0x1ec>)
 80021a6:	480e      	ldr	r0, [pc, #56]	@ (80021e0 <MY_Process_AccData+0x1f0>)
 80021a8:	eeb0 1a66 	vmov.f32	s2, s13
 80021ac:	eef0 0a47 	vmov.f32	s1, s14
 80021b0:	eeb0 0a67 	vmov.f32	s0, s15
 80021b4:	f7ff fd58 	bl	8001c68 <calculate_pitch_roll>
		osMessageQueuePut(LIS3DSH_ProcessedDataHandle, &myLIS3DSH_after_filter, 10, 1);
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <MY_Process_AccData+0x1f4>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	f107 010c 	add.w	r1, r7, #12
 80021c0:	2301      	movs	r3, #1
 80021c2:	220a      	movs	r2, #10
 80021c4:	f00b fcea 	bl	800db9c <osMessageQueuePut>
	osMessageQueueGet(LIS3DSH_DataScaledHandle, &myLIS3DSH, NULL, osWaitForever);
 80021c8:	e71e      	b.n	8002008 <MY_Process_AccData+0x18>
 80021ca:	bf00      	nop
 80021cc:	200003e0 	.word	0x200003e0
 80021d0:	20000c0c 	.word	0x20000c0c
 80021d4:	43c80000 	.word	0x43c80000
 80021d8:	20000c00 	.word	0x20000c00
 80021dc:	20001ef0 	.word	0x20001ef0
 80021e0:	20001eec 	.word	0x20001eec
 80021e4:	200003e4 	.word	0x200003e4

080021e8 <MY_Process_CMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MY_Process_CMD */
void MY_Process_CMD(void *argument)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN MY_Process_CMD */
	Command cmd;
  /* Infinite loop */
  for(;;)
  {
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021f4:	2101      	movs	r1, #1
 80021f6:	2001      	movs	r0, #1
 80021f8:	f00b fbc0 	bl	800d97c <osThreadFlagsWait>
	cmd = split_command(Main_Buf, sizeof(Main_Buf) / sizeof(Main_Buf[0]));
 80021fc:	463b      	mov	r3, r7
 80021fe:	2214      	movs	r2, #20
 8002200:	491c      	ldr	r1, [pc, #112]	@ (8002274 <MY_Process_CMD+0x8c>)
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fde2 	bl	8001dcc <split_command>
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	463a      	mov	r2, r7
 800220e:	6810      	ldr	r0, [r2, #0]
 8002210:	6018      	str	r0, [r3, #0]
 8002212:	8891      	ldrh	r1, [r2, #4]
 8002214:	7992      	ldrb	r2, [r2, #6]
 8002216:	8099      	strh	r1, [r3, #4]
 8002218:	719a      	strb	r2, [r3, #6]
	printf("CMD_ID: ");
 800221a:	4817      	ldr	r0, [pc, #92]	@ (8002278 <MY_Process_CMD+0x90>)
 800221c:	f00f fd34 	bl	8011c88 <iprintf>
	for(uint8_t i = 0; i < 2; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	77fb      	strb	r3, [r7, #31]
 8002224:	e00a      	b.n	800223c <MY_Process_CMD+0x54>
		printf("%c", cmd.cmd_id[i]);
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	3320      	adds	r3, #32
 800222a:	443b      	add	r3, r7
 800222c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002230:	4618      	mov	r0, r3
 8002232:	f00f fd3b 	bl	8011cac <putchar>
	for(uint8_t i = 0; i < 2; i++)
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	3301      	adds	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d9f1      	bls.n	8002226 <MY_Process_CMD+0x3e>
	printf("\nCMD_DATA: ");
 8002242:	480e      	ldr	r0, [pc, #56]	@ (800227c <MY_Process_CMD+0x94>)
 8002244:	f00f fd20 	bl	8011c88 <iprintf>
	for(uint8_t i = 0; i < 5; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	77bb      	strb	r3, [r7, #30]
 800224c:	e00a      	b.n	8002264 <MY_Process_CMD+0x7c>
		printf("%c", cmd.cmd_data[i]);
 800224e:	7fbb      	ldrb	r3, [r7, #30]
 8002250:	3320      	adds	r3, #32
 8002252:	443b      	add	r3, r7
 8002254:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 8002258:	4618      	mov	r0, r3
 800225a:	f00f fd27 	bl	8011cac <putchar>
	for(uint8_t i = 0; i < 5; i++)
 800225e:	7fbb      	ldrb	r3, [r7, #30]
 8002260:	3301      	adds	r3, #1
 8002262:	77bb      	strb	r3, [r7, #30]
 8002264:	7fbb      	ldrb	r3, [r7, #30]
 8002266:	2b04      	cmp	r3, #4
 8002268:	d9f1      	bls.n	800224e <MY_Process_CMD+0x66>
	printf("\n");
 800226a:	200a      	movs	r0, #10
 800226c:	f00f fd1e 	bl	8011cac <putchar>
	osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 8002270:	e7be      	b.n	80021f0 <MY_Process_CMD+0x8>
 8002272:	bf00      	nop
 8002274:	20001ed8 	.word	0x20001ed8
 8002278:	08013484 	.word	0x08013484
 800227c:	08013490 	.word	0x08013490

08002280 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3){
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d104      	bne.n	800229c <HAL_TIM_PeriodElapsedCallback+0x1c>
		ulHighFrequencyTimerTicks++;
 8002292:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800229a:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM2){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a4:	d10a      	bne.n	80022bc <HAL_TIM_PeriodElapsedCallback+0x3c>
		osThreadFlagsSet(myRTCTimeHandle, 0x0001);
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00b fb17 	bl	800d8e0 <osThreadFlagsSet>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80022b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022b6:	480a      	ldr	r0, [pc, #40]	@ (80022e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80022b8:	f001 fb17 	bl	80038ea <HAL_GPIO_TogglePin>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 80022c6:	f000 fc33 	bl	8002b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40000400 	.word	0x40000400
 80022d8:	200003ec 	.word	0x200003ec
 80022dc:	200003c8 	.word	0x200003c8
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40001000 	.word	0x40001000

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <Error_Handler+0x8>

080022f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_MspInit+0x54>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_MspInit+0x54>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002308:	6453      	str	r3, [r2, #68]	@ 0x44
 800230a:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <HAL_MspInit+0x54>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_MspInit+0x54>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_MspInit+0x54>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_MspInit+0x54>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	210f      	movs	r1, #15
 8002336:	f06f 0001 	mvn.w	r0, #1
 800233a:	f000 fcf5 	bl	8002d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	@ 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <HAL_I2C_MspInit+0x84>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12c      	bne.n	80023c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800238a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002390:	2312      	movs	r3, #18
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002394:	2301      	movs	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800239c:	2304      	movs	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <HAL_I2C_MspInit+0x8c>)
 80023a8:	f001 f8ea 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 80023b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	@ 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40005400 	.word	0x40005400
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020400 	.word	0x40020400

080023dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	@ 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a31      	ldr	r2, [pc, #196]	@ (80024cc <HAL_I2S_MspInit+0xf0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d15a      	bne.n	80024c2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800240c:	2301      	movs	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002410:	23c0      	movs	r3, #192	@ 0xc0
 8002412:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002414:	2302      	movs	r3, #2
 8002416:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4618      	mov	r0, r3
 800241e:	f004 fe5f 	bl	80070e0 <HAL_RCCEx_PeriphCLKConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002428:	f7ff ff5e 	bl	80022e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 8002436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800243a:	6413      	str	r3, [r2, #64]	@ 0x40
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	4a1f      	ldr	r2, [pc, #124]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6313      	str	r3, [r2, #48]	@ 0x30
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	4a18      	ldr	r2, [pc, #96]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6313      	str	r3, [r2, #48]	@ 0x30
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_I2S_MspInit+0xf4>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002480:	2310      	movs	r3, #16
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002490:	2306      	movs	r3, #6
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002498:	4619      	mov	r1, r3
 800249a:	480e      	ldr	r0, [pc, #56]	@ (80024d4 <HAL_I2S_MspInit+0xf8>)
 800249c:	f001 f870 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80024a0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024b2:	2306      	movs	r3, #6
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4806      	ldr	r0, [pc, #24]	@ (80024d8 <HAL_I2S_MspInit+0xfc>)
 80024be:	f001 f85f 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024c2:	bf00      	nop
 80024c4:	3738      	adds	r7, #56	@ 0x38
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40003c00 	.word	0x40003c00
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020800 	.word	0x40020800

080024dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002528 <HAL_RTC_MspInit+0x4c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d111      	bne.n	8002520 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024fc:	2302      	movs	r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002504:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fde8 	bl	80070e0 <HAL_RCCEx_PeriphCLKConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002516:	f7ff fee7 	bl	80022e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800251a:	4b04      	ldr	r3, [pc, #16]	@ (800252c <HAL_RTC_MspInit+0x50>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40002800 	.word	0x40002800
 800252c:	42470e3c 	.word	0x42470e3c

08002530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <HAL_SPI_MspInit+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800258a:	23e0      	movs	r3, #224	@ 0xe0
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259a:	2305      	movs	r3, #5
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	@ (80025bc <HAL_SPI_MspInit+0x8c>)
 80025a6:	f000 ffeb 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	@ 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013000 	.word	0x40013000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000

080025c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d0:	d116      	bne.n	8002600 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	4a23      	ldr	r2, [pc, #140]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2105      	movs	r1, #5
 80025f2:	201c      	movs	r0, #28
 80025f4:	f000 fb98 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025f8:	201c      	movs	r0, #28
 80025fa:	f000 fbb1 	bl	8002d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025fe:	e02e      	b.n	800265e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_TIM_Base_MspInit+0xac>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d116      	bne.n	8002638 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2105      	movs	r1, #5
 800262a:	201d      	movs	r0, #29
 800262c:	f000 fb7c 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002630:	201d      	movs	r0, #29
 8002632:	f000 fb95 	bl	8002d60 <HAL_NVIC_EnableIRQ>
}
 8002636:	e012      	b.n	800265e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <HAL_TIM_Base_MspInit+0xb0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10d      	bne.n	800265e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	4a07      	ldr	r2, [pc, #28]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6413      	str	r3, [r2, #64]	@ 0x40
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_TIM_Base_MspInit+0xa8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40000400 	.word	0x40000400
 8002670:	40000800 	.word	0x40000800

08002674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	@ 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a34      	ldr	r2, [pc, #208]	@ (8002764 <HAL_UART_MspInit+0xf0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d161      	bne.n	800275a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b33      	ldr	r3, [pc, #204]	@ (8002768 <HAL_UART_MspInit+0xf4>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a32      	ldr	r2, [pc, #200]	@ (8002768 <HAL_UART_MspInit+0xf4>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b30      	ldr	r3, [pc, #192]	@ (8002768 <HAL_UART_MspInit+0xf4>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002768 <HAL_UART_MspInit+0xf4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002768 <HAL_UART_MspInit+0xf4>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <HAL_UART_MspInit+0xf4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ce:	230c      	movs	r3, #12
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026de:	2307      	movs	r3, #7
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4820      	ldr	r0, [pc, #128]	@ (800276c <HAL_UART_MspInit+0xf8>)
 80026ea:	f000 ff49 	bl	8003580 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 80026f0:	4a20      	ldr	r2, [pc, #128]	@ (8002774 <HAL_UART_MspInit+0x100>)
 80026f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 80026f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002702:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 800270a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800270e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002716:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002722:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800272e:	4810      	ldr	r0, [pc, #64]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002730:	f000 fb24 	bl	8002d7c <HAL_DMA_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800273a:	f7ff fdd5 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002742:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002744:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_UART_MspInit+0xfc>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2105      	movs	r1, #5
 800274e:	2026      	movs	r0, #38	@ 0x26
 8002750:	f000 faea 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002754:	2026      	movs	r0, #38	@ 0x26
 8002756:	f000 fb03 	bl	8002d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40004400 	.word	0x40004400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	20000364 	.word	0x20000364
 8002774:	40026088 	.word	0x40026088

08002778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08e      	sub	sp, #56	@ 0x38
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_InitTick+0xe4>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	4a32      	ldr	r2, [pc, #200]	@ (800285c <HAL_InitTick+0xe4>)
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	6413      	str	r3, [r2, #64]	@ 0x40
 8002798:	4b30      	ldr	r3, [pc, #192]	@ (800285c <HAL_InitTick+0xe4>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027a4:	f107 0210 	add.w	r2, r7, #16
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 fc64 	bl	800707c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027be:	f004 fc35 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 80027c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80027c4:	e004      	b.n	80027d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027c6:	f004 fc31 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 80027ca:	4603      	mov	r3, r0
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d2:	4a23      	ldr	r2, [pc, #140]	@ (8002860 <HAL_InitTick+0xe8>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	3b01      	subs	r3, #1
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027de:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_InitTick+0xec>)
 80027e0:	4a21      	ldr	r2, [pc, #132]	@ (8002868 <HAL_InitTick+0xf0>)
 80027e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <HAL_InitTick+0xec>)
 80027e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_InitTick+0xec>)
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <HAL_InitTick+0xec>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HAL_InitTick+0xec>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_InitTick+0xec>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002804:	4817      	ldr	r0, [pc, #92]	@ (8002864 <HAL_InitTick+0xec>)
 8002806:	f005 fd53 	bl	80082b0 <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002810:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11b      	bne.n	8002850 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002818:	4812      	ldr	r0, [pc, #72]	@ (8002864 <HAL_InitTick+0xec>)
 800281a:	f005 fd99 	bl	8008350 <HAL_TIM_Base_Start_IT>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002824:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002828:	2b00      	cmp	r3, #0
 800282a:	d111      	bne.n	8002850 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800282c:	2036      	movs	r0, #54	@ 0x36
 800282e:	f000 fa97 	bl	8002d60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d808      	bhi.n	800284a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002838:	2200      	movs	r2, #0
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	2036      	movs	r0, #54	@ 0x36
 800283e:	f000 fa73 	bl	8002d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002842:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <HAL_InitTick+0xf4>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	e002      	b.n	8002850 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002850:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002854:	4618      	mov	r0, r3
 8002856:	3738      	adds	r7, #56	@ 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	431bde83 	.word	0x431bde83
 8002864:	20001ef4 	.word	0x20001ef4
 8002868:	40001000 	.word	0x40001000
 800286c:	20000014 	.word	0x20000014

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <NMI_Handler+0x4>

08002878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <HardFault_Handler+0x4>

08002880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <MemManage_Handler+0x4>

08002888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <BusFault_Handler+0x4>

08002890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <UsageFault_Handler+0x4>

08002898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MEMS_INT1_Pin);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f001 f838 	bl	8003920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <DMA1_Stream5_IRQHandler+0x10>)
 80028ba:	f000 fbf7 	bl	80030ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000364 	.word	0x20000364

080028c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <TIM2_IRQHandler+0x10>)
 80028ce:	f005 fdaf 	bl	8008430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000244 	.word	0x20000244

080028dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <TIM3_IRQHandler+0x10>)
 80028e2:	f005 fda5 	bl	8008430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000028c 	.word	0x2000028c

080028f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <USART2_IRQHandler+0x10>)
 80028f6:	f006 f9ff 	bl	8008cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000031c 	.word	0x2000031c

08002904 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <TIM6_DAC_IRQHandler+0x10>)
 800290a:	f005 fd91 	bl	8008430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20001ef4 	.word	0x20001ef4

08002918 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800291c:	4802      	ldr	r0, [pc, #8]	@ (8002928 <OTG_FS_IRQHandler+0x10>)
 800291e:	f001 faf7 	bl	8003f10 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20006d68 	.word	0x20006d68

0800292c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e00a      	b.n	8002954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800293e:	f3af 8000 	nop.w
 8002942:	4601      	mov	r1, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	60ba      	str	r2, [r7, #8]
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	dbf0      	blt.n	800293e <_read+0x12>
  }

  return len;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e009      	b.n	800298c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60ba      	str	r2, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f91d 	bl	8001bc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf1      	blt.n	8002978 <_write+0x12>
  }
  return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_close>:

int _close(int file)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029c6:	605a      	str	r2, [r3, #4]
  return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_isatty>:

int _isatty(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a1c:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	@ (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a38:	f00f fa58 	bl	8011eec <__errno>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	220c      	movs	r2, #12
 8002a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	@ (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	@ (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20020000 	.word	0x20020000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	20001f3c 	.word	0x20001f3c
 8002a70:	20007298 	.word	0x20007298

08002a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <SystemInit+0x20>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <SystemInit+0x20>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a9c:	f7ff ffea 	bl	8002a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480c      	ldr	r0, [pc, #48]	@ (8002ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aa2:	490d      	ldr	r1, [pc, #52]	@ (8002ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f00f fa17 	bl	8011ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aca:	f7fe fc39 	bl	8001340 <main>
  bx  lr    
 8002ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002adc:	08013708 	.word	0x08013708
  ldr r2, =_sbss
 8002ae0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002ae4:	20007294 	.word	0x20007294

08002ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC_IRQHandler>
	...

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <HAL_Init+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <HAL_Init+0x40>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_Init+0x40>)
 8002b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_Init+0x40>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f000 f8fc 	bl	8002d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1a:	200f      	movs	r0, #15
 8002b1c:	f7ff fe2c 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b20:	f7ff fbe8 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20000018 	.word	0x20000018
 8002b54:	20001f40 	.word	0x20001f40

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20001f40 	.word	0x20001f40

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000018 	.word	0x20000018

08002bb8 <__NVIC_SetPriorityGrouping>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4907      	ldr	r1, [pc, #28]	@ (8002c54 <__NVIC_EnableIRQ+0x38>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	@ (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	@ (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	@ 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ff4c 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3a:	f7ff ff61 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7ff ffb1 	bl	8002cac <NVIC_EncodePriority>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff80 	bl	8002c58 <__NVIC_SetPriority>
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff54 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff fee6 	bl	8002b58 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e099      	b.n	8002ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db8:	e00f      	b.n	8002dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dba:	f7ff fecd 	bl	8002b58 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d908      	bls.n	8002dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e078      	b.n	8002ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e8      	bne.n	8002dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <HAL_DMA_Init+0x158>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d107      	bne.n	8002e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d117      	bne.n	8002e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fb01 	bl	8003488 <DMA_CheckFifoParam>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	@ 0x40
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e016      	b.n	8002ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fab8 	bl	800341c <DMA_CalcBaseAndBitshift>
 8002eac:	4603      	mov	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	223f      	movs	r2, #63	@ 0x3f
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	f010803f 	.word	0xf010803f

08002ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_DMA_Start_IT+0x26>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e040      	b.n	8002f80 <HAL_DMA_Start_IT+0xa8>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d12f      	bne.n	8002f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa4a 	bl	80033c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	223f      	movs	r2, #63	@ 0x3f
 8002f32:	409a      	lsls	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0216 	orr.w	r2, r2, #22
 8002f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e005      	b.n	8002f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f96:	f7ff fddf 	bl	8002b58 <HAL_GetTick>
 8002f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d008      	beq.n	8002fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2280      	movs	r2, #128	@ 0x80
 8002fac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e052      	b.n	8003060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0216 	bic.w	r2, r2, #22
 8002fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_DMA_Abort+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0208 	bic.w	r2, r2, #8
 8002ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300a:	e013      	b.n	8003034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300c:	f7ff fda4 	bl	8002b58 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b05      	cmp	r3, #5
 8003018:	d90c      	bls.n	8003034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2203      	movs	r2, #3
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e015      	b.n	8003060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e4      	bne.n	800300c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	223f      	movs	r2, #63	@ 0x3f
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d004      	beq.n	8003086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e00c      	b.n	80030a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2205      	movs	r2, #5
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030b8:	4b8e      	ldr	r3, [pc, #568]	@ (80032f4 <HAL_DMA_IRQHandler+0x248>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a8e      	ldr	r2, [pc, #568]	@ (80032f8 <HAL_DMA_IRQHandler+0x24c>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	2208      	movs	r2, #8
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01a      	beq.n	8003118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0204 	bic.w	r2, r2, #4
 80030fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	2208      	movs	r2, #8
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	2201      	movs	r2, #1
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d012      	beq.n	800314e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	2201      	movs	r2, #1
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	2204      	movs	r2, #4
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	2204      	movs	r2, #4
 8003172:	409a      	lsls	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	2210      	movs	r2, #16
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d043      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d03c      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	2210      	movs	r2, #16
 80031a8:	409a      	lsls	r2, r3
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d024      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
 80031da:	e01f      	b.n	800321c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e016      	b.n	800321c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d107      	bne.n	800320c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0208 	bic.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2220      	movs	r2, #32
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 808f 	beq.w	800334c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8087 	beq.w	800334c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	2220      	movs	r2, #32
 8003244:	409a      	lsls	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b05      	cmp	r3, #5
 8003254:	d136      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0216 	bic.w	r2, r2, #22
 8003264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_DMA_IRQHandler+0x1da>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	223f      	movs	r2, #63	@ 0x3f
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d07e      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
        }
        return;
 80032c2:	e079      	b.n	80033b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d031      	beq.n	800334c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
 80032f0:	e02c      	b.n	800334c <HAL_DMA_IRQHandler+0x2a0>
 80032f2:	bf00      	nop
 80032f4:	20000010 	.word	0x20000010
 80032f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d023      	beq.n	800334c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
 800330c:	e01e      	b.n	800334c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10f      	bne.n	800333c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0210 	bic.w	r2, r2, #16
 800332a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	2b00      	cmp	r3, #0
 8003352:	d032      	beq.n	80033ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2205      	movs	r2, #5
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	3301      	adds	r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	d307      	bcc.n	8003394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f2      	bne.n	8003378 <HAL_DMA_IRQHandler+0x2cc>
 8003392:	e000      	b.n	8003396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e000      	b.n	80033ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80033b8:	bf00      	nop
    }
  }
}
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b40      	cmp	r3, #64	@ 0x40
 80033ec:	d108      	bne.n	8003400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033fe:	e007      	b.n	8003410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3b10      	subs	r3, #16
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <DMA_CalcBaseAndBitshift+0x64>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003436:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <DMA_CalcBaseAndBitshift+0x68>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d909      	bls.n	800345e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	1d1a      	adds	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	659a      	str	r2, [r3, #88]	@ 0x58
 800345c:	e007      	b.n	800346e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	aaaaaaab 	.word	0xaaaaaaab
 8003484:	08013648 	.word	0x08013648

08003488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11f      	bne.n	80034e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d856      	bhi.n	8003556 <DMA_CheckFifoParam+0xce>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <DMA_CheckFifoParam+0x28>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034d3 	.word	0x080034d3
 80034b8:	080034c1 	.word	0x080034c1
 80034bc:	08003557 	.word	0x08003557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d046      	beq.n	800355a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e043      	b.n	800355a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034da:	d140      	bne.n	800355e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e03d      	b.n	800355e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ea:	d121      	bne.n	8003530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d837      	bhi.n	8003562 <DMA_CheckFifoParam+0xda>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <DMA_CheckFifoParam+0x70>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003509 	.word	0x08003509
 80034fc:	0800350f 	.word	0x0800350f
 8003500:	08003509 	.word	0x08003509
 8003504:	08003521 	.word	0x08003521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e030      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d025      	beq.n	8003566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351e:	e022      	b.n	8003566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003528:	d11f      	bne.n	800356a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800352e:	e01c      	b.n	800356a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d903      	bls.n	800353e <DMA_CheckFifoParam+0xb6>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d003      	beq.n	8003544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800353c:	e018      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      break;
 8003542:	e015      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e00b      	b.n	800356e <DMA_CheckFifoParam+0xe6>
      break;
 8003556:	bf00      	nop
 8003558:	e00a      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
 800355c:	e008      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
 8003560:	e006      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e004      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;   
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
    }
  } 
  
  return status; 
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e16b      	b.n	8003874 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f040 815a 	bne.w	800386e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d005      	beq.n	80035d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d130      	bne.n	8003634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0201 	and.w	r2, r3, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b03      	cmp	r3, #3
 800363e:	d017      	beq.n	8003670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d123      	bne.n	80036c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220f      	movs	r2, #15
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	08da      	lsrs	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	69b9      	ldr	r1, [r7, #24]
 80036c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80b4 	beq.w	800386e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4b60      	ldr	r3, [pc, #384]	@ (800388c <HAL_GPIO_Init+0x30c>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	4a5f      	ldr	r2, [pc, #380]	@ (800388c <HAL_GPIO_Init+0x30c>)
 8003710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003714:	6453      	str	r3, [r2, #68]	@ 0x44
 8003716:	4b5d      	ldr	r3, [pc, #372]	@ (800388c <HAL_GPIO_Init+0x30c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003722:	4a5b      	ldr	r2, [pc, #364]	@ (8003890 <HAL_GPIO_Init+0x310>)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	3302      	adds	r3, #2
 800372a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a52      	ldr	r2, [pc, #328]	@ (8003894 <HAL_GPIO_Init+0x314>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a51      	ldr	r2, [pc, #324]	@ (8003898 <HAL_GPIO_Init+0x318>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d025      	beq.n	80037a2 <HAL_GPIO_Init+0x222>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a50      	ldr	r2, [pc, #320]	@ (800389c <HAL_GPIO_Init+0x31c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <HAL_GPIO_Init+0x21e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4f      	ldr	r2, [pc, #316]	@ (80038a0 <HAL_GPIO_Init+0x320>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d019      	beq.n	800379a <HAL_GPIO_Init+0x21a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4e      	ldr	r2, [pc, #312]	@ (80038a4 <HAL_GPIO_Init+0x324>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d013      	beq.n	8003796 <HAL_GPIO_Init+0x216>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4d      	ldr	r2, [pc, #308]	@ (80038a8 <HAL_GPIO_Init+0x328>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00d      	beq.n	8003792 <HAL_GPIO_Init+0x212>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4c      	ldr	r2, [pc, #304]	@ (80038ac <HAL_GPIO_Init+0x32c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <HAL_GPIO_Init+0x20e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <HAL_GPIO_Init+0x330>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_GPIO_Init+0x20a>
 8003786:	2307      	movs	r3, #7
 8003788:	e00e      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800378a:	2308      	movs	r3, #8
 800378c:	e00c      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800378e:	2306      	movs	r3, #6
 8003790:	e00a      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 8003792:	2305      	movs	r3, #5
 8003794:	e008      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 8003796:	2304      	movs	r3, #4
 8003798:	e006      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800379a:	2303      	movs	r3, #3
 800379c:	e004      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 800379e:	2302      	movs	r3, #2
 80037a0:	e002      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_GPIO_Init+0x228>
 80037a6:	2300      	movs	r3, #0
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f002 0203 	and.w	r2, r2, #3
 80037ae:	0092      	lsls	r2, r2, #2
 80037b0:	4093      	lsls	r3, r2
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b8:	4935      	ldr	r1, [pc, #212]	@ (8003890 <HAL_GPIO_Init+0x310>)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	3302      	adds	r3, #2
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c6:	4b3b      	ldr	r3, [pc, #236]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ea:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f0:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003814:	4a27      	ldr	r2, [pc, #156]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800383e:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003844:	4b1b      	ldr	r3, [pc, #108]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003868:	4a12      	ldr	r2, [pc, #72]	@ (80038b4 <HAL_GPIO_Init+0x334>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3301      	adds	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	f67f ae90 	bls.w	800359c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	3724      	adds	r7, #36	@ 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40013800 	.word	0x40013800
 8003894:	40020000 	.word	0x40020000
 8003898:	40020400 	.word	0x40020400
 800389c:	40020800 	.word	0x40020800
 80038a0:	40020c00 	.word	0x40020c00
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40021400 	.word	0x40021400
 80038ac:	40021800 	.word	0x40021800
 80038b0:	40021c00 	.word	0x40021c00
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d4:	e003      	b.n	80038de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b085      	sub	sp, #20
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038fc:	887a      	ldrh	r2, [r7, #2]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	041a      	lsls	r2, r3, #16
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43d9      	mvns	r1, r3
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	400b      	ands	r3, r1
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800392a:	4b08      	ldr	r3, [pc, #32]	@ (800394c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003936:	4a05      	ldr	r2, [pc, #20]	@ (800394c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe f922 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40013c00 	.word	0x40013c00

08003950 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e059      	b.n	8003a16 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f00d fd53 	bl	8011428 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2203      	movs	r2, #3
 8003986:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003990:	d102      	bne.n	8003998 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f006 faac 	bl	8009efa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7c1a      	ldrb	r2, [r3, #16]
 80039aa:	f88d 2000 	strb.w	r2, [sp]
 80039ae:	3304      	adds	r3, #4
 80039b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b2:	f006 fa2d 	bl	8009e10 <USB_CoreInit>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e026      	b.n	8003a16 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f006 faa4 	bl	8009f1c <USB_SetCurrentMode>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e017      	b.n	8003a16 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7c1a      	ldrb	r2, [r3, #16]
 80039ee:	f88d 2000 	strb.w	r2, [sp]
 80039f2:	3304      	adds	r3, #4
 80039f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f6:	f006 fc47 	bl	800a288 <USB_HostInit>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e004      	b.n	8003a16 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003a1e:	b590      	push	{r4, r7, lr}
 8003a20:	b08b      	sub	sp, #44	@ 0x2c
 8003a22:	af04      	add	r7, sp, #16
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	4608      	mov	r0, r1
 8003a28:	4611      	mov	r1, r2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	70fb      	strb	r3, [r7, #3]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70bb      	strb	r3, [r7, #2]
 8003a34:	4613      	mov	r3, r2
 8003a36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003a38:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003a3a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_HCD_HC_Init+0x2c>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e09d      	b.n	8003b86 <HAL_HCD_HC_Init+0x168>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3319      	adds	r3, #25
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3314      	adds	r3, #20
 8003a76:	787a      	ldrb	r2, [r7, #1]
 8003a78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3315      	adds	r3, #21
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3326      	adds	r3, #38	@ 0x26
 8003a9e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	78bb      	ldrb	r3, [r7, #2]
 8003aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aac:	b2d8      	uxtb	r0, r3
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	3316      	adds	r3, #22
 8003abc:	4602      	mov	r2, r0
 8003abe:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fbc7 	bl	8004258 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003aca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0a      	bge.n	8003ae8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3317      	adds	r3, #23
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e009      	b.n	8003afc <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3317      	adds	r3, #23
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f006 fd25 	bl	800a550 <USB_GetHostSpeed>
 8003b06:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003b08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10b      	bne.n	8003b28 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003b10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_HCD_HC_Init+0x10a>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d104      	bne.n	8003b28 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2bbc      	cmp	r3, #188	@ 0xbc
 8003b22:	d901      	bls.n	8003b28 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003b24:	23bc      	movs	r3, #188	@ 0xbc
 8003b26:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3318      	adds	r3, #24
 8003b38:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003b3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	b298      	uxth	r0, r3
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3328      	adds	r3, #40	@ 0x28
 8003b52:	4602      	mov	r2, r0
 8003b54:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	787c      	ldrb	r4, [r7, #1]
 8003b60:	78ba      	ldrb	r2, [r7, #2]
 8003b62:	78f9      	ldrb	r1, [r7, #3]
 8003b64:	9302      	str	r3, [sp, #8]
 8003b66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	4623      	mov	r3, r4
 8003b74:	f006 fd14 	bl	800a5a0 <USB_HC_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd90      	pop	{r4, r7, pc}

08003b8e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_HCD_HC_Halt+0x1e>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e00f      	b.n	8003bcc <HAL_HCD_HC_Halt+0x3e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f007 f8a6 	bl	800ad0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	70fb      	strb	r3, [r7, #3]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70bb      	strb	r3, [r7, #2]
 8003bea:	4613      	mov	r3, r2
 8003bec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3317      	adds	r3, #23
 8003bfe:	78ba      	ldrb	r2, [r7, #2]
 8003c00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3326      	adds	r3, #38	@ 0x26
 8003c12:	787a      	ldrb	r2, [r7, #1]
 8003c14:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003c16:	7c3b      	ldrb	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d114      	bne.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	332a      	adds	r3, #42	@ 0x2a
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3319      	adds	r3, #25
 8003c40:	7f3a      	ldrb	r2, [r7, #28]
 8003c42:	701a      	strb	r2, [r3, #0]
 8003c44:	e009      	b.n	8003c5a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	332a      	adds	r3, #42	@ 0x2a
 8003c56:	2202      	movs	r2, #2
 8003c58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c5a:	787b      	ldrb	r3, [r7, #1]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	f200 8102 	bhi.w	8003e66 <HAL_HCD_HC_SubmitRequest+0x292>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003e51 	.word	0x08003e51
 8003c70:	08003d3d 	.word	0x08003d3d
 8003c74:	08003dc7 	.word	0x08003dc7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003c78:	7c3b      	ldrb	r3, [r7, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	f040 80f5 	bne.w	8003e6a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003c80:	78bb      	ldrb	r3, [r7, #2]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d12d      	bne.n	8003ce2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003c86:	8b3b      	ldrh	r3, [r7, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	333d      	adds	r3, #61	@ 0x3d
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	333d      	adds	r3, #61	@ 0x3d
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	332a      	adds	r3, #42	@ 0x2a
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003cca:	e0ce      	b.n	8003e6a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	332a      	adds	r3, #42	@ 0x2a
 8003cdc:	2202      	movs	r2, #2
 8003cde:	701a      	strb	r2, [r3, #0]
      break;
 8003ce0:	e0c3      	b.n	8003e6a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	331a      	adds	r3, #26
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f040 80b8 	bne.w	8003e6a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333c      	adds	r3, #60	@ 0x3c
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	332a      	adds	r3, #42	@ 0x2a
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
      break;
 8003d24:	e0a1      	b.n	8003e6a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	332a      	adds	r3, #42	@ 0x2a
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      break;
 8003d3a:	e096      	b.n	8003e6a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003d3c:	78bb      	ldrb	r3, [r7, #2]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d120      	bne.n	8003d84 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	333d      	adds	r3, #61	@ 0x3d
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	332a      	adds	r3, #42	@ 0x2a
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003d6c:	e07e      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	332a      	adds	r3, #42	@ 0x2a
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]
      break;
 8003d82:	e073      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	333c      	adds	r3, #60	@ 0x3c
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	332a      	adds	r3, #42	@ 0x2a
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
      break;
 8003dae:	e05d      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	332a      	adds	r3, #42	@ 0x2a
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	701a      	strb	r2, [r3, #0]
      break;
 8003dc4:	e052      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003dc6:	78bb      	ldrb	r3, [r7, #2]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d120      	bne.n	8003e0e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	333d      	adds	r3, #61	@ 0x3d
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	332a      	adds	r3, #42	@ 0x2a
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003df6:	e039      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	332a      	adds	r3, #42	@ 0x2a
 8003e08:	2202      	movs	r2, #2
 8003e0a:	701a      	strb	r2, [r3, #0]
      break;
 8003e0c:	e02e      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	333c      	adds	r3, #60	@ 0x3c
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	332a      	adds	r3, #42	@ 0x2a
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
      break;
 8003e38:	e018      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	332a      	adds	r3, #42	@ 0x2a
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
      break;
 8003e4e:	e00d      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	332a      	adds	r3, #42	@ 0x2a
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
      break;
 8003e64:	e002      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003e6a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	332c      	adds	r3, #44	@ 0x2c
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	8b39      	ldrh	r1, [r7, #24]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4403      	add	r3, r0
 8003e90:	3334      	adds	r3, #52	@ 0x34
 8003e92:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	334c      	adds	r3, #76	@ 0x4c
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3338      	adds	r3, #56	@ 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3315      	adds	r3, #21
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	334d      	adds	r3, #77	@ 0x4d
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3310      	adds	r3, #16
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	1d19      	adds	r1, r3, #4
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	799b      	ldrb	r3, [r3, #6]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f006 fc7a 	bl	800a7f8 <USB_HC_StartXfer>
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop

08003f10 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f006 f96e 	bl	800a208 <USB_GetMode>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	f040 80fb 	bne.w	800412a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f006 f931 	bl	800a1a0 <USB_ReadInterrupts>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80f1 	beq.w	8004128 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f006 f928 	bl	800a1a0 <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f5a:	d104      	bne.n	8003f66 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003f64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f006 f918 	bl	800a1a0 <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7a:	d104      	bne.n	8003f86 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003f84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f006 f908 	bl	800a1a0 <USB_ReadInterrupts>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f9a:	d104      	bne.n	8003fa6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003fa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f006 f8f8 	bl	800a1a0 <USB_ReadInterrupts>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d103      	bne.n	8003fc2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f006 f8ea 	bl	800a1a0 <USB_ReadInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd6:	d120      	bne.n	800401a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003fe0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	6938      	ldr	r0, [r7, #16]
 8003ff6:	f005 ffdd 	bl	8009fb4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003ffa:	6938      	ldr	r0, [r7, #16]
 8003ffc:	f006 f80c 	bl	800a018 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7a5b      	ldrb	r3, [r3, #9]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d105      	bne.n	8004014 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f006 f9fe 	bl	800a410 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f00d fa85 	bl	8011524 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f006 f8be 	bl	800a1a0 <USB_ReadInterrupts>
 8004024:	4603      	mov	r3, r0
 8004026:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800402a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800402e:	d102      	bne.n	8004036 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f001 fd33 	bl	8005a9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f006 f8b0 	bl	800a1a0 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	d106      	bne.n	8004058 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f00d fa4e 	bl	80114ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2208      	movs	r2, #8
 8004056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f006 f89f 	bl	800a1a0 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800406c:	d139      	bne.n	80040e2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f006 fe3a 	bl	800acec <USB_HC_ReadInterrupt>
 8004078:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e025      	b.n	80040cc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d018      	beq.n	80040c6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040aa:	d106      	bne.n	80040ba <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f905 	bl	80042c2 <HCD_HC_IN_IRQHandler>
 80040b8:	e005      	b.n	80040c6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 ff67 	bl	8004f94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	795b      	ldrb	r3, [r3, #5]
 80040d0:	461a      	mov	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d3d3      	bcc.n	8004080 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 f85a 	bl	800a1a0 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d101      	bne.n	80040fa <HAL_HCD_IRQHandler+0x1ea>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_HCD_IRQHandler+0x1ec>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d014      	beq.n	800412a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f001 fbe4 	bl	80058de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699a      	ldr	r2, [r3, #24]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0210 	orr.w	r2, r2, #16
 8004124:	619a      	str	r2, [r3, #24]
 8004126:	e000      	b.n	800412a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004128:	bf00      	nop
    }
  }
}
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_HCD_Start+0x16>
 8004142:	2302      	movs	r3, #2
 8004144:	e013      	b.n	800416e <HAL_HCD_Start+0x3e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f006 f9c2 	bl	800a4de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f005 feba 	bl	8009ed8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_HCD_Stop+0x16>
 8004188:	2302      	movs	r3, #2
 800418a:	e00d      	b.n	80041a8 <HAL_HCD_Stop+0x32>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f006 ff15 	bl	800afc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f006 f964 	bl	800a48a <USB_ResetPort>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	@ 0x4c
 80041e8:	781b      	ldrb	r3, [r3, #0]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	3338      	adds	r3, #56	@ 0x38
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f006 f9a6 	bl	800a57e <USB_GetCurrentFrame>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f006 f981 	bl	800a550 <USB_GetHostSpeed>
 800424e:	4603      	mov	r3, r0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	331a      	adds	r3, #26
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	331b      	adds	r3, #27
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3325      	adds	r3, #37	@ 0x25
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3324      	adds	r3, #36	@ 0x24
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f005 ff70 	bl	800a1c6 <USB_ReadChInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d11a      	bne.n	8004326 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042fc:	461a      	mov	r2, r3
 80042fe:	2304      	movs	r3, #4
 8004300:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	334d      	adds	r3, #77	@ 0x4d
 8004312:	2207      	movs	r2, #7
 8004314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f006 fcf5 	bl	800ad0e <USB_HC_Halt>
 8004324:	e09e      	b.n	8004464 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f005 ff49 	bl	800a1c6 <USB_ReadChInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433e:	d11b      	bne.n	8004378 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800434c:	461a      	mov	r2, r3
 800434e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004352:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	334d      	adds	r3, #77	@ 0x4d
 8004364:	2208      	movs	r2, #8
 8004366:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f006 fccc 	bl	800ad0e <USB_HC_Halt>
 8004376:	e075      	b.n	8004464 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f005 ff20 	bl	800a1c6 <USB_ReadChInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d11a      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439c:	461a      	mov	r2, r3
 800439e:	2308      	movs	r3, #8
 80043a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	334d      	adds	r3, #77	@ 0x4d
 80043b2:	2206      	movs	r2, #6
 80043b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f006 fca5 	bl	800ad0e <USB_HC_Halt>
 80043c4:	e04e      	b.n	8004464 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f005 fef9 	bl	800a1c6 <USB_ReadChInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043de:	d11b      	bne.n	8004418 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ec:	461a      	mov	r2, r3
 80043ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	334d      	adds	r3, #77	@ 0x4d
 8004404:	2209      	movs	r2, #9
 8004406:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f006 fc7c 	bl	800ad0e <USB_HC_Halt>
 8004416:	e025      	b.n	8004464 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f005 fed0 	bl	800a1c6 <USB_ReadChInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b80      	cmp	r3, #128	@ 0x80
 800442e:	d119      	bne.n	8004464 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800443c:	461a      	mov	r2, r3
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	334d      	adds	r3, #77	@ 0x4d
 8004452:	2207      	movs	r2, #7
 8004454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f006 fc55 	bl	800ad0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f005 feaa 	bl	800a1c6 <USB_ReadChInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447c:	d112      	bne.n	80044a4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f006 fc41 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004498:	461a      	mov	r2, r3
 800449a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800449e:	6093      	str	r3, [r2, #8]
 80044a0:	f000 bd75 	b.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f005 fe8a 	bl	800a1c6 <USB_ReadChInterrupts>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f040 8128 	bne.w	800470e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ca:	461a      	mov	r2, r3
 80044cc:	2320      	movs	r3, #32
 80044ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	331b      	adds	r3, #27
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d119      	bne.n	800451a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	331b      	adds	r3, #27
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	440a      	add	r2, r1
 8004510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004518:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	799b      	ldrb	r3, [r3, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01b      	beq.n	800455a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3330      	adds	r3, #48	@ 0x30
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	1ac9      	subs	r1, r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4403      	add	r3, r0
 8004556:	3338      	adds	r3, #56	@ 0x38
 8004558:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	334d      	adds	r3, #77	@ 0x4d
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3344      	adds	r3, #68	@ 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458e:	461a      	mov	r2, r3
 8004590:	2301      	movs	r3, #1
 8004592:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3326      	adds	r3, #38	@ 0x26
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3326      	adds	r3, #38	@ 0x26
 80045ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d110      	bne.n	80045e2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f006 fba0 	bl	800ad0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045da:	461a      	mov	r2, r3
 80045dc:	2310      	movs	r3, #16
 80045de:	6093      	str	r3, [r2, #8]
 80045e0:	e03d      	b.n	800465e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3326      	adds	r3, #38	@ 0x26
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d00a      	beq.n	800460e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	3326      	adds	r3, #38	@ 0x26
 8004608:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800460a:	2b01      	cmp	r3, #1
 800460c:	d127      	bne.n	800465e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	440a      	add	r2, r1
 8004624:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800462c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	334c      	adds	r3, #76	@ 0x4c
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	334c      	adds	r3, #76	@ 0x4c
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f00c ff71 	bl	8011540 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	799b      	ldrb	r3, [r3, #6]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d13b      	bne.n	80046de <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	3338      	adds	r3, #56	@ 0x38
 8004676:	6819      	ldr	r1, [r3, #0]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4403      	add	r3, r0
 8004686:	3328      	adds	r3, #40	@ 0x28
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	440b      	add	r3, r1
 800468c:	1e59      	subs	r1, r3, #1
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4403      	add	r3, r0
 800469c:	3328      	adds	r3, #40	@ 0x28
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8470 	beq.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	333c      	adds	r3, #60	@ 0x3c
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2d8      	uxtb	r0, r3
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	333c      	adds	r3, #60	@ 0x3c
 80046d6:	4602      	mov	r2, r0
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	f000 bc58 	b.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	333c      	adds	r3, #60	@ 0x3c
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2d8      	uxtb	r0, r3
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	333c      	adds	r3, #60	@ 0x3c
 8004706:	4602      	mov	r2, r0
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	f000 bc40 	b.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f005 fd55 	bl	800a1c6 <USB_ReadChInterrupts>
 800471c:	4603      	mov	r3, r0
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	d131      	bne.n	800478a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004732:	461a      	mov	r2, r3
 8004734:	2320      	movs	r3, #32
 8004736:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	331a      	adds	r3, #26
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	f040 841f 	bne.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	331b      	adds	r3, #27
 8004760:	2201      	movs	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	334d      	adds	r3, #77	@ 0x4d
 8004774:	2203      	movs	r2, #3
 8004776:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f006 fac4 	bl	800ad0e <USB_HC_Halt>
 8004786:	f000 bc02 	b.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f005 fd17 	bl	800a1c6 <USB_ReadChInterrupts>
 8004798:	4603      	mov	r3, r0
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	f040 8305 	bne.w	8004dae <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	2302      	movs	r3, #2
 80047b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	334d      	adds	r3, #77	@ 0x4d
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d114      	bne.n	80047f6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	334d      	adds	r3, #77	@ 0x4d
 80047dc:	2202      	movs	r2, #2
 80047de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	334c      	adds	r3, #76	@ 0x4c
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e2cc      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	334d      	adds	r3, #77	@ 0x4d
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d114      	bne.n	8004836 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	@ 0x4d
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	334c      	adds	r3, #76	@ 0x4c
 8004830:	2205      	movs	r2, #5
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e2ac      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	334d      	adds	r3, #77	@ 0x4d
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b07      	cmp	r3, #7
 800484a:	d00b      	beq.n	8004864 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	334d      	adds	r3, #77	@ 0x4d
 800485c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800485e:	2b09      	cmp	r3, #9
 8004860:	f040 80a6 	bne.w	80049b0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	334d      	adds	r3, #77	@ 0x4d
 8004874:	2202      	movs	r2, #2
 8004876:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3344      	adds	r3, #68	@ 0x44
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	1c59      	adds	r1, r3, #1
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4403      	add	r3, r0
 8004898:	3344      	adds	r3, #68	@ 0x44
 800489a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3344      	adds	r3, #68	@ 0x44
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d943      	bls.n	800493a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	3344      	adds	r3, #68	@ 0x44
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	331a      	adds	r3, #26
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d123      	bne.n	8004924 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	331b      	adds	r3, #27
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	331c      	adds	r3, #28
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	440a      	add	r2, r1
 800491a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800491e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004922:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	334c      	adds	r3, #76	@ 0x4c
 8004934:	2204      	movs	r2, #4
 8004936:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004938:	e229      	b.n	8004d8e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	334c      	adds	r3, #76	@ 0x4c
 800494a:	2202      	movs	r2, #2
 800494c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	3326      	adds	r3, #38	@ 0x26
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	3326      	adds	r3, #38	@ 0x26
 8004974:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004976:	2b02      	cmp	r3, #2
 8004978:	f040 8209 	bne.w	8004d8e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004992:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800499a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a8:	461a      	mov	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049ae:	e1ee      	b.n	8004d8e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	334d      	adds	r3, #77	@ 0x4d
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	f040 80c8 	bne.w	8004b58 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	334d      	adds	r3, #77	@ 0x4d
 80049d8:	2202      	movs	r2, #2
 80049da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	331b      	adds	r3, #27
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 81ce 	bne.w	8004d90 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	3326      	adds	r3, #38	@ 0x26
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d16b      	bne.n	8004ae2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3348      	adds	r3, #72	@ 0x48
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4403      	add	r3, r0
 8004a2a:	3348      	adds	r3, #72	@ 0x48
 8004a2c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3348      	adds	r3, #72	@ 0x48
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d943      	bls.n	8004acc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	3348      	adds	r3, #72	@ 0x48
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	331b      	adds	r3, #27
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	3344      	adds	r3, #68	@ 0x44
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d809      	bhi.n	8004a96 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	331c      	adds	r3, #28
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	78fa      	ldrb	r2, [r7, #3]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334c      	adds	r3, #76	@ 0x4c
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e014      	b.n	8004af6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	334c      	adds	r3, #76	@ 0x4c
 8004adc:	2202      	movs	r2, #2
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e009      	b.n	8004af6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	334c      	adds	r3, #76	@ 0x4c
 8004af2:	2202      	movs	r2, #2
 8004af4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004af6:	78fa      	ldrb	r2, [r7, #3]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3326      	adds	r3, #38	@ 0x26
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3326      	adds	r3, #38	@ 0x26
 8004b1c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	f040 8136 	bne.w	8004d90 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b42:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b50:	461a      	mov	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e11b      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	334d      	adds	r3, #77	@ 0x4d
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	f040 8081 	bne.w	8004c72 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334d      	adds	r3, #77	@ 0x4d
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	331b      	adds	r3, #27
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	f040 80fa 	bne.w	8004d90 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	334c      	adds	r3, #76	@ 0x4c
 8004bac:	2202      	movs	r2, #2
 8004bae:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bce:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bee:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c0a:	f023 0320 	bic.w	r3, r3, #32
 8004c0e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	3326      	adds	r3, #38	@ 0x26
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3326      	adds	r3, #38	@ 0x26
 8004c36:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f040 80a9 	bne.w	8004d90 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c54:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c5c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e08e      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004c72:	78fa      	ldrb	r2, [r7, #3]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	334d      	adds	r3, #77	@ 0x4d
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d143      	bne.n	8004d10 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	334d      	adds	r3, #77	@ 0x4d
 8004c98:	2202      	movs	r2, #2
 8004c9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	334c      	adds	r3, #76	@ 0x4c
 8004cac:	2202      	movs	r2, #2
 8004cae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3326      	adds	r3, #38	@ 0x26
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3326      	adds	r3, #38	@ 0x26
 8004cd6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d159      	bne.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cf2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cfa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e03f      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334d      	adds	r3, #77	@ 0x4d
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d126      	bne.n	8004d74 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	334d      	adds	r3, #77	@ 0x4d
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3344      	adds	r3, #68	@ 0x44
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4403      	add	r3, r0
 8004d5a:	3344      	adds	r3, #68	@ 0x44
 8004d5c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	334c      	adds	r3, #76	@ 0x4c
 8004d6e:	2204      	movs	r2, #4
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e00d      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	334d      	adds	r3, #77	@ 0x4d
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	f000 8100 	beq.w	8004f8c <HCD_HC_IN_IRQHandler+0xcca>
 8004d8c:	e000      	b.n	8004d90 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d8e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	334c      	adds	r3, #76	@ 0x4c
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f00c fbca 	bl	8011540 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dac:	e0ef      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 fa05 	bl	800a1c6 <USB_ReadChInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	2b40      	cmp	r3, #64	@ 0x40
 8004dc4:	d12f      	bne.n	8004e26 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2340      	movs	r3, #64	@ 0x40
 8004dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	334d      	adds	r3, #77	@ 0x4d
 8004de8:	2205      	movs	r2, #5
 8004dea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	331a      	adds	r3, #26
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3344      	adds	r3, #68	@ 0x44
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f005 ff75 	bl	800ad0e <USB_HC_Halt>
 8004e24:	e0b3      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 f9c9 	bl	800a1c6 <USB_ReadChInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	f040 80a7 	bne.w	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3326      	adds	r3, #38	@ 0x26
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d11b      	bne.n	8004e8e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3344      	adds	r3, #68	@ 0x44
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	334d      	adds	r3, #77	@ 0x4d
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	78fa      	ldrb	r2, [r7, #3]
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f005 ff41 	bl	800ad0e <USB_HC_Halt>
 8004e8c:	e03f      	b.n	8004f0e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3326      	adds	r3, #38	@ 0x26
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ea4:	78fa      	ldrb	r2, [r7, #3]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3326      	adds	r3, #38	@ 0x26
 8004eb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d129      	bne.n	8004f0e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3344      	adds	r3, #68	@ 0x44
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	799b      	ldrb	r3, [r3, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HCD_HC_IN_IRQHandler+0xc2a>
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	331b      	adds	r3, #27
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d110      	bne.n	8004f0e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	334d      	adds	r3, #77	@ 0x4d
 8004efc:	2204      	movs	r2, #4
 8004efe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f005 ff00 	bl	800ad0e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	331b      	adds	r3, #27
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d129      	bne.n	8004f78 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	331b      	adds	r3, #27
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f56:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f72:	f043 0320 	orr.w	r3, r3, #32
 8004f76:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f84:	461a      	mov	r2, r3
 8004f86:	2310      	movs	r3, #16
 8004f88:	6093      	str	r3, [r2, #8]
 8004f8a:	e000      	b.n	8004f8e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004f8c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f005 f907 	bl	800a1c6 <USB_ReadChInterrupts>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d11b      	bne.n	8004ffa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	334d      	adds	r3, #77	@ 0x4d
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f005 fe8c 	bl	800ad0e <USB_HC_Halt>
 8004ff6:	f000 bc6f 	b.w	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f005 f8df 	bl	800a1c6 <USB_ReadChInterrupts>
 8005008:	4603      	mov	r3, r0
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b20      	cmp	r3, #32
 8005010:	f040 8082 	bne.w	8005118 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005020:	461a      	mov	r2, r3
 8005022:	2320      	movs	r3, #32
 8005024:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	3319      	adds	r3, #25
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d124      	bne.n	8005086 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3319      	adds	r3, #25
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	334c      	adds	r3, #76	@ 0x4c
 8005060:	2202      	movs	r2, #2
 8005062:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	334d      	adds	r3, #77	@ 0x4d
 8005074:	2203      	movs	r2, #3
 8005076:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f005 fe44 	bl	800ad0e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	331a      	adds	r3, #26
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 841d 	bne.w	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	331b      	adds	r3, #27
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 8411 	bne.w	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3326      	adds	r3, #38	@ 0x26
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d009      	beq.n	80050e0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	331b      	adds	r3, #27
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	334d      	adds	r3, #77	@ 0x4d
 80050f0:	2203      	movs	r2, #3
 80050f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	4611      	mov	r1, r2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f005 fe06 	bl	800ad0e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3344      	adds	r3, #68	@ 0x44
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e3df      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f005 f850 	bl	800a1c6 <USB_ReadChInterrupts>
 8005126:	4603      	mov	r3, r0
 8005128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800512c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005130:	d111      	bne.n	8005156 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513e:	461a      	mov	r2, r3
 8005140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005144:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f005 fddd 	bl	800ad0e <USB_HC_Halt>
 8005154:	e3c0      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f005 f831 	bl	800a1c6 <USB_ReadChInterrupts>
 8005164:	4603      	mov	r3, r0
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d168      	bne.n	8005240 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	3344      	adds	r3, #68	@ 0x44
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f005 f81b 	bl	800a1c6 <USB_ReadChInterrupts>
 8005190:	4603      	mov	r3, r0
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b40      	cmp	r3, #64	@ 0x40
 8005198:	d112      	bne.n	80051c0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3319      	adds	r3, #25
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ba:	461a      	mov	r2, r3
 80051bc:	2340      	movs	r3, #64	@ 0x40
 80051be:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	331b      	adds	r3, #27
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d019      	beq.n	800520a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	331b      	adds	r3, #27
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005208:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005216:	461a      	mov	r2, r3
 8005218:	2301      	movs	r3, #1
 800521a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	334d      	adds	r3, #77	@ 0x4d
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f005 fd68 	bl	800ad0e <USB_HC_Halt>
 800523e:	e34b      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f004 ffbc 	bl	800a1c6 <USB_ReadChInterrupts>
 800524e:	4603      	mov	r3, r0
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	d139      	bne.n	80052cc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	334d      	adds	r3, #77	@ 0x4d
 8005268:	2205      	movs	r2, #5
 800526a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	331a      	adds	r3, #26
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	3319      	adds	r3, #25
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3344      	adds	r3, #68	@ 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f005 fd2b 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c4:	461a      	mov	r2, r3
 80052c6:	2340      	movs	r3, #64	@ 0x40
 80052c8:	6093      	str	r3, [r2, #8]
 80052ca:	e305      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	78fa      	ldrb	r2, [r7, #3]
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f004 ff76 	bl	800a1c6 <USB_ReadChInterrupts>
 80052da:	4603      	mov	r3, r0
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11a      	bne.n	800531a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f0:	461a      	mov	r2, r3
 80052f2:	2308      	movs	r3, #8
 80052f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	334d      	adds	r3, #77	@ 0x4d
 8005306:	2206      	movs	r2, #6
 8005308:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f005 fcfb 	bl	800ad0e <USB_HC_Halt>
 8005318:	e2de      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f004 ff4f 	bl	800a1c6 <USB_ReadChInterrupts>
 8005328:	4603      	mov	r3, r0
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b10      	cmp	r3, #16
 8005330:	d144      	bne.n	80053bc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3344      	adds	r3, #68	@ 0x44
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	334d      	adds	r3, #77	@ 0x4d
 8005356:	2204      	movs	r2, #4
 8005358:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800535a:	78fa      	ldrb	r2, [r7, #3]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	3319      	adds	r3, #25
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d114      	bne.n	800539a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	3318      	adds	r3, #24
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	3319      	adds	r3, #25
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	4611      	mov	r1, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f005 fcb3 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b4:	461a      	mov	r2, r3
 80053b6:	2310      	movs	r3, #16
 80053b8:	6093      	str	r3, [r2, #8]
 80053ba:	e28d      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f004 fefe 	bl	800a1c6 <USB_ReadChInterrupts>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d0:	2b80      	cmp	r3, #128	@ 0x80
 80053d2:	d169      	bne.n	80054a8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	799b      	ldrb	r3, [r3, #6]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d111      	bne.n	8005400 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80053dc:	78fa      	ldrb	r2, [r7, #3]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	334d      	adds	r3, #77	@ 0x4d
 80053ec:	2207      	movs	r2, #7
 80053ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f005 fc88 	bl	800ad0e <USB_HC_Halt>
 80053fe:	e049      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3344      	adds	r3, #68	@ 0x44
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4403      	add	r3, r0
 8005420:	3344      	adds	r3, #68	@ 0x44
 8005422:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	3344      	adds	r3, #68	@ 0x44
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d922      	bls.n	8005480 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3344      	adds	r3, #68	@ 0x44
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	334c      	adds	r3, #76	@ 0x4c
 800545e:	2204      	movs	r2, #4
 8005460:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	334c      	adds	r3, #76	@ 0x4c
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f00c f861 	bl	8011540 <HAL_HCD_HC_NotifyURBChange_Callback>
 800547e:	e009      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	334c      	adds	r3, #76	@ 0x4c
 8005490:	2202      	movs	r2, #2
 8005492:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a0:	461a      	mov	r2, r3
 80054a2:	2380      	movs	r3, #128	@ 0x80
 80054a4:	6093      	str	r3, [r2, #8]
 80054a6:	e217      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f004 fe88 	bl	800a1c6 <USB_ReadChInterrupts>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c0:	d11b      	bne.n	80054fa <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	334d      	adds	r3, #77	@ 0x4d
 80054d2:	2209      	movs	r2, #9
 80054d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f005 fc15 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f0:	461a      	mov	r2, r3
 80054f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054f6:	6093      	str	r3, [r2, #8]
 80054f8:	e1ee      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f004 fe5f 	bl	800a1c6 <USB_ReadChInterrupts>
 8005508:	4603      	mov	r3, r0
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	f040 81df 	bne.w	80058d2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	2302      	movs	r3, #2
 8005524:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	334d      	adds	r3, #77	@ 0x4d
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 8093 	bne.w	8005664 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	334d      	adds	r3, #77	@ 0x4d
 800554e:	2202      	movs	r2, #2
 8005550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	334c      	adds	r3, #76	@ 0x4c
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3326      	adds	r3, #38	@ 0x26
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d00b      	beq.n	8005594 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3326      	adds	r3, #38	@ 0x26
 800558c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800558e:	2b03      	cmp	r3, #3
 8005590:	f040 8190 	bne.w	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	799b      	ldrb	r3, [r3, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d115      	bne.n	80055c8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	333d      	adds	r3, #61	@ 0x3d
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	f083 0301 	eor.w	r3, r3, #1
 80055b4:	b2d8      	uxtb	r0, r3
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	333d      	adds	r3, #61	@ 0x3d
 80055c4:	4602      	mov	r2, r0
 80055c6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	799b      	ldrb	r3, [r3, #6]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	f040 8171 	bne.w	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3334      	adds	r3, #52	@ 0x34
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8165 	beq.w	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	3334      	adds	r3, #52	@ 0x34
 80055fa:	6819      	ldr	r1, [r3, #0]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4403      	add	r3, r0
 800560a:	3328      	adds	r3, #40	@ 0x28
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	440b      	add	r3, r1
 8005610:	1e59      	subs	r1, r3, #1
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	3328      	adds	r3, #40	@ 0x28
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	fbb1 f3f3 	udiv	r3, r1, r3
 8005628:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 813f 	beq.w	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	440b      	add	r3, r1
 8005644:	333d      	adds	r3, #61	@ 0x3d
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	f083 0301 	eor.w	r3, r3, #1
 800564e:	b2d8      	uxtb	r0, r3
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	333d      	adds	r3, #61	@ 0x3d
 800565e:	4602      	mov	r2, r0
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e127      	b.n	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	334d      	adds	r3, #77	@ 0x4d
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d120      	bne.n	80056bc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	334d      	adds	r3, #77	@ 0x4d
 800568a:	2202      	movs	r2, #2
 800568c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	331b      	adds	r3, #27
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	f040 8107 	bne.w	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	334c      	adds	r3, #76	@ 0x4c
 80056b6:	2202      	movs	r2, #2
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e0fb      	b.n	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	334d      	adds	r3, #77	@ 0x4d
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d13a      	bne.n	8005748 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	334d      	adds	r3, #77	@ 0x4d
 80056e2:	2202      	movs	r2, #2
 80056e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	334c      	adds	r3, #76	@ 0x4c
 80056f6:	2202      	movs	r2, #2
 80056f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	331b      	adds	r3, #27
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 80d1 	bne.w	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	331b      	adds	r3, #27
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	440a      	add	r2, r1
 800573c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005744:	6053      	str	r3, [r2, #4]
 8005746:	e0b5      	b.n	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	334d      	adds	r3, #77	@ 0x4d
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b05      	cmp	r3, #5
 800575c:	d114      	bne.n	8005788 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	334d      	adds	r3, #77	@ 0x4d
 800576e:	2202      	movs	r2, #2
 8005770:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	334c      	adds	r3, #76	@ 0x4c
 8005782:	2202      	movs	r2, #2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e095      	b.n	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	334d      	adds	r3, #77	@ 0x4d
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b06      	cmp	r3, #6
 800579c:	d114      	bne.n	80057c8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	334d      	adds	r3, #77	@ 0x4d
 80057ae:	2202      	movs	r2, #2
 80057b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	334c      	adds	r3, #76	@ 0x4c
 80057c2:	2205      	movs	r2, #5
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e075      	b.n	80058b4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	334d      	adds	r3, #77	@ 0x4d
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b07      	cmp	r3, #7
 80057dc:	d00a      	beq.n	80057f4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	334d      	adds	r3, #77	@ 0x4d
 80057ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	d170      	bne.n	80058d6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	334d      	adds	r3, #77	@ 0x4d
 8005804:	2202      	movs	r2, #2
 8005806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3344      	adds	r3, #68	@ 0x44
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	1c59      	adds	r1, r3, #1
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4403      	add	r3, r0
 8005828:	3344      	adds	r3, #68	@ 0x44
 800582a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	3344      	adds	r3, #68	@ 0x44
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d914      	bls.n	800586c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	3344      	adds	r3, #68	@ 0x44
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	334c      	adds	r3, #76	@ 0x4c
 8005866:	2204      	movs	r2, #4
 8005868:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800586a:	e022      	b.n	80058b2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	334c      	adds	r3, #76	@ 0x4c
 800587c:	2202      	movs	r2, #2
 800587e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4413      	add	r3, r2
 8005888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005896:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800589e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ac:	461a      	mov	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80058b4:	78fa      	ldrb	r2, [r7, #3]
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	334c      	adds	r3, #76	@ 0x4c
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f00b fe38 	bl	8011540 <HAL_HCD_HC_NotifyURBChange_Callback>
 80058d0:	e002      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80058d6:	bf00      	nop
  }
}
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b08a      	sub	sp, #40	@ 0x28
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	0c5b      	lsrs	r3, r3, #17
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005912:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d004      	beq.n	8005924 <HCD_RXQLVL_IRQHandler+0x46>
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b05      	cmp	r3, #5
 800591e:	f000 80b6 	beq.w	8005a8e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005922:	e0b7      	b.n	8005a94 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80b3 	beq.w	8005a92 <HCD_RXQLVL_IRQHandler+0x1b4>
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	332c      	adds	r3, #44	@ 0x2c
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80a7 	beq.w	8005a92 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4613      	mov	r3, r2
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3338      	adds	r3, #56	@ 0x38
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	18d1      	adds	r1, r2, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4613      	mov	r3, r2
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4403      	add	r3, r0
 8005968:	3334      	adds	r3, #52	@ 0x34
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4299      	cmp	r1, r3
 800596e:	f200 8083 	bhi.w	8005a78 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	332c      	adds	r3, #44	@ 0x2c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	b292      	uxth	r2, r2
 800598c:	4619      	mov	r1, r3
 800598e:	f004 fbaf 	bl	800a0f0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4613      	mov	r3, r2
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	332c      	adds	r3, #44	@ 0x2c
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	18d1      	adds	r1, r2, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4613      	mov	r3, r2
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4403      	add	r3, r0
 80059b6:	332c      	adds	r3, #44	@ 0x2c
 80059b8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4613      	mov	r3, r2
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	3338      	adds	r3, #56	@ 0x38
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	18d1      	adds	r1, r2, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4613      	mov	r3, r2
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4403      	add	r3, r0
 80059de:	3338      	adds	r3, #56	@ 0x38
 80059e0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	0cdb      	lsrs	r3, r3, #19
 80059f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4613      	mov	r3, r2
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	3328      	adds	r3, #40	@ 0x28
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d13f      	bne.n	8005a92 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d03c      	beq.n	8005a92 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a36:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a44:	461a      	mov	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	333c      	adds	r3, #60	@ 0x3c
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f083 0301 	eor.w	r3, r3, #1
 8005a60:	b2d8      	uxtb	r0, r3
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	333c      	adds	r3, #60	@ 0x3c
 8005a72:	4602      	mov	r2, r0
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	e00c      	b.n	8005a92 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	334c      	adds	r3, #76	@ 0x4c
 8005a88:	2204      	movs	r2, #4
 8005a8a:	701a      	strb	r2, [r3, #0]
      break;
 8005a8c:	e001      	b.n	8005a92 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005a92:	bf00      	nop
  }
}
 8005a94:	bf00      	nop
 8005a96:	3728      	adds	r7, #40	@ 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ac8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d10b      	bne.n	8005aec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d102      	bne.n	8005ae4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f00b fd12 	bl	8011508 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d132      	bne.n	8005b5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d126      	bne.n	8005b56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7a5b      	ldrb	r3, [r3, #9]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d113      	bne.n	8005b38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b1a:	d106      	bne.n	8005b2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2102      	movs	r1, #2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f004 fc74 	bl	800a410 <USB_InitFSLSPClkSel>
 8005b28:	e011      	b.n	8005b4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f004 fc6d 	bl	800a410 <USB_InitFSLSPClkSel>
 8005b36:	e00a      	b.n	8005b4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	79db      	ldrb	r3, [r3, #7]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d106      	bne.n	8005b4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b46:	461a      	mov	r2, r3
 8005b48:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005b4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f00b fd08 	bl	8011564 <HAL_HCD_PortEnabled_Callback>
 8005b54:	e002      	b.n	8005b5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f00b fd12 	bl	8011580 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d103      	bne.n	8005b6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f043 0320 	orr.w	r3, r3, #32
 8005b6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b74:	461a      	mov	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6013      	str	r3, [r2, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e12b      	b.n	8005dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fc fbce 	bl	800234c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2224      	movs	r2, #36	@ 0x24
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005be8:	f001 fa20 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 8005bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	4a81      	ldr	r2, [pc, #516]	@ (8005df8 <HAL_I2C_Init+0x274>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d807      	bhi.n	8005c08 <HAL_I2C_Init+0x84>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a80      	ldr	r2, [pc, #512]	@ (8005dfc <HAL_I2C_Init+0x278>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	bf94      	ite	ls
 8005c00:	2301      	movls	r3, #1
 8005c02:	2300      	movhi	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e006      	b.n	8005c16 <HAL_I2C_Init+0x92>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a7d      	ldr	r2, [pc, #500]	@ (8005e00 <HAL_I2C_Init+0x27c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bf94      	ite	ls
 8005c10:	2301      	movls	r3, #1
 8005c12:	2300      	movhi	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0e7      	b.n	8005dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a78      	ldr	r2, [pc, #480]	@ (8005e04 <HAL_I2C_Init+0x280>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	0c9b      	lsrs	r3, r3, #18
 8005c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8005df8 <HAL_I2C_Init+0x274>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d802      	bhi.n	8005c58 <HAL_I2C_Init+0xd4>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3301      	adds	r3, #1
 8005c56:	e009      	b.n	8005c6c <HAL_I2C_Init+0xe8>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	4a69      	ldr	r2, [pc, #420]	@ (8005e08 <HAL_I2C_Init+0x284>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	495c      	ldr	r1, [pc, #368]	@ (8005df8 <HAL_I2C_Init+0x274>)
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	d819      	bhi.n	8005cc0 <HAL_I2C_Init+0x13c>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e59      	subs	r1, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_I2C_Init+0x138>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1e59      	subs	r1, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cba:	e051      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	e04f      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d111      	bne.n	8005cec <HAL_I2C_Init+0x168>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1e58      	subs	r0, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	440b      	add	r3, r1
 8005cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	e012      	b.n	8005d12 <HAL_I2C_Init+0x18e>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e58      	subs	r0, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	0099      	lsls	r1, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d02:	3301      	adds	r3, #1
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Init+0x196>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e022      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10e      	bne.n	8005d40 <HAL_I2C_Init+0x1bc>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1e58      	subs	r0, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	440b      	add	r3, r1
 8005d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d34:	3301      	adds	r3, #1
 8005d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3e:	e00f      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1e58      	subs	r0, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	0099      	lsls	r1, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d56:	3301      	adds	r3, #1
 8005d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	6809      	ldr	r1, [r1, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6911      	ldr	r1, [r2, #16]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	000186a0 	.word	0x000186a0
 8005dfc:	001e847f 	.word	0x001e847f
 8005e00:	003d08ff 	.word	0x003d08ff
 8005e04:	431bde83 	.word	0x431bde83
 8005e08:	10624dd3 	.word	0x10624dd3

08005e0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e128      	b.n	8006070 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a90      	ldr	r2, [pc, #576]	@ (8006078 <HAL_I2S_Init+0x26c>)
 8005e36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fc facf 	bl	80023dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e54:	f023 030f 	bic.w	r3, r3, #15
 8005e58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d060      	beq.n	8005f2c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005e72:	2310      	movs	r3, #16
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e001      	b.n	8005e7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005e78:	2320      	movs	r3, #32
 8005e7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d802      	bhi.n	8005e8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	f001 fa0a 	bl	80072a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e90:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e9a:	d125      	bne.n	8005ee8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d010      	beq.n	8005ec6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	3305      	adds	r3, #5
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	e01f      	b.n	8005f06 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee2:	3305      	adds	r3, #5
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	e00e      	b.n	8005f06 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	461a      	mov	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f02:	3305      	adds	r3, #5
 8005f04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4a5c      	ldr	r2, [pc, #368]	@ (800607c <HAL_I2S_Init+0x270>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	e003      	b.n	8005f34 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d902      	bls.n	8005f40 <HAL_I2S_Init+0x134>
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2bff      	cmp	r3, #255	@ 0xff
 8005f3e:	d907      	bls.n	8005f50 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f44:	f043 0210 	orr.w	r2, r3, #16
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e08f      	b.n	8006070 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	ea42 0103 	orr.w	r1, r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005f6e:	f023 030f 	bic.w	r3, r3, #15
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6851      	ldr	r1, [r2, #4]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6892      	ldr	r2, [r2, #8]
 8005f7a:	4311      	orrs	r1, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	68d2      	ldr	r2, [r2, #12]
 8005f80:	4311      	orrs	r1, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6992      	ldr	r2, [r2, #24]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f92:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d161      	bne.n	8006060 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a38      	ldr	r2, [pc, #224]	@ (8006080 <HAL_I2S_Init+0x274>)
 8005fa0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a37      	ldr	r2, [pc, #220]	@ (8006084 <HAL_I2S_Init+0x278>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <HAL_I2S_Init+0x1a4>
 8005fac:	4b36      	ldr	r3, [pc, #216]	@ (8006088 <HAL_I2S_Init+0x27c>)
 8005fae:	e001      	b.n	8005fb4 <HAL_I2S_Init+0x1a8>
 8005fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	4932      	ldr	r1, [pc, #200]	@ (8006084 <HAL_I2S_Init+0x278>)
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_I2S_Init+0x1b8>
 8005fc0:	4a31      	ldr	r2, [pc, #196]	@ (8006088 <HAL_I2S_Init+0x27c>)
 8005fc2:	e001      	b.n	8005fc8 <HAL_I2S_Init+0x1bc>
 8005fc4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005fc8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005fcc:	f023 030f 	bic.w	r3, r3, #15
 8005fd0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006084 <HAL_I2S_Init+0x278>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <HAL_I2S_Init+0x1d4>
 8005fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8006088 <HAL_I2S_Init+0x27c>)
 8005fde:	e001      	b.n	8005fe4 <HAL_I2S_Init+0x1d8>
 8005fe0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a25      	ldr	r2, [pc, #148]	@ (8006084 <HAL_I2S_Init+0x278>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2S_Init+0x1ea>
 8005ff2:	4b25      	ldr	r3, [pc, #148]	@ (8006088 <HAL_I2S_Init+0x27c>)
 8005ff4:	e001      	b.n	8005ffa <HAL_I2S_Init+0x1ee>
 8005ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006006:	d003      	beq.n	8006010 <HAL_I2S_Init+0x204>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e001      	b.n	800601c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006026:	4313      	orrs	r3, r2
 8006028:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006030:	4313      	orrs	r3, r2
 8006032:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800603a:	4313      	orrs	r3, r2
 800603c:	b29a      	uxth	r2, r3
 800603e:	897b      	ldrh	r3, [r7, #10]
 8006040:	4313      	orrs	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006048:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <HAL_I2S_Init+0x278>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <HAL_I2S_Init+0x24c>
 8006054:	4b0c      	ldr	r3, [pc, #48]	@ (8006088 <HAL_I2S_Init+0x27c>)
 8006056:	e001      	b.n	800605c <HAL_I2S_Init+0x250>
 8006058:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800605c:	897a      	ldrh	r2, [r7, #10]
 800605e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	08006183 	.word	0x08006183
 800607c:	cccccccd 	.word	0xcccccccd
 8006080:	08006299 	.word	0x08006299
 8006084:	40003800 	.word	0x40003800
 8006088:	40003400 	.word	0x40003400

0800608c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10e      	bne.n	800611c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800610c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ffb8 	bl	800608c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	b292      	uxth	r2, r2
 8006138:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10e      	bne.n	800617a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800616a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff93 	bl	80060a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b04      	cmp	r3, #4
 800619c:	d13a      	bne.n	8006214 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d109      	bne.n	80061bc <I2S_IRQHandler+0x3a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b40      	cmp	r3, #64	@ 0x40
 80061b4:	d102      	bne.n	80061bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ffb4 	bl	8006124 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d126      	bne.n	8006214 <I2S_IRQHandler+0x92>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d11f      	bne.n	8006214 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006206:	f043 0202 	orr.w	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ff50 	bl	80060b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d136      	bne.n	800628e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b02      	cmp	r3, #2
 8006228:	d109      	bne.n	800623e <I2S_IRQHandler+0xbc>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006234:	2b80      	cmp	r3, #128	@ 0x80
 8006236:	d102      	bne.n	800623e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ff45 	bl	80060c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d122      	bne.n	800628e <I2S_IRQHandler+0x10c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d11b      	bne.n	800628e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006264:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006280:	f043 0204 	orr.w	r2, r3, #4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff ff13 	bl	80060b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a92      	ldr	r2, [pc, #584]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80062b2:	4b92      	ldr	r3, [pc, #584]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062b4:	e001      	b.n	80062ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80062b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a8b      	ldr	r2, [pc, #556]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d101      	bne.n	80062d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80062d0:	4b8a      	ldr	r3, [pc, #552]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062d2:	e001      	b.n	80062d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80062d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e4:	d004      	beq.n	80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 8099 	bne.w	8006422 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d107      	bne.n	800630a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f925 	bl	8006554 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b01      	cmp	r3, #1
 8006312:	d107      	bne.n	8006324 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9c8 	bl	80066b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b40      	cmp	r3, #64	@ 0x40
 800632c:	d13a      	bne.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d035      	beq.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a6e      	ldr	r2, [pc, #440]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006342:	4b6e      	ldr	r3, [pc, #440]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006344:	e001      	b.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006346:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4969      	ldr	r1, [pc, #420]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006352:	428b      	cmp	r3, r1
 8006354:	d101      	bne.n	800635a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006356:	4b69      	ldr	r3, [pc, #420]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006358:	e001      	b.n	800635e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800635a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800635e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006362:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006372:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fe88 	bl	80060b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	f040 80c3 	bne.w	8006536 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80bd 	beq.w	8006536 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a49      	ldr	r2, [pc, #292]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80063d6:	4b49      	ldr	r3, [pc, #292]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063d8:	e001      	b.n	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80063da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4944      	ldr	r1, [pc, #272]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d101      	bne.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80063ea:	4b44      	ldr	r3, [pc, #272]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063ec:	e001      	b.n	80063f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80063ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80063f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80063f8:	2300      	movs	r3, #0
 80063fa:	60bb      	str	r3, [r7, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006412:	f043 0204 	orr.w	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fe4a 	bl	80060b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006420:	e089      	b.n	8006536 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d107      	bne.n	800643c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8be 	bl	80065b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b01      	cmp	r3, #1
 8006444:	d107      	bne.n	8006456 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f8fd 	bl	8006650 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645c:	2b40      	cmp	r3, #64	@ 0x40
 800645e:	d12f      	bne.n	80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d02a      	beq.n	80064c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006478:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d101      	bne.n	8006488 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006484:	4b1d      	ldr	r3, [pc, #116]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006486:	e001      	b.n	800648c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006488:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4919      	ldr	r1, [pc, #100]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006494:	428b      	cmp	r3, r1
 8006496:	d101      	bne.n	800649c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006498:	4b18      	ldr	r3, [pc, #96]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800649a:	e001      	b.n	80064a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800649c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f043 0202 	orr.w	r2, r3, #2
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fdfa 	bl	80060b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d136      	bne.n	8006538 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d031      	beq.n	8006538 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a07      	ldr	r2, [pc, #28]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80064de:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064e0:	e001      	b.n	80064e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80064e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4902      	ldr	r1, [pc, #8]	@ (80064f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064ee:	428b      	cmp	r3, r1
 80064f0:	d106      	bne.n	8006500 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80064f2:	4b02      	ldr	r3, [pc, #8]	@ (80064fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064f4:	e006      	b.n	8006504 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80064f6:	bf00      	nop
 80064f8:	40003800 	.word	0x40003800
 80064fc:	40003400 	.word	0x40003400
 8006500:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006504:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006508:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006518:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fdc0 	bl	80060b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	e000      	b.n	8006538 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006536:	bf00      	nop
}
 8006538:	bf00      	nop
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	1c99      	adds	r1, r3, #2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6251      	str	r1, [r2, #36]	@ 0x24
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d113      	bne.n	80065ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006594:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ffc9 	bl	8006540 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c99      	adds	r1, r3, #2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80065ca:	8819      	ldrh	r1, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <I2SEx_TxISR_I2SExt+0x90>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <I2SEx_TxISR_I2SExt+0x22>
 80065d6:	4b1d      	ldr	r3, [pc, #116]	@ (800664c <I2SEx_TxISR_I2SExt+0x94>)
 80065d8:	e001      	b.n	80065de <I2SEx_TxISR_I2SExt+0x26>
 80065da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065de:	460a      	mov	r2, r1
 80065e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d121      	bne.n	800663e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a12      	ldr	r2, [pc, #72]	@ (8006648 <I2SEx_TxISR_I2SExt+0x90>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d101      	bne.n	8006608 <I2SEx_TxISR_I2SExt+0x50>
 8006604:	4b11      	ldr	r3, [pc, #68]	@ (800664c <I2SEx_TxISR_I2SExt+0x94>)
 8006606:	e001      	b.n	800660c <I2SEx_TxISR_I2SExt+0x54>
 8006608:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	490d      	ldr	r1, [pc, #52]	@ (8006648 <I2SEx_TxISR_I2SExt+0x90>)
 8006614:	428b      	cmp	r3, r1
 8006616:	d101      	bne.n	800661c <I2SEx_TxISR_I2SExt+0x64>
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <I2SEx_TxISR_I2SExt+0x94>)
 800661a:	e001      	b.n	8006620 <I2SEx_TxISR_I2SExt+0x68>
 800661c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006620:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006624:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff81 	bl	8006540 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40003800 	.word	0x40003800
 800664c:	40003400 	.word	0x40003400

08006650 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68d8      	ldr	r0, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	1c99      	adds	r1, r3, #2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006668:	b282      	uxth	r2, r0
 800666a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d113      	bne.n	80066ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006692:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff ff4a 	bl	8006540 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <I2SEx_RxISR_I2SExt+0x90>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d101      	bne.n	80066ca <I2SEx_RxISR_I2SExt+0x16>
 80066c6:	4b20      	ldr	r3, [pc, #128]	@ (8006748 <I2SEx_RxISR_I2SExt+0x94>)
 80066c8:	e001      	b.n	80066ce <I2SEx_RxISR_I2SExt+0x1a>
 80066ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066ce:	68d8      	ldr	r0, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d4:	1c99      	adds	r1, r3, #2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80066da:	b282      	uxth	r2, r0
 80066dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d121      	bne.n	800673a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a12      	ldr	r2, [pc, #72]	@ (8006744 <I2SEx_RxISR_I2SExt+0x90>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d101      	bne.n	8006704 <I2SEx_RxISR_I2SExt+0x50>
 8006700:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <I2SEx_RxISR_I2SExt+0x94>)
 8006702:	e001      	b.n	8006708 <I2SEx_RxISR_I2SExt+0x54>
 8006704:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	490d      	ldr	r1, [pc, #52]	@ (8006744 <I2SEx_RxISR_I2SExt+0x90>)
 8006710:	428b      	cmp	r3, r1
 8006712:	d101      	bne.n	8006718 <I2SEx_RxISR_I2SExt+0x64>
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <I2SEx_RxISR_I2SExt+0x94>)
 8006716:	e001      	b.n	800671c <I2SEx_RxISR_I2SExt+0x68>
 8006718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800671c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006720:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ff03 	bl	8006540 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40003800 	.word	0x40003800
 8006748:	40003400 	.word	0x40003400

0800674c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e267      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d075      	beq.n	8006856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800676a:	4b88      	ldr	r3, [pc, #544]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b04      	cmp	r3, #4
 8006774:	d00c      	beq.n	8006790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006776:	4b85      	ldr	r3, [pc, #532]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800677e:	2b08      	cmp	r3, #8
 8006780:	d112      	bne.n	80067a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006782:	4b82      	ldr	r3, [pc, #520]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800678a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800678e:	d10b      	bne.n	80067a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006790:	4b7e      	ldr	r3, [pc, #504]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d05b      	beq.n	8006854 <HAL_RCC_OscConfig+0x108>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d157      	bne.n	8006854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e242      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b0:	d106      	bne.n	80067c0 <HAL_RCC_OscConfig+0x74>
 80067b2:	4b76      	ldr	r3, [pc, #472]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a75      	ldr	r2, [pc, #468]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e01d      	b.n	80067fc <HAL_RCC_OscConfig+0xb0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCC_OscConfig+0x98>
 80067ca:	4b70      	ldr	r3, [pc, #448]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6f      	ldr	r2, [pc, #444]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	4b6d      	ldr	r3, [pc, #436]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a6c      	ldr	r2, [pc, #432]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e00b      	b.n	80067fc <HAL_RCC_OscConfig+0xb0>
 80067e4:	4b69      	ldr	r3, [pc, #420]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a68      	ldr	r2, [pc, #416]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	4b66      	ldr	r3, [pc, #408]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a65      	ldr	r2, [pc, #404]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80067f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d013      	beq.n	800682c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006804:	f7fc f9a8 	bl	8002b58 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800680c:	f7fc f9a4 	bl	8002b58 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	@ 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e207      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681e:	4b5b      	ldr	r3, [pc, #364]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0xc0>
 800682a:	e014      	b.n	8006856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fc f994 	bl	8002b58 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006834:	f7fc f990 	bl	8002b58 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b64      	cmp	r3, #100	@ 0x64
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e1f3      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006846:	4b51      	ldr	r3, [pc, #324]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0xe8>
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d063      	beq.n	800692a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006862:	4b4a      	ldr	r3, [pc, #296]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800686e:	4b47      	ldr	r3, [pc, #284]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006876:	2b08      	cmp	r3, #8
 8006878:	d11c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800687a:	4b44      	ldr	r3, [pc, #272]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d116      	bne.n	80068b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006886:	4b41      	ldr	r3, [pc, #260]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_RCC_OscConfig+0x152>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d001      	beq.n	800689e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e1c7      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689e:	4b3b      	ldr	r3, [pc, #236]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4937      	ldr	r1, [pc, #220]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068b2:	e03a      	b.n	800692a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d020      	beq.n	80068fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068bc:	4b34      	ldr	r3, [pc, #208]	@ (8006990 <HAL_RCC_OscConfig+0x244>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c2:	f7fc f949 	bl	8002b58 <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ca:	f7fc f945 	bl	8002b58 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e1a8      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068dc:	4b2b      	ldr	r3, [pc, #172]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e8:	4b28      	ldr	r3, [pc, #160]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4925      	ldr	r1, [pc, #148]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	600b      	str	r3, [r1, #0]
 80068fc:	e015      	b.n	800692a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068fe:	4b24      	ldr	r3, [pc, #144]	@ (8006990 <HAL_RCC_OscConfig+0x244>)
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fc f928 	bl	8002b58 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800690c:	f7fc f924 	bl	8002b58 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e187      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800691e:	4b1b      	ldr	r3, [pc, #108]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d036      	beq.n	80069a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <HAL_RCC_OscConfig+0x248>)
 8006940:	2201      	movs	r2, #1
 8006942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fc f908 	bl	8002b58 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694c:	f7fc f904 	bl	8002b58 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e167      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800695e:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <HAL_RCC_OscConfig+0x240>)
 8006960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x200>
 800696a:	e01b      	b.n	80069a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800696c:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <HAL_RCC_OscConfig+0x248>)
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006972:	f7fc f8f1 	bl	8002b58 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006978:	e00e      	b.n	8006998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800697a:	f7fc f8ed 	bl	8002b58 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d907      	bls.n	8006998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e150      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
 800698c:	40023800 	.word	0x40023800
 8006990:	42470000 	.word	0x42470000
 8006994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006998:	4b88      	ldr	r3, [pc, #544]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 800699a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1ea      	bne.n	800697a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8097 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b6:	4b81      	ldr	r3, [pc, #516]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	4b7d      	ldr	r3, [pc, #500]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	4a7c      	ldr	r2, [pc, #496]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069d2:	4b7a      	ldr	r3, [pc, #488]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e2:	4b77      	ldr	r3, [pc, #476]	@ (8006bc0 <HAL_RCC_OscConfig+0x474>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d118      	bne.n	8006a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ee:	4b74      	ldr	r3, [pc, #464]	@ (8006bc0 <HAL_RCC_OscConfig+0x474>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a73      	ldr	r2, [pc, #460]	@ (8006bc0 <HAL_RCC_OscConfig+0x474>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fa:	f7fc f8ad 	bl	8002b58 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a02:	f7fc f8a9 	bl	8002b58 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e10c      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a14:	4b6a      	ldr	r3, [pc, #424]	@ (8006bc0 <HAL_RCC_OscConfig+0x474>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <HAL_RCC_OscConfig+0x2ea>
 8006a28:	4b64      	ldr	r3, [pc, #400]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2c:	4a63      	ldr	r2, [pc, #396]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a34:	e01c      	b.n	8006a70 <HAL_RCC_OscConfig+0x324>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x30c>
 8006a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a42:	4a5e      	ldr	r2, [pc, #376]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a44:	f043 0304 	orr.w	r3, r3, #4
 8006a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a56:	e00b      	b.n	8006a70 <HAL_RCC_OscConfig+0x324>
 8006a58:	4b58      	ldr	r3, [pc, #352]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5c:	4a57      	ldr	r2, [pc, #348]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a64:	4b55      	ldr	r3, [pc, #340]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a68:	4a54      	ldr	r2, [pc, #336]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a6a:	f023 0304 	bic.w	r3, r3, #4
 8006a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a78:	f7fc f86e 	bl	8002b58 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a7e:	e00a      	b.n	8006a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a80:	f7fc f86a 	bl	8002b58 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e0cb      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a96:	4b49      	ldr	r3, [pc, #292]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0ee      	beq.n	8006a80 <HAL_RCC_OscConfig+0x334>
 8006aa2:	e014      	b.n	8006ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aa4:	f7fc f858 	bl	8002b58 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aaa:	e00a      	b.n	8006ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aac:	f7fc f854 	bl	8002b58 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e0b5      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1ee      	bne.n	8006aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d105      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad4:	4b39      	ldr	r3, [pc, #228]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad8:	4a38      	ldr	r2, [pc, #224]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80a1 	beq.w	8006c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aea:	4b34      	ldr	r3, [pc, #208]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d05c      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d141      	bne.n	8006b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b31      	ldr	r3, [pc, #196]	@ (8006bc4 <HAL_RCC_OscConfig+0x478>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7fc f828 	bl	8002b58 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fc f824 	bl	8002b58 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e087      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1e:	4b27      	ldr	r3, [pc, #156]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69da      	ldr	r2, [r3, #28]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	019b      	lsls	r3, r3, #6
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	3b01      	subs	r3, #1
 8006b44:	041b      	lsls	r3, r3, #16
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	061b      	lsls	r3, r3, #24
 8006b4e:	491b      	ldr	r1, [pc, #108]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b54:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc4 <HAL_RCC_OscConfig+0x478>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5a:	f7fb fffd 	bl	8002b58 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b62:	f7fb fff9 	bl	8002b58 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e05c      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b74:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCC_OscConfig+0x416>
 8006b80:	e054      	b.n	8006c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b82:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <HAL_RCC_OscConfig+0x478>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fb ffe6 	bl	8002b58 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b90:	f7fb ffe2 	bl	8002b58 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e045      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ba2:	4b06      	ldr	r3, [pc, #24]	@ (8006bbc <HAL_RCC_OscConfig+0x470>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0x444>
 8006bae:	e03d      	b.n	8006c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e038      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	40007000 	.word	0x40007000
 8006bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <HAL_RCC_OscConfig+0x4ec>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d028      	beq.n	8006c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d121      	bne.n	8006c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d11a      	bne.n	8006c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d111      	bne.n	8006c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	3b01      	subs	r3, #1
 8006c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d107      	bne.n	8006c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40023800 	.word	0x40023800

08006c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0cc      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c50:	4b68      	ldr	r3, [pc, #416]	@ (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d90c      	bls.n	8006c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5e:	4b65      	ldr	r3, [pc, #404]	@ (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c66:	4b63      	ldr	r3, [pc, #396]	@ (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d001      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0b8      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d020      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c90:	4b59      	ldr	r3, [pc, #356]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4a58      	ldr	r2, [pc, #352]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ca8:	4b53      	ldr	r3, [pc, #332]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4a52      	ldr	r2, [pc, #328]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cb4:	4b50      	ldr	r3, [pc, #320]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	494d      	ldr	r1, [pc, #308]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d044      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d107      	bne.n	8006cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cda:	4b47      	ldr	r3, [pc, #284]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d119      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e07f      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e06f      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e067      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d1a:	4b37      	ldr	r3, [pc, #220]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f023 0203 	bic.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4934      	ldr	r1, [pc, #208]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d2c:	f7fb ff14 	bl	8002b58 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	e00a      	b.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d34:	f7fb ff10 	bl	8002b58 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e04f      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 020c 	and.w	r2, r3, #12
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d1eb      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d5c:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d20c      	bcs.n	8006d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6a:	4b22      	ldr	r3, [pc, #136]	@ (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d72:	4b20      	ldr	r3, [pc, #128]	@ (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e032      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d90:	4b19      	ldr	r3, [pc, #100]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4916      	ldr	r1, [pc, #88]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dae:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	490e      	ldr	r1, [pc, #56]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dc2:	f000 f821 	bl	8006e08 <HAL_RCC_GetSysClockFreq>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	091b      	lsrs	r3, r3, #4
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	490a      	ldr	r1, [pc, #40]	@ (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006dd4:	5ccb      	ldrb	r3, [r1, r3]
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	4a09      	ldr	r2, [pc, #36]	@ (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dde:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <HAL_RCC_ClockConfig+0x1c8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fb fcc8 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40023c00 	.word	0x40023c00
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	08013630 	.word	0x08013630
 8006e00:	20000010 	.word	0x20000010
 8006e04:	20000014 	.word	0x20000014

08006e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e0c:	b094      	sub	sp, #80	@ 0x50
 8006e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e14:	2300      	movs	r3, #0
 8006e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e18:	2300      	movs	r3, #0
 8006e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e20:	4b79      	ldr	r3, [pc, #484]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 030c 	and.w	r3, r3, #12
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d00d      	beq.n	8006e48 <HAL_RCC_GetSysClockFreq+0x40>
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	f200 80e1 	bhi.w	8006ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_RCC_GetSysClockFreq+0x34>
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d003      	beq.n	8006e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e3a:	e0db      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e3c:	4b73      	ldr	r3, [pc, #460]	@ (800700c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006e40:	e0db      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e42:	4b73      	ldr	r3, [pc, #460]	@ (8007010 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e46:	e0d8      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e48:	4b6f      	ldr	r3, [pc, #444]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e50:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e52:	4b6d      	ldr	r3, [pc, #436]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d063      	beq.n	8006f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	099b      	lsrs	r3, r3, #6
 8006e64:	2200      	movs	r2, #0
 8006e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e72:	2300      	movs	r3, #0
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	f04f 0000 	mov.w	r0, #0
 8006e82:	f04f 0100 	mov.w	r1, #0
 8006e86:	0159      	lsls	r1, r3, #5
 8006e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e8c:	0150      	lsls	r0, r2, #5
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4621      	mov	r1, r4
 8006e94:	1a51      	subs	r1, r2, r1
 8006e96:	6139      	str	r1, [r7, #16]
 8006e98:	4629      	mov	r1, r5
 8006e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eac:	4659      	mov	r1, fp
 8006eae:	018b      	lsls	r3, r1, #6
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	018a      	lsls	r2, r1, #6
 8006eba:	4651      	mov	r1, sl
 8006ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eda:	4690      	mov	r8, r2
 8006edc:	4699      	mov	r9, r3
 8006ede:	4623      	mov	r3, r4
 8006ee0:	eb18 0303 	adds.w	r3, r8, r3
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	eb49 0303 	adc.w	r3, r9, r3
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006efa:	4629      	mov	r1, r5
 8006efc:	024b      	lsls	r3, r1, #9
 8006efe:	4621      	mov	r1, r4
 8006f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f04:	4621      	mov	r1, r4
 8006f06:	024a      	lsls	r2, r1, #9
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f0e:	2200      	movs	r2, #0
 8006f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f18:	f7f9 fe6e 	bl	8000bf8 <__aeabi_uldivmod>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4613      	mov	r3, r2
 8006f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f24:	e058      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f26:	4b38      	ldr	r3, [pc, #224]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	099b      	lsrs	r3, r3, #6
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	4611      	mov	r1, r2
 8006f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f36:	623b      	str	r3, [r7, #32]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f40:	4642      	mov	r2, r8
 8006f42:	464b      	mov	r3, r9
 8006f44:	f04f 0000 	mov.w	r0, #0
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	0159      	lsls	r1, r3, #5
 8006f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f52:	0150      	lsls	r0, r2, #5
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4641      	mov	r1, r8
 8006f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f5e:	4649      	mov	r1, r9
 8006f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f78:	ebb2 040a 	subs.w	r4, r2, sl
 8006f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	00eb      	lsls	r3, r5, #3
 8006f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f8e:	00e2      	lsls	r2, r4, #3
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	4643      	mov	r3, r8
 8006f96:	18e3      	adds	r3, r4, r3
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	eb45 0303 	adc.w	r3, r5, r3
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fae:	4629      	mov	r1, r5
 8006fb0:	028b      	lsls	r3, r1, #10
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fb8:	4621      	mov	r1, r4
 8006fba:	028a      	lsls	r2, r1, #10
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	61fa      	str	r2, [r7, #28]
 8006fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fcc:	f7f9 fe14 	bl	8000bf8 <__aeabi_uldivmod>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	0c1b      	lsrs	r3, r3, #16
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ff2:	e002      	b.n	8006ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <HAL_RCC_GetSysClockFreq+0x204>)
 8006ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3750      	adds	r7, #80	@ 0x50
 8007000:	46bd      	mov	sp, r7
 8007002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007006:	bf00      	nop
 8007008:	40023800 	.word	0x40023800
 800700c:	00f42400 	.word	0x00f42400
 8007010:	007a1200 	.word	0x007a1200

08007014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007018:	4b03      	ldr	r3, [pc, #12]	@ (8007028 <HAL_RCC_GetHCLKFreq+0x14>)
 800701a:	681b      	ldr	r3, [r3, #0]
}
 800701c:	4618      	mov	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000010 	.word	0x20000010

0800702c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007030:	f7ff fff0 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 8007034:	4602      	mov	r2, r0
 8007036:	4b05      	ldr	r3, [pc, #20]	@ (800704c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	0a9b      	lsrs	r3, r3, #10
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	4903      	ldr	r1, [pc, #12]	@ (8007050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007042:	5ccb      	ldrb	r3, [r1, r3]
 8007044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007048:	4618      	mov	r0, r3
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40023800 	.word	0x40023800
 8007050:	08013640 	.word	0x08013640

08007054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007058:	f7ff ffdc 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 800705c:	4602      	mov	r2, r0
 800705e:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	0b5b      	lsrs	r3, r3, #13
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	4903      	ldr	r1, [pc, #12]	@ (8007078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800706a:	5ccb      	ldrb	r3, [r1, r3]
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40023800 	.word	0x40023800
 8007078:	08013640 	.word	0x08013640

0800707c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220f      	movs	r2, #15
 800708a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800708c:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <HAL_RCC_GetClockConfig+0x5c>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0203 	and.w	r2, r3, #3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007098:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <HAL_RCC_GetClockConfig+0x5c>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070a4:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <HAL_RCC_GetClockConfig+0x5c>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070b0:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <HAL_RCC_GetClockConfig+0x5c>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	08db      	lsrs	r3, r3, #3
 80070b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070be:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <HAL_RCC_GetClockConfig+0x60>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0207 	and.w	r2, r3, #7
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	601a      	str	r2, [r3, #0]
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40023800 	.word	0x40023800
 80070dc:	40023c00 	.word	0x40023c00

080070e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d105      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007104:	2b00      	cmp	r3, #0
 8007106:	d035      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007108:	4b62      	ldr	r3, [pc, #392]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800710e:	f7fb fd23 	bl	8002b58 <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007114:	e008      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007116:	f7fb fd1f 	bl	8002b58 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e0b0      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007128:	4b5b      	ldr	r3, [pc, #364]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f0      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	019a      	lsls	r2, r3, #6
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	071b      	lsls	r3, r3, #28
 8007140:	4955      	ldr	r1, [pc, #340]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007148:	4b52      	ldr	r3, [pc, #328]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800714e:	f7fb fd03 	bl	8002b58 <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007154:	e008      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007156:	f7fb fcff 	bl	8002b58 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d901      	bls.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e090      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007168:	4b4b      	ldr	r3, [pc, #300]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f0      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8083 	beq.w	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	4b44      	ldr	r3, [pc, #272]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	4a43      	ldr	r2, [pc, #268]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007190:	6413      	str	r3, [r2, #64]	@ 0x40
 8007192:	4b41      	ldr	r3, [pc, #260]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800719e:	4b3f      	ldr	r3, [pc, #252]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a3e      	ldr	r2, [pc, #248]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071aa:	f7fb fcd5 	bl	8002b58 <HAL_GetTick>
 80071ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071b0:	e008      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071b2:	f7fb fcd1 	bl	8002b58 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e062      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071c4:	4b35      	ldr	r3, [pc, #212]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071d0:	4b31      	ldr	r3, [pc, #196]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02f      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d028      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071f8:	4b29      	ldr	r3, [pc, #164]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071fe:	4b28      	ldr	r3, [pc, #160]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007204:	4a24      	ldr	r2, [pc, #144]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800720a:	4b23      	ldr	r3, [pc, #140]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d114      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007216:	f7fb fc9f 	bl	8002b58 <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800721c:	e00a      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800721e:	f7fb fc9b 	bl	8002b58 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e02a      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007234:	4b18      	ldr	r3, [pc, #96]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0ee      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800724c:	d10d      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800724e:	4b12      	ldr	r3, [pc, #72]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800725e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007262:	490d      	ldr	r1, [pc, #52]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007264:	4313      	orrs	r3, r2
 8007266:	608b      	str	r3, [r1, #8]
 8007268:	e005      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	4a0a      	ldr	r2, [pc, #40]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007270:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007274:	6093      	str	r3, [r2, #8]
 8007276:	4b08      	ldr	r3, [pc, #32]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007278:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007282:	4905      	ldr	r1, [pc, #20]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007284:	4313      	orrs	r3, r2
 8007286:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	42470068 	.word	0x42470068
 8007298:	40023800 	.word	0x40023800
 800729c:	40007000 	.word	0x40007000
 80072a0:	42470e40 	.word	0x42470e40

080072a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d13f      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072c2:	4b24      	ldr	r3, [pc, #144]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d006      	beq.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072d8:	d12f      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80072da:	4b1f      	ldr	r3, [pc, #124]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072dc:	617b      	str	r3, [r7, #20]
          break;
 80072de:	e02f      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ec:	d108      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072ee:	4b19      	ldr	r3, [pc, #100]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072f6:	4a19      	ldr	r2, [pc, #100]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80072f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	e007      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007300:	4b14      	ldr	r3, [pc, #80]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007308:	4a15      	ldr	r2, [pc, #84]	@ (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800730a:	fbb2 f3f3 	udiv	r3, r2, r3
 800730e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007324:	4b0b      	ldr	r3, [pc, #44]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	617b      	str	r3, [r7, #20]
          break;
 8007338:	e002      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
          break;
 800733e:	bf00      	nop
        }
      }
      break;
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8007342:	bf00      	nop
    }
  }
  return frequency;
 8007344:	697b      	ldr	r3, [r7, #20]
}
 8007346:	4618      	mov	r0, r3
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40023800 	.word	0x40023800
 8007358:	00bb8000 	.word	0x00bb8000
 800735c:	007a1200 	.word	0x007a1200
 8007360:	00f42400 	.word	0x00f42400

08007364 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e073      	b.n	8007462 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7f5b      	ldrb	r3, [r3, #29]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fb f8a6 	bl	80024dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d055      	beq.n	8007450 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	22ca      	movs	r2, #202	@ 0xca
 80073aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2253      	movs	r2, #83	@ 0x53
 80073b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f92b 	bl	8007610 <RTC_EnterInitMode>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d12c      	bne.n	800741e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80073d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6899      	ldr	r1, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	68d2      	ldr	r2, [r2, #12]
 80073fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6919      	ldr	r1, [r3, #16]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	041a      	lsls	r2, r3, #16
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f932 	bl	800767e <RTC_ExitInitMode>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d110      	bne.n	8007446 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007432:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	22ff      	movs	r2, #255	@ 0xff
 800744c:	625a      	str	r2, [r3, #36]	@ 0x24
 800744e:	e001      	b.n	8007454 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800749c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80074a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	0d9b      	lsrs	r3, r3, #22
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d11a      	bne.n	800751c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f8ec 	bl	80076c8 <RTC_Bcd2ToByte>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f8e3 	bl	80076c8 <RTC_Bcd2ToByte>
 8007502:	4603      	mov	r3, r0
 8007504:	461a      	mov	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	789b      	ldrb	r3, [r3, #2]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f8da 	bl	80076c8 <RTC_Bcd2ToByte>
 8007514:	4603      	mov	r3, r0
 8007516:	461a      	mov	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007540:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007544:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	b2da      	uxtb	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007568:	b2da      	uxtb	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	0b5b      	lsrs	r3, r3, #13
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	b2da      	uxtb	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11a      	bne.n	80075ba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	78db      	ldrb	r3, [r3, #3]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f89d 	bl	80076c8 <RTC_Bcd2ToByte>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f894 	bl	80076c8 <RTC_Bcd2ToByte>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	789b      	ldrb	r3, [r3, #2]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f88b 	bl	80076c8 <RTC_Bcd2ToByte>
 80075b2:	4603      	mov	r3, r0
 80075b4:	461a      	mov	r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a0d      	ldr	r2, [pc, #52]	@ (800760c <HAL_RTC_WaitForSynchro+0x48>)
 80075d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075d8:	f7fb fabe 	bl	8002b58 <HAL_GetTick>
 80075dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075de:	e009      	b.n	80075f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075e0:	f7fb faba 	bl	8002b58 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075ee:	d901      	bls.n	80075f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e007      	b.n	8007604 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0ee      	beq.n	80075e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	00017f5f 	.word	0x00017f5f

08007610 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762a:	2b00      	cmp	r3, #0
 800762c:	d122      	bne.n	8007674 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800763c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800763e:	f7fb fa8b 	bl	8002b58 <HAL_GetTick>
 8007642:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007644:	e00c      	b.n	8007660 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007646:	f7fb fa87 	bl	8002b58 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007654:	d904      	bls.n	8007660 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2204      	movs	r2, #4
 800765a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <RTC_EnterInitMode+0x64>
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d1e8      	bne.n	8007646 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007698:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ff8b 	bl	80075c4 <HAL_RTC_WaitForSynchro>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2204      	movs	r2, #4
 80076b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	b2db      	uxtb	r3, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e07b      	b.n	800780e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d108      	bne.n	8007730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007726:	d009      	beq.n	800773c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	61da      	str	r2, [r3, #28]
 800772e:	e005      	b.n	800773c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fa feea 	bl	8002530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077ac:	431a      	orrs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c0:	ea42 0103 	orr.w	r1, r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	0c1b      	lsrs	r3, r3, #16
 80077da:	f003 0104 	and.w	r1, r3, #4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	f003 0210 	and.w	r2, r3, #16
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b088      	sub	sp, #32
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_SPI_Transmit+0x22>
 8007834:	2302      	movs	r3, #2
 8007836:	e12d      	b.n	8007a94 <HAL_SPI_Transmit+0x27e>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007840:	f7fb f98a 	bl	8002b58 <HAL_GetTick>
 8007844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d002      	beq.n	800785c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007856:	2302      	movs	r3, #2
 8007858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800785a:	e116      	b.n	8007a8a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_SPI_Transmit+0x52>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800786c:	e10d      	b.n	8007a8a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2203      	movs	r2, #3
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b4:	d10f      	bne.n	80078d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e0:	2b40      	cmp	r3, #64	@ 0x40
 80078e2:	d007      	beq.n	80078f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078fc:	d14f      	bne.n	800799e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_SPI_Transmit+0xf6>
 8007906:	8afb      	ldrh	r3, [r7, #22]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d142      	bne.n	8007992 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007910:	881a      	ldrh	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791c:	1c9a      	adds	r2, r3, #2
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007930:	e02f      	b.n	8007992 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b02      	cmp	r3, #2
 800793e:	d112      	bne.n	8007966 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007944:	881a      	ldrh	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007950:	1c9a      	adds	r2, r3, #2
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007964:	e015      	b.n	8007992 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007966:	f7fb f8f7 	bl	8002b58 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d803      	bhi.n	800797e <HAL_SPI_Transmit+0x168>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800797c:	d102      	bne.n	8007984 <HAL_SPI_Transmit+0x16e>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007990:	e07b      	b.n	8007a8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ca      	bne.n	8007932 <HAL_SPI_Transmit+0x11c>
 800799c:	e050      	b.n	8007a40 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_Transmit+0x196>
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d144      	bne.n	8007a36 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079d2:	e030      	b.n	8007a36 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d113      	bne.n	8007a0a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	330c      	adds	r3, #12
 80079ec:	7812      	ldrb	r2, [r2, #0]
 80079ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a08:	e015      	b.n	8007a36 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a0a:	f7fb f8a5 	bl	8002b58 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d803      	bhi.n	8007a22 <HAL_SPI_Transmit+0x20c>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a20:	d102      	bne.n	8007a28 <HAL_SPI_Transmit+0x212>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d106      	bne.n	8007a36 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007a34:	e029      	b.n	8007a8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1c9      	bne.n	80079d4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fbdf 	bl	8008208 <SPI_EndRxTxTransaction>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	77fb      	strb	r3, [r7, #31]
 8007a80:	e003      	b.n	8007a8a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
 8007abe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ac0:	e0fb      	b.n	8007cba <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aca:	d112      	bne.n	8007af2 <HAL_SPI_Receive+0x56>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10e      	bne.n	8007af2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007adc:	88fa      	ldrh	r2, [r7, #6]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f8ef 	bl	8007ccc <HAL_SPI_TransmitReceive>
 8007aee:	4603      	mov	r3, r0
 8007af0:	e0e8      	b.n	8007cc4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_SPI_Receive+0x64>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e0e1      	b.n	8007cc4 <HAL_SPI_Receive+0x228>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b08:	f7fb f826 	bl	8002b58 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_SPI_Receive+0x7e>
 8007b14:	88fb      	ldrh	r3, [r7, #6]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d102      	bne.n	8007b20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b1e:	e0cc      	b.n	8007cba <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2204      	movs	r2, #4
 8007b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	88fa      	ldrh	r2, [r7, #6]
 8007b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b66:	d10f      	bne.n	8007b88 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b92:	2b40      	cmp	r3, #64	@ 0x40
 8007b94:	d007      	beq.n	8007ba6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d16a      	bne.n	8007c84 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bae:	e032      	b.n	8007c16 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d115      	bne.n	8007bea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f103 020c 	add.w	r2, r3, #12
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007be8:	e015      	b.n	8007c16 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bea:	f7fa ffb5 	bl	8002b58 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d803      	bhi.n	8007c02 <HAL_SPI_Receive+0x166>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c00:	d102      	bne.n	8007c08 <HAL_SPI_Receive+0x16c>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007c14:	e051      	b.n	8007cba <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1c7      	bne.n	8007bb0 <HAL_SPI_Receive+0x114>
 8007c20:	e035      	b.n	8007c8e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d113      	bne.n	8007c58 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3a:	b292      	uxth	r2, r2
 8007c3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c42:	1c9a      	adds	r2, r3, #2
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c56:	e015      	b.n	8007c84 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c58:	f7fa ff7e 	bl	8002b58 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d803      	bhi.n	8007c70 <HAL_SPI_Receive+0x1d4>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6e:	d102      	bne.n	8007c76 <HAL_SPI_Receive+0x1da>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007c82:	e01a      	b.n	8007cba <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1c9      	bne.n	8007c22 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fa52 	bl	800813c <SPI_EndRxTransaction>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
 8007cb0:	e003      	b.n	8007cba <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	@ 0x30
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_SPI_TransmitReceive+0x26>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e198      	b.n	8008024 <HAL_SPI_TransmitReceive+0x358>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cfa:	f7fa ff2d 	bl	8002b58 <HAL_GetTick>
 8007cfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d00f      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x70>
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d22:	d107      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x68>
 8007d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d003      	beq.n	8007d3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007d3a:	e16d      	b.n	8008018 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <HAL_SPI_TransmitReceive+0x82>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <HAL_SPI_TransmitReceive+0x82>
 8007d48:	887b      	ldrh	r3, [r7, #2]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d103      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007d54:	e160      	b.n	8008018 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d003      	beq.n	8007d6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2205      	movs	r2, #5
 8007d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	887a      	ldrh	r2, [r7, #2]
 8007d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	887a      	ldrh	r2, [r7, #2]
 8007d80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	887a      	ldrh	r2, [r7, #2]
 8007d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	887a      	ldrh	r2, [r7, #2]
 8007d92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d007      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dc6:	d17c      	bne.n	8007ec2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <HAL_SPI_TransmitReceive+0x10a>
 8007dd0:	8b7b      	ldrh	r3, [r7, #26]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d16a      	bne.n	8007eac <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dda:	881a      	ldrh	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	1c9a      	adds	r2, r3, #2
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dfa:	e057      	b.n	8007eac <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d11b      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0x176>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <HAL_SPI_TransmitReceive+0x176>
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d113      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1e:	881a      	ldrh	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2a:	1c9a      	adds	r2, r3, #2
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d119      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x1b8>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d014      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e64:	b292      	uxth	r2, r2
 8007e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6c:	1c9a      	adds	r2, r3, #2
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e80:	2301      	movs	r3, #1
 8007e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e84:	f7fa fe68 	bl	8002b58 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d80b      	bhi.n	8007eac <HAL_SPI_TransmitReceive+0x1e0>
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e9a:	d007      	beq.n	8007eac <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007eaa:	e0b5      	b.n	8008018 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1a2      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x130>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d19d      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x130>
 8007ec0:	e080      	b.n	8007fc4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x204>
 8007eca:	8b7b      	ldrh	r3, [r7, #26]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d16f      	bne.n	8007fb0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	7812      	ldrb	r2, [r2, #0]
 8007edc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef6:	e05b      	b.n	8007fb0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d11c      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x274>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <HAL_SPI_TransmitReceive+0x274>
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d114      	bne.n	8007f40 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	330c      	adds	r3, #12
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d119      	bne.n	8007f82 <HAL_SPI_TransmitReceive+0x2b6>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d014      	beq.n	8007f82 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f82:	f7fa fde9 	bl	8002b58 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d803      	bhi.n	8007f9a <HAL_SPI_TransmitReceive+0x2ce>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f98:	d102      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x2d4>
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d107      	bne.n	8007fb0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007fae:	e033      	b.n	8008018 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d19e      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x22c>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d199      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f91d 	bl	8008208 <SPI_EndRxTxTransaction>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007fe0:	e01a      	b.n	8008018 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fea:	2300      	movs	r3, #0
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e003      	b.n	8008018 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008020:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008024:	4618      	mov	r0, r3
 8008026:	3730      	adds	r7, #48	@ 0x30
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	603b      	str	r3, [r7, #0]
 8008038:	4613      	mov	r3, r2
 800803a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800803c:	f7fa fd8c 	bl	8002b58 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	4413      	add	r3, r2
 800804a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800804c:	f7fa fd84 	bl	8002b58 <HAL_GetTick>
 8008050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008052:	4b39      	ldr	r3, [pc, #228]	@ (8008138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	015b      	lsls	r3, r3, #5
 8008058:	0d1b      	lsrs	r3, r3, #20
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	fb02 f303 	mul.w	r3, r2, r3
 8008060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008062:	e054      	b.n	800810e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800806a:	d050      	beq.n	800810e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800806c:	f7fa fd74 	bl	8002b58 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	429a      	cmp	r2, r3
 800807a:	d902      	bls.n	8008082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d13d      	bne.n	80080fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800809a:	d111      	bne.n	80080c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a4:	d004      	beq.n	80080b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ae:	d107      	bne.n	80080c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c8:	d10f      	bne.n	80080ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e017      	b.n	800812e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	3b01      	subs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4013      	ands	r3, r2
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	bf0c      	ite	eq
 800811e:	2301      	moveq	r3, #1
 8008120:	2300      	movne	r3, #0
 8008122:	b2db      	uxtb	r3, r3
 8008124:	461a      	mov	r2, r3
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	429a      	cmp	r2, r3
 800812a:	d19b      	bne.n	8008064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000010 	.word	0x20000010

0800813c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af02      	add	r7, sp, #8
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008150:	d111      	bne.n	8008176 <SPI_EndRxTransaction+0x3a>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800815a:	d004      	beq.n	8008166 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008164:	d107      	bne.n	8008176 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008174:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800817e:	d12a      	bne.n	80081d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008188:	d012      	beq.n	80081b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2200      	movs	r2, #0
 8008192:	2180      	movs	r1, #128	@ 0x80
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff ff49 	bl	800802c <SPI_WaitFlagStateUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d02d      	beq.n	80081fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e026      	b.n	80081fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	2101      	movs	r1, #1
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff ff36 	bl	800802c <SPI_WaitFlagStateUntilTimeout>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d01a      	beq.n	80081fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ca:	f043 0220 	orr.w	r2, r3, #32
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e013      	b.n	80081fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	2101      	movs	r1, #1
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff ff23 	bl	800802c <SPI_WaitFlagStateUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d007      	beq.n	80081fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f0:	f043 0220 	orr.w	r2, r3, #32
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e000      	b.n	80081fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af02      	add	r7, sp, #8
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2201      	movs	r2, #1
 800821c:	2102      	movs	r1, #2
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff ff04 	bl	800802c <SPI_WaitFlagStateUntilTimeout>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e032      	b.n	80082a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800823a:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <SPI_EndRxTxTransaction+0xa0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a1b      	ldr	r2, [pc, #108]	@ (80082ac <SPI_EndRxTxTransaction+0xa4>)
 8008240:	fba2 2303 	umull	r2, r3, r2, r3
 8008244:	0d5b      	lsrs	r3, r3, #21
 8008246:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008258:	d112      	bne.n	8008280 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	2180      	movs	r1, #128	@ 0x80
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff fee1 	bl	800802c <SPI_WaitFlagStateUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d016      	beq.n	800829e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008274:	f043 0220 	orr.w	r2, r3, #32
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e00f      	b.n	80082a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	3b01      	subs	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d0f2      	beq.n	8008280 <SPI_EndRxTxTransaction+0x78>
 800829a:	e000      	b.n	800829e <SPI_EndRxTxTransaction+0x96>
        break;
 800829c:	bf00      	nop
  }

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000010 	.word	0x20000010
 80082ac:	165e9f81 	.word	0x165e9f81

080082b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e041      	b.n	8008346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fa f972 	bl	80025c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f000 fa7e 	bl	80087f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b01      	cmp	r3, #1
 8008362:	d001      	beq.n	8008368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e04e      	b.n	8008406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a23      	ldr	r2, [pc, #140]	@ (8008414 <HAL_TIM_Base_Start_IT+0xc4>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d022      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008392:	d01d      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1f      	ldr	r2, [pc, #124]	@ (8008418 <HAL_TIM_Base_Start_IT+0xc8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1e      	ldr	r2, [pc, #120]	@ (800841c <HAL_TIM_Base_Start_IT+0xcc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008420 <HAL_TIM_Base_Start_IT+0xd0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008424 <HAL_TIM_Base_Start_IT+0xd4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a19      	ldr	r2, [pc, #100]	@ (8008428 <HAL_TIM_Base_Start_IT+0xd8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <HAL_TIM_Base_Start_IT+0xdc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d111      	bne.n	80083f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b06      	cmp	r3, #6
 80083e0:	d010      	beq.n	8008404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0201 	orr.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	e007      	b.n	8008404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40010000 	.word	0x40010000
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00
 8008424:	40010400 	.word	0x40010400
 8008428:	40014000 	.word	0x40014000
 800842c:	40001800 	.word	0x40001800

08008430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d020      	beq.n	8008494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01b      	beq.n	8008494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f06f 0202 	mvn.w	r2, #2
 8008464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f999 	bl	80087b2 <HAL_TIM_IC_CaptureCallback>
 8008480:	e005      	b.n	800848e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f98b 	bl	800879e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f99c 	bl	80087c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d020      	beq.n	80084e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d01b      	beq.n	80084e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0204 	mvn.w	r2, #4
 80084b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f973 	bl	80087b2 <HAL_TIM_IC_CaptureCallback>
 80084cc:	e005      	b.n	80084da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f965 	bl	800879e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f976 	bl	80087c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d020      	beq.n	800852c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01b      	beq.n	800852c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0208 	mvn.w	r2, #8
 80084fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2204      	movs	r2, #4
 8008502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f94d 	bl	80087b2 <HAL_TIM_IC_CaptureCallback>
 8008518:	e005      	b.n	8008526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f93f 	bl	800879e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f950 	bl	80087c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b00      	cmp	r3, #0
 8008534:	d020      	beq.n	8008578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01b      	beq.n	8008578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f06f 0210 	mvn.w	r2, #16
 8008548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2208      	movs	r2, #8
 800854e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f927 	bl	80087b2 <HAL_TIM_IC_CaptureCallback>
 8008564:	e005      	b.n	8008572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f919 	bl	800879e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f92a 	bl	80087c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00c      	beq.n	800859c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f06f 0201 	mvn.w	r2, #1
 8008594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7f9 fe72 	bl	8002280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00c      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80085b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fae4 	bl	8008b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f8fb 	bl	80087da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0220 	mvn.w	r2, #32
 8008600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fab6 	bl	8008b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_TIM_ConfigClockSource+0x1c>
 8008628:	2302      	movs	r3, #2
 800862a:	e0b4      	b.n	8008796 <HAL_TIM_ConfigClockSource+0x186>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800864a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008664:	d03e      	beq.n	80086e4 <HAL_TIM_ConfigClockSource+0xd4>
 8008666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866a:	f200 8087 	bhi.w	800877c <HAL_TIM_ConfigClockSource+0x16c>
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008672:	f000 8086 	beq.w	8008782 <HAL_TIM_ConfigClockSource+0x172>
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867a:	d87f      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	2b70      	cmp	r3, #112	@ 0x70
 800867e:	d01a      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0xa6>
 8008680:	2b70      	cmp	r3, #112	@ 0x70
 8008682:	d87b      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 8008684:	2b60      	cmp	r3, #96	@ 0x60
 8008686:	d050      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x11a>
 8008688:	2b60      	cmp	r3, #96	@ 0x60
 800868a:	d877      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b50      	cmp	r3, #80	@ 0x50
 800868e:	d03c      	beq.n	800870a <HAL_TIM_ConfigClockSource+0xfa>
 8008690:	2b50      	cmp	r3, #80	@ 0x50
 8008692:	d873      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d058      	beq.n	800874a <HAL_TIM_ConfigClockSource+0x13a>
 8008698:	2b40      	cmp	r3, #64	@ 0x40
 800869a:	d86f      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b30      	cmp	r3, #48	@ 0x30
 800869e:	d064      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x15a>
 80086a0:	2b30      	cmp	r3, #48	@ 0x30
 80086a2:	d86b      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d060      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x15a>
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d867      	bhi.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d05c      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x15a>
 80086b0:	2b10      	cmp	r3, #16
 80086b2:	d05a      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x15a>
 80086b4:	e062      	b.n	800877c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086c6:	f000 f9b9 	bl	8008a3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	609a      	str	r2, [r3, #8]
      break;
 80086e2:	e04f      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086f4:	f000 f9a2 	bl	8008a3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008706:	609a      	str	r2, [r3, #8]
      break;
 8008708:	e03c      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008716:	461a      	mov	r2, r3
 8008718:	f000 f916 	bl	8008948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2150      	movs	r1, #80	@ 0x50
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f96f 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008728:	e02c      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008736:	461a      	mov	r2, r3
 8008738:	f000 f935 	bl	80089a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2160      	movs	r1, #96	@ 0x60
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f95f 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008748:	e01c      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008756:	461a      	mov	r2, r3
 8008758:	f000 f8f6 	bl	8008948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2140      	movs	r1, #64	@ 0x40
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f94f 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008768:	e00c      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4619      	mov	r1, r3
 8008774:	4610      	mov	r0, r2
 8008776:	f000 f946 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 800877a:	e003      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
      break;
 8008780:	e000      	b.n	8008784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
	...

080087f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a46      	ldr	r2, [pc, #280]	@ (800891c <TIM_Base_SetConfig+0x12c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d013      	beq.n	8008830 <TIM_Base_SetConfig+0x40>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800880e:	d00f      	beq.n	8008830 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a43      	ldr	r2, [pc, #268]	@ (8008920 <TIM_Base_SetConfig+0x130>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d00b      	beq.n	8008830 <TIM_Base_SetConfig+0x40>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a42      	ldr	r2, [pc, #264]	@ (8008924 <TIM_Base_SetConfig+0x134>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d007      	beq.n	8008830 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a41      	ldr	r2, [pc, #260]	@ (8008928 <TIM_Base_SetConfig+0x138>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a40      	ldr	r2, [pc, #256]	@ (800892c <TIM_Base_SetConfig+0x13c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d108      	bne.n	8008842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a35      	ldr	r2, [pc, #212]	@ (800891c <TIM_Base_SetConfig+0x12c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d02b      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008850:	d027      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a32      	ldr	r2, [pc, #200]	@ (8008920 <TIM_Base_SetConfig+0x130>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d023      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a31      	ldr	r2, [pc, #196]	@ (8008924 <TIM_Base_SetConfig+0x134>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d01f      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a30      	ldr	r2, [pc, #192]	@ (8008928 <TIM_Base_SetConfig+0x138>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01b      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a2f      	ldr	r2, [pc, #188]	@ (800892c <TIM_Base_SetConfig+0x13c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d017      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2e      	ldr	r2, [pc, #184]	@ (8008930 <TIM_Base_SetConfig+0x140>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2d      	ldr	r2, [pc, #180]	@ (8008934 <TIM_Base_SetConfig+0x144>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00f      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2c      	ldr	r2, [pc, #176]	@ (8008938 <TIM_Base_SetConfig+0x148>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00b      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a2b      	ldr	r2, [pc, #172]	@ (800893c <TIM_Base_SetConfig+0x14c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d007      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a2a      	ldr	r2, [pc, #168]	@ (8008940 <TIM_Base_SetConfig+0x150>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d003      	beq.n	80088a2 <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a29      	ldr	r2, [pc, #164]	@ (8008944 <TIM_Base_SetConfig+0x154>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d108      	bne.n	80088b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a10      	ldr	r2, [pc, #64]	@ (800891c <TIM_Base_SetConfig+0x12c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_Base_SetConfig+0xf8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a12      	ldr	r2, [pc, #72]	@ (800892c <TIM_Base_SetConfig+0x13c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d103      	bne.n	80088f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d105      	bne.n	800890e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f023 0201 	bic.w	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	611a      	str	r2, [r3, #16]
  }
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40000c00 	.word	0x40000c00
 800892c:	40010400 	.word	0x40010400
 8008930:	40014000 	.word	0x40014000
 8008934:	40014400 	.word	0x40014400
 8008938:	40014800 	.word	0x40014800
 800893c:	40001800 	.word	0x40001800
 8008940:	40001c00 	.word	0x40001c00
 8008944:	40002000 	.word	0x40002000

08008948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 030a 	bic.w	r3, r3, #10
 8008984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	621a      	str	r2, [r3, #32]
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	f023 0210 	bic.w	r2, r3, #16
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	031b      	lsls	r3, r3, #12
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f043 0307 	orr.w	r3, r3, #7
 8008a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	609a      	str	r2, [r3, #8]
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	021a      	lsls	r2, r3, #8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	609a      	str	r2, [r3, #8]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e05a      	b.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a21      	ldr	r2, [pc, #132]	@ (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d022      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae0:	d01d      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d018      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1a      	ldr	r2, [pc, #104]	@ (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00e      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a18      	ldr	r2, [pc, #96]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d009      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a17      	ldr	r2, [pc, #92]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d004      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a15      	ldr	r2, [pc, #84]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d10c      	bne.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40010400 	.word	0x40010400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40001800 	.word	0x40001800

08008b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e042      	b.n	8008c34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f9 fd56 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2224      	movs	r2, #36	@ 0x24
 8008bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fea1 	bl	8009928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	@ 0x30
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d14a      	bne.n	8008cec <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e043      	b.n	8008cee <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	461a      	mov	r2, r3
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fbf5 	bl	8009468 <UART_Start_Receive_DMA>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d12c      	bne.n	8008ce6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d125      	bne.n	8008ce0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c94:	2300      	movs	r3, #0
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	613b      	str	r3, [r7, #16]
 8008ca8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f043 0310 	orr.w	r3, r3, #16
 8008cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cca:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6a39      	ldr	r1, [r7, #32]
 8008cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8008cde:	e002      	b.n	8008ce6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cea:	e000      	b.n	8008cee <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3730      	adds	r7, #48	@ 0x30
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2e:	f003 030f 	and.w	r3, r3, #15
 8008d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10f      	bne.n	8008d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <HAL_UART_IRQHandler+0x66>
 8008d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fd27 	bl	80097aa <UART_Receive_IT>
      return;
 8008d5c:	e25b      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80de 	beq.w	8008f24 <HAL_UART_IRQHandler+0x22c>
 8008d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80d1 	beq.w	8008f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00b      	beq.n	8008da6 <HAL_UART_IRQHandler+0xae>
 8008d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	f043 0201 	orr.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <HAL_UART_IRQHandler+0xd2>
 8008db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc2:	f043 0202 	orr.w	r2, r3, #2
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00b      	beq.n	8008dee <HAL_UART_IRQHandler+0xf6>
 8008dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008de6:	f043 0204 	orr.w	r2, r3, #4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d011      	beq.n	8008e1e <HAL_UART_IRQHandler+0x126>
 8008dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d105      	bne.n	8008e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e16:	f043 0208 	orr.w	r2, r3, #8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 81f2 	beq.w	800920c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d008      	beq.n	8008e46 <HAL_UART_IRQHandler+0x14e>
 8008e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fcb2 	bl	80097aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e50:	2b40      	cmp	r3, #64	@ 0x40
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <HAL_UART_IRQHandler+0x17a>
 8008e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d04f      	beq.n	8008f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fbba 	bl	80095ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e82:	2b40      	cmp	r3, #64	@ 0x40
 8008e84:	d141      	bne.n	8008f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3314      	adds	r3, #20
 8008e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1d9      	bne.n	8008e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d013      	beq.n	8008f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ede:	4a7e      	ldr	r2, [pc, #504]	@ (80090d8 <HAL_UART_IRQHandler+0x3e0>)
 8008ee0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fa f8be 	bl	8003068 <HAL_DMA_Abort_IT>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d016      	beq.n	8008f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f00:	e00e      	b.n	8008f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9a8 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f08:	e00a      	b.n	8008f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9a4 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f10:	e006      	b.n	8008f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f9a0 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008f1e:	e175      	b.n	800920c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f20:	bf00      	nop
    return;
 8008f22:	e173      	b.n	800920c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f040 814f 	bne.w	80091cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8148 	beq.w	80091cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8141 	beq.w	80091cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60bb      	str	r3, [r7, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	60bb      	str	r3, [r7, #8]
 8008f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f6a:	2b40      	cmp	r3, #64	@ 0x40
 8008f6c:	f040 80b6 	bne.w	80090dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 8145 	beq.w	8009210 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	f080 813e 	bcs.w	8009210 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa6:	f000 8088 	beq.w	80090ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	330c      	adds	r3, #12
 8008fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	330c      	adds	r3, #12
 8008fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1d9      	bne.n	8008faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3314      	adds	r3, #20
 8008ffc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3314      	adds	r3, #20
 8009016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800901a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800901e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009022:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800902c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e1      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3314      	adds	r3, #20
 8009038:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3314      	adds	r3, #20
 8009052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009058:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800905c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e3      	bne.n	8009032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800908a:	f023 0310 	bic.w	r3, r3, #16
 800908e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800909c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800909e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e3      	bne.n	8009078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f9 ff67 	bl	8002f88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7f8 fd83 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090d6:	e09b      	b.n	8009210 <HAL_UART_IRQHandler+0x518>
 80090d8:	080096b3 	.word	0x080096b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 808e 	beq.w	8009214 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80090f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8089 	beq.w	8009214 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	330c      	adds	r3, #12
 8009108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009118:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009126:	647a      	str	r2, [r7, #68]	@ 0x44
 8009128:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800912c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e3      	bne.n	8009102 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	623b      	str	r3, [r7, #32]
   return(result);
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3314      	adds	r3, #20
 800915a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800915e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e3      	bne.n	800913a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0310 	bic.w	r3, r3, #16
 8009196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80091a4:	61fa      	str	r2, [r7, #28]
 80091a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	69b9      	ldr	r1, [r7, #24]
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	617b      	str	r3, [r7, #20]
   return(result);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e3      	bne.n	8009180 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7f8 fd09 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091ca:	e023      	b.n	8009214 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d009      	beq.n	80091ec <HAL_UART_IRQHandler+0x4f4>
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fa78 	bl	80096da <UART_Transmit_IT>
    return;
 80091ea:	e014      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00e      	beq.n	8009216 <HAL_UART_IRQHandler+0x51e>
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fab8 	bl	800977a <UART_EndTransmit_IT>
    return;
 800920a:	e004      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
    return;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
      return;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
      return;
 8009214:	bf00      	nop
  }
}
 8009216:	37e8      	adds	r7, #232	@ 0xe8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b09c      	sub	sp, #112	@ 0x70
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009278:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009284:	2b00      	cmp	r3, #0
 8009286:	d172      	bne.n	800936e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800928a:	2200      	movs	r2, #0
 800928c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800928e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	330c      	adds	r3, #12
 8009294:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800929e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	330c      	adds	r3, #12
 80092ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80092ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e5      	bne.n	800928e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3314      	adds	r3, #20
 80092c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80092da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3314      	adds	r3, #20
 80092e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80092e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e5      	bne.n	80092c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3314      	adds	r3, #20
 80092fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	623b      	str	r3, [r7, #32]
   return(result);
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800930c:	663b      	str	r3, [r7, #96]	@ 0x60
 800930e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3314      	adds	r3, #20
 8009314:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009316:	633a      	str	r2, [r7, #48]	@ 0x30
 8009318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800931c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e5      	bne.n	80092f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800932a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800932c:	2220      	movs	r2, #32
 800932e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	2b01      	cmp	r3, #1
 8009338:	d119      	bne.n	800936e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800933a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	330c      	adds	r3, #12
 8009340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	60fb      	str	r3, [r7, #12]
   return(result);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f023 0310 	bic.w	r3, r3, #16
 8009350:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800935a:	61fa      	str	r2, [r7, #28]
 800935c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	69b9      	ldr	r1, [r7, #24]
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	617b      	str	r3, [r7, #20]
   return(result);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800936e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009370:	2200      	movs	r2, #0
 8009372:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009378:	2b01      	cmp	r3, #1
 800937a:	d106      	bne.n	800938a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800937c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800937e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009380:	4619      	mov	r1, r3
 8009382:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009384:	f7f8 fc2a 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009388:	e002      	b.n	8009390 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800938a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800938c:	f7ff ff50 	bl	8009230 <HAL_UART_RxCpltCallback>
}
 8009390:	bf00      	nop
 8009392:	3770      	adds	r7, #112	@ 0x70
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2201      	movs	r2, #1
 80093aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d108      	bne.n	80093c6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093b8:	085b      	lsrs	r3, r3, #1
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	4619      	mov	r1, r3
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7f8 fc0c 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093c4:	e002      	b.n	80093cc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff ff3c 	bl	8009244 <HAL_UART_RxHalfCpltCallback>
}
 80093cc:	bf00      	nop
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093f0:	2b80      	cmp	r3, #128	@ 0x80
 80093f2:	bf0c      	ite	eq
 80093f4:	2301      	moveq	r3, #1
 80093f6:	2300      	movne	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b21      	cmp	r3, #33	@ 0x21
 8009406:	d108      	bne.n	800941a <UART_DMAError+0x46>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d005      	beq.n	800941a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009414:	68b8      	ldr	r0, [r7, #8]
 8009416:	f000 f8c1 	bl	800959c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b40      	cmp	r3, #64	@ 0x40
 8009426:	bf0c      	ite	eq
 8009428:	2301      	moveq	r3, #1
 800942a:	2300      	movne	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b22      	cmp	r3, #34	@ 0x22
 800943a:	d108      	bne.n	800944e <UART_DMAError+0x7a>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d005      	beq.n	800944e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2200      	movs	r2, #0
 8009446:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009448:	68b8      	ldr	r0, [r7, #8]
 800944a:	f000 f8cf 	bl	80095ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009452:	f043 0210 	orr.w	r2, r3, #16
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800945a:	68b8      	ldr	r0, [r7, #8]
 800945c:	f7ff fefc 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009460:	bf00      	nop
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b098      	sub	sp, #96	@ 0x60
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2222      	movs	r2, #34	@ 0x22
 800948c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009494:	4a3e      	ldr	r2, [pc, #248]	@ (8009590 <UART_Start_Receive_DMA+0x128>)
 8009496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800949c:	4a3d      	ldr	r2, [pc, #244]	@ (8009594 <UART_Start_Receive_DMA+0x12c>)
 800949e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009598 <UART_Start_Receive_DMA+0x130>)
 80094a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ac:	2200      	movs	r2, #0
 80094ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	f7f9 fd06 	bl	8002ed8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80094cc:	2300      	movs	r3, #0
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d019      	beq.n	800951e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	330c      	adds	r3, #12
 8009508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800950a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800950c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e5      	bne.n	80094ea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3314      	adds	r3, #20
 8009524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800952e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009530:	f043 0301 	orr.w	r3, r3, #1
 8009534:	657b      	str	r3, [r7, #84]	@ 0x54
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3314      	adds	r3, #20
 800953c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800953e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3314      	adds	r3, #20
 8009558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	617b      	str	r3, [r7, #20]
   return(result);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009568:	653b      	str	r3, [r7, #80]	@ 0x50
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3314      	adds	r3, #20
 8009570:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009572:	627a      	str	r2, [r7, #36]	@ 0x24
 8009574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6a39      	ldr	r1, [r7, #32]
 8009578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e5      	bne.n	8009552 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3760      	adds	r7, #96	@ 0x60
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	0800926d 	.word	0x0800926d
 8009594:	08009399 	.word	0x08009399
 8009598:	080093d5 	.word	0x080093d5

0800959c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b089      	sub	sp, #36	@ 0x24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	330c      	adds	r3, #12
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	61ba      	str	r2, [r7, #24]
 80095c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6979      	ldr	r1, [r7, #20]
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	613b      	str	r3, [r7, #16]
   return(result);
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e5      	bne.n	80095a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80095e0:	bf00      	nop
 80095e2:	3724      	adds	r7, #36	@ 0x24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b095      	sub	sp, #84	@ 0x54
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	330c      	adds	r3, #12
 80095fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800960a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	330c      	adds	r3, #12
 8009612:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009614:	643a      	str	r2, [r7, #64]	@ 0x40
 8009616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800961a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e5      	bne.n	80095f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	61fb      	str	r3, [r7, #28]
   return(result);
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3314      	adds	r3, #20
 8009646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800964e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e5      	bne.n	8009628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009660:	2b01      	cmp	r3, #1
 8009662:	d119      	bne.n	8009698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	330c      	adds	r3, #12
 800966a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	60bb      	str	r3, [r7, #8]
   return(result);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0310 	bic.w	r3, r3, #16
 800967a:	647b      	str	r3, [r7, #68]	@ 0x44
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	330c      	adds	r3, #12
 8009682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009684:	61ba      	str	r2, [r7, #24]
 8009686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6979      	ldr	r1, [r7, #20]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	613b      	str	r3, [r7, #16]
   return(result);
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e5      	bne.n	8009664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2220      	movs	r2, #32
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80096a6:	bf00      	nop
 80096a8:	3754      	adds	r7, #84	@ 0x54
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fdc3 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096da:	b480      	push	{r7}
 80096dc:	b085      	sub	sp, #20
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b21      	cmp	r3, #33	@ 0x21
 80096ec:	d13e      	bne.n	800976c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096f6:	d114      	bne.n	8009722 <UART_Transmit_IT+0x48>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d110      	bne.n	8009722 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	1c9a      	adds	r2, r3, #2
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	621a      	str	r2, [r3, #32]
 8009720:	e008      	b.n	8009734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	1c59      	adds	r1, r3, #1
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6211      	str	r1, [r2, #32]
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29b      	uxth	r3, r3
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	4619      	mov	r1, r3
 8009742:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10f      	bne.n	8009768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	e000      	b.n	800976e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800976c:	2302      	movs	r3, #2
  }
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2220      	movs	r2, #32
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7ff fd3e 	bl	800921c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b08c      	sub	sp, #48	@ 0x30
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b22      	cmp	r3, #34	@ 0x22
 80097bc:	f040 80ae 	bne.w	800991c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c8:	d117      	bne.n	80097fa <UART_Receive_IT+0x50>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d113      	bne.n	80097fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f2:	1c9a      	adds	r2, r3, #2
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80097f8:	e026      	b.n	8009848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800980c:	d007      	beq.n	800981e <UART_Receive_IT+0x74>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <UART_Receive_IT+0x82>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	b2da      	uxtb	r2, r3
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	e008      	b.n	800983e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009838:	b2da      	uxtb	r2, r3
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	b29b      	uxth	r3, r3
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	4619      	mov	r1, r3
 8009856:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009858:	2b00      	cmp	r3, #0
 800985a:	d15d      	bne.n	8009918 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0220 	bic.w	r2, r2, #32
 800986a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800987a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	695a      	ldr	r2, [r3, #20]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d135      	bne.n	800990e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	613b      	str	r3, [r7, #16]
   return(result);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f023 0310 	bic.w	r3, r3, #16
 80098be:	627b      	str	r3, [r7, #36]	@ 0x24
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	330c      	adds	r3, #12
 80098c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098c8:	623a      	str	r2, [r7, #32]
 80098ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	69f9      	ldr	r1, [r7, #28]
 80098ce:	6a3a      	ldr	r2, [r7, #32]
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e5      	bne.n	80098a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0310 	and.w	r3, r3, #16
 80098e6:	2b10      	cmp	r3, #16
 80098e8:	d10a      	bne.n	8009900 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7f8 f968 	bl	8001bdc <HAL_UARTEx_RxEventCallback>
 800990c:	e002      	b.n	8009914 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fc8e 	bl	8009230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	e002      	b.n	800991e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	e000      	b.n	800991e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800991c:	2302      	movs	r3, #2
  }
}
 800991e:	4618      	mov	r0, r3
 8009920:	3730      	adds	r7, #48	@ 0x30
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800992c:	b0c0      	sub	sp, #256	@ 0x100
 800992e:	af00      	add	r7, sp, #0
 8009930:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009944:	68d9      	ldr	r1, [r3, #12]
 8009946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	ea40 0301 	orr.w	r3, r0, r1
 8009950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	431a      	orrs	r2, r3
 8009960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	431a      	orrs	r2, r3
 8009968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	4313      	orrs	r3, r2
 8009970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009980:	f021 010c 	bic.w	r1, r1, #12
 8009984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800998e:	430b      	orrs	r3, r1
 8009990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800999e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a2:	6999      	ldr	r1, [r3, #24]
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	ea40 0301 	orr.w	r3, r0, r1
 80099ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b8f      	ldr	r3, [pc, #572]	@ (8009bf4 <UART_SetConfig+0x2cc>)
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d005      	beq.n	80099c8 <UART_SetConfig+0xa0>
 80099bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4b8d      	ldr	r3, [pc, #564]	@ (8009bf8 <UART_SetConfig+0x2d0>)
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d104      	bne.n	80099d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80099c8:	f7fd fb44 	bl	8007054 <HAL_RCC_GetPCLK2Freq>
 80099cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80099d0:	e003      	b.n	80099da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80099d2:	f7fd fb2b 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 80099d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099e4:	f040 810c 	bne.w	8009c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80099f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80099fa:	4622      	mov	r2, r4
 80099fc:	462b      	mov	r3, r5
 80099fe:	1891      	adds	r1, r2, r2
 8009a00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a02:	415b      	adcs	r3, r3
 8009a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	eb12 0801 	adds.w	r8, r2, r1
 8009a10:	4629      	mov	r1, r5
 8009a12:	eb43 0901 	adc.w	r9, r3, r1
 8009a16:	f04f 0200 	mov.w	r2, #0
 8009a1a:	f04f 0300 	mov.w	r3, #0
 8009a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a2a:	4690      	mov	r8, r2
 8009a2c:	4699      	mov	r9, r3
 8009a2e:	4623      	mov	r3, r4
 8009a30:	eb18 0303 	adds.w	r3, r8, r3
 8009a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a38:	462b      	mov	r3, r5
 8009a3a:	eb49 0303 	adc.w	r3, r9, r3
 8009a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a56:	460b      	mov	r3, r1
 8009a58:	18db      	adds	r3, r3, r3
 8009a5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	eb42 0303 	adc.w	r3, r2, r3
 8009a62:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009a6c:	f7f7 f8c4 	bl	8000bf8 <__aeabi_uldivmod>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4b61      	ldr	r3, [pc, #388]	@ (8009bfc <UART_SetConfig+0x2d4>)
 8009a76:	fba3 2302 	umull	r2, r3, r3, r2
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	011c      	lsls	r4, r3, #4
 8009a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009a90:	4642      	mov	r2, r8
 8009a92:	464b      	mov	r3, r9
 8009a94:	1891      	adds	r1, r2, r2
 8009a96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a98:	415b      	adcs	r3, r3
 8009a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009aa0:	4641      	mov	r1, r8
 8009aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ac0:	4692      	mov	sl, r2
 8009ac2:	469b      	mov	fp, r3
 8009ac4:	4643      	mov	r3, r8
 8009ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8009aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ace:	464b      	mov	r3, r9
 8009ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8009ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009aec:	460b      	mov	r3, r1
 8009aee:	18db      	adds	r3, r3, r3
 8009af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009af2:	4613      	mov	r3, r2
 8009af4:	eb42 0303 	adc.w	r3, r2, r3
 8009af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b02:	f7f7 f879 	bl	8000bf8 <__aeabi_uldivmod>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8009bfc <UART_SetConfig+0x2d4>)
 8009b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b12:	095b      	lsrs	r3, r3, #5
 8009b14:	2264      	movs	r2, #100	@ 0x64
 8009b16:	fb02 f303 	mul.w	r3, r2, r3
 8009b1a:	1acb      	subs	r3, r1, r3
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b22:	4b36      	ldr	r3, [pc, #216]	@ (8009bfc <UART_SetConfig+0x2d4>)
 8009b24:	fba3 2302 	umull	r2, r3, r3, r2
 8009b28:	095b      	lsrs	r3, r3, #5
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009b30:	441c      	add	r4, r3
 8009b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009b44:	4642      	mov	r2, r8
 8009b46:	464b      	mov	r3, r9
 8009b48:	1891      	adds	r1, r2, r2
 8009b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b4c:	415b      	adcs	r3, r3
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009b54:	4641      	mov	r1, r8
 8009b56:	1851      	adds	r1, r2, r1
 8009b58:	6339      	str	r1, [r7, #48]	@ 0x30
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	414b      	adcs	r3, r1
 8009b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	f04f 0300 	mov.w	r3, #0
 8009b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	00cb      	lsls	r3, r1, #3
 8009b70:	4651      	mov	r1, sl
 8009b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b76:	4651      	mov	r1, sl
 8009b78:	00ca      	lsls	r2, r1, #3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4642      	mov	r2, r8
 8009b82:	189b      	adds	r3, r3, r2
 8009b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b88:	464b      	mov	r3, r9
 8009b8a:	460a      	mov	r2, r1
 8009b8c:	eb42 0303 	adc.w	r3, r2, r3
 8009b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ba8:	460b      	mov	r3, r1
 8009baa:	18db      	adds	r3, r3, r3
 8009bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bae:	4613      	mov	r3, r2
 8009bb0:	eb42 0303 	adc.w	r3, r2, r3
 8009bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009bbe:	f7f7 f81b 	bl	8000bf8 <__aeabi_uldivmod>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009bfc <UART_SetConfig+0x2d4>)
 8009bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	2164      	movs	r1, #100	@ 0x64
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	3332      	adds	r3, #50	@ 0x32
 8009bda:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <UART_SetConfig+0x2d4>)
 8009bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	f003 0207 	and.w	r2, r3, #7
 8009be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4422      	add	r2, r4
 8009bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bf0:	e106      	b.n	8009e00 <UART_SetConfig+0x4d8>
 8009bf2:	bf00      	nop
 8009bf4:	40011000 	.word	0x40011000
 8009bf8:	40011400 	.word	0x40011400
 8009bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c12:	4642      	mov	r2, r8
 8009c14:	464b      	mov	r3, r9
 8009c16:	1891      	adds	r1, r2, r2
 8009c18:	6239      	str	r1, [r7, #32]
 8009c1a:	415b      	adcs	r3, r3
 8009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c22:	4641      	mov	r1, r8
 8009c24:	1854      	adds	r4, r2, r1
 8009c26:	4649      	mov	r1, r9
 8009c28:	eb43 0501 	adc.w	r5, r3, r1
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	00eb      	lsls	r3, r5, #3
 8009c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c3a:	00e2      	lsls	r2, r4, #3
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	461d      	mov	r5, r3
 8009c40:	4643      	mov	r3, r8
 8009c42:	18e3      	adds	r3, r4, r3
 8009c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c48:	464b      	mov	r3, r9
 8009c4a:	eb45 0303 	adc.w	r3, r5, r3
 8009c4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c62:	f04f 0200 	mov.w	r2, #0
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c6e:	4629      	mov	r1, r5
 8009c70:	008b      	lsls	r3, r1, #2
 8009c72:	4621      	mov	r1, r4
 8009c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c78:	4621      	mov	r1, r4
 8009c7a:	008a      	lsls	r2, r1, #2
 8009c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009c80:	f7f6 ffba 	bl	8000bf8 <__aeabi_uldivmod>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4b60      	ldr	r3, [pc, #384]	@ (8009e0c <UART_SetConfig+0x4e4>)
 8009c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c8e:	095b      	lsrs	r3, r3, #5
 8009c90:	011c      	lsls	r4, r3, #4
 8009c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ca4:	4642      	mov	r2, r8
 8009ca6:	464b      	mov	r3, r9
 8009ca8:	1891      	adds	r1, r2, r2
 8009caa:	61b9      	str	r1, [r7, #24]
 8009cac:	415b      	adcs	r3, r3
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cb4:	4641      	mov	r1, r8
 8009cb6:	1851      	adds	r1, r2, r1
 8009cb8:	6139      	str	r1, [r7, #16]
 8009cba:	4649      	mov	r1, r9
 8009cbc:	414b      	adcs	r3, r1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ccc:	4659      	mov	r1, fp
 8009cce:	00cb      	lsls	r3, r1, #3
 8009cd0:	4651      	mov	r1, sl
 8009cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cd6:	4651      	mov	r1, sl
 8009cd8:	00ca      	lsls	r2, r1, #3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4603      	mov	r3, r0
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	189b      	adds	r3, r3, r2
 8009ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ce8:	464b      	mov	r3, r9
 8009cea:	460a      	mov	r2, r1
 8009cec:	eb42 0303 	adc.w	r3, r2, r3
 8009cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	008b      	lsls	r3, r1, #2
 8009d10:	4641      	mov	r1, r8
 8009d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d16:	4641      	mov	r1, r8
 8009d18:	008a      	lsls	r2, r1, #2
 8009d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009d1e:	f7f6 ff6b 	bl	8000bf8 <__aeabi_uldivmod>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4611      	mov	r1, r2
 8009d28:	4b38      	ldr	r3, [pc, #224]	@ (8009e0c <UART_SetConfig+0x4e4>)
 8009d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	2264      	movs	r2, #100	@ 0x64
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	1acb      	subs	r3, r1, r3
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	3332      	adds	r3, #50	@ 0x32
 8009d3c:	4a33      	ldr	r2, [pc, #204]	@ (8009e0c <UART_SetConfig+0x4e4>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d48:	441c      	add	r4, r3
 8009d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d4e:	2200      	movs	r2, #0
 8009d50:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d52:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009d58:	4642      	mov	r2, r8
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	1891      	adds	r1, r2, r2
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	415b      	adcs	r3, r3
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d68:	4641      	mov	r1, r8
 8009d6a:	1851      	adds	r1, r2, r1
 8009d6c:	6039      	str	r1, [r7, #0]
 8009d6e:	4649      	mov	r1, r9
 8009d70:	414b      	adcs	r3, r1
 8009d72:	607b      	str	r3, [r7, #4]
 8009d74:	f04f 0200 	mov.w	r2, #0
 8009d78:	f04f 0300 	mov.w	r3, #0
 8009d7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d80:	4659      	mov	r1, fp
 8009d82:	00cb      	lsls	r3, r1, #3
 8009d84:	4651      	mov	r1, sl
 8009d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d8a:	4651      	mov	r1, sl
 8009d8c:	00ca      	lsls	r2, r1, #3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	4619      	mov	r1, r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	4642      	mov	r2, r8
 8009d96:	189b      	adds	r3, r3, r2
 8009d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	460a      	mov	r2, r1
 8009d9e:	eb42 0303 	adc.w	r3, r2, r3
 8009da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dae:	667a      	str	r2, [r7, #100]	@ 0x64
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009dbc:	4649      	mov	r1, r9
 8009dbe:	008b      	lsls	r3, r1, #2
 8009dc0:	4641      	mov	r1, r8
 8009dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dc6:	4641      	mov	r1, r8
 8009dc8:	008a      	lsls	r2, r1, #2
 8009dca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009dce:	f7f6 ff13 	bl	8000bf8 <__aeabi_uldivmod>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <UART_SetConfig+0x4e4>)
 8009dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ddc:	095b      	lsrs	r3, r3, #5
 8009dde:	2164      	movs	r1, #100	@ 0x64
 8009de0:	fb01 f303 	mul.w	r3, r1, r3
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	3332      	adds	r3, #50	@ 0x32
 8009dea:	4a08      	ldr	r2, [pc, #32]	@ (8009e0c <UART_SetConfig+0x4e4>)
 8009dec:	fba2 2303 	umull	r2, r3, r2, r3
 8009df0:	095b      	lsrs	r3, r3, #5
 8009df2:	f003 020f 	and.w	r2, r3, #15
 8009df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4422      	add	r2, r4
 8009dfe:	609a      	str	r2, [r3, #8]
}
 8009e00:	bf00      	nop
 8009e02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e06:	46bd      	mov	sp, r7
 8009e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0c:	51eb851f 	.word	0x51eb851f

08009e10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e10:	b084      	sub	sp, #16
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	f107 001c 	add.w	r0, r7, #28
 8009e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d123      	bne.n	8009e72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d105      	bne.n	8009e66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9dc 	bl	800a224 <USB_CoreReset>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
 8009e70:	e01b      	b.n	8009eaa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f9d0 	bl	800a224 <USB_CoreReset>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e9c:	e005      	b.n	8009eaa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009eaa:	7fbb      	ldrb	r3, [r7, #30]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d10b      	bne.n	8009ec8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f043 0206 	orr.w	r2, r3, #6
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f043 0220 	orr.w	r2, r3, #32
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ed4:	b004      	add	sp, #16
 8009ed6:	4770      	bx	lr

08009ed8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f043 0201 	orr.w	r2, r3, #1
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f023 0201 	bic.w	r2, r3, #1
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d115      	bne.n	8009f6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f4a:	200a      	movs	r0, #10
 8009f4c:	f7f8 fe10 	bl	8002b70 <HAL_Delay>
      ms += 10U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	330a      	adds	r3, #10
 8009f54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f956 	bl	800a208 <USB_GetMode>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d01e      	beq.n	8009fa0 <USB_SetCurrentMode+0x84>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f66:	d9f0      	bls.n	8009f4a <USB_SetCurrentMode+0x2e>
 8009f68:	e01a      	b.n	8009fa0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d115      	bne.n	8009f9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009f7c:	200a      	movs	r0, #10
 8009f7e:	f7f8 fdf7 	bl	8002b70 <HAL_Delay>
      ms += 10U;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	330a      	adds	r3, #10
 8009f86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f93d 	bl	800a208 <USB_GetMode>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <USB_SetCurrentMode+0x84>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2bc7      	cmp	r3, #199	@ 0xc7
 8009f98:	d9f0      	bls.n	8009f7c <USB_SetCurrentMode+0x60>
 8009f9a:	e001      	b.n	8009fa0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e005      	b.n	8009fac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2bc8      	cmp	r3, #200	@ 0xc8
 8009fa4:	d101      	bne.n	8009faa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e000      	b.n	8009fac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fce:	d901      	bls.n	8009fd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e01b      	b.n	800a00c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	daf2      	bge.n	8009fc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	019b      	lsls	r3, r3, #6
 8009fe4:	f043 0220 	orr.w	r2, r3, #32
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ff8:	d901      	bls.n	8009ffe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e006      	b.n	800a00c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	2b20      	cmp	r3, #32
 800a008:	d0f0      	beq.n	8009fec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3301      	adds	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a030:	d901      	bls.n	800a036 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e018      	b.n	800a068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	daf2      	bge.n	800a024 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2210      	movs	r2, #16
 800a046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a054:	d901      	bls.n	800a05a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e006      	b.n	800a068 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f003 0310 	and.w	r3, r3, #16
 800a062:	2b10      	cmp	r3, #16
 800a064:	d0f0      	beq.n	800a048 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a074:	b480      	push	{r7}
 800a076:	b089      	sub	sp, #36	@ 0x24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	4611      	mov	r1, r2
 800a080:	461a      	mov	r2, r3
 800a082:	460b      	mov	r3, r1
 800a084:	71fb      	strb	r3, [r7, #7]
 800a086:	4613      	mov	r3, r2
 800a088:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a092:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d123      	bne.n	800a0e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a09a:	88bb      	ldrh	r3, [r7, #4]
 800a09c:	3303      	adds	r3, #3
 800a09e:	089b      	lsrs	r3, r3, #2
 800a0a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61bb      	str	r3, [r7, #24]
 800a0a6:	e018      	b.n	800a0da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	031a      	lsls	r2, r3, #12
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d3e2      	bcc.n	800a0a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3724      	adds	r7, #36	@ 0x24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b08b      	sub	sp, #44	@ 0x2c
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a106:	88fb      	ldrh	r3, [r7, #6]
 800a108:	089b      	lsrs	r3, r3, #2
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a116:	2300      	movs	r3, #0
 800a118:	623b      	str	r3, [r7, #32]
 800a11a:	e014      	b.n	800a146 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	601a      	str	r2, [r3, #0]
    pDest++;
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	3301      	adds	r3, #1
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	3301      	adds	r3, #1
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	3301      	adds	r3, #1
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	3301      	adds	r3, #1
 800a13e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	3301      	adds	r3, #1
 800a144:	623b      	str	r3, [r7, #32]
 800a146:	6a3a      	ldr	r2, [r7, #32]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d3e6      	bcc.n	800a11c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a14e:	8bfb      	ldrh	r3, [r7, #30]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01e      	beq.n	800a192 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a15e:	461a      	mov	r2, r3
 800a160:	f107 0310 	add.w	r3, r7, #16
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	fa22 f303 	lsr.w	r3, r2, r3
 800a174:	b2da      	uxtb	r2, r3
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	701a      	strb	r2, [r3, #0]
      i++;
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	3301      	adds	r3, #1
 800a17e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a182:	3301      	adds	r3, #1
 800a184:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a186:	8bfb      	ldrh	r3, [r7, #30]
 800a188:	3b01      	subs	r3, #1
 800a18a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a18c:	8bfb      	ldrh	r3, [r7, #30]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1ea      	bne.n	800a168 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a194:	4618      	mov	r0, r3
 800a196:	372c      	adds	r7, #44	@ 0x2c
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0301 	and.w	r3, r3, #1
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3301      	adds	r3, #1
 800a234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a23c:	d901      	bls.n	800a242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e01b      	b.n	800a27a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	daf2      	bge.n	800a230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f043 0201 	orr.w	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3301      	adds	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a266:	d901      	bls.n	800a26c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e006      	b.n	800a27a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b01      	cmp	r3, #1
 800a276:	d0f0      	beq.n	800a25a <USB_CoreReset+0x36>

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
	...

0800a288 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a288:	b084      	sub	sp, #16
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d119      	bne.n	800a312 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a2de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d10a      	bne.n	800a2fc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a2f4:	f043 0304 	orr.w	r3, r3, #4
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	e014      	b.n	800a326 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a30a:	f023 0304 	bic.w	r3, r3, #4
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	e009      	b.n	800a326 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a320:	f023 0304 	bic.w	r3, r3, #4
 800a324:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a326:	2110      	movs	r1, #16
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff fe43 	bl	8009fb4 <USB_FlushTxFifo>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fe6d 	bl	800a018 <USB_FlushRxFifo>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a348:	2300      	movs	r3, #0
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	e015      	b.n	800a37a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a35a:	461a      	mov	r2, r3
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a360:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a36e:	461a      	mov	r2, r3
 800a370:	2300      	movs	r3, #0
 800a372:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	3301      	adds	r3, #1
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a37e:	461a      	mov	r2, r3
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4293      	cmp	r3, r2
 800a384:	d3e3      	bcc.n	800a34e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a392:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a18      	ldr	r2, [pc, #96]	@ (800a3f8 <USB_HostInit+0x170>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d10b      	bne.n	800a3b4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3a2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a15      	ldr	r2, [pc, #84]	@ (800a3fc <USB_HostInit+0x174>)
 800a3a8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a14      	ldr	r2, [pc, #80]	@ (800a400 <USB_HostInit+0x178>)
 800a3ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a3b2:	e009      	b.n	800a3c8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2280      	movs	r2, #128	@ 0x80
 800a3b8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a11      	ldr	r2, [pc, #68]	@ (800a404 <USB_HostInit+0x17c>)
 800a3be:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a11      	ldr	r2, [pc, #68]	@ (800a408 <USB_HostInit+0x180>)
 800a3c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a3c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d105      	bne.n	800a3dc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	f043 0210 	orr.w	r2, r3, #16
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	699a      	ldr	r2, [r3, #24]
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <USB_HostInit+0x184>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3f4:	b004      	add	sp, #16
 800a3f6:	4770      	bx	lr
 800a3f8:	40040000 	.word	0x40040000
 800a3fc:	01000200 	.word	0x01000200
 800a400:	00e00300 	.word	0x00e00300
 800a404:	00600080 	.word	0x00600080
 800a408:	004000e0 	.word	0x004000e0
 800a40c:	a3200008 	.word	0xa3200008

0800a410 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a42e:	f023 0303 	bic.w	r3, r3, #3
 800a432:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a448:	4313      	orrs	r3, r2
 800a44a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d107      	bne.n	800a462 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a458:	461a      	mov	r2, r3
 800a45a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a45e:	6053      	str	r3, [r2, #4]
 800a460:	e00c      	b.n	800a47c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	2b02      	cmp	r3, #2
 800a466:	d107      	bne.n	800a478 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a46e:	461a      	mov	r2, r3
 800a470:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a474:	6053      	str	r3, [r2, #4]
 800a476:	e001      	b.n	800a47c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a4aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a4b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a4ba:	2064      	movs	r0, #100	@ 0x64
 800a4bc:	f7f8 fb58 	bl	8002b70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a4c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a4ce:	200a      	movs	r0, #10
 800a4d0:	f7f8 fb4e 	bl	8002b70 <HAL_Delay>

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a502:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <USB_DriveVbus+0x44>
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d106      	bne.n	800a522 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a51c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a520:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a52c:	d109      	bne.n	800a542 <USB_DriveVbus+0x64>
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a53c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a540:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	0c5b      	lsrs	r3, r3, #17
 800a56e:	f003 0303 	and.w	r3, r3, #3
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a57e:	b480      	push	{r7}
 800a580:	b085      	sub	sp, #20
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	b29b      	uxth	r3, r3
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	4608      	mov	r0, r1
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	70fb      	strb	r3, [r7, #3]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70bb      	strb	r3, [r7, #2]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a5d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a5d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d87c      	bhi.n	800a6d8 <USB_HC_Init+0x138>
 800a5de:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <USB_HC_Init+0x44>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a69b 	.word	0x0800a69b
 800a5ec:	0800a5f5 	.word	0x0800a5f5
 800a5f0:	0800a65d 	.word	0x0800a65d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a600:	461a      	mov	r2, r3
 800a602:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a606:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da10      	bge.n	800a632 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	4413      	add	r3, r2
 800a618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	440a      	add	r2, r1
 800a626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a62a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a62e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a630:	e055      	b.n	800a6de <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a6f      	ldr	r2, [pc, #444]	@ (800a7f4 <USB_HC_Init+0x254>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d151      	bne.n	800a6de <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	4413      	add	r3, r2
 800a642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	0151      	lsls	r1, r2, #5
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	440a      	add	r2, r1
 800a650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a654:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a658:	60d3      	str	r3, [r2, #12]
      break;
 800a65a:	e040      	b.n	800a6de <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	4413      	add	r3, r2
 800a664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a668:	461a      	mov	r2, r3
 800a66a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a66e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a674:	2b00      	cmp	r3, #0
 800a676:	da34      	bge.n	800a6e2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	78fa      	ldrb	r2, [r7, #3]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a696:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a698:	e023      	b.n	800a6e2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f240 2325 	movw	r3, #549	@ 0x225
 800a6ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a6ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	da17      	bge.n	800a6e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a6b6:	78fb      	ldrb	r3, [r7, #3]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6d0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a6d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a6d6:	e006      	b.n	800a6e6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	77fb      	strb	r3, [r7, #31]
      break;
 800a6dc:	e004      	b.n	800a6e8 <USB_HC_Init+0x148>
      break;
 800a6de:	bf00      	nop
 800a6e0:	e002      	b.n	800a6e8 <USB_HC_Init+0x148>
      break;
 800a6e2:	bf00      	nop
 800a6e4:	e000      	b.n	800a6e8 <USB_HC_Init+0x148>
      break;
 800a6e6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	4413      	add	r3, r2
 800a702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	78fa      	ldrb	r2, [r7, #3]
 800a70a:	0151      	lsls	r1, r2, #5
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	440a      	add	r2, r1
 800a710:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a714:	f043 0302 	orr.w	r3, r3, #2
 800a718:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a720:	699a      	ldr	r2, [r3, #24]
 800a722:	78fb      	ldrb	r3, [r7, #3]
 800a724:	f003 030f 	and.w	r3, r3, #15
 800a728:	2101      	movs	r1, #1
 800a72a:	fa01 f303 	lsl.w	r3, r1, r3
 800a72e:	6939      	ldr	r1, [r7, #16]
 800a730:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a734:	4313      	orrs	r3, r2
 800a736:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a744:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	da03      	bge.n	800a754 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a74c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a750:	61bb      	str	r3, [r7, #24]
 800a752:	e001      	b.n	800a758 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff fef9 	bl	800a550 <USB_GetHostSpeed>
 800a75e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a760:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a764:	2b02      	cmp	r3, #2
 800a766:	d106      	bne.n	800a776 <USB_HC_Init+0x1d6>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d003      	beq.n	800a776 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a76e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	e001      	b.n	800a77a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a77a:	787b      	ldrb	r3, [r7, #1]
 800a77c:	059b      	lsls	r3, r3, #22
 800a77e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a782:	78bb      	ldrb	r3, [r7, #2]
 800a784:	02db      	lsls	r3, r3, #11
 800a786:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a78a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a78c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a790:	049b      	lsls	r3, r3, #18
 800a792:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a796:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a798:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a79a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a79e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7a8:	78fa      	ldrb	r2, [r7, #3]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a7b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a7b8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a7ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d003      	beq.n	800a7ca <USB_HC_Init+0x22a>
 800a7c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d10f      	bne.n	800a7ea <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	0151      	lsls	r1, r2, #5
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	440a      	add	r2, r1
 800a7e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a7e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a7ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3720      	adds	r7, #32
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	40040000 	.word	0x40040000

0800a7f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08c      	sub	sp, #48	@ 0x30
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a814:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	4a5d      	ldr	r2, [pc, #372]	@ (800a990 <USB_HC_StartXfer+0x198>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d12f      	bne.n	800a87e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d11c      	bne.n	800a85e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	7c9b      	ldrb	r3, [r3, #18]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <USB_HC_StartXfer+0x3c>
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	7c9b      	ldrb	r3, [r3, #18]
 800a830:	2b02      	cmp	r3, #2
 800a832:	d124      	bne.n	800a87e <USB_HC_StartXfer+0x86>
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	799b      	ldrb	r3, [r3, #6]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d120      	bne.n	800a87e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	4413      	add	r3, r2
 800a844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	0151      	lsls	r1, r2, #5
 800a84e:	6a3a      	ldr	r2, [r7, #32]
 800a850:	440a      	add	r2, r1
 800a852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a85a:	60d3      	str	r3, [r2, #12]
 800a85c:	e00f      	b.n	800a87e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <USB_HC_StartXfer+0x86>
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	795b      	ldrb	r3, [r3, #5]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d107      	bne.n	800a87e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	4619      	mov	r1, r3
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 fb6b 	bl	800af50 <USB_DoPing>
        return HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	e232      	b.n	800ace4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	799b      	ldrb	r3, [r3, #6]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d158      	bne.n	800a938 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a886:	2301      	movs	r3, #1
 800a888:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	78db      	ldrb	r3, [r3, #3]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d007      	beq.n	800a8a2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a892:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	8a92      	ldrh	r2, [r2, #20]
 800a898:	fb03 f202 	mul.w	r2, r3, r2
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	61da      	str	r2, [r3, #28]
 800a8a0:	e07c      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	7c9b      	ldrb	r3, [r3, #18]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d130      	bne.n	800a90c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	2bbc      	cmp	r3, #188	@ 0xbc
 800a8b0:	d918      	bls.n	800a8e4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	8a9b      	ldrh	r3, [r3, #20]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	69da      	ldr	r2, [r3, #28]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d003      	beq.n	800a8d4 <USB_HC_StartXfer+0xdc>
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d103      	bne.n	800a8dc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	60da      	str	r2, [r3, #12]
 800a8da:	e05f      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	60da      	str	r2, [r3, #12]
 800a8e2:	e05b      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6a1a      	ldr	r2, [r3, #32]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d007      	beq.n	800a904 <USB_HC_StartXfer+0x10c>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d003      	beq.n	800a904 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2204      	movs	r2, #4
 800a900:	60da      	str	r2, [r3, #12]
 800a902:	e04b      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2203      	movs	r2, #3
 800a908:	60da      	str	r2, [r3, #12]
 800a90a:	e047      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10d      	bne.n	800a92e <USB_HC_StartXfer+0x136>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	8a92      	ldrh	r2, [r2, #20]
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d907      	bls.n	800a92e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a91e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	8a92      	ldrh	r2, [r2, #20]
 800a924:	fb03 f202 	mul.w	r2, r3, r2
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	61da      	str	r2, [r3, #28]
 800a92c:	e036      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6a1a      	ldr	r2, [r3, #32]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	61da      	str	r2, [r3, #28]
 800a936:	e031      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d018      	beq.n	800a972 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	8a92      	ldrh	r2, [r2, #20]
 800a948:	4413      	add	r3, r2
 800a94a:	3b01      	subs	r3, #1
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	8a92      	ldrh	r2, [r2, #20]
 800a950:	fbb3 f3f2 	udiv	r3, r3, r2
 800a954:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a956:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a958:	8b7b      	ldrh	r3, [r7, #26]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d90b      	bls.n	800a976 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a95e:	8b7b      	ldrh	r3, [r7, #26]
 800a960:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	8a92      	ldrh	r2, [r2, #20]
 800a968:	fb03 f202 	mul.w	r2, r3, r2
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	61da      	str	r2, [r3, #28]
 800a970:	e001      	b.n	800a976 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a972:	2301      	movs	r3, #1
 800a974:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	78db      	ldrb	r3, [r3, #3]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a97e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	8a92      	ldrh	r2, [r2, #20]
 800a984:	fb03 f202 	mul.w	r2, r3, r2
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	61da      	str	r2, [r3, #28]
 800a98c:	e006      	b.n	800a99c <USB_HC_StartXfer+0x1a4>
 800a98e:	bf00      	nop
 800a990:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a9a6:	04d9      	lsls	r1, r3, #19
 800a9a8:	4ba3      	ldr	r3, [pc, #652]	@ (800ac38 <USB_HC_StartXfer+0x440>)
 800a9aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	7d9b      	ldrb	r3, [r3, #22]
 800a9b2:	075b      	lsls	r3, r3, #29
 800a9b4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9b8:	69f9      	ldr	r1, [r7, #28]
 800a9ba:	0148      	lsls	r0, r1, #5
 800a9bc:	6a39      	ldr	r1, [r7, #32]
 800a9be:	4401      	add	r1, r0
 800a9c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	6999      	ldr	r1, [r3, #24]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9de:	460a      	mov	r2, r1
 800a9e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bf0c      	ite	eq
 800a9f2:	2301      	moveq	r3, #1
 800a9f4:	2300      	movne	r3, #0
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	6a3a      	ldr	r2, [r7, #32]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	7e7b      	ldrb	r3, [r7, #25]
 800aa2a:	075b      	lsls	r3, r3, #29
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	0148      	lsls	r0, r1, #5
 800aa30:	6a39      	ldr	r1, [r7, #32]
 800aa32:	4401      	add	r1, r0
 800aa34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	799b      	ldrb	r3, [r3, #6]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	f040 80c3 	bne.w	800abcc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	7c5b      	ldrb	r3, [r3, #17]
 800aa4a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa50:	4313      	orrs	r3, r2
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	0151      	lsls	r1, r2, #5
 800aa56:	6a3a      	ldr	r2, [r7, #32]
 800aa58:	440a      	add	r2, r1
 800aa5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800aa5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800aa62:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	0151      	lsls	r1, r2, #5
 800aa76:	6a3a      	ldr	r2, [r7, #32]
 800aa78:	440a      	add	r2, r1
 800aa7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aa82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	79db      	ldrb	r3, [r3, #7]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d123      	bne.n	800aad4 <USB_HC_StartXfer+0x2dc>
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	78db      	ldrb	r3, [r3, #3]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11f      	bne.n	800aad4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	0151      	lsls	r1, r2, #5
 800aaa6:	6a3a      	ldr	r2, [r7, #32]
 800aaa8:	440a      	add	r2, r1
 800aaaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aab2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	0151      	lsls	r1, r2, #5
 800aac6:	6a3a      	ldr	r2, [r7, #32]
 800aac8:	440a      	add	r2, r1
 800aaca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	7c9b      	ldrb	r3, [r3, #18]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d003      	beq.n	800aae4 <USB_HC_StartXfer+0x2ec>
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	7c9b      	ldrb	r3, [r3, #18]
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d117      	bne.n	800ab14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d113      	bne.n	800ab14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	78db      	ldrb	r3, [r3, #3]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d10f      	bne.n	800ab14 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	6a3a      	ldr	r2, [r7, #32]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab12:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	7c9b      	ldrb	r3, [r3, #18]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d162      	bne.n	800abe2 <USB_HC_StartXfer+0x3ea>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	78db      	ldrb	r3, [r3, #3]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d15e      	bne.n	800abe2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d858      	bhi.n	800abe0 <USB_HC_StartXfer+0x3e8>
 800ab2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab34 <USB_HC_StartXfer+0x33c>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab67 	.word	0x0800ab67
 800ab3c:	0800ab89 	.word	0x0800ab89
 800ab40:	0800abab 	.word	0x0800abab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	0151      	lsls	r1, r2, #5
 800ab56:	6a3a      	ldr	r2, [r7, #32]
 800ab58:	440a      	add	r2, r1
 800ab5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab62:	6053      	str	r3, [r2, #4]
          break;
 800ab64:	e03d      	b.n	800abe2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	0151      	lsls	r1, r2, #5
 800ab78:	6a3a      	ldr	r2, [r7, #32]
 800ab7a:	440a      	add	r2, r1
 800ab7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab80:	f043 030e 	orr.w	r3, r3, #14
 800ab84:	6053      	str	r3, [r2, #4]
          break;
 800ab86:	e02c      	b.n	800abe2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	015a      	lsls	r2, r3, #5
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	4413      	add	r3, r2
 800ab90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	0151      	lsls	r1, r2, #5
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	440a      	add	r2, r1
 800ab9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aba6:	6053      	str	r3, [r2, #4]
          break;
 800aba8:	e01b      	b.n	800abe2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	0151      	lsls	r1, r2, #5
 800abbc:	6a3a      	ldr	r2, [r7, #32]
 800abbe:	440a      	add	r2, r1
 800abc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800abc8:	6053      	str	r3, [r2, #4]
          break;
 800abca:	e00a      	b.n	800abe2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abd8:	461a      	mov	r2, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	6053      	str	r3, [r2, #4]
 800abde:	e000      	b.n	800abe2 <USB_HC_StartXfer+0x3ea>
          break;
 800abe0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	015a      	lsls	r2, r3, #5
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	4413      	add	r3, r2
 800abea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800abf8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	78db      	ldrb	r3, [r3, #3]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	e003      	b.n	800ac14 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac12:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ac1a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	6a3b      	ldr	r3, [r7, #32]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac28:	461a      	mov	r2, r3
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e055      	b.n	800ace4 <USB_HC_StartXfer+0x4ec>
 800ac38:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	78db      	ldrb	r3, [r3, #3]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d14e      	bne.n	800ace2 <USB_HC_StartXfer+0x4ea>
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d04a      	beq.n	800ace2 <USB_HC_StartXfer+0x4ea>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	79db      	ldrb	r3, [r3, #7]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d146      	bne.n	800ace2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	7c9b      	ldrb	r3, [r3, #18]
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	d831      	bhi.n	800acc0 <USB_HC_StartXfer+0x4c8>
 800ac5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac64 <USB_HC_StartXfer+0x46c>)
 800ac5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac62:	bf00      	nop
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac99 	.word	0x0800ac99
 800ac6c:	0800ac75 	.word	0x0800ac75
 800ac70:	0800ac99 	.word	0x0800ac99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	3303      	adds	r3, #3
 800ac7a:	089b      	lsrs	r3, r3, #2
 800ac7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac7e:	8afa      	ldrh	r2, [r7, #22]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d91c      	bls.n	800acc4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	f043 0220 	orr.w	r2, r3, #32
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac96:	e015      	b.n	800acc4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	3303      	adds	r3, #3
 800ac9e:	089b      	lsrs	r3, r3, #2
 800aca0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800aca2:	8afa      	ldrh	r2, [r7, #22]
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	b29b      	uxth	r3, r3
 800acae:	429a      	cmp	r2, r3
 800acb0:	d90a      	bls.n	800acc8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	619a      	str	r2, [r3, #24]
        }
        break;
 800acbe:	e003      	b.n	800acc8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800acc0:	bf00      	nop
 800acc2:	e002      	b.n	800acca <USB_HC_StartXfer+0x4d2>
        break;
 800acc4:	bf00      	nop
 800acc6:	e000      	b.n	800acca <USB_HC_StartXfer+0x4d2>
        break;
 800acc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6999      	ldr	r1, [r3, #24]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	785a      	ldrb	r2, [r3, #1]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	2000      	movs	r0, #0
 800acda:	9000      	str	r0, [sp, #0]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff f9c9 	bl	800a074 <USB_WritePacket>
  }

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3728      	adds	r7, #40	@ 0x28
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	b29b      	uxth	r3, r3
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b089      	sub	sp, #36	@ 0x24
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	0c9b      	lsrs	r3, r3, #18
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	0fdb      	lsrs	r3, r3, #31
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	0fdb      	lsrs	r3, r3, #31
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f003 0320 	and.w	r3, r3, #32
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	d10d      	bne.n	800ad90 <USB_HC_Halt+0x82>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <USB_HC_Halt+0x82>
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d002      	beq.n	800ad8c <USB_HC_Halt+0x7e>
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d101      	bne.n	800ad90 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e0d8      	b.n	800af42 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <USB_HC_Halt+0x8e>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d173      	bne.n	800ae84 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	015a      	lsls	r2, r3, #5
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	4413      	add	r3, r2
 800ada4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	69ba      	ldr	r2, [r7, #24]
 800adac:	0151      	lsls	r1, r2, #5
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	440a      	add	r2, r1
 800adb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800adba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f003 0320 	and.w	r3, r3, #32
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d14a      	bne.n	800ae5e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d133      	bne.n	800ae3c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	0151      	lsls	r1, r2, #5
 800ade6:	69fa      	ldr	r2, [r7, #28]
 800ade8:	440a      	add	r2, r1
 800adea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adf2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	0151      	lsls	r1, r2, #5
 800ae06:	69fa      	ldr	r2, [r7, #28]
 800ae08:	440a      	add	r2, r1
 800ae0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae12:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	3301      	adds	r3, #1
 800ae18:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae20:	d82e      	bhi.n	800ae80 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae38:	d0ec      	beq.n	800ae14 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae3a:	e081      	b.n	800af40 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	0151      	lsls	r1, r2, #5
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	440a      	add	r2, r1
 800ae52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae5a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae5c:	e070      	b.n	800af40 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	69ba      	ldr	r2, [r7, #24]
 800ae6e:	0151      	lsls	r1, r2, #5
 800ae70:	69fa      	ldr	r2, [r7, #28]
 800ae72:	440a      	add	r2, r1
 800ae74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae7e:	e05f      	b.n	800af40 <USB_HC_Halt+0x232>
            break;
 800ae80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae82:	e05d      	b.n	800af40 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	0151      	lsls	r1, r2, #5
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	440a      	add	r2, r1
 800ae9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aea2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d133      	bne.n	800af1c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	0151      	lsls	r1, r2, #5
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	440a      	add	r2, r1
 800aeca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aece:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aed2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	0151      	lsls	r1, r2, #5
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	440a      	add	r2, r1
 800aeea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aef2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	3301      	adds	r3, #1
 800aef8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af00:	d81d      	bhi.n	800af3e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	015a      	lsls	r2, r3, #5
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	4413      	add	r3, r2
 800af0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af18:	d0ec      	beq.n	800aef4 <USB_HC_Halt+0x1e6>
 800af1a:	e011      	b.n	800af40 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	4413      	add	r3, r2
 800af24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	0151      	lsls	r1, r2, #5
 800af2e:	69fa      	ldr	r2, [r7, #28]
 800af30:	440a      	add	r2, r1
 800af32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	e000      	b.n	800af40 <USB_HC_Halt+0x232>
          break;
 800af3e:	bf00      	nop
    }
  }

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3724      	adds	r7, #36	@ 0x24
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
	...

0800af50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800af64:	2301      	movs	r3, #1
 800af66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	04da      	lsls	r2, r3, #19
 800af6c:	4b15      	ldr	r3, [pc, #84]	@ (800afc4 <USB_DoPing+0x74>)
 800af6e:	4013      	ands	r3, r2
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	0151      	lsls	r1, r2, #5
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	440a      	add	r2, r1
 800af78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800afa0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afae:	461a      	mov	r2, r3
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	1ff80000 	.word	0x1ff80000

0800afc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7fe ff8c 	bl	8009efa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800afe2:	2110      	movs	r1, #16
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7fe ffe5 	bl	8009fb4 <USB_FlushTxFifo>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff f80f 	bl	800a018 <USB_FlushRxFifo>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b004:	2300      	movs	r3, #0
 800b006:	61bb      	str	r3, [r7, #24]
 800b008:	e01f      	b.n	800b04a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	4413      	add	r3, r2
 800b012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b020:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b028:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b030:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b03e:	461a      	mov	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	3301      	adds	r3, #1
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	2b0f      	cmp	r3, #15
 800b04e:	d9dc      	bls.n	800b00a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b050:	2300      	movs	r3, #0
 800b052:	61bb      	str	r3, [r7, #24]
 800b054:	e034      	b.n	800b0c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b06c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b074:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b07c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	4413      	add	r3, r2
 800b086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b08a:	461a      	mov	r2, r3
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3301      	adds	r3, #1
 800b094:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b09c:	d80c      	bhi.n	800b0b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0b4:	d0ec      	beq.n	800b090 <USB_StopHost+0xc8>
 800b0b6:	e000      	b.n	800b0ba <USB_StopHost+0xf2>
        break;
 800b0b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	61bb      	str	r3, [r7, #24]
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	2b0f      	cmp	r3, #15
 800b0c4:	d9c7      	bls.n	800b056 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7fe fefb 	bl	8009ed8 <USB_EnableGlobalInt>

  return ret;
 800b0e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3720      	adds	r7, #32
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b0ec:	b590      	push	{r4, r7, lr}
 800b0ee:	b089      	sub	sp, #36	@ 0x24
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	2102      	movs	r1, #2
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fcd1 	bl	800baa2 <USBH_FindInterface>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	2bff      	cmp	r3, #255	@ 0xff
 800b108:	d002      	beq.n	800b110 <USBH_CDC_InterfaceInit+0x24>
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d901      	bls.n	800b114 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b110:	2302      	movs	r3, #2
 800b112:	e13d      	b.n	800b390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fca6 	bl	800ba6a <USBH_SelectInterface>
 800b11e:	4603      	mov	r3, r0
 800b120:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b128:	2302      	movs	r3, #2
 800b12a:	e131      	b.n	800b390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b132:	2050      	movs	r0, #80	@ 0x50
 800b134:	f006 fc28 	bl	8011988 <malloc>
 800b138:	4603      	mov	r3, r0
 800b13a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b14c:	2302      	movs	r3, #2
 800b14e:	e11f      	b.n	800b390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b150:	2250      	movs	r2, #80	@ 0x50
 800b152:	2100      	movs	r1, #0
 800b154:	68b8      	ldr	r0, [r7, #8]
 800b156:	f006 fe14 	bl	8011d82 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	211a      	movs	r1, #26
 800b160:	fb01 f303 	mul.w	r3, r1, r3
 800b164:	4413      	add	r3, r2
 800b166:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b25b      	sxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	da15      	bge.n	800b19e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	211a      	movs	r1, #26
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b182:	781a      	ldrb	r2, [r3, #0]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	211a      	movs	r1, #26
 800b18e:	fb01 f303 	mul.w	r3, r1, r3
 800b192:	4413      	add	r3, r2
 800b194:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b198:	881a      	ldrh	r2, [r3, #0]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	785b      	ldrb	r3, [r3, #1]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f002 fa18 	bl	800d5da <USBH_AllocPipe>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	7819      	ldrb	r1, [r3, #0]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	7858      	ldrb	r0, [r3, #1]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	8952      	ldrh	r2, [r2, #10]
 800b1ca:	9202      	str	r2, [sp, #8]
 800b1cc:	2203      	movs	r2, #3
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	4623      	mov	r3, r4
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f002 f9d0 	bl	800d57c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f006 fb49 	bl	801187c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	210a      	movs	r1, #10
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fc56 	bl	800baa2 <USBH_FindInterface>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	2bff      	cmp	r3, #255	@ 0xff
 800b1fe:	d002      	beq.n	800b206 <USBH_CDC_InterfaceInit+0x11a>
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d901      	bls.n	800b20a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b206:	2302      	movs	r3, #2
 800b208:	e0c2      	b.n	800b390 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	211a      	movs	r1, #26
 800b210:	fb01 f303 	mul.w	r3, r1, r3
 800b214:	4413      	add	r3, r2
 800b216:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b25b      	sxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	da16      	bge.n	800b250 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	211a      	movs	r1, #26
 800b228:	fb01 f303 	mul.w	r3, r1, r3
 800b22c:	4413      	add	r3, r2
 800b22e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	211a      	movs	r1, #26
 800b23e:	fb01 f303 	mul.w	r3, r1, r3
 800b242:	4413      	add	r3, r2
 800b244:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b248:	881a      	ldrh	r2, [r3, #0]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	835a      	strh	r2, [r3, #26]
 800b24e:	e015      	b.n	800b27c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	211a      	movs	r1, #26
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	4413      	add	r3, r2
 800b25c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b260:	781a      	ldrb	r2, [r3, #0]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	211a      	movs	r1, #26
 800b26c:	fb01 f303 	mul.w	r3, r1, r3
 800b270:	4413      	add	r3, r2
 800b272:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b276:	881a      	ldrh	r2, [r3, #0]
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	211a      	movs	r1, #26
 800b282:	fb01 f303 	mul.w	r3, r1, r3
 800b286:	4413      	add	r3, r2
 800b288:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	b25b      	sxtb	r3, r3
 800b290:	2b00      	cmp	r3, #0
 800b292:	da16      	bge.n	800b2c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	211a      	movs	r1, #26
 800b29a:	fb01 f303 	mul.w	r3, r1, r3
 800b29e:	4413      	add	r3, r2
 800b2a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b2a4:	781a      	ldrb	r2, [r3, #0]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	211a      	movs	r1, #26
 800b2b0:	fb01 f303 	mul.w	r3, r1, r3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b2ba:	881a      	ldrh	r2, [r3, #0]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	835a      	strh	r2, [r3, #26]
 800b2c0:	e015      	b.n	800b2ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	211a      	movs	r1, #26
 800b2c8:	fb01 f303 	mul.w	r3, r1, r3
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b2d2:	781a      	ldrb	r2, [r3, #0]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	211a      	movs	r1, #26
 800b2de:	fb01 f303 	mul.w	r3, r1, r3
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b2e8:	881a      	ldrh	r2, [r3, #0]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	7b9b      	ldrb	r3, [r3, #14]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f002 f970 	bl	800d5da <USBH_AllocPipe>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	7bdb      	ldrb	r3, [r3, #15]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f002 f966 	bl	800d5da <USBH_AllocPipe>
 800b30e:	4603      	mov	r3, r0
 800b310:	461a      	mov	r2, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	7b59      	ldrb	r1, [r3, #13]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	7b98      	ldrb	r0, [r3, #14]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	8b12      	ldrh	r2, [r2, #24]
 800b32e:	9202      	str	r2, [sp, #8]
 800b330:	2202      	movs	r2, #2
 800b332:	9201      	str	r2, [sp, #4]
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4623      	mov	r3, r4
 800b338:	4602      	mov	r2, r0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f002 f91e 	bl	800d57c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	7b19      	ldrb	r1, [r3, #12]
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	7bd8      	ldrb	r0, [r3, #15]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	8b52      	ldrh	r2, [r2, #26]
 800b358:	9202      	str	r2, [sp, #8]
 800b35a:	2202      	movs	r2, #2
 800b35c:	9201      	str	r2, [sp, #4]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	4623      	mov	r3, r4
 800b362:	4602      	mov	r2, r0
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f002 f909 	bl	800d57c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	7b5b      	ldrb	r3, [r3, #13]
 800b376:	2200      	movs	r2, #0
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f006 fa7e 	bl	801187c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	7b1b      	ldrb	r3, [r3, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f006 fa77 	bl	801187c <USBH_LL_SetToggle>

  return USBH_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	bd90      	pop	{r4, r7, pc}

0800b398 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00e      	beq.n	800b3d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f002 f8fe 	bl	800d5ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f002 f929 	bl	800d61c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	7b1b      	ldrb	r3, [r3, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00e      	beq.n	800b3f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	7b1b      	ldrb	r3, [r3, #12]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f002 f8eb 	bl	800d5ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	7b1b      	ldrb	r3, [r3, #12]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f002 f916 	bl	800d61c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	7b5b      	ldrb	r3, [r3, #13]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00e      	beq.n	800b41c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	7b5b      	ldrb	r3, [r3, #13]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f002 f8d8 	bl	800d5ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	7b5b      	ldrb	r3, [r3, #13]
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f002 f903 	bl	800d61c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b422:	69db      	ldr	r3, [r3, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00b      	beq.n	800b440 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	4618      	mov	r0, r3
 800b432:	f006 fab1 	bl	8011998 <free>
    phost->pActiveClass->pData = 0U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b43c:	2200      	movs	r2, #0
 800b43e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	3340      	adds	r3, #64	@ 0x40
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f8b1 	bl	800b5ca <GetLineCoding>
 800b468:	4603      	mov	r3, r0
 800b46a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b478:	2102      	movs	r1, #2
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b47e:	7afb      	ldrb	r3, [r7, #11]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	d877      	bhi.n	800b59c <USBH_CDC_Process+0x114>
 800b4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b4 <USBH_CDC_Process+0x2c>)
 800b4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b2:	bf00      	nop
 800b4b4:	0800b4c9 	.word	0x0800b4c9
 800b4b8:	0800b4cf 	.word	0x0800b4cf
 800b4bc:	0800b4ff 	.word	0x0800b4ff
 800b4c0:	0800b573 	.word	0x0800b573
 800b4c4:	0800b581 	.word	0x0800b581
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b4cc:	e06d      	b.n	800b5aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f897 	bl	800b608 <SetLineCoding>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d104      	bne.n	800b4ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b4ec:	e058      	b.n	800b5a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d055      	beq.n	800b5a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2204      	movs	r2, #4
 800b4f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800b4fc:	e050      	b.n	800b5a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	3340      	adds	r3, #64	@ 0x40
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f860 	bl	800b5ca <GetLineCoding>
 800b50a:	4603      	mov	r3, r0
 800b50c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d126      	bne.n	800b562 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d13b      	bne.n	800b5a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b536:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b538:	429a      	cmp	r2, r3
 800b53a:	d133      	bne.n	800b5a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b546:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b548:	429a      	cmp	r2, r3
 800b54a:	d12b      	bne.n	800b5a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b554:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b556:	429a      	cmp	r2, r3
 800b558:	d124      	bne.n	800b5a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f982 	bl	800b864 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b560:	e020      	b.n	800b5a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d01d      	beq.n	800b5a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2204      	movs	r2, #4
 800b56c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800b570:	e018      	b.n	800b5a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f867 	bl	800b646 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f8f6 	bl	800b76a <CDC_ProcessReception>
      break;
 800b57e:	e014      	b.n	800b5aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b580:	2100      	movs	r1, #0
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 f984 	bl	800c890 <USBH_ClrFeature>
 800b588:	4603      	mov	r3, r0
 800b58a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800b59a:	e005      	b.n	800b5a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800b59c:	bf00      	nop
 800b59e:	e004      	b.n	800b5aa <USBH_CDC_Process+0x122>
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e002      	b.n	800b5aa <USBH_CDC_Process+0x122>
      break;
 800b5a4:	bf00      	nop
 800b5a6:	e000      	b.n	800b5aa <USBH_CDC_Process+0x122>
      break;
 800b5a8:	bf00      	nop

  }

  return status;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	22a1      	movs	r2, #161	@ 0xa1
 800b5d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2221      	movs	r2, #33	@ 0x21
 800b5de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2207      	movs	r2, #7
 800b5f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2207      	movs	r2, #7
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 fc7e 	bl	800cefa <USBH_CtlReq>
 800b5fe:	4603      	mov	r3, r0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2221      	movs	r2, #33	@ 0x21
 800b616:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2220      	movs	r2, #32
 800b61c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2207      	movs	r2, #7
 800b62e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2207      	movs	r2, #7
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 fc5f 	bl	800cefa <USBH_CtlReq>
 800b63c:	4603      	mov	r3, r0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b086      	sub	sp, #24
 800b64a:	af02      	add	r7, sp, #8
 800b64c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b658:	2300      	movs	r3, #0
 800b65a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b662:	2b01      	cmp	r3, #1
 800b664:	d002      	beq.n	800b66c <CDC_ProcessTransmission+0x26>
 800b666:	2b02      	cmp	r3, #2
 800b668:	d023      	beq.n	800b6b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b66a:	e07a      	b.n	800b762 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	8b12      	ldrh	r2, [r2, #24]
 800b674:	4293      	cmp	r3, r2
 800b676:	d90b      	bls.n	800b690 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	69d9      	ldr	r1, [r3, #28]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8b1a      	ldrh	r2, [r3, #24]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	7b5b      	ldrb	r3, [r3, #13]
 800b684:	2001      	movs	r0, #1
 800b686:	9000      	str	r0, [sp, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 ff34 	bl	800d4f6 <USBH_BulkSendData>
 800b68e:	e00b      	b.n	800b6a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800b698:	b29a      	uxth	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	7b5b      	ldrb	r3, [r3, #13]
 800b69e:	2001      	movs	r0, #1
 800b6a0:	9000      	str	r0, [sp, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 ff27 	bl	800d4f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800b6b0:	e057      	b.n	800b762 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	7b5b      	ldrb	r3, [r3, #13]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f006 f8b5 	bl	8011828 <USBH_LL_GetURBState>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d136      	bne.n	800b736 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	8b12      	ldrh	r2, [r2, #24]
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d90e      	bls.n	800b6f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	8b12      	ldrh	r2, [r2, #24]
 800b6dc:	1a9a      	subs	r2, r3, r2
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	8b12      	ldrh	r2, [r2, #24]
 800b6ea:	441a      	add	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	61da      	str	r2, [r3, #28]
 800b6f0:	e002      	b.n	800b6f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d004      	beq.n	800b70a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800b708:	e006      	b.n	800b718 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f892 	bl	800b83c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2204      	movs	r2, #4
 800b71c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b72c:	2300      	movs	r3, #0
 800b72e:	2200      	movs	r2, #0
 800b730:	f002 fa34 	bl	800db9c <osMessageQueuePut>
      break;
 800b734:	e014      	b.n	800b760 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b736:	7afb      	ldrb	r3, [r7, #11]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d111      	bne.n	800b760 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2204      	movs	r2, #4
 800b748:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b758:	2300      	movs	r3, #0
 800b75a:	2200      	movs	r2, #0
 800b75c:	f002 fa1e 	bl	800db9c <osMessageQueuePut>
      break;
 800b760:	bf00      	nop
  }
}
 800b762:	bf00      	nop
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b086      	sub	sp, #24
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800b786:	2b03      	cmp	r3, #3
 800b788:	d002      	beq.n	800b790 <CDC_ProcessReception+0x26>
 800b78a:	2b04      	cmp	r3, #4
 800b78c:	d00e      	beq.n	800b7ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b78e:	e051      	b.n	800b834 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	6a19      	ldr	r1, [r3, #32]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	8b5a      	ldrh	r2, [r3, #26]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	7b1b      	ldrb	r3, [r3, #12]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f001 fecf 	bl	800d540 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800b7aa:	e043      	b.n	800b834 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	7b1b      	ldrb	r3, [r3, #12]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f006 f838 	bl	8011828 <USBH_LL_GetURBState>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b7bc:	7cfb      	ldrb	r3, [r7, #19]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d137      	bne.n	800b832 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	7b1b      	ldrb	r3, [r3, #12]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f005 ff9b 	bl	8011704 <USBH_LL_GetLastXferSize>
 800b7ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d016      	beq.n	800b808 <CDC_ProcessReception+0x9e>
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	8b5b      	ldrh	r3, [r3, #26]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d910      	bls.n	800b808 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	1ad2      	subs	r2, r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	6a1a      	ldr	r2, [r3, #32]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	441a      	add	r2, r3
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2203      	movs	r2, #3
 800b802:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800b806:	e006      	b.n	800b816 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f81d 	bl	800b850 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2204      	movs	r2, #4
 800b81a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b82a:	2300      	movs	r3, #0
 800b82c:	2200      	movs	r2, #0
 800b82e:	f002 f9b5 	bl	800db9c <osMessageQueuePut>
      break;
 800b832:	bf00      	nop
  }
}
 800b834:	bf00      	nop
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4613      	mov	r3, r2
 800b884:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b88c:	2302      	movs	r3, #2
 800b88e:	e044      	b.n	800b91a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	79fa      	ldrb	r2, [r7, #7]
 800b894:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 f841 	bl	800b930 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2104      	movs	r1, #4
 800b8e0:	2010      	movs	r0, #16
 800b8e2:	f002 f8e7 	bl	800dab4 <osMessageQueueNew>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b924 <USBH_Init+0xac>)
 800b8f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b928 <USBH_Init+0xb0>)
 800b8f2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <USBH_Init+0xac>)
 800b8f6:	2280      	movs	r2, #128	@ 0x80
 800b8f8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b924 <USBH_Init+0xac>)
 800b8fc:	2218      	movs	r2, #24
 800b8fe:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b900:	4a08      	ldr	r2, [pc, #32]	@ (800b924 <USBH_Init+0xac>)
 800b902:	68f9      	ldr	r1, [r7, #12]
 800b904:	4809      	ldr	r0, [pc, #36]	@ (800b92c <USBH_Init+0xb4>)
 800b906:	f001 ff59 	bl	800d7bc <osThreadNew>
 800b90a:	4602      	mov	r2, r0
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f005 fe42 	bl	801159c <USBH_LL_Init>

  return USBH_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20001f44 	.word	0x20001f44
 800b928:	080134a0 	.word	0x080134a0
 800b92c:	0800c5e1 	.word	0x0800c5e1

0800b930 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e009      	b.n	800b956 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	33e0      	adds	r3, #224	@ 0xe0
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	2200      	movs	r2, #0
 800b94e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3301      	adds	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b0f      	cmp	r3, #15
 800b95a:	d9f2      	bls.n	800b942 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b95c:	2300      	movs	r3, #0
 800b95e:	60fb      	str	r3, [r7, #12]
 800b960:	e009      	b.n	800b976 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4413      	add	r3, r2
 800b968:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3301      	adds	r3, #1
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b97c:	d3f1      	bcc.n	800b962 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2240      	movs	r2, #64	@ 0x40
 800b9a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	331c      	adds	r3, #28
 800b9ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f006 f9d4 	bl	8011d82 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b9e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f006 f9cb 	bl	8011d82 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b9f2:	2212      	movs	r2, #18
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f006 f9c3 	bl	8011d82 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ba02:	223e      	movs	r2, #62	@ 0x3e
 800ba04:	2100      	movs	r1, #0
 800ba06:	4618      	mov	r0, r3
 800ba08:	f006 f9bb 	bl	8011d82 <memset>

  return USBH_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d016      	beq.n	800ba58 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10e      	bne.n	800ba52 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ba3a:	1c59      	adds	r1, r3, #1
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	33de      	adds	r3, #222	@ 0xde
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
 800ba50:	e004      	b.n	800ba5c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ba52:	2302      	movs	r3, #2
 800ba54:	73fb      	strb	r3, [r7, #15]
 800ba56:	e001      	b.n	800ba5c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	460b      	mov	r3, r1
 800ba74:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ba80:	78fa      	ldrb	r2, [r7, #3]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d204      	bcs.n	800ba90 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	78fa      	ldrb	r2, [r7, #3]
 800ba8a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800ba8e:	e001      	b.n	800ba94 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ba90:	2302      	movs	r3, #2
 800ba92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b087      	sub	sp, #28
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	4608      	mov	r0, r1
 800baac:	4611      	mov	r1, r2
 800baae:	461a      	mov	r2, r3
 800bab0:	4603      	mov	r3, r0
 800bab2:	70fb      	strb	r3, [r7, #3]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70bb      	strb	r3, [r7, #2]
 800bab8:	4613      	mov	r3, r2
 800baba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bac0:	2300      	movs	r3, #0
 800bac2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800baca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bacc:	e025      	b.n	800bb1a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	221a      	movs	r2, #26
 800bad2:	fb02 f303 	mul.w	r3, r2, r3
 800bad6:	3308      	adds	r3, #8
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	3302      	adds	r3, #2
 800bade:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	795b      	ldrb	r3, [r3, #5]
 800bae4:	78fa      	ldrb	r2, [r7, #3]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d002      	beq.n	800baf0 <USBH_FindInterface+0x4e>
 800baea:	78fb      	ldrb	r3, [r7, #3]
 800baec:	2bff      	cmp	r3, #255	@ 0xff
 800baee:	d111      	bne.n	800bb14 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800baf4:	78ba      	ldrb	r2, [r7, #2]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d002      	beq.n	800bb00 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bafa:	78bb      	ldrb	r3, [r7, #2]
 800bafc:	2bff      	cmp	r3, #255	@ 0xff
 800bafe:	d109      	bne.n	800bb14 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bb04:	787a      	ldrb	r2, [r7, #1]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d002      	beq.n	800bb10 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bb0a:	787b      	ldrb	r3, [r7, #1]
 800bb0c:	2bff      	cmp	r3, #255	@ 0xff
 800bb0e:	d101      	bne.n	800bb14 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	e006      	b.n	800bb22 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
 800bb16:	3301      	adds	r3, #1
 800bb18:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d9d6      	bls.n	800bace <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bb20:	23ff      	movs	r3, #255	@ 0xff
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	371c      	adds	r7, #28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f005 fd6c 	bl	8011614 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f005 fe85 	bl	801184e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b088      	sub	sp, #32
 800bb54:	af04      	add	r7, sp, #16
 800bb56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bb58:	2302      	movs	r3, #2
 800bb5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d102      	bne.n	800bb72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b0b      	cmp	r3, #11
 800bb7a:	f200 8244 	bhi.w	800c006 <USBH_Process+0x4b6>
 800bb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb84 <USBH_Process+0x34>)
 800bb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb84:	0800bbb5 	.word	0x0800bbb5
 800bb88:	0800bc03 	.word	0x0800bc03
 800bb8c:	0800bc87 	.word	0x0800bc87
 800bb90:	0800bf85 	.word	0x0800bf85
 800bb94:	0800c007 	.word	0x0800c007
 800bb98:	0800bd43 	.word	0x0800bd43
 800bb9c:	0800bf0f 	.word	0x0800bf0f
 800bba0:	0800bd95 	.word	0x0800bd95
 800bba4:	0800bdd1 	.word	0x0800bdd1
 800bba8:	0800be09 	.word	0x0800be09
 800bbac:	0800be67 	.word	0x0800be67
 800bbb0:	0800bf6d 	.word	0x0800bf6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8224 	beq.w	800c00a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bbc8:	20c8      	movs	r0, #200	@ 0xc8
 800bbca:	f005 fe8a 	bl	80118e2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f005 fd7d 	bl	80116ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f001 ffce 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bc00:	e203      	b.n	800c00a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d107      	bne.n	800bc1c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	e025      	b.n	800bc68 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800bc22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc26:	d914      	bls.n	800bc52 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bc2e:	3301      	adds	r3, #1
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d903      	bls.n	800bc4a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	220d      	movs	r2, #13
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	e00e      	b.n	800bc68 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	e00a      	b.n	800bc68 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800bc58:	f103 020a 	add.w	r2, r3, #10
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800bc62:	200a      	movs	r0, #10
 800bc64:	f005 fe3d 	bl	80118e2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f001 ff8c 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800bc84:	e1c8      	b.n	800c018 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bc96:	2104      	movs	r1, #4
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bc9c:	2064      	movs	r0, #100	@ 0x64
 800bc9e:	f005 fe20 	bl	80118e2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f005 fcec 	bl	8011680 <USBH_LL_GetSpeed>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	461a      	mov	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2205      	movs	r2, #5
 800bcb6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 fc8d 	bl	800d5da <USBH_AllocPipe>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bcc8:	2180      	movs	r1, #128	@ 0x80
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 fc85 	bl	800d5da <USBH_AllocPipe>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	7919      	ldrb	r1, [r3, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bcec:	9202      	str	r2, [sp, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2280      	movs	r2, #128	@ 0x80
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 fc3f 	bl	800d57c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	7959      	ldrb	r1, [r3, #5]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd12:	9202      	str	r2, [sp, #8]
 800bd14:	2200      	movs	r2, #0
 800bd16:	9201      	str	r2, [sp, #4]
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f001 fc2c 	bl	800d57c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f001 ff2e 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800bd40:	e16a      	b.n	800c018 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f96e 	bl	800c024 <USBH_HandleEnum>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f040 815c 	bne.w	800c00e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d103      	bne.n	800bd70 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2208      	movs	r2, #8
 800bd6c:	701a      	strb	r2, [r3, #0]
 800bd6e:	e002      	b.n	800bd76 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2207      	movs	r2, #7
 800bd74:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2205      	movs	r2, #5
 800bd7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f001 ff05 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bd92:	e13c      	b.n	800c00e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 8139 	beq.w	800c012 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bda6:	2101      	movs	r1, #1
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2208      	movs	r2, #8
 800bdb0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f001 fee7 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800bdce:	e120      	b.n	800c012 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fd12 	bl	800c802 <USBH_SetCfg>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d102      	bne.n	800bdea <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2209      	movs	r2, #9
 800bde8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bdfe:	2300      	movs	r3, #0
 800be00:	2200      	movs	r2, #0
 800be02:	f001 fecb 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800be06:	e107      	b.n	800c018 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800be0e:	f003 0320 	and.w	r3, r3, #32
 800be12:	2b00      	cmp	r3, #0
 800be14:	d015      	beq.n	800be42 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be16:	2101      	movs	r1, #1
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fd15 	bl	800c848 <USBH_SetFeature>
 800be1e:	4603      	mov	r3, r0
 800be20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be22:	7bbb      	ldrb	r3, [r7, #14]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d103      	bne.n	800be32 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	220a      	movs	r2, #10
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	e00a      	b.n	800be48 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b03      	cmp	r3, #3
 800be38:	d106      	bne.n	800be48 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	220a      	movs	r2, #10
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	e002      	b.n	800be48 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	220a      	movs	r2, #10
 800be46:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800be5c:	2300      	movs	r3, #0
 800be5e:	2200      	movs	r2, #0
 800be60:	f001 fe9c 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800be64:	e0d8      	b.n	800c018 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d03f      	beq.n	800bef0 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be78:	2300      	movs	r3, #0
 800be7a:	73fb      	strb	r3, [r7, #15]
 800be7c:	e016      	b.n	800beac <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be7e:	7bfa      	ldrb	r2, [r7, #15]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	32de      	adds	r2, #222	@ 0xde
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	791a      	ldrb	r2, [r3, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800be90:	429a      	cmp	r2, r3
 800be92:	d108      	bne.n	800bea6 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800be94:	7bfa      	ldrb	r2, [r7, #15]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	32de      	adds	r2, #222	@ 0xde
 800be9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800bea4:	e005      	b.n	800beb2 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	3301      	adds	r3, #1
 800beaa:	73fb      	strb	r3, [r7, #15]
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0e5      	beq.n	800be7e <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d016      	beq.n	800beea <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	4798      	blx	r3
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d109      	bne.n	800bee2 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2206      	movs	r2, #6
 800bed2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800beda:	2103      	movs	r1, #3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	4798      	blx	r3
 800bee0:	e006      	b.n	800bef0 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	220d      	movs	r2, #13
 800bee6:	701a      	strb	r2, [r3, #0]
 800bee8:	e002      	b.n	800bef0 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	220d      	movs	r2, #13
 800beee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2205      	movs	r2, #5
 800bef4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bf04:	2300      	movs	r3, #0
 800bf06:	2200      	movs	r2, #0
 800bf08:	f001 fe48 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800bf0c:	e084      	b.n	800c018 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d017      	beq.n	800bf48 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	4798      	blx	r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d103      	bne.n	800bf38 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	220b      	movs	r2, #11
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	e00a      	b.n	800bf4e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d106      	bne.n	800bf4e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	220d      	movs	r2, #13
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	e002      	b.n	800bf4e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	220d      	movs	r2, #13
 800bf4c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2205      	movs	r2, #5
 800bf52:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bf62:	2300      	movs	r3, #0
 800bf64:	2200      	movs	r2, #0
 800bf66:	f001 fe19 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800bf6a:	e055      	b.n	800c018 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d04f      	beq.n	800c016 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	4798      	blx	r3
      }
      break;
 800bf82:	e048      	b.n	800c016 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fccf 	bl	800b930 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bfc0:	2105      	movs	r1, #5
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d107      	bne.n	800bfe2 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff fda7 	bl	800bb2e <USBH_Start>
 800bfe0:	e002      	b.n	800bfe8 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f005 fb16 	bl	8011614 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bffc:	2300      	movs	r3, #0
 800bffe:	2200      	movs	r2, #0
 800c000:	f001 fdcc 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      break;
 800c004:	e008      	b.n	800c018 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c006:	bf00      	nop
 800c008:	e006      	b.n	800c018 <USBH_Process+0x4c8>
      break;
 800c00a:	bf00      	nop
 800c00c:	e004      	b.n	800c018 <USBH_Process+0x4c8>
      break;
 800c00e:	bf00      	nop
 800c010:	e002      	b.n	800c018 <USBH_Process+0x4c8>
    break;
 800c012:	bf00      	nop
 800c014:	e000      	b.n	800c018 <USBH_Process+0x4c8>
      break;
 800c016:	bf00      	nop
  }
  return USBH_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop

0800c024 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af04      	add	r7, sp, #16
 800c02a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c02c:	2301      	movs	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c030:	2301      	movs	r3, #1
 800c032:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	785b      	ldrb	r3, [r3, #1]
 800c038:	2b07      	cmp	r3, #7
 800c03a:	f200 8204 	bhi.w	800c446 <USBH_HandleEnum+0x422>
 800c03e:	a201      	add	r2, pc, #4	@ (adr r2, 800c044 <USBH_HandleEnum+0x20>)
 800c040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c044:	0800c065 	.word	0x0800c065
 800c048:	0800c11f 	.word	0x0800c11f
 800c04c:	0800c189 	.word	0x0800c189
 800c050:	0800c213 	.word	0x0800c213
 800c054:	0800c27d 	.word	0x0800c27d
 800c058:	0800c2ed 	.word	0x0800c2ed
 800c05c:	0800c389 	.word	0x0800c389
 800c060:	0800c407 	.word	0x0800c407
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c064:	2108      	movs	r1, #8
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fae8 	bl	800c63c <USBH_Get_DevDesc>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d12e      	bne.n	800c0d4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	7919      	ldrb	r1, [r3, #4]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c09a:	9202      	str	r2, [sp, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	9201      	str	r2, [sp, #4]
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2280      	movs	r2, #128	@ 0x80
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 fa68 	bl	800d57c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	7959      	ldrb	r1, [r3, #5]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c0c0:	9202      	str	r2, [sp, #8]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	9201      	str	r2, [sp, #4]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 fa55 	bl	800d57c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c0d2:	e1ba      	b.n	800c44a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	f040 81b7 	bne.w	800c44a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c0f2:	2b03      	cmp	r3, #3
 800c0f4:	d903      	bls.n	800c0fe <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	220d      	movs	r2, #13
 800c0fa:	701a      	strb	r2, [r3, #0]
      break;
 800c0fc:	e1a5      	b.n	800c44a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	795b      	ldrb	r3, [r3, #5]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 fa89 	bl	800d61c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	791b      	ldrb	r3, [r3, #4]
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 fa83 	bl	800d61c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	701a      	strb	r2, [r3, #0]
      break;
 800c11c:	e195      	b.n	800c44a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c11e:	2112      	movs	r1, #18
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fa8b 	bl	800c63c <USBH_Get_DevDesc>
 800c126:	4603      	mov	r3, r0
 800c128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c12a:	7bbb      	ldrb	r3, [r7, #14]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d103      	bne.n	800c138 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2202      	movs	r2, #2
 800c134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c136:	e18a      	b.n	800c44e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	f040 8187 	bne.w	800c44e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c146:	3301      	adds	r3, #1
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c156:	2b03      	cmp	r3, #3
 800c158:	d903      	bls.n	800c162 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	220d      	movs	r2, #13
 800c15e:	701a      	strb	r2, [r3, #0]
      break;
 800c160:	e175      	b.n	800c44e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	795b      	ldrb	r3, [r3, #5]
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 fa57 	bl	800d61c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	791b      	ldrb	r3, [r3, #4]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f001 fa51 	bl	800d61c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	701a      	strb	r2, [r3, #0]
      break;
 800c186:	e162      	b.n	800c44e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c188:	2101      	movs	r1, #1
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fb15 	bl	800c7ba <USBH_SetAddress>
 800c190:	4603      	mov	r3, r0
 800c192:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d130      	bne.n	800c1fc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c19a:	2002      	movs	r0, #2
 800c19c:	f005 fba1 	bl	80118e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	7919      	ldrb	r1, [r3, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1c2:	9202      	str	r2, [sp, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	9201      	str	r2, [sp, #4]
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2280      	movs	r2, #128	@ 0x80
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 f9d4 	bl	800d57c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	7959      	ldrb	r1, [r3, #5]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1e8:	9202      	str	r2, [sp, #8]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	9201      	str	r2, [sp, #4]
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 f9c1 	bl	800d57c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1fa:	e12a      	b.n	800c452 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	f040 8127 	bne.w	800c452 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	220d      	movs	r2, #13
 800c208:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	705a      	strb	r2, [r3, #1]
      break;
 800c210:	e11f      	b.n	800c452 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c212:	2109      	movs	r1, #9
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fa3d 	bl	800c694 <USBH_Get_CfgDesc>
 800c21a:	4603      	mov	r3, r0
 800c21c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c21e:	7bbb      	ldrb	r3, [r7, #14]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d103      	bne.n	800c22c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2204      	movs	r2, #4
 800c228:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c22a:	e114      	b.n	800c456 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	2b03      	cmp	r3, #3
 800c230:	f040 8111 	bne.w	800c456 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d903      	bls.n	800c256 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	220d      	movs	r2, #13
 800c252:	701a      	strb	r2, [r3, #0]
      break;
 800c254:	e0ff      	b.n	800c456 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	795b      	ldrb	r3, [r3, #5]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 f9dd 	bl	800d61c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	791b      	ldrb	r3, [r3, #4]
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 f9d7 	bl	800d61c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	701a      	strb	r2, [r3, #0]
      break;
 800c27a:	e0ec      	b.n	800c456 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fa05 	bl	800c694 <USBH_Get_CfgDesc>
 800c28a:	4603      	mov	r3, r0
 800c28c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d103      	bne.n	800c29c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2205      	movs	r2, #5
 800c298:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c29a:	e0de      	b.n	800c45a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	f040 80db 	bne.w	800c45a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d903      	bls.n	800c2c6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	220d      	movs	r2, #13
 800c2c2:	701a      	strb	r2, [r3, #0]
      break;
 800c2c4:	e0c9      	b.n	800c45a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	795b      	ldrb	r3, [r3, #5]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f001 f9a5 	bl	800d61c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	791b      	ldrb	r3, [r3, #4]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 f99f 	bl	800d61c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	701a      	strb	r2, [r3, #0]
      break;
 800c2ea:	e0b6      	b.n	800c45a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d036      	beq.n	800c364 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c302:	23ff      	movs	r3, #255	@ 0xff
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f9ef 	bl	800c6e8 <USBH_Get_StringDesc>
 800c30a:	4603      	mov	r3, r0
 800c30c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d111      	bne.n	800c338 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2206      	movs	r2, #6
 800c318:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2205      	movs	r2, #5
 800c31e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c32e:	2300      	movs	r3, #0
 800c330:	2200      	movs	r2, #0
 800c332:	f001 fc33 	bl	800db9c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c336:	e092      	b.n	800c45e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	f040 808f 	bne.w	800c45e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2206      	movs	r2, #6
 800c344:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2205      	movs	r2, #5
 800c34a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c35a:	2300      	movs	r3, #0
 800c35c:	2200      	movs	r2, #0
 800c35e:	f001 fc1d 	bl	800db9c <osMessageQueuePut>
      break;
 800c362:	e07c      	b.n	800c45e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2206      	movs	r2, #6
 800c368:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2205      	movs	r2, #5
 800c36e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c37e:	2300      	movs	r3, #0
 800c380:	2200      	movs	r2, #0
 800c382:	f001 fc0b 	bl	800db9c <osMessageQueuePut>
      break;
 800c386:	e06a      	b.n	800c45e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d027      	beq.n	800c3e2 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c39e:	23ff      	movs	r3, #255	@ 0xff
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 f9a1 	bl	800c6e8 <USBH_Get_StringDesc>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d103      	bne.n	800c3b8 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2207      	movs	r2, #7
 800c3b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c3b6:	e054      	b.n	800c462 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d151      	bne.n	800c462 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2207      	movs	r2, #7
 800c3c2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2205      	movs	r2, #5
 800c3c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c3d8:	2300      	movs	r3, #0
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f001 fbde 	bl	800db9c <osMessageQueuePut>
      break;
 800c3e0:	e03f      	b.n	800c462 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2207      	movs	r2, #7
 800c3e6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2205      	movs	r2, #5
 800c3ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	2200      	movs	r2, #0
 800c400:	f001 fbcc 	bl	800db9c <osMessageQueuePut>
      break;
 800c404:	e02d      	b.n	800c462 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d017      	beq.n	800c440 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c41c:	23ff      	movs	r3, #255	@ 0xff
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f962 	bl	800c6e8 <USBH_Get_StringDesc>
 800c424:	4603      	mov	r3, r0
 800c426:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d102      	bne.n	800c434 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c432:	e018      	b.n	800c466 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	2b03      	cmp	r3, #3
 800c438:	d115      	bne.n	800c466 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
      break;
 800c43e:	e012      	b.n	800c466 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
      break;
 800c444:	e00f      	b.n	800c466 <USBH_HandleEnum+0x442>

    default:
      break;
 800c446:	bf00      	nop
 800c448:	e00e      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c44a:	bf00      	nop
 800c44c:	e00c      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c44e:	bf00      	nop
 800c450:	e00a      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c452:	bf00      	nop
 800c454:	e008      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c456:	bf00      	nop
 800c458:	e006      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c45a:	bf00      	nop
 800c45c:	e004      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c45e:	bf00      	nop
 800c460:	e002      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c462:	bf00      	nop
 800c464:	e000      	b.n	800c468 <USBH_HandleEnum+0x444>
      break;
 800c466:	bf00      	nop
  }
  return Status;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop

0800c474 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800c486:	bf00      	nop
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f804 	bl	800c4b6 <USBH_HandleSof>
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b0b      	cmp	r3, #11
 800c4c6:	d10a      	bne.n	800c4de <USBH_HandleSof+0x28>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	4798      	blx	r3
  }
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c50a:	2300      	movs	r3, #0
 800c50c:	2200      	movs	r2, #0
 800c50e:	f001 fb45 	bl	800db9c <osMessageQueuePut>
#endif
#endif

  return;
 800c512:	bf00      	nop
}
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c52a:	bf00      	nop
}
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c56a:	2300      	movs	r3, #0
 800c56c:	2200      	movs	r2, #0
 800c56e:	f001 fb15 	bl	800db9c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f005 f854 	bl	801164a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	791b      	ldrb	r3, [r3, #4]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f001 f837 	bl	800d61c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	795b      	ldrb	r3, [r3, #5]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f001 f831 	bl	800d61c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f001 fae3 	bl	800db9c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c5f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f001 fb2f 	bl	800dc5c <osMessageQueueGet>
 800c5fe:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1f0      	bne.n	800c5e8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff faa2 	bl	800bb50 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c60c:	e7ec      	b.n	800c5e8 <USBH_Process_OS+0x8>

0800c60e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b082      	sub	sp, #8
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800c62a:	2300      	movs	r3, #0
 800c62c:	2200      	movs	r2, #0
 800c62e:	f001 fab5 	bl	800db9c <osMessageQueuePut>
#endif

  return USBH_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af02      	add	r7, sp, #8
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	460b      	mov	r3, r1
 800c646:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c648:	887b      	ldrh	r3, [r7, #2]
 800c64a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c64e:	d901      	bls.n	800c654 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c650:	2303      	movs	r3, #3
 800c652:	e01b      	b.n	800c68c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c65a:	887b      	ldrh	r3, [r7, #2]
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	4613      	mov	r3, r2
 800c660:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c664:	2100      	movs	r1, #0
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f872 	bl	800c750 <USBH_GetDescriptor>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d109      	bne.n	800c68a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c67c:	887a      	ldrh	r2, [r7, #2]
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f929 	bl	800c8d8 <USBH_ParseDevDesc>
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af02      	add	r7, sp, #8
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	331c      	adds	r3, #28
 800c6a4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c6a6:	887b      	ldrh	r3, [r7, #2]
 800c6a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6ac:	d901      	bls.n	800c6b2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c6ae:	2303      	movs	r3, #3
 800c6b0:	e016      	b.n	800c6e0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c6b2:	887b      	ldrh	r3, [r7, #2]
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6bc:	2100      	movs	r1, #0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f846 	bl	800c750 <USBH_GetDescriptor>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d107      	bne.n	800c6de <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c6ce:	887b      	ldrh	r3, [r7, #2]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	68b9      	ldr	r1, [r7, #8]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f9af 	bl	800ca38 <USBH_ParseCfgDesc>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af02      	add	r7, sp, #8
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	607a      	str	r2, [r7, #4]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	72fb      	strb	r3, [r7, #11]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c6fc:	893b      	ldrh	r3, [r7, #8]
 800c6fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c702:	d802      	bhi.n	800c70a <USBH_Get_StringDesc+0x22>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e01c      	b.n	800c748 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c70e:	7afb      	ldrb	r3, [r7, #11]
 800c710:	b29b      	uxth	r3, r3
 800c712:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c716:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c71e:	893b      	ldrh	r3, [r7, #8]
 800c720:	9300      	str	r3, [sp, #0]
 800c722:	460b      	mov	r3, r1
 800c724:	2100      	movs	r1, #0
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f000 f812 	bl	800c750 <USBH_GetDescriptor>
 800c72c:	4603      	mov	r3, r0
 800c72e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c730:	7dfb      	ldrb	r3, [r7, #23]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d107      	bne.n	800c746 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c73c:	893a      	ldrh	r2, [r7, #8]
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fb8d 	bl	800ce60 <USBH_ParseStringDesc>
  }

  return status;
 800c746:	7dfb      	ldrb	r3, [r7, #23]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	607b      	str	r3, [r7, #4]
 800c75a:	460b      	mov	r3, r1
 800c75c:	72fb      	strb	r3, [r7, #11]
 800c75e:	4613      	mov	r3, r2
 800c760:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	789b      	ldrb	r3, [r3, #2]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d11c      	bne.n	800c7a4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c76a:	7afb      	ldrb	r3, [r7, #11]
 800c76c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c770:	b2da      	uxtb	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2206      	movs	r2, #6
 800c77a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	893a      	ldrh	r2, [r7, #8]
 800c780:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c782:	893b      	ldrh	r3, [r7, #8]
 800c784:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c78c:	d104      	bne.n	800c798 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f240 4209 	movw	r2, #1033	@ 0x409
 800c794:	829a      	strh	r2, [r3, #20]
 800c796:	e002      	b.n	800c79e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	8b3a      	ldrh	r2, [r7, #24]
 800c7a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c7a4:	8b3b      	ldrh	r3, [r7, #24]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 fba5 	bl	800cefa <USBH_CtlReq>
 800c7b0:	4603      	mov	r3, r0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	789b      	ldrb	r3, [r3, #2]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d10f      	bne.n	800c7ee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2205      	movs	r2, #5
 800c7d8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c7da:	78fb      	ldrb	r3, [r7, #3]
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fb81 	bl	800cefa <USBH_CtlReq>
 800c7f8:	4603      	mov	r3, r0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	789b      	ldrb	r3, [r3, #2]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d10e      	bne.n	800c834 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2209      	movs	r2, #9
 800c820:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	887a      	ldrh	r2, [r7, #2]
 800c826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fb5e 	bl	800cefa <USBH_CtlReq>
 800c83e:	4603      	mov	r3, r0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	460b      	mov	r3, r1
 800c852:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	789b      	ldrb	r3, [r3, #2]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d10f      	bne.n	800c87c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2203      	movs	r2, #3
 800c866:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c87c:	2200      	movs	r2, #0
 800c87e:	2100      	movs	r1, #0
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fb3a 	bl	800cefa <USBH_CtlReq>
 800c886:	4603      	mov	r3, r0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	789b      	ldrb	r3, [r3, #2]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d10f      	bne.n	800c8c4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c8b6:	78fb      	ldrb	r3, [r7, #3]
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fb16 	bl	800cefa <USBH_CtlReq>
 800c8ce:	4603      	mov	r3, r0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3708      	adds	r7, #8
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c8ec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	e094      	b.n	800ca26 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	781a      	ldrb	r2, [r3, #0]
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	785a      	ldrb	r2, [r3, #1]
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	3302      	adds	r3, #2
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	3303      	adds	r3, #3
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	021b      	lsls	r3, r3, #8
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4313      	orrs	r3, r2
 800c920:	b29a      	uxth	r2, r3
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	791a      	ldrb	r2, [r3, #4]
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	795a      	ldrb	r2, [r3, #5]
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	799a      	ldrb	r2, [r3, #6]
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	79da      	ldrb	r2, [r3, #7]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d004      	beq.n	800c95a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c956:	2b01      	cmp	r3, #1
 800c958:	d11b      	bne.n	800c992 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	79db      	ldrb	r3, [r3, #7]
 800c95e:	2b20      	cmp	r3, #32
 800c960:	dc0f      	bgt.n	800c982 <USBH_ParseDevDesc+0xaa>
 800c962:	2b08      	cmp	r3, #8
 800c964:	db0f      	blt.n	800c986 <USBH_ParseDevDesc+0xae>
 800c966:	3b08      	subs	r3, #8
 800c968:	4a32      	ldr	r2, [pc, #200]	@ (800ca34 <USBH_ParseDevDesc+0x15c>)
 800c96a:	fa22 f303 	lsr.w	r3, r2, r3
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	bf14      	ite	ne
 800c976:	2301      	movne	r3, #1
 800c978:	2300      	moveq	r3, #0
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d106      	bne.n	800c98e <USBH_ParseDevDesc+0xb6>
 800c980:	e001      	b.n	800c986 <USBH_ParseDevDesc+0xae>
 800c982:	2b40      	cmp	r3, #64	@ 0x40
 800c984:	d003      	beq.n	800c98e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	2208      	movs	r2, #8
 800c98a:	71da      	strb	r2, [r3, #7]
        break;
 800c98c:	e000      	b.n	800c990 <USBH_ParseDevDesc+0xb8>
        break;
 800c98e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c990:	e00e      	b.n	800c9b0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d107      	bne.n	800c9ac <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	79db      	ldrb	r3, [r3, #7]
 800c9a0:	2b08      	cmp	r3, #8
 800c9a2:	d005      	beq.n	800c9b0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	2208      	movs	r2, #8
 800c9a8:	71da      	strb	r2, [r3, #7]
 800c9aa:	e001      	b.n	800c9b0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c9b0:	88fb      	ldrh	r3, [r7, #6]
 800c9b2:	2b08      	cmp	r3, #8
 800c9b4:	d936      	bls.n	800ca24 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	3309      	adds	r3, #9
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	330a      	adds	r3, #10
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	330b      	adds	r3, #11
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	021b      	lsls	r3, r3, #8
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	330c      	adds	r3, #12
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	330d      	adds	r3, #13
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	021b      	lsls	r3, r3, #8
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	7b9a      	ldrb	r2, [r3, #14]
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	7bda      	ldrb	r2, [r3, #15]
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	7c1a      	ldrb	r2, [r3, #16]
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	7c5a      	ldrb	r2, [r3, #17]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	371c      	adds	r7, #28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	01000101 	.word	0x01000101

0800ca38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08c      	sub	sp, #48	@ 0x30
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	4613      	mov	r3, r2
 800ca44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ca4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ca66:	2302      	movs	r3, #2
 800ca68:	e0da      	b.n	800cc20 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	781a      	ldrb	r2, [r3, #0]
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	785a      	ldrb	r2, [r3, #1]
 800ca7a:	6a3b      	ldr	r3, [r7, #32]
 800ca7c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	3302      	adds	r3, #2
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	3303      	adds	r3, #3
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	021b      	lsls	r3, r3, #8
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	4313      	orrs	r3, r2
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca98:	bf28      	it	cs
 800ca9a:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	791a      	ldrb	r2, [r3, #4]
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	795a      	ldrb	r2, [r3, #5]
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	799a      	ldrb	r2, [r3, #6]
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	79da      	ldrb	r2, [r3, #7]
 800cac0:	6a3b      	ldr	r3, [r7, #32]
 800cac2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	7a1a      	ldrb	r2, [r3, #8]
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	2b09      	cmp	r3, #9
 800cad2:	d002      	beq.n	800cada <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	2209      	movs	r2, #9
 800cad8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cada:	88fb      	ldrh	r3, [r7, #6]
 800cadc:	2b09      	cmp	r3, #9
 800cade:	f240 809d 	bls.w	800cc1c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800cae2:	2309      	movs	r3, #9
 800cae4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800caea:	e081      	b.n	800cbf0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800caec:	f107 0316 	add.w	r3, r7, #22
 800caf0:	4619      	mov	r1, r3
 800caf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caf4:	f000 f9e7 	bl	800cec6 <USBH_GetNextDesc>
 800caf8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800cafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafc:	785b      	ldrb	r3, [r3, #1]
 800cafe:	2b04      	cmp	r3, #4
 800cb00:	d176      	bne.n	800cbf0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b09      	cmp	r3, #9
 800cb08:	d002      	beq.n	800cb10 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800cb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0c:	2209      	movs	r2, #9
 800cb0e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800cb10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb14:	221a      	movs	r2, #26
 800cb16:	fb02 f303 	mul.w	r3, r2, r3
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	6a3a      	ldr	r2, [r7, #32]
 800cb1e:	4413      	add	r3, r2
 800cb20:	3302      	adds	r3, #2
 800cb22:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cb24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb26:	69f8      	ldr	r0, [r7, #28]
 800cb28:	f000 f87e 	bl	800cc28 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cb32:	2300      	movs	r3, #0
 800cb34:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb36:	e043      	b.n	800cbc0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cb38:	f107 0316 	add.w	r3, r7, #22
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb40:	f000 f9c1 	bl	800cec6 <USBH_GetNextDesc>
 800cb44:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb48:	785b      	ldrb	r3, [r3, #1]
 800cb4a:	2b05      	cmp	r3, #5
 800cb4c:	d138      	bne.n	800cbc0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	795b      	ldrb	r3, [r3, #5]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d113      	bne.n	800cb7e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d003      	beq.n	800cb66 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	799b      	ldrb	r3, [r3, #6]
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d10b      	bne.n	800cb7e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	79db      	ldrb	r3, [r3, #7]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10b      	bne.n	800cb86 <USBH_ParseCfgDesc+0x14e>
 800cb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b09      	cmp	r3, #9
 800cb74:	d007      	beq.n	800cb86 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	2209      	movs	r2, #9
 800cb7a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb7c:	e003      	b.n	800cb86 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb80:	2207      	movs	r2, #7
 800cb82:	701a      	strb	r2, [r3, #0]
 800cb84:	e000      	b.n	800cb88 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb86:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cb88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb8c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cb90:	3201      	adds	r2, #1
 800cb92:	00d2      	lsls	r2, r2, #3
 800cb94:	211a      	movs	r1, #26
 800cb96:	fb01 f303 	mul.w	r3, r1, r3
 800cb9a:	4413      	add	r3, r2
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	6a3a      	ldr	r2, [r7, #32]
 800cba0:	4413      	add	r3, r2
 800cba2:	3304      	adds	r3, #4
 800cba4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cba8:	69b9      	ldr	r1, [r7, #24]
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f000 f870 	bl	800cc90 <USBH_ParseEPDesc>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800cbb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbba:	3301      	adds	r3, #1
 800cbbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	791b      	ldrb	r3, [r3, #4]
 800cbc4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d204      	bcs.n	800cbd6 <USBH_ParseCfgDesc+0x19e>
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	885a      	ldrh	r2, [r3, #2]
 800cbd0:	8afb      	ldrh	r3, [r7, #22]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d8b0      	bhi.n	800cb38 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	791b      	ldrb	r3, [r3, #4]
 800cbda:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d201      	bcs.n	800cbe6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e01c      	b.n	800cc20 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800cbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbea:	3301      	adds	r3, #1
 800cbec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d805      	bhi.n	800cc04 <USBH_ParseCfgDesc+0x1cc>
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	885a      	ldrh	r2, [r3, #2]
 800cbfc:	8afb      	ldrh	r3, [r7, #22]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	f63f af74 	bhi.w	800caec <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	791b      	ldrb	r3, [r3, #4]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	bf28      	it	cs
 800cc0c:	2302      	movcs	r3, #2
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d201      	bcs.n	800cc1c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e001      	b.n	800cc20 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800cc1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3730      	adds	r7, #48	@ 0x30
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	785a      	ldrb	r2, [r3, #1]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	789a      	ldrb	r2, [r3, #2]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	78da      	ldrb	r2, [r3, #3]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	3304      	adds	r3, #4
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	bf28      	it	cs
 800cc5c:	2302      	movcs	r3, #2
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	795a      	ldrb	r2, [r3, #5]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	799a      	ldrb	r2, [r3, #6]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	79da      	ldrb	r2, [r3, #7]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	7a1a      	ldrb	r2, [r3, #8]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	721a      	strb	r2, [r3, #8]
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	781a      	ldrb	r2, [r3, #0]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	785a      	ldrb	r2, [r3, #1]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	789a      	ldrb	r2, [r3, #2]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	78da      	ldrb	r2, [r3, #3]
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	3305      	adds	r3, #5
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	799a      	ldrb	r2, [r3, #6]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	889b      	ldrh	r3, [r3, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ccee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccf2:	d804      	bhi.n	800ccfe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ccf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccfc:	d901      	bls.n	800cd02 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d136      	bne.n	800cd7a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	78db      	ldrb	r3, [r3, #3]
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d108      	bne.n	800cd2a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	889b      	ldrh	r3, [r3, #4]
 800cd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd20:	f240 8097 	bls.w	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cd24:	2303      	movs	r3, #3
 800cd26:	75fb      	strb	r3, [r7, #23]
 800cd28:	e093      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	78db      	ldrb	r3, [r3, #3]
 800cd2e:	f003 0303 	and.w	r3, r3, #3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d107      	bne.n	800cd46 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	889b      	ldrh	r3, [r3, #4]
 800cd3a:	2b40      	cmp	r3, #64	@ 0x40
 800cd3c:	f240 8089 	bls.w	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cd40:	2303      	movs	r3, #3
 800cd42:	75fb      	strb	r3, [r7, #23]
 800cd44:	e085      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	78db      	ldrb	r3, [r3, #3]
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d005      	beq.n	800cd5e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	78db      	ldrb	r3, [r3, #3]
 800cd56:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d10a      	bne.n	800cd74 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	799b      	ldrb	r3, [r3, #6]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <USBH_ParseEPDesc+0xde>
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	799b      	ldrb	r3, [r3, #6]
 800cd6a:	2b10      	cmp	r3, #16
 800cd6c:	d970      	bls.n	800ce50 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd72:	e06d      	b.n	800ce50 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800cd74:	2303      	movs	r3, #3
 800cd76:	75fb      	strb	r3, [r7, #23]
 800cd78:	e06b      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d13c      	bne.n	800cdfe <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	78db      	ldrb	r3, [r3, #3]
 800cd88:	f003 0303 	and.w	r3, r3, #3
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d005      	beq.n	800cd9c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	78db      	ldrb	r3, [r3, #3]
 800cd94:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	889b      	ldrh	r3, [r3, #4]
 800cda0:	2b40      	cmp	r3, #64	@ 0x40
 800cda2:	d956      	bls.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cda4:	2303      	movs	r3, #3
 800cda6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800cda8:	e053      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	78db      	ldrb	r3, [r3, #3]
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d10e      	bne.n	800cdd4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	799b      	ldrb	r3, [r3, #6]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d007      	beq.n	800cdce <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800cdc2:	2b10      	cmp	r3, #16
 800cdc4:	d803      	bhi.n	800cdce <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800cdca:	2b40      	cmp	r3, #64	@ 0x40
 800cdcc:	d941      	bls.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	75fb      	strb	r3, [r7, #23]
 800cdd2:	e03e      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	78db      	ldrb	r3, [r3, #3]
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	d10b      	bne.n	800cdf8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	799b      	ldrb	r3, [r3, #6]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <USBH_ParseEPDesc+0x162>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	889b      	ldrh	r3, [r3, #4]
 800cdec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdf0:	d32f      	bcc.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	75fb      	strb	r3, [r7, #23]
 800cdf6:	e02c      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	75fb      	strb	r3, [r7, #23]
 800cdfc:	e029      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d120      	bne.n	800ce4a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	78db      	ldrb	r3, [r3, #3]
 800ce0c:	f003 0303 	and.w	r3, r3, #3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d106      	bne.n	800ce22 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	889b      	ldrh	r3, [r3, #4]
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d01a      	beq.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	75fb      	strb	r3, [r7, #23]
 800ce20:	e017      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	78db      	ldrb	r3, [r3, #3]
 800ce26:	f003 0303 	and.w	r3, r3, #3
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d10a      	bne.n	800ce44 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	799b      	ldrb	r3, [r3, #6]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <USBH_ParseEPDesc+0x1ae>
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	889b      	ldrh	r3, [r3, #4]
 800ce3a:	2b08      	cmp	r3, #8
 800ce3c:	d909      	bls.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	75fb      	strb	r3, [r7, #23]
 800ce42:	e006      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ce44:	2303      	movs	r3, #3
 800ce46:	75fb      	strb	r3, [r7, #23]
 800ce48:	e003      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	75fb      	strb	r3, [r7, #23]
 800ce4e:	e000      	b.n	800ce52 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ce50:	bf00      	nop
  }

  return status;
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	371c      	adds	r7, #28
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3301      	adds	r3, #1
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d120      	bne.n	800ceba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	1e9a      	subs	r2, r3, #2
 800ce7e:	88fb      	ldrh	r3, [r7, #6]
 800ce80:	4293      	cmp	r3, r2
 800ce82:	bf28      	it	cs
 800ce84:	4613      	movcs	r3, r2
 800ce86:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3302      	adds	r3, #2
 800ce8c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ce8e:	2300      	movs	r3, #0
 800ce90:	82fb      	strh	r3, [r7, #22]
 800ce92:	e00b      	b.n	800ceac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ce94:	8afb      	ldrh	r3, [r7, #22]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	4413      	add	r3, r2
 800ce9a:	781a      	ldrb	r2, [r3, #0]
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3301      	adds	r3, #1
 800cea4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cea6:	8afb      	ldrh	r3, [r7, #22]
 800cea8:	3302      	adds	r3, #2
 800ceaa:	82fb      	strh	r3, [r7, #22]
 800ceac:	8afa      	ldrh	r2, [r7, #22]
 800ceae:	8abb      	ldrh	r3, [r7, #20]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d3ef      	bcc.n	800ce94 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
  }
}
 800ceba:	bf00      	nop
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cec6:	b480      	push	{r7}
 800cec8:	b085      	sub	sp, #20
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	7812      	ldrb	r2, [r2, #0]
 800ced8:	4413      	add	r3, r2
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4413      	add	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ceec:	68fb      	ldr	r3, [r7, #12]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b086      	sub	sp, #24
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	60f8      	str	r0, [r7, #12]
 800cf02:	60b9      	str	r1, [r7, #8]
 800cf04:	4613      	mov	r3, r2
 800cf06:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	789b      	ldrb	r3, [r3, #2]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d002      	beq.n	800cf1a <USBH_CtlReq+0x20>
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d01d      	beq.n	800cf54 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800cf18:	e043      	b.n	800cfa2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	88fa      	ldrh	r2, [r7, #6]
 800cf24:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2202      	movs	r2, #2
 800cf30:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cf32:	2301      	movs	r3, #1
 800cf34:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f000 fe25 	bl	800db9c <osMessageQueuePut>
      break;
 800cf52:	e026      	b.n	800cfa2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f829 	bl	800cfac <USBH_HandleControl>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <USBH_CtlReq+0x70>
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d106      	bne.n	800cf78 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	761a      	strb	r2, [r3, #24]
 800cf76:	e005      	b.n	800cf84 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d102      	bne.n	800cf84 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2201      	movs	r2, #1
 800cf82:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2203      	movs	r2, #3
 800cf88:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800cf98:	2300      	movs	r3, #0
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f000 fdfe 	bl	800db9c <osMessageQueuePut>
      break;
 800cfa0:	bf00      	nop
  }
  return status;
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3718      	adds	r7, #24
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7e1b      	ldrb	r3, [r3, #24]
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	2b0a      	cmp	r3, #10
 800cfc4:	f200 8229 	bhi.w	800d41a <USBH_HandleControl+0x46e>
 800cfc8:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd0 <USBH_HandleControl+0x24>)
 800cfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfce:	bf00      	nop
 800cfd0:	0800cffd 	.word	0x0800cffd
 800cfd4:	0800d017 	.word	0x0800d017
 800cfd8:	0800d0b9 	.word	0x0800d0b9
 800cfdc:	0800d0df 	.word	0x0800d0df
 800cfe0:	0800d16b 	.word	0x0800d16b
 800cfe4:	0800d195 	.word	0x0800d195
 800cfe8:	0800d257 	.word	0x0800d257
 800cfec:	0800d279 	.word	0x0800d279
 800cff0:	0800d30b 	.word	0x0800d30b
 800cff4:	0800d331 	.word	0x0800d331
 800cff8:	0800d3c3 	.word	0x0800d3c3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f103 0110 	add.w	r1, r3, #16
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	795b      	ldrb	r3, [r3, #5]
 800d006:	461a      	mov	r2, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fa17 	bl	800d43c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2202      	movs	r2, #2
 800d012:	761a      	strb	r2, [r3, #24]
      break;
 800d014:	e20c      	b.n	800d430 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	795b      	ldrb	r3, [r3, #5]
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f004 fc03 	bl	8011828 <USBH_LL_GetURBState>
 800d022:	4603      	mov	r3, r0
 800d024:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d12c      	bne.n	800d086 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7c1b      	ldrb	r3, [r3, #16]
 800d030:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d034:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	8adb      	ldrh	r3, [r3, #22]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00a      	beq.n	800d054 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d03e:	7b7b      	ldrb	r3, [r7, #13]
 800d040:	2b80      	cmp	r3, #128	@ 0x80
 800d042:	d103      	bne.n	800d04c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2203      	movs	r2, #3
 800d048:	761a      	strb	r2, [r3, #24]
 800d04a:	e00d      	b.n	800d068 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2205      	movs	r2, #5
 800d050:	761a      	strb	r2, [r3, #24]
 800d052:	e009      	b.n	800d068 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d054:	7b7b      	ldrb	r3, [r7, #13]
 800d056:	2b80      	cmp	r3, #128	@ 0x80
 800d058:	d103      	bne.n	800d062 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2209      	movs	r2, #9
 800d05e:	761a      	strb	r2, [r3, #24]
 800d060:	e002      	b.n	800d068 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2207      	movs	r2, #7
 800d066:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2203      	movs	r2, #3
 800d06c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d07c:	2300      	movs	r3, #0
 800d07e:	2200      	movs	r2, #0
 800d080:	f000 fd8c 	bl	800db9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d084:	e1cb      	b.n	800d41e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d086:	7bbb      	ldrb	r3, [r7, #14]
 800d088:	2b04      	cmp	r3, #4
 800d08a:	d003      	beq.n	800d094 <USBH_HandleControl+0xe8>
 800d08c:	7bbb      	ldrb	r3, [r7, #14]
 800d08e:	2b02      	cmp	r3, #2
 800d090:	f040 81c5 	bne.w	800d41e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	220b      	movs	r2, #11
 800d098:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2203      	movs	r2, #3
 800d09e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f000 fd73 	bl	800db9c <osMessageQueuePut>
      break;
 800d0b6:	e1b2      	b.n	800d41e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6899      	ldr	r1, [r3, #8]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	899a      	ldrh	r2, [r3, #12]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	791b      	ldrb	r3, [r3, #4]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f9f2 	bl	800d4ba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2204      	movs	r2, #4
 800d0da:	761a      	strb	r2, [r3, #24]
      break;
 800d0dc:	e1a8      	b.n	800d430 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	791b      	ldrb	r3, [r3, #4]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f004 fb9f 	bl	8011828 <USBH_LL_GetURBState>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d110      	bne.n	800d116 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2209      	movs	r2, #9
 800d0f8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2203      	movs	r2, #3
 800d0fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d10e:	2300      	movs	r3, #0
 800d110:	2200      	movs	r2, #0
 800d112:	f000 fd43 	bl	800db9c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d116:	7bbb      	ldrb	r3, [r7, #14]
 800d118:	2b05      	cmp	r3, #5
 800d11a:	d110      	bne.n	800d13e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d11c:	2303      	movs	r3, #3
 800d11e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2203      	movs	r2, #3
 800d124:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d134:	2300      	movs	r3, #0
 800d136:	2200      	movs	r2, #0
 800d138:	f000 fd30 	bl	800db9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d13c:	e171      	b.n	800d422 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	2b04      	cmp	r3, #4
 800d142:	f040 816e 	bne.w	800d422 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	220b      	movs	r2, #11
 800d14a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2203      	movs	r2, #3
 800d150:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d160:	2300      	movs	r3, #0
 800d162:	2200      	movs	r2, #0
 800d164:	f000 fd1a 	bl	800db9c <osMessageQueuePut>
      break;
 800d168:	e15b      	b.n	800d422 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6899      	ldr	r1, [r3, #8]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	899a      	ldrh	r2, [r3, #12]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	795b      	ldrb	r3, [r3, #5]
 800d176:	2001      	movs	r0, #1
 800d178:	9000      	str	r0, [sp, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f978 	bl	800d470 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d186:	b29a      	uxth	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2206      	movs	r2, #6
 800d190:	761a      	strb	r2, [r3, #24]
      break;
 800d192:	e14d      	b.n	800d430 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	795b      	ldrb	r3, [r3, #5]
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f004 fb44 	bl	8011828 <USBH_LL_GetURBState>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d111      	bne.n	800d1ce <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2207      	movs	r2, #7
 800d1ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2203      	movs	r2, #3
 800d1b4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f000 fce8 	bl	800db9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d1cc:	e12b      	b.n	800d426 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
 800d1d0:	2b05      	cmp	r3, #5
 800d1d2:	d113      	bne.n	800d1fc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	220c      	movs	r2, #12
 800d1d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2203      	movs	r2, #3
 800d1e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f000 fcd1 	bl	800db9c <osMessageQueuePut>
      break;
 800d1fa:	e114      	b.n	800d426 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d1fc:	7bbb      	ldrb	r3, [r7, #14]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d111      	bne.n	800d226 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2205      	movs	r2, #5
 800d206:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2203      	movs	r2, #3
 800d20c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d21c:	2300      	movs	r3, #0
 800d21e:	2200      	movs	r2, #0
 800d220:	f000 fcbc 	bl	800db9c <osMessageQueuePut>
      break;
 800d224:	e0ff      	b.n	800d426 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d226:	7bbb      	ldrb	r3, [r7, #14]
 800d228:	2b04      	cmp	r3, #4
 800d22a:	f040 80fc 	bne.w	800d426 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	220b      	movs	r2, #11
 800d232:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d234:	2302      	movs	r3, #2
 800d236:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2203      	movs	r2, #3
 800d23c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d24c:	2300      	movs	r3, #0
 800d24e:	2200      	movs	r2, #0
 800d250:	f000 fca4 	bl	800db9c <osMessageQueuePut>
      break;
 800d254:	e0e7      	b.n	800d426 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	791b      	ldrb	r3, [r3, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	2100      	movs	r1, #0
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f92b 	bl	800d4ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2208      	movs	r2, #8
 800d274:	761a      	strb	r2, [r3, #24]

      break;
 800d276:	e0db      	b.n	800d430 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	791b      	ldrb	r3, [r3, #4]
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f004 fad2 	bl	8011828 <USBH_LL_GetURBState>
 800d284:	4603      	mov	r3, r0
 800d286:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d288:	7bbb      	ldrb	r3, [r7, #14]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d113      	bne.n	800d2b6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	220d      	movs	r2, #13
 800d292:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2203      	movs	r2, #3
 800d29c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f000 fc74 	bl	800db9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d2b4:	e0b9      	b.n	800d42a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d2b6:	7bbb      	ldrb	r3, [r7, #14]
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d111      	bne.n	800d2e0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	220b      	movs	r2, #11
 800d2c0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f000 fc5f 	bl	800db9c <osMessageQueuePut>
      break;
 800d2de:	e0a4      	b.n	800d42a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
 800d2e2:	2b05      	cmp	r3, #5
 800d2e4:	f040 80a1 	bne.w	800d42a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2203      	movs	r2, #3
 800d2f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d300:	2300      	movs	r3, #0
 800d302:	2200      	movs	r2, #0
 800d304:	f000 fc4a 	bl	800db9c <osMessageQueuePut>
      break;
 800d308:	e08f      	b.n	800d42a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	795b      	ldrb	r3, [r3, #5]
 800d30e:	2201      	movs	r2, #1
 800d310:	9200      	str	r2, [sp, #0]
 800d312:	2200      	movs	r2, #0
 800d314:	2100      	movs	r1, #0
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8aa 	bl	800d470 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d322:	b29a      	uxth	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	220a      	movs	r2, #10
 800d32c:	761a      	strb	r2, [r3, #24]
      break;
 800d32e:	e07f      	b.n	800d430 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	795b      	ldrb	r3, [r3, #5]
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f004 fa76 	bl	8011828 <USBH_LL_GetURBState>
 800d33c:	4603      	mov	r3, r0
 800d33e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d340:	7bbb      	ldrb	r3, [r7, #14]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d113      	bne.n	800d36e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d346:	2300      	movs	r3, #0
 800d348:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	220d      	movs	r2, #13
 800d34e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2203      	movs	r2, #3
 800d354:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d364:	2300      	movs	r3, #0
 800d366:	2200      	movs	r2, #0
 800d368:	f000 fc18 	bl	800db9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d36c:	e05f      	b.n	800d42e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d36e:	7bbb      	ldrb	r3, [r7, #14]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d111      	bne.n	800d398 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2209      	movs	r2, #9
 800d378:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2203      	movs	r2, #3
 800d37e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d38e:	2300      	movs	r3, #0
 800d390:	2200      	movs	r2, #0
 800d392:	f000 fc03 	bl	800db9c <osMessageQueuePut>
      break;
 800d396:	e04a      	b.n	800d42e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	2b04      	cmp	r3, #4
 800d39c:	d147      	bne.n	800d42e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	220b      	movs	r2, #11
 800d3a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2203      	movs	r2, #3
 800d3a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f000 fbee 	bl	800db9c <osMessageQueuePut>
      break;
 800d3c0:	e035      	b.n	800d42e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	7e5b      	ldrb	r3, [r3, #25]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	765a      	strb	r2, [r3, #25]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	7e5b      	ldrb	r3, [r3, #25]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d806      	bhi.n	800d3e4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d3e2:	e025      	b.n	800d430 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d3ea:	2106      	movs	r1, #6
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	795b      	ldrb	r3, [r3, #5]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f90d 	bl	800d61c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	791b      	ldrb	r3, [r3, #4]
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f907 	bl	800d61c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d414:	2302      	movs	r3, #2
 800d416:	73fb      	strb	r3, [r7, #15]
      break;
 800d418:	e00a      	b.n	800d430 <USBH_HandleControl+0x484>

    default:
      break;
 800d41a:	bf00      	nop
 800d41c:	e008      	b.n	800d430 <USBH_HandleControl+0x484>
      break;
 800d41e:	bf00      	nop
 800d420:	e006      	b.n	800d430 <USBH_HandleControl+0x484>
      break;
 800d422:	bf00      	nop
 800d424:	e004      	b.n	800d430 <USBH_HandleControl+0x484>
      break;
 800d426:	bf00      	nop
 800d428:	e002      	b.n	800d430 <USBH_HandleControl+0x484>
      break;
 800d42a:	bf00      	nop
 800d42c:	e000      	b.n	800d430 <USBH_HandleControl+0x484>
      break;
 800d42e:	bf00      	nop
  }

  return status;
 800d430:	7bfb      	ldrb	r3, [r7, #15]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop

0800d43c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af04      	add	r7, sp, #16
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4613      	mov	r3, r2
 800d448:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d44a:	79f9      	ldrb	r1, [r7, #7]
 800d44c:	2300      	movs	r3, #0
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	2308      	movs	r3, #8
 800d452:	9302      	str	r3, [sp, #8]
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	2300      	movs	r3, #0
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	2300      	movs	r3, #0
 800d45e:	2200      	movs	r2, #0
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f004 f9b0 	bl	80117c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af04      	add	r7, sp, #16
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4611      	mov	r1, r2
 800d47c:	461a      	mov	r2, r3
 800d47e:	460b      	mov	r3, r1
 800d480:	80fb      	strh	r3, [r7, #6]
 800d482:	4613      	mov	r3, r2
 800d484:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d490:	2300      	movs	r3, #0
 800d492:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d494:	7979      	ldrb	r1, [r7, #5]
 800d496:	7e3b      	ldrb	r3, [r7, #24]
 800d498:	9303      	str	r3, [sp, #12]
 800d49a:	88fb      	ldrh	r3, [r7, #6]
 800d49c:	9302      	str	r3, [sp, #8]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f004 f98b 	bl	80117c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b088      	sub	sp, #32
 800d4be:	af04      	add	r7, sp, #16
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	60b9      	str	r1, [r7, #8]
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	80fb      	strh	r3, [r7, #6]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d4d0:	7979      	ldrb	r1, [r7, #5]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9303      	str	r3, [sp, #12]
 800d4d6:	88fb      	ldrh	r3, [r7, #6]
 800d4d8:	9302      	str	r3, [sp, #8]
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f004 f96d 	bl	80117c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d4ec:	2300      	movs	r3, #0

}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b088      	sub	sp, #32
 800d4fa:	af04      	add	r7, sp, #16
 800d4fc:	60f8      	str	r0, [r7, #12]
 800d4fe:	60b9      	str	r1, [r7, #8]
 800d500:	4611      	mov	r1, r2
 800d502:	461a      	mov	r2, r3
 800d504:	460b      	mov	r3, r1
 800d506:	80fb      	strh	r3, [r7, #6]
 800d508:	4613      	mov	r3, r2
 800d50a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d51a:	7979      	ldrb	r1, [r7, #5]
 800d51c:	7e3b      	ldrb	r3, [r7, #24]
 800d51e:	9303      	str	r3, [sp, #12]
 800d520:	88fb      	ldrh	r3, [r7, #6]
 800d522:	9302      	str	r3, [sp, #8]
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	9301      	str	r3, [sp, #4]
 800d528:	2301      	movs	r3, #1
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	2302      	movs	r3, #2
 800d52e:	2200      	movs	r2, #0
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f004 f948 	bl	80117c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af04      	add	r7, sp, #16
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	4611      	mov	r1, r2
 800d54c:	461a      	mov	r2, r3
 800d54e:	460b      	mov	r3, r1
 800d550:	80fb      	strh	r3, [r7, #6]
 800d552:	4613      	mov	r3, r2
 800d554:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d556:	7979      	ldrb	r1, [r7, #5]
 800d558:	2300      	movs	r3, #0
 800d55a:	9303      	str	r3, [sp, #12]
 800d55c:	88fb      	ldrh	r3, [r7, #6]
 800d55e:	9302      	str	r3, [sp, #8]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	9301      	str	r3, [sp, #4]
 800d564:	2301      	movs	r3, #1
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	2302      	movs	r3, #2
 800d56a:	2201      	movs	r2, #1
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f004 f92a 	bl	80117c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af04      	add	r7, sp, #16
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	4608      	mov	r0, r1
 800d586:	4611      	mov	r1, r2
 800d588:	461a      	mov	r2, r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	70fb      	strb	r3, [r7, #3]
 800d58e:	460b      	mov	r3, r1
 800d590:	70bb      	strb	r3, [r7, #2]
 800d592:	4613      	mov	r3, r2
 800d594:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d596:	7878      	ldrb	r0, [r7, #1]
 800d598:	78ba      	ldrb	r2, [r7, #2]
 800d59a:	78f9      	ldrb	r1, [r7, #3]
 800d59c:	8b3b      	ldrh	r3, [r7, #24]
 800d59e:	9302      	str	r3, [sp, #8]
 800d5a0:	7d3b      	ldrb	r3, [r7, #20]
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	7c3b      	ldrb	r3, [r7, #16]
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f004 f8bd 	bl	801172a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b082      	sub	sp, #8
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d5c6:	78fb      	ldrb	r3, [r7, #3]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f004 f8dc 	bl	8011788 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b084      	sub	sp, #16
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f836 	bl	800d658 <USBH_GetFreePipe>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d5f0:	89fb      	ldrh	r3, [r7, #14]
 800d5f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d00a      	beq.n	800d610 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d5fa:	78fa      	ldrb	r2, [r7, #3]
 800d5fc:	89fb      	ldrh	r3, [r7, #14]
 800d5fe:	f003 030f 	and.w	r3, r3, #15
 800d602:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d606:	6879      	ldr	r1, [r7, #4]
 800d608:	33e0      	adds	r3, #224	@ 0xe0
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	440b      	add	r3, r1
 800d60e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d610:	89fb      	ldrh	r3, [r7, #14]
 800d612:	b2db      	uxtb	r3, r3
}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d628:	78fb      	ldrb	r3, [r7, #3]
 800d62a:	2b0f      	cmp	r3, #15
 800d62c:	d80d      	bhi.n	800d64a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d62e:	78fb      	ldrb	r3, [r7, #3]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	33e0      	adds	r3, #224	@ 0xe0
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	33e0      	adds	r3, #224	@ 0xe0
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	440b      	add	r3, r1
 800d648:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d664:	2300      	movs	r3, #0
 800d666:	73fb      	strb	r3, [r7, #15]
 800d668:	e00f      	b.n	800d68a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d66a:	7bfb      	ldrb	r3, [r7, #15]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	33e0      	adds	r3, #224	@ 0xe0
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d102      	bne.n	800d684 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d67e:	7bfb      	ldrb	r3, [r7, #15]
 800d680:	b29b      	uxth	r3, r3
 800d682:	e007      	b.n	800d694 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d684:	7bfb      	ldrb	r3, [r7, #15]
 800d686:	3301      	adds	r3, #1
 800d688:	73fb      	strb	r3, [r7, #15]
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	2b0f      	cmp	r3, #15
 800d68e:	d9ec      	bls.n	800d66a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <__NVIC_SetPriority>:
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6039      	str	r1, [r7, #0]
 800d6aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d6ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	db0a      	blt.n	800d6ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	490c      	ldr	r1, [pc, #48]	@ (800d6ec <__NVIC_SetPriority+0x4c>)
 800d6ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6be:	0112      	lsls	r2, r2, #4
 800d6c0:	b2d2      	uxtb	r2, r2
 800d6c2:	440b      	add	r3, r1
 800d6c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d6c8:	e00a      	b.n	800d6e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	4908      	ldr	r1, [pc, #32]	@ (800d6f0 <__NVIC_SetPriority+0x50>)
 800d6d0:	79fb      	ldrb	r3, [r7, #7]
 800d6d2:	f003 030f 	and.w	r3, r3, #15
 800d6d6:	3b04      	subs	r3, #4
 800d6d8:	0112      	lsls	r2, r2, #4
 800d6da:	b2d2      	uxtb	r2, r2
 800d6dc:	440b      	add	r3, r1
 800d6de:	761a      	strb	r2, [r3, #24]
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	e000e100 	.word	0xe000e100
 800d6f0:	e000ed00 	.word	0xe000ed00

0800d6f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d6f8:	4b05      	ldr	r3, [pc, #20]	@ (800d710 <SysTick_Handler+0x1c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d6fc:	f002 fa6e 	bl	800fbdc <xTaskGetSchedulerState>
 800d700:	4603      	mov	r3, r0
 800d702:	2b01      	cmp	r3, #1
 800d704:	d001      	beq.n	800d70a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d706:	f003 fbaf 	bl	8010e68 <xPortSysTickHandler>
  }
}
 800d70a:	bf00      	nop
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	e000e010 	.word	0xe000e010

0800d714 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d718:	2100      	movs	r1, #0
 800d71a:	f06f 0004 	mvn.w	r0, #4
 800d71e:	f7ff ffbf 	bl	800d6a0 <__NVIC_SetPriority>
#endif
}
 800d722:	bf00      	nop
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d72e:	f3ef 8305 	mrs	r3, IPSR
 800d732:	603b      	str	r3, [r7, #0]
  return(result);
 800d734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d73a:	f06f 0305 	mvn.w	r3, #5
 800d73e:	607b      	str	r3, [r7, #4]
 800d740:	e00c      	b.n	800d75c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d742:	4b0a      	ldr	r3, [pc, #40]	@ (800d76c <osKernelInitialize+0x44>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d105      	bne.n	800d756 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d74a:	4b08      	ldr	r3, [pc, #32]	@ (800d76c <osKernelInitialize+0x44>)
 800d74c:	2201      	movs	r2, #1
 800d74e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d750:	2300      	movs	r3, #0
 800d752:	607b      	str	r3, [r7, #4]
 800d754:	e002      	b.n	800d75c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d75a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d75c:	687b      	ldr	r3, [r7, #4]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	20001f68 	.word	0x20001f68

0800d770 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d776:	f3ef 8305 	mrs	r3, IPSR
 800d77a:	603b      	str	r3, [r7, #0]
  return(result);
 800d77c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d782:	f06f 0305 	mvn.w	r3, #5
 800d786:	607b      	str	r3, [r7, #4]
 800d788:	e010      	b.n	800d7ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d78a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b8 <osKernelStart+0x48>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d109      	bne.n	800d7a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d792:	f7ff ffbf 	bl	800d714 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d796:	4b08      	ldr	r3, [pc, #32]	@ (800d7b8 <osKernelStart+0x48>)
 800d798:	2202      	movs	r2, #2
 800d79a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d79c:	f001 fc30 	bl	800f000 <vTaskStartScheduler>
      stat = osOK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	607b      	str	r3, [r7, #4]
 800d7a4:	e002      	b.n	800d7ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7ac:	687b      	ldr	r3, [r7, #4]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20001f68 	.word	0x20001f68

0800d7bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08e      	sub	sp, #56	@ 0x38
 800d7c0:	af04      	add	r7, sp, #16
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7cc:	f3ef 8305 	mrs	r3, IPSR
 800d7d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d17e      	bne.n	800d8d6 <osThreadNew+0x11a>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d07b      	beq.n	800d8d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d7de:	2380      	movs	r3, #128	@ 0x80
 800d7e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d7e2:	2318      	movs	r3, #24
 800d7e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d7ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d045      	beq.n	800d882 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <osThreadNew+0x48>
        name = attr->name;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d008      	beq.n	800d82a <osThreadNew+0x6e>
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	2b38      	cmp	r3, #56	@ 0x38
 800d81c:	d805      	bhi.n	800d82a <osThreadNew+0x6e>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <osThreadNew+0x72>
        return (NULL);
 800d82a:	2300      	movs	r3, #0
 800d82c:	e054      	b.n	800d8d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	695b      	ldr	r3, [r3, #20]
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00e      	beq.n	800d864 <osThreadNew+0xa8>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	2bbb      	cmp	r3, #187	@ 0xbb
 800d84c:	d90a      	bls.n	800d864 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d852:	2b00      	cmp	r3, #0
 800d854:	d006      	beq.n	800d864 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <osThreadNew+0xa8>
        mem = 1;
 800d85e:	2301      	movs	r3, #1
 800d860:	61bb      	str	r3, [r7, #24]
 800d862:	e010      	b.n	800d886 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10c      	bne.n	800d886 <osThreadNew+0xca>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d108      	bne.n	800d886 <osThreadNew+0xca>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d104      	bne.n	800d886 <osThreadNew+0xca>
          mem = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	61bb      	str	r3, [r7, #24]
 800d880:	e001      	b.n	800d886 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d110      	bne.n	800d8ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d894:	9202      	str	r2, [sp, #8]
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	6a3a      	ldr	r2, [r7, #32]
 800d8a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f001 f8d8 	bl	800ea58 <xTaskCreateStatic>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	e013      	b.n	800d8d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d110      	bne.n	800d8d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	f107 0310 	add.w	r3, r7, #16
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f001 f926 	bl	800eb18 <xTaskCreate>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d001      	beq.n	800d8d6 <osThreadNew+0x11a>
            hTask = NULL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8d6:	693b      	ldr	r3, [r7, #16]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	@ 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af02      	add	r7, sp, #8
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <osThreadFlagsSet+0x1a>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	da03      	bge.n	800d902 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d8fa:	f06f 0303 	mvn.w	r3, #3
 800d8fe:	60fb      	str	r3, [r7, #12]
 800d900:	e035      	b.n	800d96e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800d902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d906:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d908:	f3ef 8305 	mrs	r3, IPSR
 800d90c:	613b      	str	r3, [r7, #16]
  return(result);
 800d90e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01f      	beq.n	800d954 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800d914:	2300      	movs	r3, #0
 800d916:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d918:	f107 0308 	add.w	r3, r7, #8
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	2300      	movs	r3, #0
 800d920:	2201      	movs	r2, #1
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6978      	ldr	r0, [r7, #20]
 800d926:	f002 fc49 	bl	80101bc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d92a:	f107 030c 	add.w	r3, r7, #12
 800d92e:	2200      	movs	r2, #0
 800d930:	9200      	str	r2, [sp, #0]
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	6978      	ldr	r0, [r7, #20]
 800d938:	f002 fc40 	bl	80101bc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d015      	beq.n	800d96e <osThreadFlagsSet+0x8e>
 800d942:	4b0d      	ldr	r3, [pc, #52]	@ (800d978 <osThreadFlagsSet+0x98>)
 800d944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d948:	601a      	str	r2, [r3, #0]
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	e00c      	b.n	800d96e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d954:	2300      	movs	r3, #0
 800d956:	2201      	movs	r2, #1
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6978      	ldr	r0, [r7, #20]
 800d95c:	f002 fb6c 	bl	8010038 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d960:	f107 030c 	add.w	r3, r7, #12
 800d964:	2200      	movs	r2, #0
 800d966:	2100      	movs	r1, #0
 800d968:	6978      	ldr	r0, [r7, #20]
 800d96a:	f002 fb65 	bl	8010038 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d96e:	68fb      	ldr	r3, [r7, #12]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	e000ed04 	.word	0xe000ed04

0800d97c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b08c      	sub	sp, #48	@ 0x30
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d988:	f3ef 8305 	mrs	r3, IPSR
 800d98c:	617b      	str	r3, [r7, #20]
  return(result);
 800d98e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800d994:	f06f 0305 	mvn.w	r3, #5
 800d998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d99a:	e06b      	b.n	800da74 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	da03      	bge.n	800d9aa <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800d9a2:	f06f 0303 	mvn.w	r3, #3
 800d9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9a8:	e064      	b.n	800da74 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <osThreadFlagsWait+0x3e>
      clear = 0U;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9b8:	e001      	b.n	800d9be <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800d9c6:	f001 fc3d 	bl	800f244 <xTaskGetTickCount>
 800d9ca:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800d9cc:	f107 0210 	add.w	r2, r7, #16
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	f002 facf 	bl	800ff78 <xTaskNotifyWait>
 800d9da:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d137      	bne.n	800da52 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800d9e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	4013      	ands	r3, r2
 800d9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00c      	beq.n	800da16 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da00:	4013      	ands	r3, r2
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	429a      	cmp	r2, r3
 800da06:	d032      	beq.n	800da6e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10f      	bne.n	800da2e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800da0e:	f06f 0302 	mvn.w	r3, #2
 800da12:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800da14:	e02e      	b.n	800da74 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1a:	4013      	ands	r3, r2
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d128      	bne.n	800da72 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d103      	bne.n	800da2e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800da26:	f06f 0302 	mvn.w	r3, #2
 800da2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800da2c:	e022      	b.n	800da74 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800da2e:	f001 fc09 	bl	800f244 <xTaskGetTickCount>
 800da32:	4602      	mov	r2, r0
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800da3a:	69ba      	ldr	r2, [r7, #24]
 800da3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3e:	429a      	cmp	r2, r3
 800da40:	d902      	bls.n	800da48 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800da42:	2300      	movs	r3, #0
 800da44:	627b      	str	r3, [r7, #36]	@ 0x24
 800da46:	e00e      	b.n	800da66 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800da48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800da50:	e009      	b.n	800da66 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d103      	bne.n	800da60 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800da58:	f06f 0302 	mvn.w	r3, #2
 800da5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da5e:	e002      	b.n	800da66 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800da60:	f06f 0301 	mvn.w	r3, #1
 800da64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1af      	bne.n	800d9cc <osThreadFlagsWait+0x50>
 800da6c:	e002      	b.n	800da74 <osThreadFlagsWait+0xf8>
            break;
 800da6e:	bf00      	nop
 800da70:	e000      	b.n	800da74 <osThreadFlagsWait+0xf8>
            break;
 800da72:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800da74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800da76:	4618      	mov	r0, r3
 800da78:	3730      	adds	r7, #48	@ 0x30
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da86:	f3ef 8305 	mrs	r3, IPSR
 800da8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800da8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <osDelay+0x1c>
    stat = osErrorISR;
 800da92:	f06f 0305 	mvn.w	r3, #5
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	e007      	b.n	800daaa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <osDelay+0x2c>
      vTaskDelay(ticks);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f001 f997 	bl	800edd8 <vTaskDelay>
    }
  }

  return (stat);
 800daaa:	68fb      	ldr	r3, [r7, #12]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b08a      	sub	sp, #40	@ 0x28
 800dab8:	af02      	add	r7, sp, #8
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dac0:	2300      	movs	r3, #0
 800dac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac4:	f3ef 8305 	mrs	r3, IPSR
 800dac8:	613b      	str	r3, [r7, #16]
  return(result);
 800daca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d15f      	bne.n	800db90 <osMessageQueueNew+0xdc>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d05c      	beq.n	800db90 <osMessageQueueNew+0xdc>
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d059      	beq.n	800db90 <osMessageQueueNew+0xdc>
    mem = -1;
 800dadc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dae0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d029      	beq.n	800db3c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d012      	beq.n	800db16 <osMessageQueueNew+0x62>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	2b4f      	cmp	r3, #79	@ 0x4f
 800daf6:	d90e      	bls.n	800db16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00a      	beq.n	800db16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	695a      	ldr	r2, [r3, #20]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	68b9      	ldr	r1, [r7, #8]
 800db08:	fb01 f303 	mul.w	r3, r1, r3
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d302      	bcc.n	800db16 <osMessageQueueNew+0x62>
        mem = 1;
 800db10:	2301      	movs	r3, #1
 800db12:	61bb      	str	r3, [r7, #24]
 800db14:	e014      	b.n	800db40 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d110      	bne.n	800db40 <osMessageQueueNew+0x8c>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10c      	bne.n	800db40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d108      	bne.n	800db40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	695b      	ldr	r3, [r3, #20]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d104      	bne.n	800db40 <osMessageQueueNew+0x8c>
          mem = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	61bb      	str	r3, [r7, #24]
 800db3a:	e001      	b.n	800db40 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d10b      	bne.n	800db5e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	691a      	ldr	r2, [r3, #16]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	2100      	movs	r1, #0
 800db50:	9100      	str	r1, [sp, #0]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 fa31 	bl	800dfbc <xQueueGenericCreateStatic>
 800db5a:	61f8      	str	r0, [r7, #28]
 800db5c:	e008      	b.n	800db70 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d105      	bne.n	800db70 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800db64:	2200      	movs	r2, #0
 800db66:	68b9      	ldr	r1, [r7, #8]
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f000 faa4 	bl	800e0b6 <xQueueGenericCreate>
 800db6e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00c      	beq.n	800db90 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d003      	beq.n	800db84 <osMessageQueueNew+0xd0>
        name = attr->name;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	617b      	str	r3, [r7, #20]
 800db82:	e001      	b.n	800db88 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800db84:	2300      	movs	r3, #0
 800db86:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800db88:	6979      	ldr	r1, [r7, #20]
 800db8a:	69f8      	ldr	r0, [r7, #28]
 800db8c:	f000 ff06 	bl	800e99c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800db90:	69fb      	ldr	r3, [r7, #28]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3720      	adds	r7, #32
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
	...

0800db9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	603b      	str	r3, [r7, #0]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbb4:	f3ef 8305 	mrs	r3, IPSR
 800dbb8:	617b      	str	r3, [r7, #20]
  return(result);
 800dbba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d028      	beq.n	800dc12 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d005      	beq.n	800dbd2 <osMessageQueuePut+0x36>
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <osMessageQueuePut+0x36>
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dbd2:	f06f 0303 	mvn.w	r3, #3
 800dbd6:	61fb      	str	r3, [r7, #28]
 800dbd8:	e038      	b.n	800dc4c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dbde:	f107 0210 	add.w	r2, r7, #16
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	69b8      	ldr	r0, [r7, #24]
 800dbe8:	f000 fbc6 	bl	800e378 <xQueueGenericSendFromISR>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d003      	beq.n	800dbfa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dbf2:	f06f 0302 	mvn.w	r3, #2
 800dbf6:	61fb      	str	r3, [r7, #28]
 800dbf8:	e028      	b.n	800dc4c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d025      	beq.n	800dc4c <osMessageQueuePut+0xb0>
 800dc00:	4b15      	ldr	r3, [pc, #84]	@ (800dc58 <osMessageQueuePut+0xbc>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	e01c      	b.n	800dc4c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <osMessageQueuePut+0x82>
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d103      	bne.n	800dc26 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dc1e:	f06f 0303 	mvn.w	r3, #3
 800dc22:	61fb      	str	r3, [r7, #28]
 800dc24:	e012      	b.n	800dc4c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc26:	2300      	movs	r3, #0
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	69b8      	ldr	r0, [r7, #24]
 800dc2e:	f000 faa1 	bl	800e174 <xQueueGenericSend>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d009      	beq.n	800dc4c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dc3e:	f06f 0301 	mvn.w	r3, #1
 800dc42:	61fb      	str	r3, [r7, #28]
 800dc44:	e002      	b.n	800dc4c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dc46:	f06f 0302 	mvn.w	r3, #2
 800dc4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dc4c:	69fb      	ldr	r3, [r7, #28]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	e000ed04 	.word	0xe000ed04

0800dc5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
 800dc68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc72:	f3ef 8305 	mrs	r3, IPSR
 800dc76:	617b      	str	r3, [r7, #20]
  return(result);
 800dc78:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d028      	beq.n	800dcd0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <osMessageQueueGet+0x34>
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <osMessageQueueGet+0x34>
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d003      	beq.n	800dc98 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dc90:	f06f 0303 	mvn.w	r3, #3
 800dc94:	61fb      	str	r3, [r7, #28]
 800dc96:	e037      	b.n	800dd08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dc9c:	f107 0310 	add.w	r3, r7, #16
 800dca0:	461a      	mov	r2, r3
 800dca2:	68b9      	ldr	r1, [r7, #8]
 800dca4:	69b8      	ldr	r0, [r7, #24]
 800dca6:	f000 fce7 	bl	800e678 <xQueueReceiveFromISR>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d003      	beq.n	800dcb8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dcb0:	f06f 0302 	mvn.w	r3, #2
 800dcb4:	61fb      	str	r3, [r7, #28]
 800dcb6:	e027      	b.n	800dd08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d024      	beq.n	800dd08 <osMessageQueueGet+0xac>
 800dcbe:	4b15      	ldr	r3, [pc, #84]	@ (800dd14 <osMessageQueueGet+0xb8>)
 800dcc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	e01b      	b.n	800dd08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <osMessageQueueGet+0x80>
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d103      	bne.n	800dce4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dcdc:	f06f 0303 	mvn.w	r3, #3
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	e011      	b.n	800dd08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	68b9      	ldr	r1, [r7, #8]
 800dce8:	69b8      	ldr	r0, [r7, #24]
 800dcea:	f000 fbe3 	bl	800e4b4 <xQueueReceive>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d009      	beq.n	800dd08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dcfa:	f06f 0301 	mvn.w	r3, #1
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	e002      	b.n	800dd08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dd02:	f06f 0302 	mvn.w	r3, #2
 800dd06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd08:	69fb      	ldr	r3, [r7, #28]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3720      	adds	r7, #32
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	e000ed04 	.word	0xe000ed04

0800dd18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	4a07      	ldr	r2, [pc, #28]	@ (800dd44 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	4a06      	ldr	r2, [pc, #24]	@ (800dd48 <vApplicationGetIdleTaskMemory+0x30>)
 800dd2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2280      	movs	r2, #128	@ 0x80
 800dd34:	601a      	str	r2, [r3, #0]
}
 800dd36:	bf00      	nop
 800dd38:	3714      	adds	r7, #20
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	20001f6c 	.word	0x20001f6c
 800dd48:	20002028 	.word	0x20002028

0800dd4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	4a07      	ldr	r2, [pc, #28]	@ (800dd78 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	4a06      	ldr	r2, [pc, #24]	@ (800dd7c <vApplicationGetTimerTaskMemory+0x30>)
 800dd62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dd6a:	601a      	str	r2, [r3, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	20002228 	.word	0x20002228
 800dd7c:	200022e4 	.word	0x200022e4

0800dd80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f103 0208 	add.w	r2, r3, #8
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f103 0208 	add.w	r2, r3, #8
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f103 0208 	add.w	r2, r3, #8
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ddb4:	bf00      	nop
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddce:	bf00      	nop
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddda:	b480      	push	{r7}
 800dddc:	b085      	sub	sp, #20
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	1c5a      	adds	r2, r3, #1
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	601a      	str	r2, [r3, #0]
}
 800de16:	bf00      	nop
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de22:	b480      	push	{r7}
 800de24:	b085      	sub	sp, #20
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
 800de2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de38:	d103      	bne.n	800de42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	691b      	ldr	r3, [r3, #16]
 800de3e:	60fb      	str	r3, [r7, #12]
 800de40:	e00c      	b.n	800de5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	3308      	adds	r3, #8
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	e002      	b.n	800de50 <vListInsert+0x2e>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	60fb      	str	r3, [r7, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68ba      	ldr	r2, [r7, #8]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d2f6      	bcs.n	800de4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	1c5a      	adds	r2, r3, #1
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	601a      	str	r2, [r3, #0]
}
 800de88:	bf00      	nop
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	6892      	ldr	r2, [r2, #8]
 800deaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	6852      	ldr	r2, [r2, #4]
 800deb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	429a      	cmp	r2, r3
 800debe:	d103      	bne.n	800dec8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689a      	ldr	r2, [r3, #8]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	1e5a      	subs	r2, r3, #1
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3714      	adds	r7, #20
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10b      	bne.n	800df14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800df0e:	bf00      	nop
 800df10:	bf00      	nop
 800df12:	e7fd      	b.n	800df10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800df14:	f002 ff18 	bl	8010d48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df20:	68f9      	ldr	r1, [r7, #12]
 800df22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df24:	fb01 f303 	mul.w	r3, r1, r3
 800df28:	441a      	add	r2, r3
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df44:	3b01      	subs	r3, #1
 800df46:	68f9      	ldr	r1, [r7, #12]
 800df48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df4a:	fb01 f303 	mul.w	r3, r1, r3
 800df4e:	441a      	add	r2, r3
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	22ff      	movs	r2, #255	@ 0xff
 800df58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	22ff      	movs	r2, #255	@ 0xff
 800df60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d114      	bne.n	800df94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d01a      	beq.n	800dfa8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3310      	adds	r3, #16
 800df76:	4618      	mov	r0, r3
 800df78:	f001 fb94 	bl	800f6a4 <xTaskRemoveFromEventList>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d012      	beq.n	800dfa8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df82:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb8 <xQueueGenericReset+0xd0>)
 800df84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	e009      	b.n	800dfa8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3310      	adds	r3, #16
 800df98:	4618      	mov	r0, r3
 800df9a:	f7ff fef1 	bl	800dd80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3324      	adds	r3, #36	@ 0x24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7ff feec 	bl	800dd80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dfa8:	f002 ff00 	bl	8010dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dfac:	2301      	movs	r3, #1
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08e      	sub	sp, #56	@ 0x38
 800dfc0:	af02      	add	r7, sp, #8
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
 800dfc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10b      	bne.n	800dfe8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfe2:	bf00      	nop
 800dfe4:	bf00      	nop
 800dfe6:	e7fd      	b.n	800dfe4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10b      	bne.n	800e006 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e000:	bf00      	nop
 800e002:	bf00      	nop
 800e004:	e7fd      	b.n	800e002 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <xQueueGenericCreateStatic+0x56>
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <xQueueGenericCreateStatic+0x5a>
 800e012:	2301      	movs	r3, #1
 800e014:	e000      	b.n	800e018 <xQueueGenericCreateStatic+0x5c>
 800e016:	2300      	movs	r3, #0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10b      	bne.n	800e034 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	623b      	str	r3, [r7, #32]
}
 800e02e:	bf00      	nop
 800e030:	bf00      	nop
 800e032:	e7fd      	b.n	800e030 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d102      	bne.n	800e040 <xQueueGenericCreateStatic+0x84>
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <xQueueGenericCreateStatic+0x88>
 800e040:	2301      	movs	r3, #1
 800e042:	e000      	b.n	800e046 <xQueueGenericCreateStatic+0x8a>
 800e044:	2300      	movs	r3, #0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10b      	bne.n	800e062 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	61fb      	str	r3, [r7, #28]
}
 800e05c:	bf00      	nop
 800e05e:	bf00      	nop
 800e060:	e7fd      	b.n	800e05e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e062:	2350      	movs	r3, #80	@ 0x50
 800e064:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b50      	cmp	r3, #80	@ 0x50
 800e06a:	d00b      	beq.n	800e084 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	61bb      	str	r3, [r7, #24]
}
 800e07e:	bf00      	nop
 800e080:	bf00      	nop
 800e082:	e7fd      	b.n	800e080 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e084:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00d      	beq.n	800e0ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e098:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	68b9      	ldr	r1, [r7, #8]
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 f840 	bl	800e12c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3730      	adds	r7, #48	@ 0x30
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b08a      	sub	sp, #40	@ 0x28
 800e0ba:	af02      	add	r7, sp, #8
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10b      	bne.n	800e0e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	613b      	str	r3, [r7, #16]
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	e7fd      	b.n	800e0de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	fb02 f303 	mul.w	r3, r2, r3
 800e0ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	3350      	adds	r3, #80	@ 0x50
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f002 ff4b 	bl	8010f8c <pvPortMalloc>
 800e0f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d011      	beq.n	800e122 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	3350      	adds	r3, #80	@ 0x50
 800e106:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e110:	79fa      	ldrb	r2, [r7, #7]
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	4613      	mov	r3, r2
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	68b9      	ldr	r1, [r7, #8]
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 f805 	bl	800e12c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e122:	69bb      	ldr	r3, [r7, #24]
	}
 800e124:	4618      	mov	r0, r3
 800e126:	3720      	adds	r7, #32
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	69ba      	ldr	r2, [r7, #24]
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	e002      	b.n	800e14e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e15a:	2101      	movs	r1, #1
 800e15c:	69b8      	ldr	r0, [r7, #24]
 800e15e:	f7ff fec3 	bl	800dee8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b08e      	sub	sp, #56	@ 0x38
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e182:	2300      	movs	r3, #0
 800e184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10b      	bne.n	800e1a8 <xQueueGenericSend+0x34>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e1a2:	bf00      	nop
 800e1a4:	bf00      	nop
 800e1a6:	e7fd      	b.n	800e1a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d103      	bne.n	800e1b6 <xQueueGenericSend+0x42>
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d101      	bne.n	800e1ba <xQueueGenericSend+0x46>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <xQueueGenericSend+0x48>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10b      	bne.n	800e1d8 <xQueueGenericSend+0x64>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e1d2:	bf00      	nop
 800e1d4:	bf00      	nop
 800e1d6:	e7fd      	b.n	800e1d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d103      	bne.n	800e1e6 <xQueueGenericSend+0x72>
 800e1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <xQueueGenericSend+0x76>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e000      	b.n	800e1ec <xQueueGenericSend+0x78>
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10b      	bne.n	800e208 <xQueueGenericSend+0x94>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	623b      	str	r3, [r7, #32]
}
 800e202:	bf00      	nop
 800e204:	bf00      	nop
 800e206:	e7fd      	b.n	800e204 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e208:	f001 fce8 	bl	800fbdc <xTaskGetSchedulerState>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d102      	bne.n	800e218 <xQueueGenericSend+0xa4>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <xQueueGenericSend+0xa8>
 800e218:	2301      	movs	r3, #1
 800e21a:	e000      	b.n	800e21e <xQueueGenericSend+0xaa>
 800e21c:	2300      	movs	r3, #0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10b      	bne.n	800e23a <xQueueGenericSend+0xc6>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	61fb      	str	r3, [r7, #28]
}
 800e234:	bf00      	nop
 800e236:	bf00      	nop
 800e238:	e7fd      	b.n	800e236 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e23a:	f002 fd85 	bl	8010d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e246:	429a      	cmp	r2, r3
 800e248:	d302      	bcc.n	800e250 <xQueueGenericSend+0xdc>
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d129      	bne.n	800e2a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e256:	f000 fa91 	bl	800e77c <prvCopyDataToQueue>
 800e25a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e260:	2b00      	cmp	r3, #0
 800e262:	d010      	beq.n	800e286 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e266:	3324      	adds	r3, #36	@ 0x24
 800e268:	4618      	mov	r0, r3
 800e26a:	f001 fa1b 	bl	800f6a4 <xTaskRemoveFromEventList>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d013      	beq.n	800e29c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e274:	4b3f      	ldr	r3, [pc, #252]	@ (800e374 <xQueueGenericSend+0x200>)
 800e276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e27a:	601a      	str	r2, [r3, #0]
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	e00a      	b.n	800e29c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e28c:	4b39      	ldr	r3, [pc, #228]	@ (800e374 <xQueueGenericSend+0x200>)
 800e28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e292:	601a      	str	r2, [r3, #0]
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e29c:	f002 fd86 	bl	8010dac <vPortExitCritical>
				return pdPASS;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e063      	b.n	800e36c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2aa:	f002 fd7f 	bl	8010dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e05c      	b.n	800e36c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d106      	bne.n	800e2c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2b8:	f107 0314 	add.w	r3, r7, #20
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f001 fa55 	bl	800f76c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2c6:	f002 fd71 	bl	8010dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2ca:	f000 ff0f 	bl	800f0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2ce:	f002 fd3b 	bl	8010d48 <vPortEnterCritical>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2d8:	b25b      	sxtb	r3, r3
 800e2da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2de:	d103      	bne.n	800e2e8 <xQueueGenericSend+0x174>
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2ee:	b25b      	sxtb	r3, r3
 800e2f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2f4:	d103      	bne.n	800e2fe <xQueueGenericSend+0x18a>
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2fe:	f002 fd55 	bl	8010dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e302:	1d3a      	adds	r2, r7, #4
 800e304:	f107 0314 	add.w	r3, r7, #20
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f001 fa44 	bl	800f798 <xTaskCheckForTimeOut>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d124      	bne.n	800e360 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e318:	f000 fb28 	bl	800e96c <prvIsQueueFull>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d018      	beq.n	800e354 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e324:	3310      	adds	r3, #16
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	4611      	mov	r1, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f001 f968 	bl	800f600 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e332:	f000 fab3 	bl	800e89c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e336:	f000 fee7 	bl	800f108 <xTaskResumeAll>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f47f af7c 	bne.w	800e23a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e342:	4b0c      	ldr	r3, [pc, #48]	@ (800e374 <xQueueGenericSend+0x200>)
 800e344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	e772      	b.n	800e23a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e356:	f000 faa1 	bl	800e89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e35a:	f000 fed5 	bl	800f108 <xTaskResumeAll>
 800e35e:	e76c      	b.n	800e23a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e362:	f000 fa9b 	bl	800e89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e366:	f000 fecf 	bl	800f108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e36a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3738      	adds	r7, #56	@ 0x38
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	e000ed04 	.word	0xe000ed04

0800e378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b090      	sub	sp, #64	@ 0x40
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10b      	bne.n	800e3a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3a2:	bf00      	nop
 800e3a4:	bf00      	nop
 800e3a6:	e7fd      	b.n	800e3a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d103      	bne.n	800e3b6 <xQueueGenericSendFromISR+0x3e>
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <xQueueGenericSendFromISR+0x42>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e000      	b.n	800e3bc <xQueueGenericSendFromISR+0x44>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10b      	bne.n	800e3d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e3d2:	bf00      	nop
 800e3d4:	bf00      	nop
 800e3d6:	e7fd      	b.n	800e3d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d103      	bne.n	800e3e6 <xQueueGenericSendFromISR+0x6e>
 800e3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d101      	bne.n	800e3ea <xQueueGenericSendFromISR+0x72>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <xQueueGenericSendFromISR+0x74>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10b      	bne.n	800e408 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	623b      	str	r3, [r7, #32]
}
 800e402:	bf00      	nop
 800e404:	bf00      	nop
 800e406:	e7fd      	b.n	800e404 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e408:	f002 fd7e 	bl	8010f08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e40c:	f3ef 8211 	mrs	r2, BASEPRI
 800e410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	61fa      	str	r2, [r7, #28]
 800e422:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e424:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e426:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e430:	429a      	cmp	r2, r3
 800e432:	d302      	bcc.n	800e43a <xQueueGenericSendFromISR+0xc2>
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	2b02      	cmp	r3, #2
 800e438:	d12f      	bne.n	800e49a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e448:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	68b9      	ldr	r1, [r7, #8]
 800e44e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e450:	f000 f994 	bl	800e77c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e454:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e45c:	d112      	bne.n	800e484 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e462:	2b00      	cmp	r3, #0
 800e464:	d016      	beq.n	800e494 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e468:	3324      	adds	r3, #36	@ 0x24
 800e46a:	4618      	mov	r0, r3
 800e46c:	f001 f91a 	bl	800f6a4 <xTaskRemoveFromEventList>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00e      	beq.n	800e494 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00b      	beq.n	800e494 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	e007      	b.n	800e494 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e488:	3301      	adds	r3, #1
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	b25a      	sxtb	r2, r3
 800e48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e494:	2301      	movs	r3, #1
 800e496:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e498:	e001      	b.n	800e49e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e4a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3740      	adds	r7, #64	@ 0x40
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b08c      	sub	sp, #48	@ 0x30
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10b      	bne.n	800e4e6 <xQueueReceive+0x32>
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	623b      	str	r3, [r7, #32]
}
 800e4e0:	bf00      	nop
 800e4e2:	bf00      	nop
 800e4e4:	e7fd      	b.n	800e4e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d103      	bne.n	800e4f4 <xQueueReceive+0x40>
 800e4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <xQueueReceive+0x44>
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e000      	b.n	800e4fa <xQueueReceive+0x46>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d10b      	bne.n	800e516 <xQueueReceive+0x62>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	61fb      	str	r3, [r7, #28]
}
 800e510:	bf00      	nop
 800e512:	bf00      	nop
 800e514:	e7fd      	b.n	800e512 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e516:	f001 fb61 	bl	800fbdc <xTaskGetSchedulerState>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <xQueueReceive+0x72>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d101      	bne.n	800e52a <xQueueReceive+0x76>
 800e526:	2301      	movs	r3, #1
 800e528:	e000      	b.n	800e52c <xQueueReceive+0x78>
 800e52a:	2300      	movs	r3, #0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d10b      	bne.n	800e548 <xQueueReceive+0x94>
	__asm volatile
 800e530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	61bb      	str	r3, [r7, #24]
}
 800e542:	bf00      	nop
 800e544:	bf00      	nop
 800e546:	e7fd      	b.n	800e544 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e548:	f002 fbfe 	bl	8010d48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e550:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e554:	2b00      	cmp	r3, #0
 800e556:	d01f      	beq.n	800e598 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e55c:	f000 f978 	bl	800e850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	1e5a      	subs	r2, r3, #1
 800e564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e566:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00f      	beq.n	800e590 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e572:	3310      	adds	r3, #16
 800e574:	4618      	mov	r0, r3
 800e576:	f001 f895 	bl	800f6a4 <xTaskRemoveFromEventList>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e580:	4b3c      	ldr	r3, [pc, #240]	@ (800e674 <xQueueReceive+0x1c0>)
 800e582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e590:	f002 fc0c 	bl	8010dac <vPortExitCritical>
				return pdPASS;
 800e594:	2301      	movs	r3, #1
 800e596:	e069      	b.n	800e66c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d103      	bne.n	800e5a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e59e:	f002 fc05 	bl	8010dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e062      	b.n	800e66c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d106      	bne.n	800e5ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5ac:	f107 0310 	add.w	r3, r7, #16
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f001 f8db 	bl	800f76c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5ba:	f002 fbf7 	bl	8010dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5be:	f000 fd95 	bl	800f0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5c2:	f002 fbc1 	bl	8010d48 <vPortEnterCritical>
 800e5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5cc:	b25b      	sxtb	r3, r3
 800e5ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5d2:	d103      	bne.n	800e5dc <xQueueReceive+0x128>
 800e5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5e2:	b25b      	sxtb	r3, r3
 800e5e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5e8:	d103      	bne.n	800e5f2 <xQueueReceive+0x13e>
 800e5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5f2:	f002 fbdb 	bl	8010dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5f6:	1d3a      	adds	r2, r7, #4
 800e5f8:	f107 0310 	add.w	r3, r7, #16
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f001 f8ca 	bl	800f798 <xTaskCheckForTimeOut>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d123      	bne.n	800e652 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e60c:	f000 f998 	bl	800e940 <prvIsQueueEmpty>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d017      	beq.n	800e646 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e618:	3324      	adds	r3, #36	@ 0x24
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	4611      	mov	r1, r2
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 ffee 	bl	800f600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e626:	f000 f939 	bl	800e89c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e62a:	f000 fd6d 	bl	800f108 <xTaskResumeAll>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d189      	bne.n	800e548 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e634:	4b0f      	ldr	r3, [pc, #60]	@ (800e674 <xQueueReceive+0x1c0>)
 800e636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	e780      	b.n	800e548 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e648:	f000 f928 	bl	800e89c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e64c:	f000 fd5c 	bl	800f108 <xTaskResumeAll>
 800e650:	e77a      	b.n	800e548 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e654:	f000 f922 	bl	800e89c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e658:	f000 fd56 	bl	800f108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e65c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e65e:	f000 f96f 	bl	800e940 <prvIsQueueEmpty>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	f43f af6f 	beq.w	800e548 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e66a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3730      	adds	r7, #48	@ 0x30
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	e000ed04 	.word	0xe000ed04

0800e678 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b08e      	sub	sp, #56	@ 0x38
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10b      	bne.n	800e6a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	623b      	str	r3, [r7, #32]
}
 800e6a0:	bf00      	nop
 800e6a2:	bf00      	nop
 800e6a4:	e7fd      	b.n	800e6a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d103      	bne.n	800e6b4 <xQueueReceiveFromISR+0x3c>
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <xQueueReceiveFromISR+0x40>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e000      	b.n	800e6ba <xQueueReceiveFromISR+0x42>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10b      	bne.n	800e6d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	61fb      	str	r3, [r7, #28]
}
 800e6d0:	bf00      	nop
 800e6d2:	bf00      	nop
 800e6d4:	e7fd      	b.n	800e6d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6d6:	f002 fc17 	bl	8010f08 <vPortValidateInterruptPriority>
	__asm volatile
 800e6da:	f3ef 8211 	mrs	r2, BASEPRI
 800e6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e2:	f383 8811 	msr	BASEPRI, r3
 800e6e6:	f3bf 8f6f 	isb	sy
 800e6ea:	f3bf 8f4f 	dsb	sy
 800e6ee:	61ba      	str	r2, [r7, #24]
 800e6f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e6f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d02f      	beq.n	800e762 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e70c:	68b9      	ldr	r1, [r7, #8]
 800e70e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e710:	f000 f89e 	bl	800e850 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e71c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e724:	d112      	bne.n	800e74c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d016      	beq.n	800e75c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e730:	3310      	adds	r3, #16
 800e732:	4618      	mov	r0, r3
 800e734:	f000 ffb6 	bl	800f6a4 <xTaskRemoveFromEventList>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00e      	beq.n	800e75c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d00b      	beq.n	800e75c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	e007      	b.n	800e75c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e74c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e750:	3301      	adds	r3, #1
 800e752:	b2db      	uxtb	r3, r3
 800e754:	b25a      	sxtb	r2, r3
 800e756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e75c:	2301      	movs	r3, #1
 800e75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e760:	e001      	b.n	800e766 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e762:	2300      	movs	r3, #0
 800e764:	637b      	str	r3, [r7, #52]	@ 0x34
 800e766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e768:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	f383 8811 	msr	BASEPRI, r3
}
 800e770:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e774:	4618      	mov	r0, r3
 800e776:	3738      	adds	r7, #56	@ 0x38
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b086      	sub	sp, #24
 800e780:	af00      	add	r7, sp, #0
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e788:	2300      	movs	r3, #0
 800e78a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10d      	bne.n	800e7b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d14d      	bne.n	800e83e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f001 fa36 	bl	800fc18 <xTaskPriorityDisinherit>
 800e7ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	609a      	str	r2, [r3, #8]
 800e7b4:	e043      	b.n	800e83e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d119      	bne.n	800e7f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6858      	ldr	r0, [r3, #4]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	68b9      	ldr	r1, [r7, #8]
 800e7c8:	f003 fbc5 	bl	8011f56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7d4:	441a      	add	r2, r3
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d32b      	bcc.n	800e83e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	605a      	str	r2, [r3, #4]
 800e7ee:	e026      	b.n	800e83e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	68d8      	ldr	r0, [r3, #12]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	68b9      	ldr	r1, [r7, #8]
 800e7fc:	f003 fbab 	bl	8011f56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	68da      	ldr	r2, [r3, #12]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e808:	425b      	negs	r3, r3
 800e80a:	441a      	add	r2, r3
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	68da      	ldr	r2, [r3, #12]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d207      	bcs.n	800e82c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	689a      	ldr	r2, [r3, #8]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e824:	425b      	negs	r3, r3
 800e826:	441a      	add	r2, r3
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d105      	bne.n	800e83e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d002      	beq.n	800e83e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	1c5a      	adds	r2, r3, #1
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e846:	697b      	ldr	r3, [r7, #20]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d018      	beq.n	800e894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68da      	ldr	r2, [r3, #12]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e86a:	441a      	add	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d303      	bcc.n	800e884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68d9      	ldr	r1, [r3, #12]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e88c:	461a      	mov	r2, r3
 800e88e:	6838      	ldr	r0, [r7, #0]
 800e890:	f003 fb61 	bl	8011f56 <memcpy>
	}
}
 800e894:	bf00      	nop
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e8a4:	f002 fa50 	bl	8010d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8b0:	e011      	b.n	800e8d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d012      	beq.n	800e8e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	3324      	adds	r3, #36	@ 0x24
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f000 fef0 	bl	800f6a4 <xTaskRemoveFromEventList>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d001      	beq.n	800e8ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e8ca:	f000 ffc9 	bl	800f860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	dce9      	bgt.n	800e8b2 <prvUnlockQueue+0x16>
 800e8de:	e000      	b.n	800e8e2 <prvUnlockQueue+0x46>
					break;
 800e8e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	22ff      	movs	r2, #255	@ 0xff
 800e8e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e8ea:	f002 fa5f 	bl	8010dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e8ee:	f002 fa2b 	bl	8010d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e8f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8fa:	e011      	b.n	800e920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	691b      	ldr	r3, [r3, #16]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d012      	beq.n	800e92a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	3310      	adds	r3, #16
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 fecb 	bl	800f6a4 <xTaskRemoveFromEventList>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e914:	f000 ffa4 	bl	800f860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e918:	7bbb      	ldrb	r3, [r7, #14]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e924:	2b00      	cmp	r3, #0
 800e926:	dce9      	bgt.n	800e8fc <prvUnlockQueue+0x60>
 800e928:	e000      	b.n	800e92c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e92a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	22ff      	movs	r2, #255	@ 0xff
 800e930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e934:	f002 fa3a 	bl	8010dac <vPortExitCritical>
}
 800e938:	bf00      	nop
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e948:	f002 f9fe 	bl	8010d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e950:	2b00      	cmp	r3, #0
 800e952:	d102      	bne.n	800e95a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e954:	2301      	movs	r3, #1
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	e001      	b.n	800e95e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e95a:	2300      	movs	r3, #0
 800e95c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e95e:	f002 fa25 	bl	8010dac <vPortExitCritical>

	return xReturn;
 800e962:	68fb      	ldr	r3, [r7, #12]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e974:	f002 f9e8 	bl	8010d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e980:	429a      	cmp	r2, r3
 800e982:	d102      	bne.n	800e98a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e984:	2301      	movs	r3, #1
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	e001      	b.n	800e98e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e98a:	2300      	movs	r3, #0
 800e98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e98e:	f002 fa0d 	bl	8010dac <vPortExitCritical>

	return xReturn;
 800e992:	68fb      	ldr	r3, [r7, #12]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	60fb      	str	r3, [r7, #12]
 800e9aa:	e014      	b.n	800e9d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e9ac:	4a0f      	ldr	r2, [pc, #60]	@ (800e9ec <vQueueAddToRegistry+0x50>)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10b      	bne.n	800e9d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e9b8:	490c      	ldr	r1, [pc, #48]	@ (800e9ec <vQueueAddToRegistry+0x50>)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	683a      	ldr	r2, [r7, #0]
 800e9be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e9c2:	4a0a      	ldr	r2, [pc, #40]	@ (800e9ec <vQueueAddToRegistry+0x50>)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	4413      	add	r3, r2
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e9ce:	e006      	b.n	800e9de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	60fb      	str	r3, [r7, #12]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2b07      	cmp	r3, #7
 800e9da:	d9e7      	bls.n	800e9ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e9dc:	bf00      	nop
 800e9de:	bf00      	nop
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	200026e4 	.word	0x200026e4

0800e9f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ea00:	f002 f9a2 	bl	8010d48 <vPortEnterCritical>
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea0a:	b25b      	sxtb	r3, r3
 800ea0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea10:	d103      	bne.n	800ea1a <vQueueWaitForMessageRestricted+0x2a>
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea20:	b25b      	sxtb	r3, r3
 800ea22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea26:	d103      	bne.n	800ea30 <vQueueWaitForMessageRestricted+0x40>
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea30:	f002 f9bc 	bl	8010dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	3324      	adds	r3, #36	@ 0x24
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	68b9      	ldr	r1, [r7, #8]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f000 fe01 	bl	800f64c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ea4a:	6978      	ldr	r0, [r7, #20]
 800ea4c:	f7ff ff26 	bl	800e89c <prvUnlockQueue>
	}
 800ea50:	bf00      	nop
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08e      	sub	sp, #56	@ 0x38
 800ea5c:	af04      	add	r7, sp, #16
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
 800ea64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10b      	bne.n	800ea84 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	623b      	str	r3, [r7, #32]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10b      	bne.n	800eaa2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	61fb      	str	r3, [r7, #28]
}
 800ea9c:	bf00      	nop
 800ea9e:	bf00      	nop
 800eaa0:	e7fd      	b.n	800ea9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eaa2:	23bc      	movs	r3, #188	@ 0xbc
 800eaa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	2bbc      	cmp	r3, #188	@ 0xbc
 800eaaa:	d00b      	beq.n	800eac4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	61bb      	str	r3, [r7, #24]
}
 800eabe:	bf00      	nop
 800eac0:	bf00      	nop
 800eac2:	e7fd      	b.n	800eac0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eac4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d01e      	beq.n	800eb0a <xTaskCreateStatic+0xb2>
 800eacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d01b      	beq.n	800eb0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ead2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ead6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eada:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eade:	2202      	movs	r2, #2
 800eae0:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eae4:	2300      	movs	r3, #0
 800eae6:	9303      	str	r3, [sp, #12]
 800eae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaea:	9302      	str	r3, [sp, #8]
 800eaec:	f107 0314 	add.w	r3, r7, #20
 800eaf0:	9301      	str	r3, [sp, #4]
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	68b9      	ldr	r1, [r7, #8]
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f000 f851 	bl	800eba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb04:	f000 f8f8 	bl	800ecf8 <prvAddNewTaskToReadyList>
 800eb08:	e001      	b.n	800eb0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb0e:	697b      	ldr	r3, [r7, #20]
	}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3728      	adds	r7, #40	@ 0x28
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08c      	sub	sp, #48	@ 0x30
 800eb1c:	af04      	add	r7, sp, #16
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	603b      	str	r3, [r7, #0]
 800eb24:	4613      	mov	r3, r2
 800eb26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb28:	88fb      	ldrh	r3, [r7, #6]
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f002 fa2d 	bl	8010f8c <pvPortMalloc>
 800eb32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00e      	beq.n	800eb58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb3a:	20bc      	movs	r0, #188	@ 0xbc
 800eb3c:	f002 fa26 	bl	8010f8c <pvPortMalloc>
 800eb40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb4e:	e005      	b.n	800eb5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	f002 fae9 	bl	8011128 <vPortFree>
 800eb56:	e001      	b.n	800eb5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d017      	beq.n	800eb92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	2200      	movs	r2, #0
 800eb66:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb6a:	88fa      	ldrh	r2, [r7, #6]
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9303      	str	r3, [sp, #12]
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	9302      	str	r3, [sp, #8]
 800eb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb76:	9301      	str	r3, [sp, #4]
 800eb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	68b9      	ldr	r1, [r7, #8]
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f000 f80f 	bl	800eba4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb86:	69f8      	ldr	r0, [r7, #28]
 800eb88:	f000 f8b6 	bl	800ecf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	61bb      	str	r3, [r7, #24]
 800eb90:	e002      	b.n	800eb98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb98:	69bb      	ldr	r3, [r7, #24]
	}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3720      	adds	r7, #32
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b088      	sub	sp, #32
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	461a      	mov	r2, r3
 800ebbc:	21a5      	movs	r1, #165	@ 0xa5
 800ebbe:	f003 f8e0 	bl	8011d82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	4413      	add	r3, r2
 800ebd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	f023 0307 	bic.w	r3, r3, #7
 800ebda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	f003 0307 	and.w	r3, r3, #7
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00b      	beq.n	800ebfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	617b      	str	r3, [r7, #20]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d01f      	beq.n	800ec44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec04:	2300      	movs	r3, #0
 800ec06:	61fb      	str	r3, [r7, #28]
 800ec08:	e012      	b.n	800ec30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	4413      	add	r3, r2
 800ec10:	7819      	ldrb	r1, [r3, #0]
 800ec12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	4413      	add	r3, r2
 800ec18:	3334      	adds	r3, #52	@ 0x34
 800ec1a:	460a      	mov	r2, r1
 800ec1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	4413      	add	r3, r2
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d006      	beq.n	800ec38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	61fb      	str	r3, [r7, #28]
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b1f      	cmp	r3, #31
 800ec34:	d9e9      	bls.n	800ec0a <prvInitialiseNewTask+0x66>
 800ec36:	e000      	b.n	800ec3a <prvInitialiseNewTask+0x96>
			{
				break;
 800ec38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800ec42:	e003      	b.n	800ec4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec4e:	2b37      	cmp	r3, #55	@ 0x37
 800ec50:	d901      	bls.n	800ec56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec52:	2337      	movs	r3, #55	@ 0x37
 800ec54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec60:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800ec62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec64:	2200      	movs	r2, #0
 800ec66:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7ff f8a7 	bl	800ddc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec74:	3318      	adds	r3, #24
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff f8a2 	bl	800ddc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ec92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec94:	2200      	movs	r2, #0
 800ec96:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecaa:	3368      	adds	r3, #104	@ 0x68
 800ecac:	224c      	movs	r2, #76	@ 0x4c
 800ecae:	2100      	movs	r1, #0
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f003 f866 	bl	8011d82 <memset>
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb8:	4a0c      	ldr	r2, [pc, #48]	@ (800ecec <prvInitialiseNewTask+0x148>)
 800ecba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbe:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf0 <prvInitialiseNewTask+0x14c>)
 800ecc0:	671a      	str	r2, [r3, #112]	@ 0x70
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc4:	4a0b      	ldr	r2, [pc, #44]	@ (800ecf4 <prvInitialiseNewTask+0x150>)
 800ecc6:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	68f9      	ldr	r1, [r7, #12]
 800eccc:	69b8      	ldr	r0, [r7, #24]
 800ecce:	f001 ff09 	bl	8010ae4 <pxPortInitialiseStack>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ecd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d002      	beq.n	800ece4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ece2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ece4:	bf00      	nop
 800ece6:	3720      	adds	r7, #32
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	20007150 	.word	0x20007150
 800ecf0:	200071b8 	.word	0x200071b8
 800ecf4:	20007220 	.word	0x20007220

0800ecf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ed00:	f002 f822 	bl	8010d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ed04:	4b2d      	ldr	r3, [pc, #180]	@ (800edbc <prvAddNewTaskToReadyList+0xc4>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	4a2c      	ldr	r2, [pc, #176]	@ (800edbc <prvAddNewTaskToReadyList+0xc4>)
 800ed0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ed0e:	4b2c      	ldr	r3, [pc, #176]	@ (800edc0 <prvAddNewTaskToReadyList+0xc8>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d109      	bne.n	800ed2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ed16:	4a2a      	ldr	r2, [pc, #168]	@ (800edc0 <prvAddNewTaskToReadyList+0xc8>)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ed1c:	4b27      	ldr	r3, [pc, #156]	@ (800edbc <prvAddNewTaskToReadyList+0xc4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d110      	bne.n	800ed46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ed24:	f000 fdc2 	bl	800f8ac <prvInitialiseTaskLists>
 800ed28:	e00d      	b.n	800ed46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ed2a:	4b26      	ldr	r3, [pc, #152]	@ (800edc4 <prvAddNewTaskToReadyList+0xcc>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d109      	bne.n	800ed46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ed32:	4b23      	ldr	r3, [pc, #140]	@ (800edc0 <prvAddNewTaskToReadyList+0xc8>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d802      	bhi.n	800ed46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed40:	4a1f      	ldr	r2, [pc, #124]	@ (800edc0 <prvAddNewTaskToReadyList+0xc8>)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed46:	4b20      	ldr	r3, [pc, #128]	@ (800edc8 <prvAddNewTaskToReadyList+0xd0>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	4a1e      	ldr	r2, [pc, #120]	@ (800edc8 <prvAddNewTaskToReadyList+0xd0>)
 800ed4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed50:	4b1d      	ldr	r3, [pc, #116]	@ (800edc8 <prvAddNewTaskToReadyList+0xd0>)
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed5c:	4b1b      	ldr	r3, [pc, #108]	@ (800edcc <prvAddNewTaskToReadyList+0xd4>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d903      	bls.n	800ed6c <prvAddNewTaskToReadyList+0x74>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed68:	4a18      	ldr	r2, [pc, #96]	@ (800edcc <prvAddNewTaskToReadyList+0xd4>)
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed70:	4613      	mov	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4a15      	ldr	r2, [pc, #84]	@ (800edd0 <prvAddNewTaskToReadyList+0xd8>)
 800ed7a:	441a      	add	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7ff f829 	bl	800ddda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed88:	f002 f810 	bl	8010dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed8c:	4b0d      	ldr	r3, [pc, #52]	@ (800edc4 <prvAddNewTaskToReadyList+0xcc>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00e      	beq.n	800edb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed94:	4b0a      	ldr	r3, [pc, #40]	@ (800edc0 <prvAddNewTaskToReadyList+0xc8>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d207      	bcs.n	800edb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eda2:	4b0c      	ldr	r3, [pc, #48]	@ (800edd4 <prvAddNewTaskToReadyList+0xdc>)
 800eda4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edb2:	bf00      	nop
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	20002bf8 	.word	0x20002bf8
 800edc0:	20002724 	.word	0x20002724
 800edc4:	20002c04 	.word	0x20002c04
 800edc8:	20002c14 	.word	0x20002c14
 800edcc:	20002c00 	.word	0x20002c00
 800edd0:	20002728 	.word	0x20002728
 800edd4:	e000ed04 	.word	0xe000ed04

0800edd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d018      	beq.n	800ee1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800edea:	4b14      	ldr	r3, [pc, #80]	@ (800ee3c <vTaskDelay+0x64>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00b      	beq.n	800ee0a <vTaskDelay+0x32>
	__asm volatile
 800edf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf6:	f383 8811 	msr	BASEPRI, r3
 800edfa:	f3bf 8f6f 	isb	sy
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	60bb      	str	r3, [r7, #8]
}
 800ee04:	bf00      	nop
 800ee06:	bf00      	nop
 800ee08:	e7fd      	b.n	800ee06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ee0a:	f000 f96f 	bl	800f0ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ee0e:	2100      	movs	r1, #0
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f001 fab9 	bl	8010388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ee16:	f000 f977 	bl	800f108 <xTaskResumeAll>
 800ee1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d107      	bne.n	800ee32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ee22:	4b07      	ldr	r3, [pc, #28]	@ (800ee40 <vTaskDelay+0x68>)
 800ee24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee32:	bf00      	nop
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20002c20 	.word	0x20002c20
 800ee40:	e000ed04 	.word	0xe000ed04

0800ee44 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d10b      	bne.n	800ee6e <eTaskGetState+0x2a>
	__asm volatile
 800ee56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee5a:	f383 8811 	msr	BASEPRI, r3
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	60bb      	str	r3, [r7, #8]
}
 800ee68:	bf00      	nop
 800ee6a:	bf00      	nop
 800ee6c:	e7fd      	b.n	800ee6a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800ee6e:	4b24      	ldr	r3, [pc, #144]	@ (800ef00 <eTaskGetState+0xbc>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69ba      	ldr	r2, [r7, #24]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d102      	bne.n	800ee7e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	77fb      	strb	r3, [r7, #31]
 800ee7c:	e03a      	b.n	800eef4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800ee7e:	f001 ff63 	bl	8010d48 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800ee88:	4b1e      	ldr	r3, [pc, #120]	@ (800ef04 <eTaskGetState+0xc0>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800ee8e:	4b1e      	ldr	r3, [pc, #120]	@ (800ef08 <eTaskGetState+0xc4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800ee94:	f001 ff8a 	bl	8010dac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d003      	beq.n	800eea8 <eTaskGetState+0x64>
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d102      	bne.n	800eeae <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800eea8:	2302      	movs	r3, #2
 800eeaa:	77fb      	strb	r3, [r7, #31]
 800eeac:	e022      	b.n	800eef4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	4a16      	ldr	r2, [pc, #88]	@ (800ef0c <eTaskGetState+0xc8>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d112      	bne.n	800eedc <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d10b      	bne.n	800eed6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d102      	bne.n	800eed0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800eeca:	2302      	movs	r3, #2
 800eecc:	77fb      	strb	r3, [r7, #31]
 800eece:	e011      	b.n	800eef4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800eed0:	2303      	movs	r3, #3
 800eed2:	77fb      	strb	r3, [r7, #31]
 800eed4:	e00e      	b.n	800eef4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800eed6:	2302      	movs	r3, #2
 800eed8:	77fb      	strb	r3, [r7, #31]
 800eeda:	e00b      	b.n	800eef4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	4a0c      	ldr	r2, [pc, #48]	@ (800ef10 <eTaskGetState+0xcc>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d002      	beq.n	800eeea <eTaskGetState+0xa6>
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d102      	bne.n	800eef0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800eeea:	2304      	movs	r3, #4
 800eeec:	77fb      	strb	r3, [r7, #31]
 800eeee:	e001      	b.n	800eef4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800eef0:	2301      	movs	r3, #1
 800eef2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800eef4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800eef6:	4618      	mov	r0, r3
 800eef8:	3720      	adds	r7, #32
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20002724 	.word	0x20002724
 800ef04:	20002bb0 	.word	0x20002bb0
 800ef08:	20002bb4 	.word	0x20002bb4
 800ef0c:	20002be4 	.word	0x20002be4
 800ef10:	20002bcc 	.word	0x20002bcc

0800ef14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ef1c:	f001 ff14 	bl	8010d48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d102      	bne.n	800ef2c <vTaskSuspend+0x18>
 800ef26:	4b30      	ldr	r3, [pc, #192]	@ (800efe8 <vTaskSuspend+0xd4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	e000      	b.n	800ef2e <vTaskSuspend+0x1a>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3304      	adds	r3, #4
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fe ffad 	bl	800de94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d004      	beq.n	800ef4c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3318      	adds	r3, #24
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fe ffa4 	bl	800de94 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	3304      	adds	r3, #4
 800ef50:	4619      	mov	r1, r3
 800ef52:	4826      	ldr	r0, [pc, #152]	@ (800efec <vTaskSuspend+0xd8>)
 800ef54:	f7fe ff41 	bl	800ddda <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d103      	bne.n	800ef6c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ef6c:	f001 ff1e 	bl	8010dac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ef70:	4b1f      	ldr	r3, [pc, #124]	@ (800eff0 <vTaskSuspend+0xdc>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d005      	beq.n	800ef84 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ef78:	f001 fee6 	bl	8010d48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ef7c:	f000 fe0e 	bl	800fb9c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ef80:	f001 ff14 	bl	8010dac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ef84:	4b18      	ldr	r3, [pc, #96]	@ (800efe8 <vTaskSuspend+0xd4>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d128      	bne.n	800efe0 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800ef8e:	4b18      	ldr	r3, [pc, #96]	@ (800eff0 <vTaskSuspend+0xdc>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d018      	beq.n	800efc8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ef96:	4b17      	ldr	r3, [pc, #92]	@ (800eff4 <vTaskSuspend+0xe0>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00b      	beq.n	800efb6 <vTaskSuspend+0xa2>
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	60bb      	str	r3, [r7, #8]
}
 800efb0:	bf00      	nop
 800efb2:	bf00      	nop
 800efb4:	e7fd      	b.n	800efb2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800efb6:	4b10      	ldr	r3, [pc, #64]	@ (800eff8 <vTaskSuspend+0xe4>)
 800efb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	f3bf 8f4f 	dsb	sy
 800efc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efc6:	e00b      	b.n	800efe0 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800efc8:	4b08      	ldr	r3, [pc, #32]	@ (800efec <vTaskSuspend+0xd8>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	4b0b      	ldr	r3, [pc, #44]	@ (800effc <vTaskSuspend+0xe8>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d103      	bne.n	800efdc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800efd4:	4b04      	ldr	r3, [pc, #16]	@ (800efe8 <vTaskSuspend+0xd4>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	601a      	str	r2, [r3, #0]
	}
 800efda:	e001      	b.n	800efe0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800efdc:	f000 fa8c 	bl	800f4f8 <vTaskSwitchContext>
	}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	20002724 	.word	0x20002724
 800efec:	20002be4 	.word	0x20002be4
 800eff0:	20002c04 	.word	0x20002c04
 800eff4:	20002c20 	.word	0x20002c20
 800eff8:	e000ed04 	.word	0xe000ed04
 800effc:	20002bf8 	.word	0x20002bf8

0800f000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b08a      	sub	sp, #40	@ 0x28
 800f004:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f00a:	2300      	movs	r3, #0
 800f00c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f00e:	463a      	mov	r2, r7
 800f010:	1d39      	adds	r1, r7, #4
 800f012:	f107 0308 	add.w	r3, r7, #8
 800f016:	4618      	mov	r0, r3
 800f018:	f7fe fe7e 	bl	800dd18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	9202      	str	r2, [sp, #8]
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	2300      	movs	r3, #0
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	2300      	movs	r3, #0
 800f02c:	460a      	mov	r2, r1
 800f02e:	4926      	ldr	r1, [pc, #152]	@ (800f0c8 <vTaskStartScheduler+0xc8>)
 800f030:	4826      	ldr	r0, [pc, #152]	@ (800f0cc <vTaskStartScheduler+0xcc>)
 800f032:	f7ff fd11 	bl	800ea58 <xTaskCreateStatic>
 800f036:	4603      	mov	r3, r0
 800f038:	4a25      	ldr	r2, [pc, #148]	@ (800f0d0 <vTaskStartScheduler+0xd0>)
 800f03a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f03c:	4b24      	ldr	r3, [pc, #144]	@ (800f0d0 <vTaskStartScheduler+0xd0>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d002      	beq.n	800f04a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f044:	2301      	movs	r3, #1
 800f046:	617b      	str	r3, [r7, #20]
 800f048:	e001      	b.n	800f04e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d102      	bne.n	800f05a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f054:	f001 f9ec 	bl	8010430 <xTimerCreateTimerTask>
 800f058:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d11e      	bne.n	800f09e <vTaskStartScheduler+0x9e>
	__asm volatile
 800f060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f064:	f383 8811 	msr	BASEPRI, r3
 800f068:	f3bf 8f6f 	isb	sy
 800f06c:	f3bf 8f4f 	dsb	sy
 800f070:	613b      	str	r3, [r7, #16]
}
 800f072:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f074:	4b17      	ldr	r3, [pc, #92]	@ (800f0d4 <vTaskStartScheduler+0xd4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3368      	adds	r3, #104	@ 0x68
 800f07a:	4a17      	ldr	r2, [pc, #92]	@ (800f0d8 <vTaskStartScheduler+0xd8>)
 800f07c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f07e:	4b17      	ldr	r3, [pc, #92]	@ (800f0dc <vTaskStartScheduler+0xdc>)
 800f080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f084:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f086:	4b16      	ldr	r3, [pc, #88]	@ (800f0e0 <vTaskStartScheduler+0xe0>)
 800f088:	2201      	movs	r2, #1
 800f08a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f08c:	4b15      	ldr	r3, [pc, #84]	@ (800f0e4 <vTaskStartScheduler+0xe4>)
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f092:	4b15      	ldr	r3, [pc, #84]	@ (800f0e8 <vTaskStartScheduler+0xe8>)
 800f094:	2200      	movs	r2, #0
 800f096:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f098:	f001 fdb2 	bl	8010c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f09c:	e00f      	b.n	800f0be <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0a4:	d10b      	bne.n	800f0be <vTaskStartScheduler+0xbe>
	__asm volatile
 800f0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	60fb      	str	r3, [r7, #12]
}
 800f0b8:	bf00      	nop
 800f0ba:	bf00      	nop
 800f0bc:	e7fd      	b.n	800f0ba <vTaskStartScheduler+0xba>
}
 800f0be:	bf00      	nop
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	080134ac 	.word	0x080134ac
 800f0cc:	0800f879 	.word	0x0800f879
 800f0d0:	20002c1c 	.word	0x20002c1c
 800f0d4:	20002724 	.word	0x20002724
 800f0d8:	2000004c 	.word	0x2000004c
 800f0dc:	20002c18 	.word	0x20002c18
 800f0e0:	20002c04 	.word	0x20002c04
 800f0e4:	20002bfc 	.word	0x20002bfc
 800f0e8:	200003ec 	.word	0x200003ec

0800f0ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f0f0:	4b04      	ldr	r3, [pc, #16]	@ (800f104 <vTaskSuspendAll+0x18>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	4a03      	ldr	r2, [pc, #12]	@ (800f104 <vTaskSuspendAll+0x18>)
 800f0f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f0fa:	bf00      	nop
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	20002c20 	.word	0x20002c20

0800f108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f10e:	2300      	movs	r3, #0
 800f110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f112:	2300      	movs	r3, #0
 800f114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f116:	4b42      	ldr	r3, [pc, #264]	@ (800f220 <xTaskResumeAll+0x118>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10b      	bne.n	800f136 <xTaskResumeAll+0x2e>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	603b      	str	r3, [r7, #0]
}
 800f130:	bf00      	nop
 800f132:	bf00      	nop
 800f134:	e7fd      	b.n	800f132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f136:	f001 fe07 	bl	8010d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f13a:	4b39      	ldr	r3, [pc, #228]	@ (800f220 <xTaskResumeAll+0x118>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3b01      	subs	r3, #1
 800f140:	4a37      	ldr	r2, [pc, #220]	@ (800f220 <xTaskResumeAll+0x118>)
 800f142:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f144:	4b36      	ldr	r3, [pc, #216]	@ (800f220 <xTaskResumeAll+0x118>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d162      	bne.n	800f212 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f14c:	4b35      	ldr	r3, [pc, #212]	@ (800f224 <xTaskResumeAll+0x11c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d05e      	beq.n	800f212 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f154:	e02f      	b.n	800f1b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f156:	4b34      	ldr	r3, [pc, #208]	@ (800f228 <xTaskResumeAll+0x120>)
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3318      	adds	r3, #24
 800f162:	4618      	mov	r0, r3
 800f164:	f7fe fe96 	bl	800de94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	3304      	adds	r3, #4
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7fe fe91 	bl	800de94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f176:	4b2d      	ldr	r3, [pc, #180]	@ (800f22c <xTaskResumeAll+0x124>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d903      	bls.n	800f186 <xTaskResumeAll+0x7e>
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f182:	4a2a      	ldr	r2, [pc, #168]	@ (800f22c <xTaskResumeAll+0x124>)
 800f184:	6013      	str	r3, [r2, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f18a:	4613      	mov	r3, r2
 800f18c:	009b      	lsls	r3, r3, #2
 800f18e:	4413      	add	r3, r2
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	4a27      	ldr	r2, [pc, #156]	@ (800f230 <xTaskResumeAll+0x128>)
 800f194:	441a      	add	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3304      	adds	r3, #4
 800f19a:	4619      	mov	r1, r3
 800f19c:	4610      	mov	r0, r2
 800f19e:	f7fe fe1c 	bl	800ddda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1a6:	4b23      	ldr	r3, [pc, #140]	@ (800f234 <xTaskResumeAll+0x12c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d302      	bcc.n	800f1b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f1b0:	4b21      	ldr	r3, [pc, #132]	@ (800f238 <xTaskResumeAll+0x130>)
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1b6:	4b1c      	ldr	r3, [pc, #112]	@ (800f228 <xTaskResumeAll+0x120>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1cb      	bne.n	800f156 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f1c4:	f000 fcea 	bl	800fb9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f1c8:	4b1c      	ldr	r3, [pc, #112]	@ (800f23c <xTaskResumeAll+0x134>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d010      	beq.n	800f1f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f1d4:	f000 f8d6 	bl	800f384 <xTaskIncrementTick>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d002      	beq.n	800f1e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f1de:	4b16      	ldr	r3, [pc, #88]	@ (800f238 <xTaskResumeAll+0x130>)
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1f1      	bne.n	800f1d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f1f0:	4b12      	ldr	r3, [pc, #72]	@ (800f23c <xTaskResumeAll+0x134>)
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1f6:	4b10      	ldr	r3, [pc, #64]	@ (800f238 <xTaskResumeAll+0x130>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d009      	beq.n	800f212 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1fe:	2301      	movs	r3, #1
 800f200:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f202:	4b0f      	ldr	r3, [pc, #60]	@ (800f240 <xTaskResumeAll+0x138>)
 800f204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f212:	f001 fdcb 	bl	8010dac <vPortExitCritical>

	return xAlreadyYielded;
 800f216:	68bb      	ldr	r3, [r7, #8]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	20002c20 	.word	0x20002c20
 800f224:	20002bf8 	.word	0x20002bf8
 800f228:	20002bb8 	.word	0x20002bb8
 800f22c:	20002c00 	.word	0x20002c00
 800f230:	20002728 	.word	0x20002728
 800f234:	20002724 	.word	0x20002724
 800f238:	20002c0c 	.word	0x20002c0c
 800f23c:	20002c08 	.word	0x20002c08
 800f240:	e000ed04 	.word	0xe000ed04

0800f244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f24a:	4b05      	ldr	r3, [pc, #20]	@ (800f260 <xTaskGetTickCount+0x1c>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f250:	687b      	ldr	r3, [r7, #4]
}
 800f252:	4618      	mov	r0, r3
 800f254:	370c      	adds	r7, #12
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	20002bfc 	.word	0x20002bfc

0800f264 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f270:	2300      	movs	r3, #0
 800f272:	617b      	str	r3, [r7, #20]
 800f274:	2338      	movs	r3, #56	@ 0x38
 800f276:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f278:	f7ff ff38 	bl	800f0ec <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f27c:	4b3a      	ldr	r3, [pc, #232]	@ (800f368 <uxTaskGetSystemState+0x104>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	429a      	cmp	r2, r3
 800f284:	d369      	bcc.n	800f35a <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	3b01      	subs	r3, #1
 800f28a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f28c:	697a      	ldr	r2, [r7, #20]
 800f28e:	4613      	mov	r3, r2
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	4413      	add	r3, r2
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	461a      	mov	r2, r3
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	1898      	adds	r0, r3, r2
 800f29c:	693a      	ldr	r2, [r7, #16]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4a31      	ldr	r2, [pc, #196]	@ (800f36c <uxTaskGetSystemState+0x108>)
 800f2a8:	4413      	add	r3, r2
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	f000 fbd1 	bl	800fa54 <prvListTasksWithinSingleList>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1e2      	bne.n	800f286 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f2c0:	697a      	ldr	r2, [r7, #20]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	4413      	add	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	4a27      	ldr	r2, [pc, #156]	@ (800f370 <uxTaskGetSystemState+0x10c>)
 800f2d2:	6811      	ldr	r1, [r2, #0]
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 fbbc 	bl	800fa54 <prvListTasksWithinSingleList>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f2e4:	697a      	ldr	r2, [r7, #20]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	00db      	lsls	r3, r3, #3
 800f2ea:	4413      	add	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	4a1f      	ldr	r2, [pc, #124]	@ (800f374 <uxTaskGetSystemState+0x110>)
 800f2f6:	6811      	ldr	r1, [r2, #0]
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f000 fbaa 	bl	800fa54 <prvListTasksWithinSingleList>
 800f300:	4602      	mov	r2, r0
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	4413      	add	r3, r2
 800f306:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	4613      	mov	r3, r2
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	4413      	add	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	461a      	mov	r2, r3
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	4413      	add	r3, r2
 800f318:	2204      	movs	r2, #4
 800f31a:	4917      	ldr	r1, [pc, #92]	@ (800f378 <uxTaskGetSystemState+0x114>)
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 fb99 	bl	800fa54 <prvListTasksWithinSingleList>
 800f322:	4602      	mov	r2, r0
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	4413      	add	r3, r2
 800f328:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f32a:	697a      	ldr	r2, [r7, #20]
 800f32c:	4613      	mov	r3, r2
 800f32e:	00db      	lsls	r3, r3, #3
 800f330:	4413      	add	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	461a      	mov	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	4413      	add	r3, r2
 800f33a:	2203      	movs	r2, #3
 800f33c:	490f      	ldr	r1, [pc, #60]	@ (800f37c <uxTaskGetSystemState+0x118>)
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 fb88 	bl	800fa54 <prvListTasksWithinSingleList>
 800f344:	4602      	mov	r2, r0
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	4413      	add	r3, r2
 800f34a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d003      	beq.n	800f35a <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f352:	4b0b      	ldr	r3, [pc, #44]	@ (800f380 <uxTaskGetSystemState+0x11c>)
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f35a:	f7ff fed5 	bl	800f108 <xTaskResumeAll>

		return uxTask;
 800f35e:	697b      	ldr	r3, [r7, #20]
	}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	20002bf8 	.word	0x20002bf8
 800f36c:	20002728 	.word	0x20002728
 800f370:	20002bb0 	.word	0x20002bb0
 800f374:	20002bb4 	.word	0x20002bb4
 800f378:	20002bcc 	.word	0x20002bcc
 800f37c:	20002be4 	.word	0x20002be4
 800f380:	200003ec 	.word	0x200003ec

0800f384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f38e:	4b4f      	ldr	r3, [pc, #316]	@ (800f4cc <xTaskIncrementTick+0x148>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	f040 8090 	bne.w	800f4b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f398:	4b4d      	ldr	r3, [pc, #308]	@ (800f4d0 <xTaskIncrementTick+0x14c>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	3301      	adds	r3, #1
 800f39e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f3a0:	4a4b      	ldr	r2, [pc, #300]	@ (800f4d0 <xTaskIncrementTick+0x14c>)
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d121      	bne.n	800f3f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f3ac:	4b49      	ldr	r3, [pc, #292]	@ (800f4d4 <xTaskIncrementTick+0x150>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00b      	beq.n	800f3ce <xTaskIncrementTick+0x4a>
	__asm volatile
 800f3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ba:	f383 8811 	msr	BASEPRI, r3
 800f3be:	f3bf 8f6f 	isb	sy
 800f3c2:	f3bf 8f4f 	dsb	sy
 800f3c6:	603b      	str	r3, [r7, #0]
}
 800f3c8:	bf00      	nop
 800f3ca:	bf00      	nop
 800f3cc:	e7fd      	b.n	800f3ca <xTaskIncrementTick+0x46>
 800f3ce:	4b41      	ldr	r3, [pc, #260]	@ (800f4d4 <xTaskIncrementTick+0x150>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	4b40      	ldr	r3, [pc, #256]	@ (800f4d8 <xTaskIncrementTick+0x154>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a3e      	ldr	r2, [pc, #248]	@ (800f4d4 <xTaskIncrementTick+0x150>)
 800f3da:	6013      	str	r3, [r2, #0]
 800f3dc:	4a3e      	ldr	r2, [pc, #248]	@ (800f4d8 <xTaskIncrementTick+0x154>)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6013      	str	r3, [r2, #0]
 800f3e2:	4b3e      	ldr	r3, [pc, #248]	@ (800f4dc <xTaskIncrementTick+0x158>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	4a3c      	ldr	r2, [pc, #240]	@ (800f4dc <xTaskIncrementTick+0x158>)
 800f3ea:	6013      	str	r3, [r2, #0]
 800f3ec:	f000 fbd6 	bl	800fb9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3f0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4e0 <xTaskIncrementTick+0x15c>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	693a      	ldr	r2, [r7, #16]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d349      	bcc.n	800f48e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3fa:	4b36      	ldr	r3, [pc, #216]	@ (800f4d4 <xTaskIncrementTick+0x150>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f404:	4b36      	ldr	r3, [pc, #216]	@ (800f4e0 <xTaskIncrementTick+0x15c>)
 800f406:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f40a:	601a      	str	r2, [r3, #0]
					break;
 800f40c:	e03f      	b.n	800f48e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f40e:	4b31      	ldr	r3, [pc, #196]	@ (800f4d4 <xTaskIncrementTick+0x150>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	429a      	cmp	r2, r3
 800f424:	d203      	bcs.n	800f42e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f426:	4a2e      	ldr	r2, [pc, #184]	@ (800f4e0 <xTaskIncrementTick+0x15c>)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f42c:	e02f      	b.n	800f48e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	3304      	adds	r3, #4
 800f432:	4618      	mov	r0, r3
 800f434:	f7fe fd2e 	bl	800de94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d004      	beq.n	800f44a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	3318      	adds	r3, #24
 800f444:	4618      	mov	r0, r3
 800f446:	f7fe fd25 	bl	800de94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f44e:	4b25      	ldr	r3, [pc, #148]	@ (800f4e4 <xTaskIncrementTick+0x160>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d903      	bls.n	800f45e <xTaskIncrementTick+0xda>
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f45a:	4a22      	ldr	r2, [pc, #136]	@ (800f4e4 <xTaskIncrementTick+0x160>)
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f462:	4613      	mov	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4413      	add	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4a1f      	ldr	r2, [pc, #124]	@ (800f4e8 <xTaskIncrementTick+0x164>)
 800f46c:	441a      	add	r2, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	3304      	adds	r3, #4
 800f472:	4619      	mov	r1, r3
 800f474:	4610      	mov	r0, r2
 800f476:	f7fe fcb0 	bl	800ddda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f47e:	4b1b      	ldr	r3, [pc, #108]	@ (800f4ec <xTaskIncrementTick+0x168>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f484:	429a      	cmp	r2, r3
 800f486:	d3b8      	bcc.n	800f3fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f488:	2301      	movs	r3, #1
 800f48a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f48c:	e7b5      	b.n	800f3fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f48e:	4b17      	ldr	r3, [pc, #92]	@ (800f4ec <xTaskIncrementTick+0x168>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f494:	4914      	ldr	r1, [pc, #80]	@ (800f4e8 <xTaskIncrementTick+0x164>)
 800f496:	4613      	mov	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	440b      	add	r3, r1
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d901      	bls.n	800f4aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f4aa:	4b11      	ldr	r3, [pc, #68]	@ (800f4f0 <xTaskIncrementTick+0x16c>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d007      	beq.n	800f4c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	617b      	str	r3, [r7, #20]
 800f4b6:	e004      	b.n	800f4c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f4f4 <xTaskIncrementTick+0x170>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	4a0d      	ldr	r2, [pc, #52]	@ (800f4f4 <xTaskIncrementTick+0x170>)
 800f4c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f4c2:	697b      	ldr	r3, [r7, #20]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20002c20 	.word	0x20002c20
 800f4d0:	20002bfc 	.word	0x20002bfc
 800f4d4:	20002bb0 	.word	0x20002bb0
 800f4d8:	20002bb4 	.word	0x20002bb4
 800f4dc:	20002c10 	.word	0x20002c10
 800f4e0:	20002c18 	.word	0x20002c18
 800f4e4:	20002c00 	.word	0x20002c00
 800f4e8:	20002728 	.word	0x20002728
 800f4ec:	20002724 	.word	0x20002724
 800f4f0:	20002c0c 	.word	0x20002c0c
 800f4f4:	20002c08 	.word	0x20002c08

0800f4f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4fe:	4b37      	ldr	r3, [pc, #220]	@ (800f5dc <vTaskSwitchContext+0xe4>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f506:	4b36      	ldr	r3, [pc, #216]	@ (800f5e0 <vTaskSwitchContext+0xe8>)
 800f508:	2201      	movs	r2, #1
 800f50a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f50c:	e05f      	b.n	800f5ce <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800f50e:	4b34      	ldr	r3, [pc, #208]	@ (800f5e0 <vTaskSwitchContext+0xe8>)
 800f510:	2200      	movs	r2, #0
 800f512:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f514:	4b33      	ldr	r3, [pc, #204]	@ (800f5e4 <vTaskSwitchContext+0xec>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4a33      	ldr	r2, [pc, #204]	@ (800f5e8 <vTaskSwitchContext+0xf0>)
 800f51a:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f51c:	4b32      	ldr	r3, [pc, #200]	@ (800f5e8 <vTaskSwitchContext+0xf0>)
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	4b32      	ldr	r3, [pc, #200]	@ (800f5ec <vTaskSwitchContext+0xf4>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	429a      	cmp	r2, r3
 800f526:	d909      	bls.n	800f53c <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f528:	4b31      	ldr	r3, [pc, #196]	@ (800f5f0 <vTaskSwitchContext+0xf8>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800f52e:	4a2e      	ldr	r2, [pc, #184]	@ (800f5e8 <vTaskSwitchContext+0xf0>)
 800f530:	6810      	ldr	r0, [r2, #0]
 800f532:	4a2e      	ldr	r2, [pc, #184]	@ (800f5ec <vTaskSwitchContext+0xf4>)
 800f534:	6812      	ldr	r2, [r2, #0]
 800f536:	1a82      	subs	r2, r0, r2
 800f538:	440a      	add	r2, r1
 800f53a:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f53c:	4b2a      	ldr	r3, [pc, #168]	@ (800f5e8 <vTaskSwitchContext+0xf0>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a2a      	ldr	r2, [pc, #168]	@ (800f5ec <vTaskSwitchContext+0xf4>)
 800f542:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f544:	4b2b      	ldr	r3, [pc, #172]	@ (800f5f4 <vTaskSwitchContext+0xfc>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	60fb      	str	r3, [r7, #12]
 800f54a:	e011      	b.n	800f570 <vTaskSwitchContext+0x78>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d10b      	bne.n	800f56a <vTaskSwitchContext+0x72>
	__asm volatile
 800f552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f556:	f383 8811 	msr	BASEPRI, r3
 800f55a:	f3bf 8f6f 	isb	sy
 800f55e:	f3bf 8f4f 	dsb	sy
 800f562:	607b      	str	r3, [r7, #4]
}
 800f564:	bf00      	nop
 800f566:	bf00      	nop
 800f568:	e7fd      	b.n	800f566 <vTaskSwitchContext+0x6e>
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	3b01      	subs	r3, #1
 800f56e:	60fb      	str	r3, [r7, #12]
 800f570:	4921      	ldr	r1, [pc, #132]	@ (800f5f8 <vTaskSwitchContext+0x100>)
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	4613      	mov	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	440b      	add	r3, r1
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d0e3      	beq.n	800f54c <vTaskSwitchContext+0x54>
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4a1a      	ldr	r2, [pc, #104]	@ (800f5f8 <vTaskSwitchContext+0x100>)
 800f590:	4413      	add	r3, r2
 800f592:	60bb      	str	r3, [r7, #8]
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	605a      	str	r2, [r3, #4]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	3308      	adds	r3, #8
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d104      	bne.n	800f5b4 <vTaskSwitchContext+0xbc>
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	605a      	str	r2, [r3, #4]
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	4a0d      	ldr	r2, [pc, #52]	@ (800f5f0 <vTaskSwitchContext+0xf8>)
 800f5bc:	6013      	str	r3, [r2, #0]
 800f5be:	4a0d      	ldr	r2, [pc, #52]	@ (800f5f4 <vTaskSwitchContext+0xfc>)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f5f0 <vTaskSwitchContext+0xf8>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	3368      	adds	r3, #104	@ 0x68
 800f5ca:	4a0c      	ldr	r2, [pc, #48]	@ (800f5fc <vTaskSwitchContext+0x104>)
 800f5cc:	6013      	str	r3, [r2, #0]
}
 800f5ce:	bf00      	nop
 800f5d0:	3714      	adds	r7, #20
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	20002c20 	.word	0x20002c20
 800f5e0:	20002c0c 	.word	0x20002c0c
 800f5e4:	200003ec 	.word	0x200003ec
 800f5e8:	20002c28 	.word	0x20002c28
 800f5ec:	20002c24 	.word	0x20002c24
 800f5f0:	20002724 	.word	0x20002724
 800f5f4:	20002c00 	.word	0x20002c00
 800f5f8:	20002728 	.word	0x20002728
 800f5fc:	2000004c 	.word	0x2000004c

0800f600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d10b      	bne.n	800f628 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	60fb      	str	r3, [r7, #12]
}
 800f622:	bf00      	nop
 800f624:	bf00      	nop
 800f626:	e7fd      	b.n	800f624 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f628:	4b07      	ldr	r3, [pc, #28]	@ (800f648 <vTaskPlaceOnEventList+0x48>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3318      	adds	r3, #24
 800f62e:	4619      	mov	r1, r3
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f7fe fbf6 	bl	800de22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f636:	2101      	movs	r1, #1
 800f638:	6838      	ldr	r0, [r7, #0]
 800f63a:	f000 fea5 	bl	8010388 <prvAddCurrentTaskToDelayedList>
}
 800f63e:	bf00      	nop
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	20002724 	.word	0x20002724

0800f64c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b086      	sub	sp, #24
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10b      	bne.n	800f676 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	617b      	str	r3, [r7, #20]
}
 800f670:	bf00      	nop
 800f672:	bf00      	nop
 800f674:	e7fd      	b.n	800f672 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f676:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3318      	adds	r3, #24
 800f67c:	4619      	mov	r1, r3
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7fe fbab 	bl	800ddda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f68a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f68e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	68b8      	ldr	r0, [r7, #8]
 800f694:	f000 fe78 	bl	8010388 <prvAddCurrentTaskToDelayedList>
	}
 800f698:	bf00      	nop
 800f69a:	3718      	adds	r7, #24
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	20002724 	.word	0x20002724

0800f6a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d10b      	bne.n	800f6d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6be:	f383 8811 	msr	BASEPRI, r3
 800f6c2:	f3bf 8f6f 	isb	sy
 800f6c6:	f3bf 8f4f 	dsb	sy
 800f6ca:	60fb      	str	r3, [r7, #12]
}
 800f6cc:	bf00      	nop
 800f6ce:	bf00      	nop
 800f6d0:	e7fd      	b.n	800f6ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	3318      	adds	r3, #24
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe fbdc 	bl	800de94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6dc:	4b1d      	ldr	r3, [pc, #116]	@ (800f754 <xTaskRemoveFromEventList+0xb0>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d11d      	bne.n	800f720 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe fbd3 	bl	800de94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6f2:	4b19      	ldr	r3, [pc, #100]	@ (800f758 <xTaskRemoveFromEventList+0xb4>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d903      	bls.n	800f702 <xTaskRemoveFromEventList+0x5e>
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6fe:	4a16      	ldr	r2, [pc, #88]	@ (800f758 <xTaskRemoveFromEventList+0xb4>)
 800f700:	6013      	str	r3, [r2, #0]
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f706:	4613      	mov	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4413      	add	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4a13      	ldr	r2, [pc, #76]	@ (800f75c <xTaskRemoveFromEventList+0xb8>)
 800f710:	441a      	add	r2, r3
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	3304      	adds	r3, #4
 800f716:	4619      	mov	r1, r3
 800f718:	4610      	mov	r0, r2
 800f71a:	f7fe fb5e 	bl	800ddda <vListInsertEnd>
 800f71e:	e005      	b.n	800f72c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	3318      	adds	r3, #24
 800f724:	4619      	mov	r1, r3
 800f726:	480e      	ldr	r0, [pc, #56]	@ (800f760 <xTaskRemoveFromEventList+0xbc>)
 800f728:	f7fe fb57 	bl	800ddda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f730:	4b0c      	ldr	r3, [pc, #48]	@ (800f764 <xTaskRemoveFromEventList+0xc0>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f736:	429a      	cmp	r2, r3
 800f738:	d905      	bls.n	800f746 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f73a:	2301      	movs	r3, #1
 800f73c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f73e:	4b0a      	ldr	r3, [pc, #40]	@ (800f768 <xTaskRemoveFromEventList+0xc4>)
 800f740:	2201      	movs	r2, #1
 800f742:	601a      	str	r2, [r3, #0]
 800f744:	e001      	b.n	800f74a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f746:	2300      	movs	r3, #0
 800f748:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f74a:	697b      	ldr	r3, [r7, #20]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3718      	adds	r7, #24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	20002c20 	.word	0x20002c20
 800f758:	20002c00 	.word	0x20002c00
 800f75c:	20002728 	.word	0x20002728
 800f760:	20002bb8 	.word	0x20002bb8
 800f764:	20002724 	.word	0x20002724
 800f768:	20002c0c 	.word	0x20002c0c

0800f76c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f774:	4b06      	ldr	r3, [pc, #24]	@ (800f790 <vTaskInternalSetTimeOutState+0x24>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f77c:	4b05      	ldr	r3, [pc, #20]	@ (800f794 <vTaskInternalSetTimeOutState+0x28>)
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	605a      	str	r2, [r3, #4]
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	20002c10 	.word	0x20002c10
 800f794:	20002bfc 	.word	0x20002bfc

0800f798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b088      	sub	sp, #32
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10b      	bne.n	800f7c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ac:	f383 8811 	msr	BASEPRI, r3
 800f7b0:	f3bf 8f6f 	isb	sy
 800f7b4:	f3bf 8f4f 	dsb	sy
 800f7b8:	613b      	str	r3, [r7, #16]
}
 800f7ba:	bf00      	nop
 800f7bc:	bf00      	nop
 800f7be:	e7fd      	b.n	800f7bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10b      	bne.n	800f7de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	60fb      	str	r3, [r7, #12]
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	e7fd      	b.n	800f7da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f7de:	f001 fab3 	bl	8010d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7e2:	4b1d      	ldr	r3, [pc, #116]	@ (800f858 <xTaskCheckForTimeOut+0xc0>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	69ba      	ldr	r2, [r7, #24]
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7fa:	d102      	bne.n	800f802 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	61fb      	str	r3, [r7, #28]
 800f800:	e023      	b.n	800f84a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	4b15      	ldr	r3, [pc, #84]	@ (800f85c <xTaskCheckForTimeOut+0xc4>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d007      	beq.n	800f81e <xTaskCheckForTimeOut+0x86>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	429a      	cmp	r2, r3
 800f816:	d302      	bcc.n	800f81e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f818:	2301      	movs	r3, #1
 800f81a:	61fb      	str	r3, [r7, #28]
 800f81c:	e015      	b.n	800f84a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	429a      	cmp	r2, r3
 800f826:	d20b      	bcs.n	800f840 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	1ad2      	subs	r2, r2, r3
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff ff99 	bl	800f76c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f83a:	2300      	movs	r3, #0
 800f83c:	61fb      	str	r3, [r7, #28]
 800f83e:	e004      	b.n	800f84a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	2200      	movs	r2, #0
 800f844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f846:	2301      	movs	r3, #1
 800f848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f84a:	f001 faaf 	bl	8010dac <vPortExitCritical>

	return xReturn;
 800f84e:	69fb      	ldr	r3, [r7, #28]
}
 800f850:	4618      	mov	r0, r3
 800f852:	3720      	adds	r7, #32
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	20002bfc 	.word	0x20002bfc
 800f85c:	20002c10 	.word	0x20002c10

0800f860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f860:	b480      	push	{r7}
 800f862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f864:	4b03      	ldr	r3, [pc, #12]	@ (800f874 <vTaskMissedYield+0x14>)
 800f866:	2201      	movs	r2, #1
 800f868:	601a      	str	r2, [r3, #0]
}
 800f86a:	bf00      	nop
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	20002c0c 	.word	0x20002c0c

0800f878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f880:	f000 f854 	bl	800f92c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f884:	4b07      	ldr	r3, [pc, #28]	@ (800f8a4 <prvIdleTask+0x2c>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d907      	bls.n	800f89c <prvIdleTask+0x24>
			{
				taskYIELD();
 800f88c:	4b06      	ldr	r3, [pc, #24]	@ (800f8a8 <prvIdleTask+0x30>)
 800f88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f89c:	f7f1 fd22 	bl	80012e4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f8a0:	e7ee      	b.n	800f880 <prvIdleTask+0x8>
 800f8a2:	bf00      	nop
 800f8a4:	20002728 	.word	0x20002728
 800f8a8:	e000ed04 	.word	0xe000ed04

0800f8ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	607b      	str	r3, [r7, #4]
 800f8b6:	e00c      	b.n	800f8d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	4413      	add	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	4a12      	ldr	r2, [pc, #72]	@ (800f90c <prvInitialiseTaskLists+0x60>)
 800f8c4:	4413      	add	r3, r2
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fe fa5a 	bl	800dd80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	607b      	str	r3, [r7, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b37      	cmp	r3, #55	@ 0x37
 800f8d6:	d9ef      	bls.n	800f8b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8d8:	480d      	ldr	r0, [pc, #52]	@ (800f910 <prvInitialiseTaskLists+0x64>)
 800f8da:	f7fe fa51 	bl	800dd80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8de:	480d      	ldr	r0, [pc, #52]	@ (800f914 <prvInitialiseTaskLists+0x68>)
 800f8e0:	f7fe fa4e 	bl	800dd80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8e4:	480c      	ldr	r0, [pc, #48]	@ (800f918 <prvInitialiseTaskLists+0x6c>)
 800f8e6:	f7fe fa4b 	bl	800dd80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8ea:	480c      	ldr	r0, [pc, #48]	@ (800f91c <prvInitialiseTaskLists+0x70>)
 800f8ec:	f7fe fa48 	bl	800dd80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8f0:	480b      	ldr	r0, [pc, #44]	@ (800f920 <prvInitialiseTaskLists+0x74>)
 800f8f2:	f7fe fa45 	bl	800dd80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f924 <prvInitialiseTaskLists+0x78>)
 800f8f8:	4a05      	ldr	r2, [pc, #20]	@ (800f910 <prvInitialiseTaskLists+0x64>)
 800f8fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f928 <prvInitialiseTaskLists+0x7c>)
 800f8fe:	4a05      	ldr	r2, [pc, #20]	@ (800f914 <prvInitialiseTaskLists+0x68>)
 800f900:	601a      	str	r2, [r3, #0]
}
 800f902:	bf00      	nop
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20002728 	.word	0x20002728
 800f910:	20002b88 	.word	0x20002b88
 800f914:	20002b9c 	.word	0x20002b9c
 800f918:	20002bb8 	.word	0x20002bb8
 800f91c:	20002bcc 	.word	0x20002bcc
 800f920:	20002be4 	.word	0x20002be4
 800f924:	20002bb0 	.word	0x20002bb0
 800f928:	20002bb4 	.word	0x20002bb4

0800f92c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f932:	e019      	b.n	800f968 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f934:	f001 fa08 	bl	8010d48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f938:	4b10      	ldr	r3, [pc, #64]	@ (800f97c <prvCheckTasksWaitingTermination+0x50>)
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3304      	adds	r3, #4
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe faa5 	bl	800de94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f94a:	4b0d      	ldr	r3, [pc, #52]	@ (800f980 <prvCheckTasksWaitingTermination+0x54>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	3b01      	subs	r3, #1
 800f950:	4a0b      	ldr	r2, [pc, #44]	@ (800f980 <prvCheckTasksWaitingTermination+0x54>)
 800f952:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f954:	4b0b      	ldr	r3, [pc, #44]	@ (800f984 <prvCheckTasksWaitingTermination+0x58>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	3b01      	subs	r3, #1
 800f95a:	4a0a      	ldr	r2, [pc, #40]	@ (800f984 <prvCheckTasksWaitingTermination+0x58>)
 800f95c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f95e:	f001 fa25 	bl	8010dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f8e4 	bl	800fb30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f968:	4b06      	ldr	r3, [pc, #24]	@ (800f984 <prvCheckTasksWaitingTermination+0x58>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e1      	bne.n	800f934 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f970:	bf00      	nop
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	20002bcc 	.word	0x20002bcc
 800f980:	20002bf8 	.word	0x20002bf8
 800f984:	20002be0 	.word	0x20002be0

0800f988 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <vTaskGetInfo+0x1a>
 800f99c:	4b2c      	ldr	r3, [pc, #176]	@ (800fa50 <vTaskGetInfo+0xc8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	e000      	b.n	800f9a4 <vTaskGetInfo+0x1c>
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	697a      	ldr	r2, [r7, #20]
 800f9aa:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	2b05      	cmp	r3, #5
 800f9e2:	d01a      	beq.n	800fa1a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800f9e4:	4b1a      	ldr	r3, [pc, #104]	@ (800fa50 <vTaskGetInfo+0xc8>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d103      	bne.n	800f9f6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	731a      	strb	r2, [r3, #12]
 800f9f4:	e018      	b.n	800fa28 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	78fa      	ldrb	r2, [r7, #3]
 800f9fa:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800f9fc:	78fb      	ldrb	r3, [r7, #3]
 800f9fe:	2b03      	cmp	r3, #3
 800fa00:	d112      	bne.n	800fa28 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800fa02:	f7ff fb73 	bl	800f0ec <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d002      	beq.n	800fa14 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2202      	movs	r2, #2
 800fa12:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fa14:	f7ff fb78 	bl	800f108 <xTaskResumeAll>
 800fa18:	e006      	b.n	800fa28 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fa1a:	6978      	ldr	r0, [r7, #20]
 800fa1c:	f7ff fa12 	bl	800ee44 <eTaskGetState>
 800fa20:	4603      	mov	r3, r0
 800fa22:	461a      	mov	r2, r3
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d009      	beq.n	800fa42 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa32:	4618      	mov	r0, r3
 800fa34:	f000 f860 	bl	800faf8 <prvTaskCheckFreeStackSpace>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fa40:	e002      	b.n	800fa48 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2200      	movs	r2, #0
 800fa46:	841a      	strh	r2, [r3, #32]
	}
 800fa48:	bf00      	nop
 800fa4a:	3718      	adds	r7, #24
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20002724 	.word	0x20002724

0800fa54 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08a      	sub	sp, #40	@ 0x28
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fa62:	2300      	movs	r3, #0
 800fa64:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d03f      	beq.n	800faee <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	623b      	str	r3, [r7, #32]
 800fa72:	6a3b      	ldr	r3, [r7, #32]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	685a      	ldr	r2, [r3, #4]
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	605a      	str	r2, [r3, #4]
 800fa7c:	6a3b      	ldr	r3, [r7, #32]
 800fa7e:	685a      	ldr	r2, [r3, #4]
 800fa80:	6a3b      	ldr	r3, [r7, #32]
 800fa82:	3308      	adds	r3, #8
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d104      	bne.n	800fa92 <prvListTasksWithinSingleList+0x3e>
 800fa88:	6a3b      	ldr	r3, [r7, #32]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	685a      	ldr	r2, [r3, #4]
 800fa8e:	6a3b      	ldr	r3, [r7, #32]
 800fa90:	605a      	str	r2, [r3, #4]
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	61bb      	str	r3, [r7, #24]
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	685a      	ldr	r2, [r3, #4]
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	605a      	str	r2, [r3, #4]
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	3308      	adds	r3, #8
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d104      	bne.n	800fabe <prvListTasksWithinSingleList+0x6a>
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	685a      	ldr	r2, [r3, #4]
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	605a      	str	r2, [r3, #4]
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800fac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fac8:	4613      	mov	r3, r2
 800faca:	00db      	lsls	r3, r3, #3
 800facc:	4413      	add	r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	461a      	mov	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	1899      	adds	r1, r3, r2
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	2201      	movs	r2, #1
 800fada:	6978      	ldr	r0, [r7, #20]
 800fadc:	f7ff ff54 	bl	800f988 <vTaskGetInfo>
				uxTask++;
 800fae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae2:	3301      	adds	r3, #1
 800fae4:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800fae6:	697a      	ldr	r2, [r7, #20]
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	429a      	cmp	r2, r3
 800faec:	d1d5      	bne.n	800fa9a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800faee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3728      	adds	r7, #40	@ 0x28
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800fb00:	2300      	movs	r3, #0
 800fb02:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb04:	e005      	b.n	800fb12 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2ba5      	cmp	r3, #165	@ 0xa5
 800fb18:	d0f5      	beq.n	800fb06 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	089b      	lsrs	r3, r3, #2
 800fb1e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	b29b      	uxth	r3, r3
	}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	3368      	adds	r3, #104	@ 0x68
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f002 f939 	bl	8011db4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d108      	bne.n	800fb5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb50:	4618      	mov	r0, r3
 800fb52:	f001 fae9 	bl	8011128 <vPortFree>
				vPortFree( pxTCB );
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f001 fae6 	bl	8011128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb5c:	e019      	b.n	800fb92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d103      	bne.n	800fb70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f001 fadd 	bl	8011128 <vPortFree>
	}
 800fb6e:	e010      	b.n	800fb92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d00b      	beq.n	800fb92 <prvDeleteTCB+0x62>
	__asm volatile
 800fb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	60fb      	str	r3, [r7, #12]
}
 800fb8c:	bf00      	nop
 800fb8e:	bf00      	nop
 800fb90:	e7fd      	b.n	800fb8e <prvDeleteTCB+0x5e>
	}
 800fb92:	bf00      	nop
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
	...

0800fb9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fba2:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd4 <prvResetNextTaskUnblockTime+0x38>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d104      	bne.n	800fbb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbac:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800fbae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fbb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbb4:	e008      	b.n	800fbc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbb6:	4b07      	ldr	r3, [pc, #28]	@ (800fbd4 <prvResetNextTaskUnblockTime+0x38>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	4a04      	ldr	r2, [pc, #16]	@ (800fbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800fbc6:	6013      	str	r3, [r2, #0]
}
 800fbc8:	bf00      	nop
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr
 800fbd4:	20002bb0 	.word	0x20002bb0
 800fbd8:	20002c18 	.word	0x20002c18

0800fbdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800fc10 <xTaskGetSchedulerState+0x34>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d102      	bne.n	800fbf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fbea:	2301      	movs	r3, #1
 800fbec:	607b      	str	r3, [r7, #4]
 800fbee:	e008      	b.n	800fc02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbf0:	4b08      	ldr	r3, [pc, #32]	@ (800fc14 <xTaskGetSchedulerState+0x38>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d102      	bne.n	800fbfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	607b      	str	r3, [r7, #4]
 800fbfc:	e001      	b.n	800fc02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc02:	687b      	ldr	r3, [r7, #4]
	}
 800fc04:	4618      	mov	r0, r3
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr
 800fc10:	20002c04 	.word	0x20002c04
 800fc14:	20002c20 	.word	0x20002c20

0800fc18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc24:	2300      	movs	r3, #0
 800fc26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d058      	beq.n	800fce0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc2e:	4b2f      	ldr	r3, [pc, #188]	@ (800fcec <xTaskPriorityDisinherit+0xd4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d00b      	beq.n	800fc50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	60fb      	str	r3, [r7, #12]
}
 800fc4a:	bf00      	nop
 800fc4c:	bf00      	nop
 800fc4e:	e7fd      	b.n	800fc4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d10b      	bne.n	800fc70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5c:	f383 8811 	msr	BASEPRI, r3
 800fc60:	f3bf 8f6f 	isb	sy
 800fc64:	f3bf 8f4f 	dsb	sy
 800fc68:	60bb      	str	r3, [r7, #8]
}
 800fc6a:	bf00      	nop
 800fc6c:	bf00      	nop
 800fc6e:	e7fd      	b.n	800fc6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc74:	1e5a      	subs	r2, r3, #1
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d02c      	beq.n	800fce0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d128      	bne.n	800fce0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	3304      	adds	r3, #4
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fe f8fe 	bl	800de94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcb0:	4b0f      	ldr	r3, [pc, #60]	@ (800fcf0 <xTaskPriorityDisinherit+0xd8>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d903      	bls.n	800fcc0 <xTaskPriorityDisinherit+0xa8>
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcbc:	4a0c      	ldr	r2, [pc, #48]	@ (800fcf0 <xTaskPriorityDisinherit+0xd8>)
 800fcbe:	6013      	str	r3, [r2, #0]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4413      	add	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	4a09      	ldr	r2, [pc, #36]	@ (800fcf4 <xTaskPriorityDisinherit+0xdc>)
 800fcce:	441a      	add	r2, r3
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	f7fe f87f 	bl	800ddda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fce0:	697b      	ldr	r3, [r7, #20]
	}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	20002724 	.word	0x20002724
 800fcf0:	20002c00 	.word	0x20002c00
 800fcf4:	20002728 	.word	0x20002728

0800fcf8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f002 f91e 	bl	8011f46 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f0 fa60 	bl	80001d0 <strlen>
 800fd10:	60f8      	str	r0, [r7, #12]
 800fd12:	e007      	b.n	800fd24 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	4413      	add	r3, r2
 800fd1a:	2220      	movs	r2, #32
 800fd1c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	3301      	adds	r3, #1
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b1e      	cmp	r3, #30
 800fd28:	d9f4      	bls.n	800fd14 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	2200      	movs	r2, #0
 800fd32:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	4413      	add	r3, r2
	}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3710      	adds	r7, #16
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
	...

0800fd44 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fd44:	b590      	push	{r4, r7, lr}
 800fd46:	b089      	sub	sp, #36	@ 0x24
 800fd48:	af02      	add	r7, sp, #8
 800fd4a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fd52:	4b45      	ldr	r3, [pc, #276]	@ (800fe68 <vTaskList+0x124>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800fd58:	4b43      	ldr	r3, [pc, #268]	@ (800fe68 <vTaskList+0x124>)
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	4413      	add	r3, r2
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	4618      	mov	r0, r3
 800fd66:	f001 f911 	bl	8010f8c <pvPortMalloc>
 800fd6a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d076      	beq.n	800fe60 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800fd72:	2200      	movs	r2, #0
 800fd74:	68f9      	ldr	r1, [r7, #12]
 800fd76:	68b8      	ldr	r0, [r7, #8]
 800fd78:	f7ff fa74 	bl	800f264 <uxTaskGetSystemState>
 800fd7c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800fd7e:	2300      	movs	r3, #0
 800fd80:	617b      	str	r3, [r7, #20]
 800fd82:	e066      	b.n	800fe52 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fd84:	697a      	ldr	r2, [r7, #20]
 800fd86:	4613      	mov	r3, r2
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	4413      	add	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	461a      	mov	r2, r3
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	4413      	add	r3, r2
 800fd94:	7b1b      	ldrb	r3, [r3, #12]
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d81b      	bhi.n	800fdd2 <vTaskList+0x8e>
 800fd9a:	a201      	add	r2, pc, #4	@ (adr r2, 800fda0 <vTaskList+0x5c>)
 800fd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda0:	0800fdb5 	.word	0x0800fdb5
 800fda4:	0800fdbb 	.word	0x0800fdbb
 800fda8:	0800fdc1 	.word	0x0800fdc1
 800fdac:	0800fdc7 	.word	0x0800fdc7
 800fdb0:	0800fdcd 	.word	0x0800fdcd
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800fdb4:	2358      	movs	r3, #88	@ 0x58
 800fdb6:	74fb      	strb	r3, [r7, #19]
										break;
 800fdb8:	e00e      	b.n	800fdd8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800fdba:	2352      	movs	r3, #82	@ 0x52
 800fdbc:	74fb      	strb	r3, [r7, #19]
										break;
 800fdbe:	e00b      	b.n	800fdd8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800fdc0:	2342      	movs	r3, #66	@ 0x42
 800fdc2:	74fb      	strb	r3, [r7, #19]
										break;
 800fdc4:	e008      	b.n	800fdd8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fdc6:	2353      	movs	r3, #83	@ 0x53
 800fdc8:	74fb      	strb	r3, [r7, #19]
										break;
 800fdca:	e005      	b.n	800fdd8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fdcc:	2344      	movs	r3, #68	@ 0x44
 800fdce:	74fb      	strb	r3, [r7, #19]
										break;
 800fdd0:	e002      	b.n	800fdd8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	74fb      	strb	r3, [r7, #19]
										break;
 800fdd6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	4613      	mov	r3, r2
 800fddc:	00db      	lsls	r3, r3, #3
 800fdde:	4413      	add	r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	461a      	mov	r2, r3
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	4413      	add	r3, r2
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	4619      	mov	r1, r3
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff ff83 	bl	800fcf8 <prvWriteNameToBuffer>
 800fdf2:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800fdf4:	7cf9      	ldrb	r1, [r7, #19]
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	4413      	add	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	461a      	mov	r2, r3
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	4413      	add	r3, r2
 800fe06:	6918      	ldr	r0, [r3, #16]
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	4413      	add	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	461a      	mov	r2, r3
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	4413      	add	r3, r2
 800fe18:	8c1b      	ldrh	r3, [r3, #32]
 800fe1a:	461c      	mov	r4, r3
 800fe1c:	697a      	ldr	r2, [r7, #20]
 800fe1e:	4613      	mov	r3, r2
 800fe20:	00db      	lsls	r3, r3, #3
 800fe22:	4413      	add	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	461a      	mov	r2, r3
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	9301      	str	r3, [sp, #4]
 800fe30:	9400      	str	r4, [sp, #0]
 800fe32:	4603      	mov	r3, r0
 800fe34:	460a      	mov	r2, r1
 800fe36:	490d      	ldr	r1, [pc, #52]	@ (800fe6c <vTaskList+0x128>)
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f001 ff3f 	bl	8011cbc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7f0 f9c6 	bl	80001d0 <strlen>
 800fe44:	4602      	mov	r2, r0
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4413      	add	r3, r2
 800fe4a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	617b      	str	r3, [r7, #20]
 800fe52:	697a      	ldr	r2, [r7, #20]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d394      	bcc.n	800fd84 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800fe5a:	68b8      	ldr	r0, [r7, #8]
 800fe5c:	f001 f964 	bl	8011128 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe60:	bf00      	nop
 800fe62:	371c      	adds	r7, #28
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd90      	pop	{r4, r7, pc}
 800fe68:	20002bf8 	.word	0x20002bf8
 800fe6c:	080134b4 	.word	0x080134b4

0800fe70 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b088      	sub	sp, #32
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fe7e:	4b3a      	ldr	r3, [pc, #232]	@ (800ff68 <vTaskGetRunTimeStats+0xf8>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800fe84:	4b38      	ldr	r3, [pc, #224]	@ (800ff68 <vTaskGetRunTimeStats+0xf8>)
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	00db      	lsls	r3, r3, #3
 800fe8c:	4413      	add	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	4618      	mov	r0, r3
 800fe92:	f001 f87b 	bl	8010f8c <pvPortMalloc>
 800fe96:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d05f      	beq.n	800ff5e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fe9e:	f107 030c 	add.w	r3, r7, #12
 800fea2:	461a      	mov	r2, r3
 800fea4:	69b9      	ldr	r1, [r7, #24]
 800fea6:	6978      	ldr	r0, [r7, #20]
 800fea8:	f7ff f9dc 	bl	800f264 <uxTaskGetSystemState>
 800feac:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	4a2e      	ldr	r2, [pc, #184]	@ (800ff6c <vTaskGetRunTimeStats+0xfc>)
 800feb2:	fba2 2303 	umull	r2, r3, r2, r3
 800feb6:	095b      	lsrs	r3, r3, #5
 800feb8:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d04b      	beq.n	800ff58 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fec0:	2300      	movs	r3, #0
 800fec2:	61fb      	str	r3, [r7, #28]
 800fec4:	e044      	b.n	800ff50 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fec6:	69fa      	ldr	r2, [r7, #28]
 800fec8:	4613      	mov	r3, r2
 800feca:	00db      	lsls	r3, r3, #3
 800fecc:	4413      	add	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	461a      	mov	r2, r3
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	4413      	add	r3, r2
 800fed6:	699a      	ldr	r2, [r3, #24]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	fbb2 f3f3 	udiv	r3, r2, r3
 800fede:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	4613      	mov	r3, r2
 800fee4:	00db      	lsls	r3, r3, #3
 800fee6:	4413      	add	r3, r2
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	461a      	mov	r2, r3
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	4413      	add	r3, r2
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	4619      	mov	r1, r3
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7ff feff 	bl	800fcf8 <prvWriteNameToBuffer>
 800fefa:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00e      	beq.n	800ff20 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ff02:	69fa      	ldr	r2, [r7, #28]
 800ff04:	4613      	mov	r3, r2
 800ff06:	00db      	lsls	r3, r3, #3
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	4413      	add	r3, r2
 800ff12:	699a      	ldr	r2, [r3, #24]
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	4916      	ldr	r1, [pc, #88]	@ (800ff70 <vTaskGetRunTimeStats+0x100>)
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f001 fecf 	bl	8011cbc <siprintf>
 800ff1e:	e00d      	b.n	800ff3c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ff20:	69fa      	ldr	r2, [r7, #28]
 800ff22:	4613      	mov	r3, r2
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	4413      	add	r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	4413      	add	r3, r2
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	461a      	mov	r2, r3
 800ff34:	490f      	ldr	r1, [pc, #60]	@ (800ff74 <vTaskGetRunTimeStats+0x104>)
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f001 fec0 	bl	8011cbc <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7f0 f947 	bl	80001d0 <strlen>
 800ff42:	4602      	mov	r2, r0
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4413      	add	r3, r2
 800ff48:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	69fa      	ldr	r2, [r7, #28]
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d3b6      	bcc.n	800fec6 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800ff58:	6978      	ldr	r0, [r7, #20]
 800ff5a:	f001 f8e5 	bl	8011128 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ff5e:	bf00      	nop
 800ff60:	3720      	adds	r7, #32
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	20002bf8 	.word	0x20002bf8
 800ff6c:	51eb851f 	.word	0x51eb851f
 800ff70:	080134c4 	.word	0x080134c4
 800ff74:	080134d0 	.word	0x080134d0

0800ff78 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
 800ff84:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ff86:	f000 fedf 	bl	8010d48 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ff8a:	4b29      	ldr	r3, [pc, #164]	@ (8010030 <xTaskNotifyWait+0xb8>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d01c      	beq.n	800ffd2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ff98:	4b25      	ldr	r3, [pc, #148]	@ (8010030 <xTaskNotifyWait+0xb8>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	43d2      	mvns	r2, r2
 800ffa4:	400a      	ands	r2, r1
 800ffa6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ffaa:	4b21      	ldr	r3, [pc, #132]	@ (8010030 <xTaskNotifyWait+0xb8>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00b      	beq.n	800ffd2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ffba:	2101      	movs	r1, #1
 800ffbc:	6838      	ldr	r0, [r7, #0]
 800ffbe:	f000 f9e3 	bl	8010388 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ffc2:	4b1c      	ldr	r3, [pc, #112]	@ (8010034 <xTaskNotifyWait+0xbc>)
 800ffc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ffd2:	f000 feeb 	bl	8010dac <vPortExitCritical>

		taskENTER_CRITICAL();
 800ffd6:	f000 feb7 	bl	8010d48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d005      	beq.n	800ffec <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ffe0:	4b13      	ldr	r3, [pc, #76]	@ (8010030 <xTaskNotifyWait+0xb8>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ffec:	4b10      	ldr	r3, [pc, #64]	@ (8010030 <xTaskNotifyWait+0xb8>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	d002      	beq.n	8010000 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fffa:	2300      	movs	r3, #0
 800fffc:	617b      	str	r3, [r7, #20]
 800fffe:	e00a      	b.n	8010016 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010000:	4b0b      	ldr	r3, [pc, #44]	@ (8010030 <xTaskNotifyWait+0xb8>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	43d2      	mvns	r2, r2
 801000c:	400a      	ands	r2, r1
 801000e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 8010012:	2301      	movs	r3, #1
 8010014:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010016:	4b06      	ldr	r3, [pc, #24]	@ (8010030 <xTaskNotifyWait+0xb8>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2200      	movs	r2, #0
 801001c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 8010020:	f000 fec4 	bl	8010dac <vPortExitCritical>

		return xReturn;
 8010024:	697b      	ldr	r3, [r7, #20]
	}
 8010026:	4618      	mov	r0, r3
 8010028:	3718      	adds	r7, #24
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	20002724 	.word	0x20002724
 8010034:	e000ed04 	.word	0xe000ed04

08010038 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010038:	b580      	push	{r7, lr}
 801003a:	b08a      	sub	sp, #40	@ 0x28
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	603b      	str	r3, [r7, #0]
 8010044:	4613      	mov	r3, r2
 8010046:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010048:	2301      	movs	r3, #1
 801004a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10b      	bne.n	801006a <xTaskGenericNotify+0x32>
	__asm volatile
 8010052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	61bb      	str	r3, [r7, #24]
}
 8010064:	bf00      	nop
 8010066:	bf00      	nop
 8010068:	e7fd      	b.n	8010066 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801006e:	f000 fe6b 	bl	8010d48 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d004      	beq.n	8010082 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010088:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	2202      	movs	r2, #2
 801008e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 8010092:	79fb      	ldrb	r3, [r7, #7]
 8010094:	2b04      	cmp	r3, #4
 8010096:	d82e      	bhi.n	80100f6 <xTaskGenericNotify+0xbe>
 8010098:	a201      	add	r2, pc, #4	@ (adr r2, 80100a0 <xTaskGenericNotify+0x68>)
 801009a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801009e:	bf00      	nop
 80100a0:	0801011b 	.word	0x0801011b
 80100a4:	080100b5 	.word	0x080100b5
 80100a8:	080100c7 	.word	0x080100c7
 80100ac:	080100d7 	.word	0x080100d7
 80100b0:	080100e1 	.word	0x080100e1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80100b4:	6a3b      	ldr	r3, [r7, #32]
 80100b6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	431a      	orrs	r2, r3
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 80100c4:	e02c      	b.n	8010120 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80100c6:	6a3b      	ldr	r3, [r7, #32]
 80100c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 80100d4:	e024      	b.n	8010120 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80100d6:	6a3b      	ldr	r3, [r7, #32]
 80100d8:	68ba      	ldr	r2, [r7, #8]
 80100da:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 80100de:	e01f      	b.n	8010120 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80100e0:	7ffb      	ldrb	r3, [r7, #31]
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	d004      	beq.n	80100f0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80100e6:	6a3b      	ldr	r3, [r7, #32]
 80100e8:	68ba      	ldr	r2, [r7, #8]
 80100ea:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80100ee:	e017      	b.n	8010120 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80100f0:	2300      	movs	r3, #0
 80100f2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80100f4:	e014      	b.n	8010120 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80100fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010100:	d00d      	beq.n	801011e <xTaskGenericNotify+0xe6>
	__asm volatile
 8010102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010106:	f383 8811 	msr	BASEPRI, r3
 801010a:	f3bf 8f6f 	isb	sy
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	617b      	str	r3, [r7, #20]
}
 8010114:	bf00      	nop
 8010116:	bf00      	nop
 8010118:	e7fd      	b.n	8010116 <xTaskGenericNotify+0xde>
					break;
 801011a:	bf00      	nop
 801011c:	e000      	b.n	8010120 <xTaskGenericNotify+0xe8>

					break;
 801011e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010120:	7ffb      	ldrb	r3, [r7, #31]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d13b      	bne.n	801019e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	3304      	adds	r3, #4
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd feb2 	bl	800de94 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010130:	6a3b      	ldr	r3, [r7, #32]
 8010132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010134:	4b1d      	ldr	r3, [pc, #116]	@ (80101ac <xTaskGenericNotify+0x174>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	429a      	cmp	r2, r3
 801013a:	d903      	bls.n	8010144 <xTaskGenericNotify+0x10c>
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010140:	4a1a      	ldr	r2, [pc, #104]	@ (80101ac <xTaskGenericNotify+0x174>)
 8010142:	6013      	str	r3, [r2, #0]
 8010144:	6a3b      	ldr	r3, [r7, #32]
 8010146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010148:	4613      	mov	r3, r2
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	4413      	add	r3, r2
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	4a17      	ldr	r2, [pc, #92]	@ (80101b0 <xTaskGenericNotify+0x178>)
 8010152:	441a      	add	r2, r3
 8010154:	6a3b      	ldr	r3, [r7, #32]
 8010156:	3304      	adds	r3, #4
 8010158:	4619      	mov	r1, r3
 801015a:	4610      	mov	r0, r2
 801015c:	f7fd fe3d 	bl	800ddda <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010160:	6a3b      	ldr	r3, [r7, #32]
 8010162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00b      	beq.n	8010180 <xTaskGenericNotify+0x148>
	__asm volatile
 8010168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801016c:	f383 8811 	msr	BASEPRI, r3
 8010170:	f3bf 8f6f 	isb	sy
 8010174:	f3bf 8f4f 	dsb	sy
 8010178:	613b      	str	r3, [r7, #16]
}
 801017a:	bf00      	nop
 801017c:	bf00      	nop
 801017e:	e7fd      	b.n	801017c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010184:	4b0b      	ldr	r3, [pc, #44]	@ (80101b4 <xTaskGenericNotify+0x17c>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801018a:	429a      	cmp	r2, r3
 801018c:	d907      	bls.n	801019e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801018e:	4b0a      	ldr	r3, [pc, #40]	@ (80101b8 <xTaskGenericNotify+0x180>)
 8010190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010194:	601a      	str	r2, [r3, #0]
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801019e:	f000 fe05 	bl	8010dac <vPortExitCritical>

		return xReturn;
 80101a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3728      	adds	r7, #40	@ 0x28
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20002c00 	.word	0x20002c00
 80101b0:	20002728 	.word	0x20002728
 80101b4:	20002724 	.word	0x20002724
 80101b8:	e000ed04 	.word	0xe000ed04

080101bc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b08e      	sub	sp, #56	@ 0x38
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	4613      	mov	r3, r2
 80101ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80101cc:	2301      	movs	r3, #1
 80101ce:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d10b      	bne.n	80101ee <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80101d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101da:	f383 8811 	msr	BASEPRI, r3
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f3bf 8f4f 	dsb	sy
 80101e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80101e8:	bf00      	nop
 80101ea:	bf00      	nop
 80101ec:	e7fd      	b.n	80101ea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101ee:	f000 fe8b 	bl	8010f08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80101f6:	f3ef 8211 	mrs	r2, BASEPRI
 80101fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101fe:	f383 8811 	msr	BASEPRI, r3
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	623a      	str	r2, [r7, #32]
 801020c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801020e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010210:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d004      	beq.n	8010222 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801021a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010224:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8010228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801022c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801022e:	2202      	movs	r2, #2
 8010230:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	2b04      	cmp	r3, #4
 8010238:	d82e      	bhi.n	8010298 <xTaskGenericNotifyFromISR+0xdc>
 801023a:	a201      	add	r2, pc, #4	@ (adr r2, 8010240 <xTaskGenericNotifyFromISR+0x84>)
 801023c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010240:	080102bd 	.word	0x080102bd
 8010244:	08010255 	.word	0x08010255
 8010248:	08010267 	.word	0x08010267
 801024c:	08010277 	.word	0x08010277
 8010250:	08010281 	.word	0x08010281
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010256:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	431a      	orrs	r2, r3
 801025e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010260:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010264:	e02d      	b.n	80102c2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801026c:	1c5a      	adds	r2, r3, #1
 801026e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010270:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8010274:	e025      	b.n	80102c2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 801027e:	e020      	b.n	80102c2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010280:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010284:	2b02      	cmp	r3, #2
 8010286:	d004      	beq.n	8010292 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010290:	e017      	b.n	80102c2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8010292:	2300      	movs	r3, #0
 8010294:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8010296:	e014      	b.n	80102c2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801029a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801029e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102a2:	d00d      	beq.n	80102c0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80102a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	61bb      	str	r3, [r7, #24]
}
 80102b6:	bf00      	nop
 80102b8:	bf00      	nop
 80102ba:	e7fd      	b.n	80102b8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80102bc:	bf00      	nop
 80102be:	e000      	b.n	80102c2 <xTaskGenericNotifyFromISR+0x106>
					break;
 80102c0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80102c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d147      	bne.n	801035a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80102ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00b      	beq.n	80102ea <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	617b      	str	r3, [r7, #20]
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop
 80102e8:	e7fd      	b.n	80102e6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102ea:	4b21      	ldr	r3, [pc, #132]	@ (8010370 <xTaskGenericNotifyFromISR+0x1b4>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d11d      	bne.n	801032e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f4:	3304      	adds	r3, #4
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fd fdcc 	bl	800de94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010300:	4b1c      	ldr	r3, [pc, #112]	@ (8010374 <xTaskGenericNotifyFromISR+0x1b8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	429a      	cmp	r2, r3
 8010306:	d903      	bls.n	8010310 <xTaskGenericNotifyFromISR+0x154>
 8010308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801030c:	4a19      	ldr	r2, [pc, #100]	@ (8010374 <xTaskGenericNotifyFromISR+0x1b8>)
 801030e:	6013      	str	r3, [r2, #0]
 8010310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010314:	4613      	mov	r3, r2
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	4413      	add	r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	4a16      	ldr	r2, [pc, #88]	@ (8010378 <xTaskGenericNotifyFromISR+0x1bc>)
 801031e:	441a      	add	r2, r3
 8010320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010322:	3304      	adds	r3, #4
 8010324:	4619      	mov	r1, r3
 8010326:	4610      	mov	r0, r2
 8010328:	f7fd fd57 	bl	800ddda <vListInsertEnd>
 801032c:	e005      	b.n	801033a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801032e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010330:	3318      	adds	r3, #24
 8010332:	4619      	mov	r1, r3
 8010334:	4811      	ldr	r0, [pc, #68]	@ (801037c <xTaskGenericNotifyFromISR+0x1c0>)
 8010336:	f7fd fd50 	bl	800ddda <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801033a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801033e:	4b10      	ldr	r3, [pc, #64]	@ (8010380 <xTaskGenericNotifyFromISR+0x1c4>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010344:	429a      	cmp	r2, r3
 8010346:	d908      	bls.n	801035a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801034e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010350:	2201      	movs	r2, #1
 8010352:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010354:	4b0b      	ldr	r3, [pc, #44]	@ (8010384 <xTaskGenericNotifyFromISR+0x1c8>)
 8010356:	2201      	movs	r2, #1
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	f383 8811 	msr	BASEPRI, r3
}
 8010364:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010368:	4618      	mov	r0, r3
 801036a:	3738      	adds	r7, #56	@ 0x38
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20002c20 	.word	0x20002c20
 8010374:	20002c00 	.word	0x20002c00
 8010378:	20002728 	.word	0x20002728
 801037c:	20002bb8 	.word	0x20002bb8
 8010380:	20002724 	.word	0x20002724
 8010384:	20002c0c 	.word	0x20002c0c

08010388 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010392:	4b21      	ldr	r3, [pc, #132]	@ (8010418 <prvAddCurrentTaskToDelayedList+0x90>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010398:	4b20      	ldr	r3, [pc, #128]	@ (801041c <prvAddCurrentTaskToDelayedList+0x94>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	3304      	adds	r3, #4
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fd fd78 	bl	800de94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80103aa:	d10a      	bne.n	80103c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d007      	beq.n	80103c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103b2:	4b1a      	ldr	r3, [pc, #104]	@ (801041c <prvAddCurrentTaskToDelayedList+0x94>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	3304      	adds	r3, #4
 80103b8:	4619      	mov	r1, r3
 80103ba:	4819      	ldr	r0, [pc, #100]	@ (8010420 <prvAddCurrentTaskToDelayedList+0x98>)
 80103bc:	f7fd fd0d 	bl	800ddda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80103c0:	e026      	b.n	8010410 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80103c2:	68fa      	ldr	r2, [r7, #12]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4413      	add	r3, r2
 80103c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80103ca:	4b14      	ldr	r3, [pc, #80]	@ (801041c <prvAddCurrentTaskToDelayedList+0x94>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80103d2:	68ba      	ldr	r2, [r7, #8]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d209      	bcs.n	80103ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103da:	4b12      	ldr	r3, [pc, #72]	@ (8010424 <prvAddCurrentTaskToDelayedList+0x9c>)
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	4b0f      	ldr	r3, [pc, #60]	@ (801041c <prvAddCurrentTaskToDelayedList+0x94>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	3304      	adds	r3, #4
 80103e4:	4619      	mov	r1, r3
 80103e6:	4610      	mov	r0, r2
 80103e8:	f7fd fd1b 	bl	800de22 <vListInsert>
}
 80103ec:	e010      	b.n	8010410 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103ee:	4b0e      	ldr	r3, [pc, #56]	@ (8010428 <prvAddCurrentTaskToDelayedList+0xa0>)
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	4b0a      	ldr	r3, [pc, #40]	@ (801041c <prvAddCurrentTaskToDelayedList+0x94>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3304      	adds	r3, #4
 80103f8:	4619      	mov	r1, r3
 80103fa:	4610      	mov	r0, r2
 80103fc:	f7fd fd11 	bl	800de22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010400:	4b0a      	ldr	r3, [pc, #40]	@ (801042c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	68ba      	ldr	r2, [r7, #8]
 8010406:	429a      	cmp	r2, r3
 8010408:	d202      	bcs.n	8010410 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801040a:	4a08      	ldr	r2, [pc, #32]	@ (801042c <prvAddCurrentTaskToDelayedList+0xa4>)
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	6013      	str	r3, [r2, #0]
}
 8010410:	bf00      	nop
 8010412:	3710      	adds	r7, #16
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	20002bfc 	.word	0x20002bfc
 801041c:	20002724 	.word	0x20002724
 8010420:	20002be4 	.word	0x20002be4
 8010424:	20002bb4 	.word	0x20002bb4
 8010428:	20002bb0 	.word	0x20002bb0
 801042c:	20002c18 	.word	0x20002c18

08010430 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b08a      	sub	sp, #40	@ 0x28
 8010434:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010436:	2300      	movs	r3, #0
 8010438:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801043a:	f000 fb13 	bl	8010a64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801043e:	4b1d      	ldr	r3, [pc, #116]	@ (80104b4 <xTimerCreateTimerTask+0x84>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d021      	beq.n	801048a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010446:	2300      	movs	r3, #0
 8010448:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801044a:	2300      	movs	r3, #0
 801044c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801044e:	1d3a      	adds	r2, r7, #4
 8010450:	f107 0108 	add.w	r1, r7, #8
 8010454:	f107 030c 	add.w	r3, r7, #12
 8010458:	4618      	mov	r0, r3
 801045a:	f7fd fc77 	bl	800dd4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801045e:	6879      	ldr	r1, [r7, #4]
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	9202      	str	r2, [sp, #8]
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	2302      	movs	r3, #2
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	2300      	movs	r3, #0
 801046e:	460a      	mov	r2, r1
 8010470:	4911      	ldr	r1, [pc, #68]	@ (80104b8 <xTimerCreateTimerTask+0x88>)
 8010472:	4812      	ldr	r0, [pc, #72]	@ (80104bc <xTimerCreateTimerTask+0x8c>)
 8010474:	f7fe faf0 	bl	800ea58 <xTaskCreateStatic>
 8010478:	4603      	mov	r3, r0
 801047a:	4a11      	ldr	r2, [pc, #68]	@ (80104c0 <xTimerCreateTimerTask+0x90>)
 801047c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801047e:	4b10      	ldr	r3, [pc, #64]	@ (80104c0 <xTimerCreateTimerTask+0x90>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010486:	2301      	movs	r3, #1
 8010488:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10b      	bne.n	80104a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010494:	f383 8811 	msr	BASEPRI, r3
 8010498:	f3bf 8f6f 	isb	sy
 801049c:	f3bf 8f4f 	dsb	sy
 80104a0:	613b      	str	r3, [r7, #16]
}
 80104a2:	bf00      	nop
 80104a4:	bf00      	nop
 80104a6:	e7fd      	b.n	80104a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80104a8:	697b      	ldr	r3, [r7, #20]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	20002c5c 	.word	0x20002c5c
 80104b8:	080134dc 	.word	0x080134dc
 80104bc:	080105fd 	.word	0x080105fd
 80104c0:	20002c60 	.word	0x20002c60

080104c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08a      	sub	sp, #40	@ 0x28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10b      	bne.n	80104f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	623b      	str	r3, [r7, #32]
}
 80104ee:	bf00      	nop
 80104f0:	bf00      	nop
 80104f2:	e7fd      	b.n	80104f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80104f4:	4b19      	ldr	r3, [pc, #100]	@ (801055c <xTimerGenericCommand+0x98>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d02a      	beq.n	8010552 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	2b05      	cmp	r3, #5
 801050c:	dc18      	bgt.n	8010540 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801050e:	f7ff fb65 	bl	800fbdc <xTaskGetSchedulerState>
 8010512:	4603      	mov	r3, r0
 8010514:	2b02      	cmp	r3, #2
 8010516:	d109      	bne.n	801052c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010518:	4b10      	ldr	r3, [pc, #64]	@ (801055c <xTimerGenericCommand+0x98>)
 801051a:	6818      	ldr	r0, [r3, #0]
 801051c:	f107 0110 	add.w	r1, r7, #16
 8010520:	2300      	movs	r3, #0
 8010522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010524:	f7fd fe26 	bl	800e174 <xQueueGenericSend>
 8010528:	6278      	str	r0, [r7, #36]	@ 0x24
 801052a:	e012      	b.n	8010552 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801052c:	4b0b      	ldr	r3, [pc, #44]	@ (801055c <xTimerGenericCommand+0x98>)
 801052e:	6818      	ldr	r0, [r3, #0]
 8010530:	f107 0110 	add.w	r1, r7, #16
 8010534:	2300      	movs	r3, #0
 8010536:	2200      	movs	r2, #0
 8010538:	f7fd fe1c 	bl	800e174 <xQueueGenericSend>
 801053c:	6278      	str	r0, [r7, #36]	@ 0x24
 801053e:	e008      	b.n	8010552 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010540:	4b06      	ldr	r3, [pc, #24]	@ (801055c <xTimerGenericCommand+0x98>)
 8010542:	6818      	ldr	r0, [r3, #0]
 8010544:	f107 0110 	add.w	r1, r7, #16
 8010548:	2300      	movs	r3, #0
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	f7fd ff14 	bl	800e378 <xQueueGenericSendFromISR>
 8010550:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010554:	4618      	mov	r0, r3
 8010556:	3728      	adds	r7, #40	@ 0x28
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	20002c5c 	.word	0x20002c5c

08010560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af02      	add	r7, sp, #8
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801056a:	4b23      	ldr	r3, [pc, #140]	@ (80105f8 <prvProcessExpiredTimer+0x98>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fd fc8b 	bl	800de94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010584:	f003 0304 	and.w	r3, r3, #4
 8010588:	2b00      	cmp	r3, #0
 801058a:	d023      	beq.n	80105d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	699a      	ldr	r2, [r3, #24]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	18d1      	adds	r1, r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	6978      	ldr	r0, [r7, #20]
 801059a:	f000 f8d5 	bl	8010748 <prvInsertTimerInActiveList>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d020      	beq.n	80105e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105a4:	2300      	movs	r3, #0
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	2300      	movs	r3, #0
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	2100      	movs	r1, #0
 80105ae:	6978      	ldr	r0, [r7, #20]
 80105b0:	f7ff ff88 	bl	80104c4 <xTimerGenericCommand>
 80105b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d114      	bne.n	80105e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80105bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	60fb      	str	r3, [r7, #12]
}
 80105ce:	bf00      	nop
 80105d0:	bf00      	nop
 80105d2:	e7fd      	b.n	80105d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105da:	f023 0301 	bic.w	r3, r3, #1
 80105de:	b2da      	uxtb	r2, r3
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	6a1b      	ldr	r3, [r3, #32]
 80105ea:	6978      	ldr	r0, [r7, #20]
 80105ec:	4798      	blx	r3
}
 80105ee:	bf00      	nop
 80105f0:	3718      	adds	r7, #24
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	20002c54 	.word	0x20002c54

080105fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010604:	f107 0308 	add.w	r3, r7, #8
 8010608:	4618      	mov	r0, r3
 801060a:	f000 f859 	bl	80106c0 <prvGetNextExpireTime>
 801060e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	4619      	mov	r1, r3
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f000 f805 	bl	8010624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801061a:	f000 f8d7 	bl	80107cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801061e:	bf00      	nop
 8010620:	e7f0      	b.n	8010604 <prvTimerTask+0x8>
	...

08010624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801062e:	f7fe fd5d 	bl	800f0ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010632:	f107 0308 	add.w	r3, r7, #8
 8010636:	4618      	mov	r0, r3
 8010638:	f000 f866 	bl	8010708 <prvSampleTimeNow>
 801063c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d130      	bne.n	80106a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10a      	bne.n	8010660 <prvProcessTimerOrBlockTask+0x3c>
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	429a      	cmp	r2, r3
 8010650:	d806      	bhi.n	8010660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010652:	f7fe fd59 	bl	800f108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010656:	68f9      	ldr	r1, [r7, #12]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff ff81 	bl	8010560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801065e:	e024      	b.n	80106aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d008      	beq.n	8010678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010666:	4b13      	ldr	r3, [pc, #76]	@ (80106b4 <prvProcessTimerOrBlockTask+0x90>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <prvProcessTimerOrBlockTask+0x50>
 8010670:	2301      	movs	r3, #1
 8010672:	e000      	b.n	8010676 <prvProcessTimerOrBlockTask+0x52>
 8010674:	2300      	movs	r3, #0
 8010676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010678:	4b0f      	ldr	r3, [pc, #60]	@ (80106b8 <prvProcessTimerOrBlockTask+0x94>)
 801067a:	6818      	ldr	r0, [r3, #0]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	4619      	mov	r1, r3
 8010686:	f7fe f9b3 	bl	800e9f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801068a:	f7fe fd3d 	bl	800f108 <xTaskResumeAll>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10a      	bne.n	80106aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010694:	4b09      	ldr	r3, [pc, #36]	@ (80106bc <prvProcessTimerOrBlockTask+0x98>)
 8010696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	f3bf 8f4f 	dsb	sy
 80106a0:	f3bf 8f6f 	isb	sy
}
 80106a4:	e001      	b.n	80106aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80106a6:	f7fe fd2f 	bl	800f108 <xTaskResumeAll>
}
 80106aa:	bf00      	nop
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	20002c58 	.word	0x20002c58
 80106b8:	20002c5c 	.word	0x20002c5c
 80106bc:	e000ed04 	.word	0xe000ed04

080106c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80106c0:	b480      	push	{r7}
 80106c2:	b085      	sub	sp, #20
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80106c8:	4b0e      	ldr	r3, [pc, #56]	@ (8010704 <prvGetNextExpireTime+0x44>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <prvGetNextExpireTime+0x16>
 80106d2:	2201      	movs	r2, #1
 80106d4:	e000      	b.n	80106d8 <prvGetNextExpireTime+0x18>
 80106d6:	2200      	movs	r2, #0
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d105      	bne.n	80106f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106e4:	4b07      	ldr	r3, [pc, #28]	@ (8010704 <prvGetNextExpireTime+0x44>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	60fb      	str	r3, [r7, #12]
 80106ee:	e001      	b.n	80106f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80106f0:	2300      	movs	r3, #0
 80106f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80106f4:	68fb      	ldr	r3, [r7, #12]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3714      	adds	r7, #20
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	20002c54 	.word	0x20002c54

08010708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010710:	f7fe fd98 	bl	800f244 <xTaskGetTickCount>
 8010714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010716:	4b0b      	ldr	r3, [pc, #44]	@ (8010744 <prvSampleTimeNow+0x3c>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68fa      	ldr	r2, [r7, #12]
 801071c:	429a      	cmp	r2, r3
 801071e:	d205      	bcs.n	801072c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010720:	f000 f93a 	bl	8010998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2201      	movs	r2, #1
 8010728:	601a      	str	r2, [r3, #0]
 801072a:	e002      	b.n	8010732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010732:	4a04      	ldr	r2, [pc, #16]	@ (8010744 <prvSampleTimeNow+0x3c>)
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010738:	68fb      	ldr	r3, [r7, #12]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	20002c64 	.word	0x20002c64

08010748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010756:	2300      	movs	r3, #0
 8010758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	68ba      	ldr	r2, [r7, #8]
 801075e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010766:	68ba      	ldr	r2, [r7, #8]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	429a      	cmp	r2, r3
 801076c:	d812      	bhi.n	8010794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	1ad2      	subs	r2, r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	429a      	cmp	r2, r3
 801077a:	d302      	bcc.n	8010782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801077c:	2301      	movs	r3, #1
 801077e:	617b      	str	r3, [r7, #20]
 8010780:	e01b      	b.n	80107ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010782:	4b10      	ldr	r3, [pc, #64]	@ (80107c4 <prvInsertTimerInActiveList+0x7c>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	3304      	adds	r3, #4
 801078a:	4619      	mov	r1, r3
 801078c:	4610      	mov	r0, r2
 801078e:	f7fd fb48 	bl	800de22 <vListInsert>
 8010792:	e012      	b.n	80107ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d206      	bcs.n	80107aa <prvInsertTimerInActiveList+0x62>
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d302      	bcc.n	80107aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80107a4:	2301      	movs	r3, #1
 80107a6:	617b      	str	r3, [r7, #20]
 80107a8:	e007      	b.n	80107ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107aa:	4b07      	ldr	r3, [pc, #28]	@ (80107c8 <prvInsertTimerInActiveList+0x80>)
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	3304      	adds	r3, #4
 80107b2:	4619      	mov	r1, r3
 80107b4:	4610      	mov	r0, r2
 80107b6:	f7fd fb34 	bl	800de22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80107ba:	697b      	ldr	r3, [r7, #20]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3718      	adds	r7, #24
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	20002c58 	.word	0x20002c58
 80107c8:	20002c54 	.word	0x20002c54

080107cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b08e      	sub	sp, #56	@ 0x38
 80107d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107d2:	e0ce      	b.n	8010972 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	da19      	bge.n	801080e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80107da:	1d3b      	adds	r3, r7, #4
 80107dc:	3304      	adds	r3, #4
 80107de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d10b      	bne.n	80107fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80107e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ea:	f383 8811 	msr	BASEPRI, r3
 80107ee:	f3bf 8f6f 	isb	sy
 80107f2:	f3bf 8f4f 	dsb	sy
 80107f6:	61fb      	str	r3, [r7, #28]
}
 80107f8:	bf00      	nop
 80107fa:	bf00      	nop
 80107fc:	e7fd      	b.n	80107fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80107fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010804:	6850      	ldr	r0, [r2, #4]
 8010806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010808:	6892      	ldr	r2, [r2, #8]
 801080a:	4611      	mov	r1, r2
 801080c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2b00      	cmp	r3, #0
 8010812:	f2c0 80ae 	blt.w	8010972 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801081a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081c:	695b      	ldr	r3, [r3, #20]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d004      	beq.n	801082c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010824:	3304      	adds	r3, #4
 8010826:	4618      	mov	r0, r3
 8010828:	f7fd fb34 	bl	800de94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801082c:	463b      	mov	r3, r7
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff ff6a 	bl	8010708 <prvSampleTimeNow>
 8010834:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b09      	cmp	r3, #9
 801083a:	f200 8097 	bhi.w	801096c <prvProcessReceivedCommands+0x1a0>
 801083e:	a201      	add	r2, pc, #4	@ (adr r2, 8010844 <prvProcessReceivedCommands+0x78>)
 8010840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010844:	0801086d 	.word	0x0801086d
 8010848:	0801086d 	.word	0x0801086d
 801084c:	0801086d 	.word	0x0801086d
 8010850:	080108e3 	.word	0x080108e3
 8010854:	080108f7 	.word	0x080108f7
 8010858:	08010943 	.word	0x08010943
 801085c:	0801086d 	.word	0x0801086d
 8010860:	0801086d 	.word	0x0801086d
 8010864:	080108e3 	.word	0x080108e3
 8010868:	080108f7 	.word	0x080108f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801086c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801086e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010872:	f043 0301 	orr.w	r3, r3, #1
 8010876:	b2da      	uxtb	r2, r3
 8010878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010882:	699b      	ldr	r3, [r3, #24]
 8010884:	18d1      	adds	r1, r2, r3
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801088a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801088c:	f7ff ff5c 	bl	8010748 <prvInsertTimerInActiveList>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d06c      	beq.n	8010970 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010898:	6a1b      	ldr	r3, [r3, #32]
 801089a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801089c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801089e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108a4:	f003 0304 	and.w	r3, r3, #4
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d061      	beq.n	8010970 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b0:	699b      	ldr	r3, [r3, #24]
 80108b2:	441a      	add	r2, r3
 80108b4:	2300      	movs	r3, #0
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	2300      	movs	r3, #0
 80108ba:	2100      	movs	r1, #0
 80108bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108be:	f7ff fe01 	bl	80104c4 <xTimerGenericCommand>
 80108c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d152      	bne.n	8010970 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80108ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ce:	f383 8811 	msr	BASEPRI, r3
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	f3bf 8f4f 	dsb	sy
 80108da:	61bb      	str	r3, [r7, #24]
}
 80108dc:	bf00      	nop
 80108de:	bf00      	nop
 80108e0:	e7fd      	b.n	80108de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108e8:	f023 0301 	bic.w	r3, r3, #1
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80108f4:	e03d      	b.n	8010972 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108fc:	f043 0301 	orr.w	r3, r3, #1
 8010900:	b2da      	uxtb	r2, r3
 8010902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010904:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010908:	68ba      	ldr	r2, [r7, #8]
 801090a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801090c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	699b      	ldr	r3, [r3, #24]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10b      	bne.n	801092e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801091a:	f383 8811 	msr	BASEPRI, r3
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	f3bf 8f4f 	dsb	sy
 8010926:	617b      	str	r3, [r7, #20]
}
 8010928:	bf00      	nop
 801092a:	bf00      	nop
 801092c:	e7fd      	b.n	801092a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010930:	699a      	ldr	r2, [r3, #24]
 8010932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010934:	18d1      	adds	r1, r2, r3
 8010936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801093a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801093c:	f7ff ff04 	bl	8010748 <prvInsertTimerInActiveList>
					break;
 8010940:	e017      	b.n	8010972 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010948:	f003 0302 	and.w	r3, r3, #2
 801094c:	2b00      	cmp	r3, #0
 801094e:	d103      	bne.n	8010958 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010952:	f000 fbe9 	bl	8011128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010956:	e00c      	b.n	8010972 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801095a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801095e:	f023 0301 	bic.w	r3, r3, #1
 8010962:	b2da      	uxtb	r2, r3
 8010964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801096a:	e002      	b.n	8010972 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801096c:	bf00      	nop
 801096e:	e000      	b.n	8010972 <prvProcessReceivedCommands+0x1a6>
					break;
 8010970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010972:	4b08      	ldr	r3, [pc, #32]	@ (8010994 <prvProcessReceivedCommands+0x1c8>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	1d39      	adds	r1, r7, #4
 8010978:	2200      	movs	r2, #0
 801097a:	4618      	mov	r0, r3
 801097c:	f7fd fd9a 	bl	800e4b4 <xQueueReceive>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	f47f af26 	bne.w	80107d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010988:	bf00      	nop
 801098a:	bf00      	nop
 801098c:	3730      	adds	r7, #48	@ 0x30
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	20002c5c 	.word	0x20002c5c

08010998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b088      	sub	sp, #32
 801099c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801099e:	e049      	b.n	8010a34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109a0:	4b2e      	ldr	r3, [pc, #184]	@ (8010a5c <prvSwitchTimerLists+0xc4>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	68db      	ldr	r3, [r3, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109aa:	4b2c      	ldr	r3, [pc, #176]	@ (8010a5c <prvSwitchTimerLists+0xc4>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	3304      	adds	r3, #4
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fd fa6b 	bl	800de94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	68f8      	ldr	r0, [r7, #12]
 80109c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109cc:	f003 0304 	and.w	r3, r3, #4
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d02f      	beq.n	8010a34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	699b      	ldr	r3, [r3, #24]
 80109d8:	693a      	ldr	r2, [r7, #16]
 80109da:	4413      	add	r3, r2
 80109dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109de:	68ba      	ldr	r2, [r7, #8]
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d90e      	bls.n	8010a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	68ba      	ldr	r2, [r7, #8]
 80109ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	68fa      	ldr	r2, [r7, #12]
 80109f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109f2:	4b1a      	ldr	r3, [pc, #104]	@ (8010a5c <prvSwitchTimerLists+0xc4>)
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	3304      	adds	r3, #4
 80109fa:	4619      	mov	r1, r3
 80109fc:	4610      	mov	r0, r2
 80109fe:	f7fd fa10 	bl	800de22 <vListInsert>
 8010a02:	e017      	b.n	8010a34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a04:	2300      	movs	r3, #0
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	2300      	movs	r3, #0
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f7ff fd58 	bl	80104c4 <xTimerGenericCommand>
 8010a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d10b      	bne.n	8010a34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a20:	f383 8811 	msr	BASEPRI, r3
 8010a24:	f3bf 8f6f 	isb	sy
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	603b      	str	r3, [r7, #0]
}
 8010a2e:	bf00      	nop
 8010a30:	bf00      	nop
 8010a32:	e7fd      	b.n	8010a30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a34:	4b09      	ldr	r3, [pc, #36]	@ (8010a5c <prvSwitchTimerLists+0xc4>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1b0      	bne.n	80109a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a3e:	4b07      	ldr	r3, [pc, #28]	@ (8010a5c <prvSwitchTimerLists+0xc4>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a44:	4b06      	ldr	r3, [pc, #24]	@ (8010a60 <prvSwitchTimerLists+0xc8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a04      	ldr	r2, [pc, #16]	@ (8010a5c <prvSwitchTimerLists+0xc4>)
 8010a4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a4c:	4a04      	ldr	r2, [pc, #16]	@ (8010a60 <prvSwitchTimerLists+0xc8>)
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	6013      	str	r3, [r2, #0]
}
 8010a52:	bf00      	nop
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	20002c54 	.word	0x20002c54
 8010a60:	20002c58 	.word	0x20002c58

08010a64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a6a:	f000 f96d 	bl	8010d48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a6e:	4b15      	ldr	r3, [pc, #84]	@ (8010ac4 <prvCheckForValidListAndQueue+0x60>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d120      	bne.n	8010ab8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a76:	4814      	ldr	r0, [pc, #80]	@ (8010ac8 <prvCheckForValidListAndQueue+0x64>)
 8010a78:	f7fd f982 	bl	800dd80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a7c:	4813      	ldr	r0, [pc, #76]	@ (8010acc <prvCheckForValidListAndQueue+0x68>)
 8010a7e:	f7fd f97f 	bl	800dd80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a82:	4b13      	ldr	r3, [pc, #76]	@ (8010ad0 <prvCheckForValidListAndQueue+0x6c>)
 8010a84:	4a10      	ldr	r2, [pc, #64]	@ (8010ac8 <prvCheckForValidListAndQueue+0x64>)
 8010a86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a88:	4b12      	ldr	r3, [pc, #72]	@ (8010ad4 <prvCheckForValidListAndQueue+0x70>)
 8010a8a:	4a10      	ldr	r2, [pc, #64]	@ (8010acc <prvCheckForValidListAndQueue+0x68>)
 8010a8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a8e:	2300      	movs	r3, #0
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	4b11      	ldr	r3, [pc, #68]	@ (8010ad8 <prvCheckForValidListAndQueue+0x74>)
 8010a94:	4a11      	ldr	r2, [pc, #68]	@ (8010adc <prvCheckForValidListAndQueue+0x78>)
 8010a96:	2110      	movs	r1, #16
 8010a98:	200a      	movs	r0, #10
 8010a9a:	f7fd fa8f 	bl	800dfbc <xQueueGenericCreateStatic>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	4a08      	ldr	r2, [pc, #32]	@ (8010ac4 <prvCheckForValidListAndQueue+0x60>)
 8010aa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010aa4:	4b07      	ldr	r3, [pc, #28]	@ (8010ac4 <prvCheckForValidListAndQueue+0x60>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d005      	beq.n	8010ab8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010aac:	4b05      	ldr	r3, [pc, #20]	@ (8010ac4 <prvCheckForValidListAndQueue+0x60>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	490b      	ldr	r1, [pc, #44]	@ (8010ae0 <prvCheckForValidListAndQueue+0x7c>)
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fd ff72 	bl	800e99c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ab8:	f000 f978 	bl	8010dac <vPortExitCritical>
}
 8010abc:	bf00      	nop
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20002c5c 	.word	0x20002c5c
 8010ac8:	20002c2c 	.word	0x20002c2c
 8010acc:	20002c40 	.word	0x20002c40
 8010ad0:	20002c54 	.word	0x20002c54
 8010ad4:	20002c58 	.word	0x20002c58
 8010ad8:	20002d08 	.word	0x20002d08
 8010adc:	20002c68 	.word	0x20002c68
 8010ae0:	080134e4 	.word	0x080134e4

08010ae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b085      	sub	sp, #20
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	3b04      	subs	r3, #4
 8010af4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3b04      	subs	r3, #4
 8010b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	f023 0201 	bic.w	r2, r3, #1
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	3b04      	subs	r3, #4
 8010b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b14:	4a0c      	ldr	r2, [pc, #48]	@ (8010b48 <pxPortInitialiseStack+0x64>)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	3b14      	subs	r3, #20
 8010b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3b04      	subs	r3, #4
 8010b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f06f 0202 	mvn.w	r2, #2
 8010b32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3b20      	subs	r3, #32
 8010b38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3714      	adds	r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	08010b4d 	.word	0x08010b4d

08010b4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b56:	4b13      	ldr	r3, [pc, #76]	@ (8010ba4 <prvTaskExitError+0x58>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b5e:	d00b      	beq.n	8010b78 <prvTaskExitError+0x2c>
	__asm volatile
 8010b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	60fb      	str	r3, [r7, #12]
}
 8010b72:	bf00      	nop
 8010b74:	bf00      	nop
 8010b76:	e7fd      	b.n	8010b74 <prvTaskExitError+0x28>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	60bb      	str	r3, [r7, #8]
}
 8010b8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b8c:	bf00      	nop
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d0fc      	beq.n	8010b8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b94:	bf00      	nop
 8010b96:	bf00      	nop
 8010b98:	3714      	adds	r7, #20
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	2000003c 	.word	0x2000003c
	...

08010bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010bb0:	4b07      	ldr	r3, [pc, #28]	@ (8010bd0 <pxCurrentTCBConst2>)
 8010bb2:	6819      	ldr	r1, [r3, #0]
 8010bb4:	6808      	ldr	r0, [r1, #0]
 8010bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bba:	f380 8809 	msr	PSP, r0
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f04f 0000 	mov.w	r0, #0
 8010bc6:	f380 8811 	msr	BASEPRI, r0
 8010bca:	4770      	bx	lr
 8010bcc:	f3af 8000 	nop.w

08010bd0 <pxCurrentTCBConst2>:
 8010bd0:	20002724 	.word	0x20002724
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010bd4:	bf00      	nop
 8010bd6:	bf00      	nop

08010bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010bd8:	4808      	ldr	r0, [pc, #32]	@ (8010bfc <prvPortStartFirstTask+0x24>)
 8010bda:	6800      	ldr	r0, [r0, #0]
 8010bdc:	6800      	ldr	r0, [r0, #0]
 8010bde:	f380 8808 	msr	MSP, r0
 8010be2:	f04f 0000 	mov.w	r0, #0
 8010be6:	f380 8814 	msr	CONTROL, r0
 8010bea:	b662      	cpsie	i
 8010bec:	b661      	cpsie	f
 8010bee:	f3bf 8f4f 	dsb	sy
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	df00      	svc	0
 8010bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bfa:	bf00      	nop
 8010bfc:	e000ed08 	.word	0xe000ed08

08010c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c06:	4b47      	ldr	r3, [pc, #284]	@ (8010d24 <xPortStartScheduler+0x124>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a47      	ldr	r2, [pc, #284]	@ (8010d28 <xPortStartScheduler+0x128>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d10b      	bne.n	8010c28 <xPortStartScheduler+0x28>
	__asm volatile
 8010c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	613b      	str	r3, [r7, #16]
}
 8010c22:	bf00      	nop
 8010c24:	bf00      	nop
 8010c26:	e7fd      	b.n	8010c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c28:	4b3e      	ldr	r3, [pc, #248]	@ (8010d24 <xPortStartScheduler+0x124>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8010d2c <xPortStartScheduler+0x12c>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d10b      	bne.n	8010c4a <xPortStartScheduler+0x4a>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	60fb      	str	r3, [r7, #12]
}
 8010c44:	bf00      	nop
 8010c46:	bf00      	nop
 8010c48:	e7fd      	b.n	8010c46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c4a:	4b39      	ldr	r3, [pc, #228]	@ (8010d30 <xPortStartScheduler+0x130>)
 8010c4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	22ff      	movs	r2, #255	@ 0xff
 8010c5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c64:	78fb      	ldrb	r3, [r7, #3]
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	4b31      	ldr	r3, [pc, #196]	@ (8010d34 <xPortStartScheduler+0x134>)
 8010c70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c72:	4b31      	ldr	r3, [pc, #196]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010c74:	2207      	movs	r2, #7
 8010c76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c78:	e009      	b.n	8010c8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	4a2d      	ldr	r2, [pc, #180]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010c82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c84:	78fb      	ldrb	r3, [r7, #3]
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c8e:	78fb      	ldrb	r3, [r7, #3]
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c96:	2b80      	cmp	r3, #128	@ 0x80
 8010c98:	d0ef      	beq.n	8010c7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c9a:	4b27      	ldr	r3, [pc, #156]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f1c3 0307 	rsb	r3, r3, #7
 8010ca2:	2b04      	cmp	r3, #4
 8010ca4:	d00b      	beq.n	8010cbe <xPortStartScheduler+0xbe>
	__asm volatile
 8010ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	60bb      	str	r3, [r7, #8]
}
 8010cb8:	bf00      	nop
 8010cba:	bf00      	nop
 8010cbc:	e7fd      	b.n	8010cba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	021b      	lsls	r3, r3, #8
 8010cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010cc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010cd0:	4a19      	ldr	r2, [pc, #100]	@ (8010d38 <xPortStartScheduler+0x138>)
 8010cd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	b2da      	uxtb	r2, r3
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cdc:	4b17      	ldr	r3, [pc, #92]	@ (8010d3c <xPortStartScheduler+0x13c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a16      	ldr	r2, [pc, #88]	@ (8010d3c <xPortStartScheduler+0x13c>)
 8010ce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010ce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ce8:	4b14      	ldr	r3, [pc, #80]	@ (8010d3c <xPortStartScheduler+0x13c>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a13      	ldr	r2, [pc, #76]	@ (8010d3c <xPortStartScheduler+0x13c>)
 8010cee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010cf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010cf4:	f000 f8da 	bl	8010eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010cf8:	4b11      	ldr	r3, [pc, #68]	@ (8010d40 <xPortStartScheduler+0x140>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010cfe:	f000 f8f9 	bl	8010ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d02:	4b10      	ldr	r3, [pc, #64]	@ (8010d44 <xPortStartScheduler+0x144>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4a0f      	ldr	r2, [pc, #60]	@ (8010d44 <xPortStartScheduler+0x144>)
 8010d08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010d0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d0e:	f7ff ff63 	bl	8010bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d12:	f7fe fbf1 	bl	800f4f8 <vTaskSwitchContext>
	prvTaskExitError();
 8010d16:	f7ff ff19 	bl	8010b4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d1a:	2300      	movs	r3, #0
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	e000ed00 	.word	0xe000ed00
 8010d28:	410fc271 	.word	0x410fc271
 8010d2c:	410fc270 	.word	0x410fc270
 8010d30:	e000e400 	.word	0xe000e400
 8010d34:	20002d58 	.word	0x20002d58
 8010d38:	20002d5c 	.word	0x20002d5c
 8010d3c:	e000ed20 	.word	0xe000ed20
 8010d40:	2000003c 	.word	0x2000003c
 8010d44:	e000ef34 	.word	0xe000ef34

08010d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	607b      	str	r3, [r7, #4]
}
 8010d60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d62:	4b10      	ldr	r3, [pc, #64]	@ (8010da4 <vPortEnterCritical+0x5c>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	3301      	adds	r3, #1
 8010d68:	4a0e      	ldr	r2, [pc, #56]	@ (8010da4 <vPortEnterCritical+0x5c>)
 8010d6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8010da4 <vPortEnterCritical+0x5c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d110      	bne.n	8010d96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d74:	4b0c      	ldr	r3, [pc, #48]	@ (8010da8 <vPortEnterCritical+0x60>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d00b      	beq.n	8010d96 <vPortEnterCritical+0x4e>
	__asm volatile
 8010d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	603b      	str	r3, [r7, #0]
}
 8010d90:	bf00      	nop
 8010d92:	bf00      	nop
 8010d94:	e7fd      	b.n	8010d92 <vPortEnterCritical+0x4a>
	}
}
 8010d96:	bf00      	nop
 8010d98:	370c      	adds	r7, #12
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da0:	4770      	bx	lr
 8010da2:	bf00      	nop
 8010da4:	2000003c 	.word	0x2000003c
 8010da8:	e000ed04 	.word	0xe000ed04

08010dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010db2:	4b12      	ldr	r3, [pc, #72]	@ (8010dfc <vPortExitCritical+0x50>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10b      	bne.n	8010dd2 <vPortExitCritical+0x26>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	607b      	str	r3, [r7, #4]
}
 8010dcc:	bf00      	nop
 8010dce:	bf00      	nop
 8010dd0:	e7fd      	b.n	8010dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8010dfc <vPortExitCritical+0x50>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	4a08      	ldr	r2, [pc, #32]	@ (8010dfc <vPortExitCritical+0x50>)
 8010dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010ddc:	4b07      	ldr	r3, [pc, #28]	@ (8010dfc <vPortExitCritical+0x50>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d105      	bne.n	8010df0 <vPortExitCritical+0x44>
 8010de4:	2300      	movs	r3, #0
 8010de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	f383 8811 	msr	BASEPRI, r3
}
 8010dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010df0:	bf00      	nop
 8010df2:	370c      	adds	r7, #12
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr
 8010dfc:	2000003c 	.word	0x2000003c

08010e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e00:	f3ef 8009 	mrs	r0, PSP
 8010e04:	f3bf 8f6f 	isb	sy
 8010e08:	4b15      	ldr	r3, [pc, #84]	@ (8010e60 <pxCurrentTCBConst>)
 8010e0a:	681a      	ldr	r2, [r3, #0]
 8010e0c:	f01e 0f10 	tst.w	lr, #16
 8010e10:	bf08      	it	eq
 8010e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1a:	6010      	str	r0, [r2, #0]
 8010e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010e24:	f380 8811 	msr	BASEPRI, r0
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	f3bf 8f6f 	isb	sy
 8010e30:	f7fe fb62 	bl	800f4f8 <vTaskSwitchContext>
 8010e34:	f04f 0000 	mov.w	r0, #0
 8010e38:	f380 8811 	msr	BASEPRI, r0
 8010e3c:	bc09      	pop	{r0, r3}
 8010e3e:	6819      	ldr	r1, [r3, #0]
 8010e40:	6808      	ldr	r0, [r1, #0]
 8010e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e46:	f01e 0f10 	tst.w	lr, #16
 8010e4a:	bf08      	it	eq
 8010e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e50:	f380 8809 	msr	PSP, r0
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	f3af 8000 	nop.w

08010e60 <pxCurrentTCBConst>:
 8010e60:	20002724 	.word	0x20002724
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop

08010e68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e72:	f383 8811 	msr	BASEPRI, r3
 8010e76:	f3bf 8f6f 	isb	sy
 8010e7a:	f3bf 8f4f 	dsb	sy
 8010e7e:	607b      	str	r3, [r7, #4]
}
 8010e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e82:	f7fe fa7f 	bl	800f384 <xTaskIncrementTick>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d003      	beq.n	8010e94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e8c:	4b06      	ldr	r3, [pc, #24]	@ (8010ea8 <xPortSysTickHandler+0x40>)
 8010e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e92:	601a      	str	r2, [r3, #0]
 8010e94:	2300      	movs	r3, #0
 8010e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	f383 8811 	msr	BASEPRI, r3
}
 8010e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ea0:	bf00      	nop
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	e000ed04 	.word	0xe000ed04

08010eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010eac:	b480      	push	{r7}
 8010eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee0 <vPortSetupTimerInterrupt+0x34>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee4 <vPortSetupTimerInterrupt+0x38>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ee8 <vPortSetupTimerInterrupt+0x3c>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8010eec <vPortSetupTimerInterrupt+0x40>)
 8010ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ec6:	099b      	lsrs	r3, r3, #6
 8010ec8:	4a09      	ldr	r2, [pc, #36]	@ (8010ef0 <vPortSetupTimerInterrupt+0x44>)
 8010eca:	3b01      	subs	r3, #1
 8010ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010ece:	4b04      	ldr	r3, [pc, #16]	@ (8010ee0 <vPortSetupTimerInterrupt+0x34>)
 8010ed0:	2207      	movs	r2, #7
 8010ed2:	601a      	str	r2, [r3, #0]
}
 8010ed4:	bf00      	nop
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr
 8010ede:	bf00      	nop
 8010ee0:	e000e010 	.word	0xe000e010
 8010ee4:	e000e018 	.word	0xe000e018
 8010ee8:	20000010 	.word	0x20000010
 8010eec:	10624dd3 	.word	0x10624dd3
 8010ef0:	e000e014 	.word	0xe000e014

08010ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010f04 <vPortEnableVFP+0x10>
 8010ef8:	6801      	ldr	r1, [r0, #0]
 8010efa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010efe:	6001      	str	r1, [r0, #0]
 8010f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f02:	bf00      	nop
 8010f04:	e000ed88 	.word	0xe000ed88

08010f08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f08:	b480      	push	{r7}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f0e:	f3ef 8305 	mrs	r3, IPSR
 8010f12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2b0f      	cmp	r3, #15
 8010f18:	d915      	bls.n	8010f46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f1a:	4a18      	ldr	r2, [pc, #96]	@ (8010f7c <vPortValidateInterruptPriority+0x74>)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	4413      	add	r3, r2
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f24:	4b16      	ldr	r3, [pc, #88]	@ (8010f80 <vPortValidateInterruptPriority+0x78>)
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	7afa      	ldrb	r2, [r7, #11]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d20b      	bcs.n	8010f46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f32:	f383 8811 	msr	BASEPRI, r3
 8010f36:	f3bf 8f6f 	isb	sy
 8010f3a:	f3bf 8f4f 	dsb	sy
 8010f3e:	607b      	str	r3, [r7, #4]
}
 8010f40:	bf00      	nop
 8010f42:	bf00      	nop
 8010f44:	e7fd      	b.n	8010f42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f46:	4b0f      	ldr	r3, [pc, #60]	@ (8010f84 <vPortValidateInterruptPriority+0x7c>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8010f88 <vPortValidateInterruptPriority+0x80>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d90b      	bls.n	8010f6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f5a:	f383 8811 	msr	BASEPRI, r3
 8010f5e:	f3bf 8f6f 	isb	sy
 8010f62:	f3bf 8f4f 	dsb	sy
 8010f66:	603b      	str	r3, [r7, #0]
}
 8010f68:	bf00      	nop
 8010f6a:	bf00      	nop
 8010f6c:	e7fd      	b.n	8010f6a <vPortValidateInterruptPriority+0x62>
	}
 8010f6e:	bf00      	nop
 8010f70:	3714      	adds	r7, #20
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	e000e3f0 	.word	0xe000e3f0
 8010f80:	20002d58 	.word	0x20002d58
 8010f84:	e000ed0c 	.word	0xe000ed0c
 8010f88:	20002d5c 	.word	0x20002d5c

08010f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b08a      	sub	sp, #40	@ 0x28
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f94:	2300      	movs	r3, #0
 8010f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f98:	f7fe f8a8 	bl	800f0ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8011110 <pvPortMalloc+0x184>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d101      	bne.n	8010fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010fa4:	f000 f930 	bl	8011208 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8011114 <pvPortMalloc+0x188>)
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4013      	ands	r3, r2
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f040 8095 	bne.w	80110e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d01e      	beq.n	8010ffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f003 0307 	and.w	r3, r3, #7
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d015      	beq.n	8010ffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f023 0307 	bic.w	r3, r3, #7
 8010fd4:	3308      	adds	r3, #8
 8010fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f003 0307 	and.w	r3, r3, #7
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00b      	beq.n	8010ffa <pvPortMalloc+0x6e>
	__asm volatile
 8010fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fe6:	f383 8811 	msr	BASEPRI, r3
 8010fea:	f3bf 8f6f 	isb	sy
 8010fee:	f3bf 8f4f 	dsb	sy
 8010ff2:	617b      	str	r3, [r7, #20]
}
 8010ff4:	bf00      	nop
 8010ff6:	bf00      	nop
 8010ff8:	e7fd      	b.n	8010ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d06f      	beq.n	80110e0 <pvPortMalloc+0x154>
 8011000:	4b45      	ldr	r3, [pc, #276]	@ (8011118 <pvPortMalloc+0x18c>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	687a      	ldr	r2, [r7, #4]
 8011006:	429a      	cmp	r2, r3
 8011008:	d86a      	bhi.n	80110e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801100a:	4b44      	ldr	r3, [pc, #272]	@ (801111c <pvPortMalloc+0x190>)
 801100c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801100e:	4b43      	ldr	r3, [pc, #268]	@ (801111c <pvPortMalloc+0x190>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011014:	e004      	b.n	8011020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	429a      	cmp	r2, r3
 8011028:	d903      	bls.n	8011032 <pvPortMalloc+0xa6>
 801102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d1f1      	bne.n	8011016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011032:	4b37      	ldr	r3, [pc, #220]	@ (8011110 <pvPortMalloc+0x184>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011038:	429a      	cmp	r2, r3
 801103a:	d051      	beq.n	80110e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801103c:	6a3b      	ldr	r3, [r7, #32]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2208      	movs	r2, #8
 8011042:	4413      	add	r3, r2
 8011044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	1ad2      	subs	r2, r2, r3
 8011056:	2308      	movs	r3, #8
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	429a      	cmp	r2, r3
 801105c:	d920      	bls.n	80110a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801105e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4413      	add	r3, r2
 8011064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	f003 0307 	and.w	r3, r3, #7
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00b      	beq.n	8011088 <pvPortMalloc+0xfc>
	__asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	613b      	str	r3, [r7, #16]
}
 8011082:	bf00      	nop
 8011084:	bf00      	nop
 8011086:	e7fd      	b.n	8011084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	1ad2      	subs	r2, r2, r3
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801109a:	69b8      	ldr	r0, [r7, #24]
 801109c:	f000 f916 	bl	80112cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80110a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011118 <pvPortMalloc+0x18c>)
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	4a1b      	ldr	r2, [pc, #108]	@ (8011118 <pvPortMalloc+0x18c>)
 80110ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80110ae:	4b1a      	ldr	r3, [pc, #104]	@ (8011118 <pvPortMalloc+0x18c>)
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	4b1b      	ldr	r3, [pc, #108]	@ (8011120 <pvPortMalloc+0x194>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d203      	bcs.n	80110c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80110ba:	4b17      	ldr	r3, [pc, #92]	@ (8011118 <pvPortMalloc+0x18c>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4a18      	ldr	r2, [pc, #96]	@ (8011120 <pvPortMalloc+0x194>)
 80110c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80110c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	4b13      	ldr	r3, [pc, #76]	@ (8011114 <pvPortMalloc+0x188>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	431a      	orrs	r2, r3
 80110cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80110d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80110d6:	4b13      	ldr	r3, [pc, #76]	@ (8011124 <pvPortMalloc+0x198>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3301      	adds	r3, #1
 80110dc:	4a11      	ldr	r2, [pc, #68]	@ (8011124 <pvPortMalloc+0x198>)
 80110de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80110e0:	f7fe f812 	bl	800f108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	f003 0307 	and.w	r3, r3, #7
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d00b      	beq.n	8011106 <pvPortMalloc+0x17a>
	__asm volatile
 80110ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f2:	f383 8811 	msr	BASEPRI, r3
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	f3bf 8f4f 	dsb	sy
 80110fe:	60fb      	str	r3, [r7, #12]
}
 8011100:	bf00      	nop
 8011102:	bf00      	nop
 8011104:	e7fd      	b.n	8011102 <pvPortMalloc+0x176>
	return pvReturn;
 8011106:	69fb      	ldr	r3, [r7, #28]
}
 8011108:	4618      	mov	r0, r3
 801110a:	3728      	adds	r7, #40	@ 0x28
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	20006968 	.word	0x20006968
 8011114:	2000697c 	.word	0x2000697c
 8011118:	2000696c 	.word	0x2000696c
 801111c:	20006960 	.word	0x20006960
 8011120:	20006970 	.word	0x20006970
 8011124:	20006974 	.word	0x20006974

08011128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d04f      	beq.n	80111da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801113a:	2308      	movs	r3, #8
 801113c:	425b      	negs	r3, r3
 801113e:	697a      	ldr	r2, [r7, #20]
 8011140:	4413      	add	r3, r2
 8011142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	685a      	ldr	r2, [r3, #4]
 801114c:	4b25      	ldr	r3, [pc, #148]	@ (80111e4 <vPortFree+0xbc>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4013      	ands	r3, r2
 8011152:	2b00      	cmp	r3, #0
 8011154:	d10b      	bne.n	801116e <vPortFree+0x46>
	__asm volatile
 8011156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801115a:	f383 8811 	msr	BASEPRI, r3
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	60fb      	str	r3, [r7, #12]
}
 8011168:	bf00      	nop
 801116a:	bf00      	nop
 801116c:	e7fd      	b.n	801116a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00b      	beq.n	801118e <vPortFree+0x66>
	__asm volatile
 8011176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801117a:	f383 8811 	msr	BASEPRI, r3
 801117e:	f3bf 8f6f 	isb	sy
 8011182:	f3bf 8f4f 	dsb	sy
 8011186:	60bb      	str	r3, [r7, #8]
}
 8011188:	bf00      	nop
 801118a:	bf00      	nop
 801118c:	e7fd      	b.n	801118a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	685a      	ldr	r2, [r3, #4]
 8011192:	4b14      	ldr	r3, [pc, #80]	@ (80111e4 <vPortFree+0xbc>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	4013      	ands	r3, r2
 8011198:	2b00      	cmp	r3, #0
 801119a:	d01e      	beq.n	80111da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d11a      	bne.n	80111da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	685a      	ldr	r2, [r3, #4]
 80111a8:	4b0e      	ldr	r3, [pc, #56]	@ (80111e4 <vPortFree+0xbc>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	43db      	mvns	r3, r3
 80111ae:	401a      	ands	r2, r3
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80111b4:	f7fd ff9a 	bl	800f0ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	685a      	ldr	r2, [r3, #4]
 80111bc:	4b0a      	ldr	r3, [pc, #40]	@ (80111e8 <vPortFree+0xc0>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4413      	add	r3, r2
 80111c2:	4a09      	ldr	r2, [pc, #36]	@ (80111e8 <vPortFree+0xc0>)
 80111c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80111c6:	6938      	ldr	r0, [r7, #16]
 80111c8:	f000 f880 	bl	80112cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80111cc:	4b07      	ldr	r3, [pc, #28]	@ (80111ec <vPortFree+0xc4>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	3301      	adds	r3, #1
 80111d2:	4a06      	ldr	r2, [pc, #24]	@ (80111ec <vPortFree+0xc4>)
 80111d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80111d6:	f7fd ff97 	bl	800f108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80111da:	bf00      	nop
 80111dc:	3718      	adds	r7, #24
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	2000697c 	.word	0x2000697c
 80111e8:	2000696c 	.word	0x2000696c
 80111ec:	20006978 	.word	0x20006978

080111f0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80111f0:	b480      	push	{r7}
 80111f2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80111f4:	4b03      	ldr	r3, [pc, #12]	@ (8011204 <xPortGetFreeHeapSize+0x14>)
 80111f6:	681b      	ldr	r3, [r3, #0]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	2000696c 	.word	0x2000696c

08011208 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801120e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011212:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011214:	4b27      	ldr	r3, [pc, #156]	@ (80112b4 <prvHeapInit+0xac>)
 8011216:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f003 0307 	and.w	r3, r3, #7
 801121e:	2b00      	cmp	r3, #0
 8011220:	d00c      	beq.n	801123c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	3307      	adds	r3, #7
 8011226:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f023 0307 	bic.w	r3, r3, #7
 801122e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	4a1f      	ldr	r2, [pc, #124]	@ (80112b4 <prvHeapInit+0xac>)
 8011238:	4413      	add	r3, r2
 801123a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011240:	4a1d      	ldr	r2, [pc, #116]	@ (80112b8 <prvHeapInit+0xb0>)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011246:	4b1c      	ldr	r3, [pc, #112]	@ (80112b8 <prvHeapInit+0xb0>)
 8011248:	2200      	movs	r2, #0
 801124a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	68ba      	ldr	r2, [r7, #8]
 8011250:	4413      	add	r3, r2
 8011252:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011254:	2208      	movs	r2, #8
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	1a9b      	subs	r3, r3, r2
 801125a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f023 0307 	bic.w	r3, r3, #7
 8011262:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	4a15      	ldr	r2, [pc, #84]	@ (80112bc <prvHeapInit+0xb4>)
 8011268:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801126a:	4b14      	ldr	r3, [pc, #80]	@ (80112bc <prvHeapInit+0xb4>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2200      	movs	r2, #0
 8011270:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011272:	4b12      	ldr	r3, [pc, #72]	@ (80112bc <prvHeapInit+0xb4>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2200      	movs	r2, #0
 8011278:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	1ad2      	subs	r2, r2, r3
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011288:	4b0c      	ldr	r3, [pc, #48]	@ (80112bc <prvHeapInit+0xb4>)
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	4a0a      	ldr	r2, [pc, #40]	@ (80112c0 <prvHeapInit+0xb8>)
 8011296:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	4a09      	ldr	r2, [pc, #36]	@ (80112c4 <prvHeapInit+0xbc>)
 801129e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112a0:	4b09      	ldr	r3, [pc, #36]	@ (80112c8 <prvHeapInit+0xc0>)
 80112a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80112a6:	601a      	str	r2, [r3, #0]
}
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	20002d60 	.word	0x20002d60
 80112b8:	20006960 	.word	0x20006960
 80112bc:	20006968 	.word	0x20006968
 80112c0:	20006970 	.word	0x20006970
 80112c4:	2000696c 	.word	0x2000696c
 80112c8:	2000697c 	.word	0x2000697c

080112cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80112d4:	4b28      	ldr	r3, [pc, #160]	@ (8011378 <prvInsertBlockIntoFreeList+0xac>)
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	e002      	b.n	80112e0 <prvInsertBlockIntoFreeList+0x14>
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	60fb      	str	r3, [r7, #12]
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d8f7      	bhi.n	80112da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	4413      	add	r3, r2
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d108      	bne.n	801130e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	685a      	ldr	r2, [r3, #4]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	441a      	add	r2, r3
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	441a      	add	r2, r3
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	429a      	cmp	r2, r3
 8011320:	d118      	bne.n	8011354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	4b15      	ldr	r3, [pc, #84]	@ (801137c <prvInsertBlockIntoFreeList+0xb0>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	429a      	cmp	r2, r3
 801132c:	d00d      	beq.n	801134a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	685a      	ldr	r2, [r3, #4]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	441a      	add	r2, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	e008      	b.n	801135c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801134a:	4b0c      	ldr	r3, [pc, #48]	@ (801137c <prvInsertBlockIntoFreeList+0xb0>)
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	601a      	str	r2, [r3, #0]
 8011352:	e003      	b.n	801135c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	429a      	cmp	r2, r3
 8011362:	d002      	beq.n	801136a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801136a:	bf00      	nop
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop
 8011378:	20006960 	.word	0x20006960
 801137c:	20006968 	.word	0x20006968

08011380 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011384:	2201      	movs	r2, #1
 8011386:	490e      	ldr	r1, [pc, #56]	@ (80113c0 <MX_USB_HOST_Init+0x40>)
 8011388:	480e      	ldr	r0, [pc, #56]	@ (80113c4 <MX_USB_HOST_Init+0x44>)
 801138a:	f7fa fa75 	bl	800b878 <USBH_Init>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011394:	f7f0 ffa8 	bl	80022e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011398:	490b      	ldr	r1, [pc, #44]	@ (80113c8 <MX_USB_HOST_Init+0x48>)
 801139a:	480a      	ldr	r0, [pc, #40]	@ (80113c4 <MX_USB_HOST_Init+0x44>)
 801139c:	f7fa fb3b 	bl	800ba16 <USBH_RegisterClass>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d001      	beq.n	80113aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80113a6:	f7f0 ff9f 	bl	80022e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80113aa:	4806      	ldr	r0, [pc, #24]	@ (80113c4 <MX_USB_HOST_Init+0x44>)
 80113ac:	f7fa fbbf 	bl	800bb2e <USBH_Start>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d001      	beq.n	80113ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80113b6:	f7f0 ff97 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80113ba:	bf00      	nop
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	080113cd 	.word	0x080113cd
 80113c4:	20006980 	.word	0x20006980
 80113c8:	2000001c 	.word	0x2000001c

080113cc <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	460b      	mov	r3, r1
 80113d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80113d8:	78fb      	ldrb	r3, [r7, #3]
 80113da:	3b01      	subs	r3, #1
 80113dc:	2b04      	cmp	r3, #4
 80113de:	d819      	bhi.n	8011414 <USBH_UserProcess+0x48>
 80113e0:	a201      	add	r2, pc, #4	@ (adr r2, 80113e8 <USBH_UserProcess+0x1c>)
 80113e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e6:	bf00      	nop
 80113e8:	08011415 	.word	0x08011415
 80113ec:	08011405 	.word	0x08011405
 80113f0:	08011415 	.word	0x08011415
 80113f4:	0801140d 	.word	0x0801140d
 80113f8:	080113fd 	.word	0x080113fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80113fc:	4b09      	ldr	r3, [pc, #36]	@ (8011424 <USBH_UserProcess+0x58>)
 80113fe:	2203      	movs	r2, #3
 8011400:	701a      	strb	r2, [r3, #0]
  break;
 8011402:	e008      	b.n	8011416 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011404:	4b07      	ldr	r3, [pc, #28]	@ (8011424 <USBH_UserProcess+0x58>)
 8011406:	2202      	movs	r2, #2
 8011408:	701a      	strb	r2, [r3, #0]
  break;
 801140a:	e004      	b.n	8011416 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801140c:	4b05      	ldr	r3, [pc, #20]	@ (8011424 <USBH_UserProcess+0x58>)
 801140e:	2201      	movs	r2, #1
 8011410:	701a      	strb	r2, [r3, #0]
  break;
 8011412:	e000      	b.n	8011416 <USBH_UserProcess+0x4a>

  default:
  break;
 8011414:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011416:	bf00      	nop
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	20006d64 	.word	0x20006d64

08011428 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08a      	sub	sp, #40	@ 0x28
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011430:	f107 0314 	add.w	r3, r7, #20
 8011434:	2200      	movs	r2, #0
 8011436:	601a      	str	r2, [r3, #0]
 8011438:	605a      	str	r2, [r3, #4]
 801143a:	609a      	str	r2, [r3, #8]
 801143c:	60da      	str	r2, [r3, #12]
 801143e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011448:	d147      	bne.n	80114da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801144a:	2300      	movs	r3, #0
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	4b25      	ldr	r3, [pc, #148]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 8011450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011452:	4a24      	ldr	r2, [pc, #144]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 8011454:	f043 0301 	orr.w	r3, r3, #1
 8011458:	6313      	str	r3, [r2, #48]	@ 0x30
 801145a:	4b22      	ldr	r3, [pc, #136]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 801145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	613b      	str	r3, [r7, #16]
 8011464:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801146c:	2300      	movs	r3, #0
 801146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011470:	2300      	movs	r3, #0
 8011472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011474:	f107 0314 	add.w	r3, r7, #20
 8011478:	4619      	mov	r1, r3
 801147a:	481b      	ldr	r0, [pc, #108]	@ (80114e8 <HAL_HCD_MspInit+0xc0>)
 801147c:	f7f2 f880 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8011480:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8011484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011486:	2302      	movs	r3, #2
 8011488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801148a:	2300      	movs	r3, #0
 801148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801148e:	2300      	movs	r3, #0
 8011490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011492:	230a      	movs	r3, #10
 8011494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011496:	f107 0314 	add.w	r3, r7, #20
 801149a:	4619      	mov	r1, r3
 801149c:	4812      	ldr	r0, [pc, #72]	@ (80114e8 <HAL_HCD_MspInit+0xc0>)
 801149e:	f7f2 f86f 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80114a2:	4b10      	ldr	r3, [pc, #64]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 80114a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114a6:	4a0f      	ldr	r2, [pc, #60]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 80114a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80114ae:	2300      	movs	r3, #0
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	4b0c      	ldr	r3, [pc, #48]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 80114b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114b6:	4a0b      	ldr	r2, [pc, #44]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 80114b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80114bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80114be:	4b09      	ldr	r3, [pc, #36]	@ (80114e4 <HAL_HCD_MspInit+0xbc>)
 80114c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80114c6:	60fb      	str	r3, [r7, #12]
 80114c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80114ca:	2200      	movs	r2, #0
 80114cc:	2105      	movs	r1, #5
 80114ce:	2043      	movs	r0, #67	@ 0x43
 80114d0:	f7f1 fc2a 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80114d4:	2043      	movs	r0, #67	@ 0x43
 80114d6:	f7f1 fc43 	bl	8002d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80114da:	bf00      	nop
 80114dc:	3728      	adds	r7, #40	@ 0x28
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	bf00      	nop
 80114e4:	40023800 	.word	0x40023800
 80114e8:	40020000 	.word	0x40020000

080114ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fa ffc9 	bl	800c492 <USBH_LL_IncTimer>
}
 8011500:	bf00      	nop
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011516:	4618      	mov	r0, r3
 8011518:	f7fb f80d 	bl	800c536 <USBH_LL_Connect>
}
 801151c:	bf00      	nop
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011532:	4618      	mov	r0, r3
 8011534:	f7fb f822 	bl	800c57c <USBH_LL_Disconnect>
}
 8011538:	bf00      	nop
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	70fb      	strb	r3, [r7, #3]
 801154c:	4613      	mov	r3, r2
 801154e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011556:	4618      	mov	r0, r3
 8011558:	f7fb f859 	bl	800c60e <USBH_LL_NotifyURBChange>
#endif
}
 801155c:	bf00      	nop
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011572:	4618      	mov	r0, r3
 8011574:	f7fa ffb7 	bl	800c4e6 <USBH_LL_PortEnabled>
}
 8011578:	bf00      	nop
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801158e:	4618      	mov	r0, r3
 8011590:	f7fa ffc3 	bl	800c51a <USBH_LL_PortDisabled>
}
 8011594:	bf00      	nop
 8011596:	3708      	adds	r7, #8
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d12a      	bne.n	8011604 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80115ae:	4a18      	ldr	r2, [pc, #96]	@ (8011610 <USBH_LL_Init+0x74>)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a15      	ldr	r2, [pc, #84]	@ (8011610 <USBH_LL_Init+0x74>)
 80115ba:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80115be:	4b14      	ldr	r3, [pc, #80]	@ (8011610 <USBH_LL_Init+0x74>)
 80115c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80115c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80115c6:	4b12      	ldr	r3, [pc, #72]	@ (8011610 <USBH_LL_Init+0x74>)
 80115c8:	2208      	movs	r2, #8
 80115ca:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80115cc:	4b10      	ldr	r3, [pc, #64]	@ (8011610 <USBH_LL_Init+0x74>)
 80115ce:	2201      	movs	r2, #1
 80115d0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80115d2:	4b0f      	ldr	r3, [pc, #60]	@ (8011610 <USBH_LL_Init+0x74>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80115d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011610 <USBH_LL_Init+0x74>)
 80115da:	2202      	movs	r2, #2
 80115dc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80115de:	4b0c      	ldr	r3, [pc, #48]	@ (8011610 <USBH_LL_Init+0x74>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80115e4:	480a      	ldr	r0, [pc, #40]	@ (8011610 <USBH_LL_Init+0x74>)
 80115e6:	f7f2 f9b3 	bl	8003950 <HAL_HCD_Init>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80115f0:	f7f0 fe7a 	bl	80022e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80115f4:	4806      	ldr	r0, [pc, #24]	@ (8011610 <USBH_LL_Init+0x74>)
 80115f6:	f7f2 fe13 	bl	8004220 <HAL_HCD_GetCurrentFrame>
 80115fa:	4603      	mov	r3, r0
 80115fc:	4619      	mov	r1, r3
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f7fa ff38 	bl	800c474 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	20006d68 	.word	0x20006d68

08011614 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801161c:	2300      	movs	r3, #0
 801161e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011620:	2300      	movs	r3, #0
 8011622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801162a:	4618      	mov	r0, r3
 801162c:	f7f2 fd80 	bl	8004130 <HAL_HCD_Start>
 8011630:	4603      	mov	r3, r0
 8011632:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011634:	7bfb      	ldrb	r3, [r7, #15]
 8011636:	4618      	mov	r0, r3
 8011638:	f000 f95e 	bl	80118f8 <USBH_Get_USB_Status>
 801163c:	4603      	mov	r3, r0
 801163e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011640:	7bbb      	ldrb	r3, [r7, #14]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b084      	sub	sp, #16
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011656:	2300      	movs	r3, #0
 8011658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011660:	4618      	mov	r0, r3
 8011662:	f7f2 fd88 	bl	8004176 <HAL_HCD_Stop>
 8011666:	4603      	mov	r3, r0
 8011668:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801166a:	7bfb      	ldrb	r3, [r7, #15]
 801166c:	4618      	mov	r0, r3
 801166e:	f000 f943 	bl	80118f8 <USBH_Get_USB_Status>
 8011672:	4603      	mov	r3, r0
 8011674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011676:	7bbb      	ldrb	r3, [r7, #14]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011688:	2301      	movs	r3, #1
 801168a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011692:	4618      	mov	r0, r3
 8011694:	f7f2 fdd2 	bl	800423c <HAL_HCD_GetCurrentSpeed>
 8011698:	4603      	mov	r3, r0
 801169a:	2b02      	cmp	r3, #2
 801169c:	d00c      	beq.n	80116b8 <USBH_LL_GetSpeed+0x38>
 801169e:	2b02      	cmp	r3, #2
 80116a0:	d80d      	bhi.n	80116be <USBH_LL_GetSpeed+0x3e>
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d002      	beq.n	80116ac <USBH_LL_GetSpeed+0x2c>
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d003      	beq.n	80116b2 <USBH_LL_GetSpeed+0x32>
 80116aa:	e008      	b.n	80116be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80116ac:	2300      	movs	r3, #0
 80116ae:	73fb      	strb	r3, [r7, #15]
    break;
 80116b0:	e008      	b.n	80116c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80116b2:	2301      	movs	r3, #1
 80116b4:	73fb      	strb	r3, [r7, #15]
    break;
 80116b6:	e005      	b.n	80116c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80116b8:	2302      	movs	r3, #2
 80116ba:	73fb      	strb	r3, [r7, #15]
    break;
 80116bc:	e002      	b.n	80116c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80116be:	2301      	movs	r3, #1
 80116c0:	73fb      	strb	r3, [r7, #15]
    break;
 80116c2:	bf00      	nop
  }
  return  speed;
 80116c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3710      	adds	r7, #16
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b084      	sub	sp, #16
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d6:	2300      	movs	r3, #0
 80116d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116da:	2300      	movs	r3, #0
 80116dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7f2 fd63 	bl	80041b0 <HAL_HCD_ResetPort>
 80116ea:	4603      	mov	r3, r0
 80116ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80116ee:	7bfb      	ldrb	r3, [r7, #15]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f000 f901 	bl	80118f8 <USBH_Get_USB_Status>
 80116f6:	4603      	mov	r3, r0
 80116f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011716:	78fa      	ldrb	r2, [r7, #3]
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f7f2 fd6b 	bl	80041f6 <HAL_HCD_HC_GetXferCount>
 8011720:	4603      	mov	r3, r0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801172a:	b590      	push	{r4, r7, lr}
 801172c:	b089      	sub	sp, #36	@ 0x24
 801172e:	af04      	add	r7, sp, #16
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	4608      	mov	r0, r1
 8011734:	4611      	mov	r1, r2
 8011736:	461a      	mov	r2, r3
 8011738:	4603      	mov	r3, r0
 801173a:	70fb      	strb	r3, [r7, #3]
 801173c:	460b      	mov	r3, r1
 801173e:	70bb      	strb	r3, [r7, #2]
 8011740:	4613      	mov	r3, r2
 8011742:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011744:	2300      	movs	r3, #0
 8011746:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011748:	2300      	movs	r3, #0
 801174a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011752:	787c      	ldrb	r4, [r7, #1]
 8011754:	78ba      	ldrb	r2, [r7, #2]
 8011756:	78f9      	ldrb	r1, [r7, #3]
 8011758:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801175a:	9302      	str	r3, [sp, #8]
 801175c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011766:	9300      	str	r3, [sp, #0]
 8011768:	4623      	mov	r3, r4
 801176a:	f7f2 f958 	bl	8003a1e <HAL_HCD_HC_Init>
 801176e:	4603      	mov	r3, r0
 8011770:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011772:	7bfb      	ldrb	r3, [r7, #15]
 8011774:	4618      	mov	r0, r3
 8011776:	f000 f8bf 	bl	80118f8 <USBH_Get_USB_Status>
 801177a:	4603      	mov	r3, r0
 801177c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801177e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3714      	adds	r7, #20
 8011784:	46bd      	mov	sp, r7
 8011786:	bd90      	pop	{r4, r7, pc}

08011788 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	460b      	mov	r3, r1
 8011792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011794:	2300      	movs	r3, #0
 8011796:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011798:	2300      	movs	r3, #0
 801179a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80117a2:	78fa      	ldrb	r2, [r7, #3]
 80117a4:	4611      	mov	r1, r2
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7f2 f9f1 	bl	8003b8e <HAL_HCD_HC_Halt>
 80117ac:	4603      	mov	r3, r0
 80117ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 f8a0 	bl	80118f8 <USBH_Get_USB_Status>
 80117b8:	4603      	mov	r3, r0
 80117ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80117c6:	b590      	push	{r4, r7, lr}
 80117c8:	b089      	sub	sp, #36	@ 0x24
 80117ca:	af04      	add	r7, sp, #16
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	4608      	mov	r0, r1
 80117d0:	4611      	mov	r1, r2
 80117d2:	461a      	mov	r2, r3
 80117d4:	4603      	mov	r3, r0
 80117d6:	70fb      	strb	r3, [r7, #3]
 80117d8:	460b      	mov	r3, r1
 80117da:	70bb      	strb	r3, [r7, #2]
 80117dc:	4613      	mov	r3, r2
 80117de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117e0:	2300      	movs	r3, #0
 80117e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80117e4:	2300      	movs	r3, #0
 80117e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80117ee:	787c      	ldrb	r4, [r7, #1]
 80117f0:	78ba      	ldrb	r2, [r7, #2]
 80117f2:	78f9      	ldrb	r1, [r7, #3]
 80117f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80117f8:	9303      	str	r3, [sp, #12]
 80117fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117fc:	9302      	str	r3, [sp, #8]
 80117fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011800:	9301      	str	r3, [sp, #4]
 8011802:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	4623      	mov	r3, r4
 801180a:	f7f2 f9e3 	bl	8003bd4 <HAL_HCD_HC_SubmitRequest>
 801180e:	4603      	mov	r3, r0
 8011810:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011812:	7bfb      	ldrb	r3, [r7, #15]
 8011814:	4618      	mov	r0, r3
 8011816:	f000 f86f 	bl	80118f8 <USBH_Get_USB_Status>
 801181a:	4603      	mov	r3, r0
 801181c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801181e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	bd90      	pop	{r4, r7, pc}

08011828 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	460b      	mov	r3, r1
 8011832:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801183a:	78fa      	ldrb	r2, [r7, #3]
 801183c:	4611      	mov	r1, r2
 801183e:	4618      	mov	r0, r3
 8011840:	f7f2 fcc4 	bl	80041cc <HAL_HCD_HC_GetURBState>
 8011844:	4603      	mov	r3, r0
}
 8011846:	4618      	mov	r0, r3
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b082      	sub	sp, #8
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	460b      	mov	r3, r1
 8011858:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011860:	2b01      	cmp	r3, #1
 8011862:	d103      	bne.n	801186c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011864:	78fb      	ldrb	r3, [r7, #3]
 8011866:	4618      	mov	r0, r3
 8011868:	f000 f872 	bl	8011950 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801186c:	20c8      	movs	r0, #200	@ 0xc8
 801186e:	f7f1 f97f 	bl	8002b70 <HAL_Delay>
  return USBH_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	460b      	mov	r3, r1
 8011886:	70fb      	strb	r3, [r7, #3]
 8011888:	4613      	mov	r3, r2
 801188a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011892:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011894:	78fa      	ldrb	r2, [r7, #3]
 8011896:	68f9      	ldr	r1, [r7, #12]
 8011898:	4613      	mov	r3, r2
 801189a:	011b      	lsls	r3, r3, #4
 801189c:	1a9b      	subs	r3, r3, r2
 801189e:	009b      	lsls	r3, r3, #2
 80118a0:	440b      	add	r3, r1
 80118a2:	3317      	adds	r3, #23
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00a      	beq.n	80118c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80118aa:	78fa      	ldrb	r2, [r7, #3]
 80118ac:	68f9      	ldr	r1, [r7, #12]
 80118ae:	4613      	mov	r3, r2
 80118b0:	011b      	lsls	r3, r3, #4
 80118b2:	1a9b      	subs	r3, r3, r2
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	440b      	add	r3, r1
 80118b8:	333c      	adds	r3, #60	@ 0x3c
 80118ba:	78ba      	ldrb	r2, [r7, #2]
 80118bc:	701a      	strb	r2, [r3, #0]
 80118be:	e009      	b.n	80118d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80118c0:	78fa      	ldrb	r2, [r7, #3]
 80118c2:	68f9      	ldr	r1, [r7, #12]
 80118c4:	4613      	mov	r3, r2
 80118c6:	011b      	lsls	r3, r3, #4
 80118c8:	1a9b      	subs	r3, r3, r2
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	440b      	add	r3, r1
 80118ce:	333d      	adds	r3, #61	@ 0x3d
 80118d0:	78ba      	ldrb	r2, [r7, #2]
 80118d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80118d4:	2300      	movs	r3, #0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b082      	sub	sp, #8
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7f1 f940 	bl	8002b70 <HAL_Delay>
}
 80118f0:	bf00      	nop
 80118f2:	3708      	adds	r7, #8
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011906:	79fb      	ldrb	r3, [r7, #7]
 8011908:	2b03      	cmp	r3, #3
 801190a:	d817      	bhi.n	801193c <USBH_Get_USB_Status+0x44>
 801190c:	a201      	add	r2, pc, #4	@ (adr r2, 8011914 <USBH_Get_USB_Status+0x1c>)
 801190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011912:	bf00      	nop
 8011914:	08011925 	.word	0x08011925
 8011918:	0801192b 	.word	0x0801192b
 801191c:	08011931 	.word	0x08011931
 8011920:	08011937 	.word	0x08011937
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011924:	2300      	movs	r3, #0
 8011926:	73fb      	strb	r3, [r7, #15]
    break;
 8011928:	e00b      	b.n	8011942 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801192a:	2302      	movs	r3, #2
 801192c:	73fb      	strb	r3, [r7, #15]
    break;
 801192e:	e008      	b.n	8011942 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011930:	2301      	movs	r3, #1
 8011932:	73fb      	strb	r3, [r7, #15]
    break;
 8011934:	e005      	b.n	8011942 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011936:	2302      	movs	r3, #2
 8011938:	73fb      	strb	r3, [r7, #15]
    break;
 801193a:	e002      	b.n	8011942 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801193c:	2302      	movs	r3, #2
 801193e:	73fb      	strb	r3, [r7, #15]
    break;
 8011940:	bf00      	nop
  }
  return usb_status;
 8011942:	7bfb      	ldrb	r3, [r7, #15]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3714      	adds	r7, #20
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801195a:	79fb      	ldrb	r3, [r7, #7]
 801195c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801195e:	79fb      	ldrb	r3, [r7, #7]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d102      	bne.n	801196a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011964:	2300      	movs	r3, #0
 8011966:	73fb      	strb	r3, [r7, #15]
 8011968:	e001      	b.n	801196e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801196a:	2301      	movs	r3, #1
 801196c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801196e:	7bfb      	ldrb	r3, [r7, #15]
 8011970:	461a      	mov	r2, r3
 8011972:	2101      	movs	r1, #1
 8011974:	4803      	ldr	r0, [pc, #12]	@ (8011984 <MX_DriverVbusFS+0x34>)
 8011976:	f7f1 ff9f 	bl	80038b8 <HAL_GPIO_WritePin>
}
 801197a:	bf00      	nop
 801197c:	3710      	adds	r7, #16
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	40020800 	.word	0x40020800

08011988 <malloc>:
 8011988:	4b02      	ldr	r3, [pc, #8]	@ (8011994 <malloc+0xc>)
 801198a:	4601      	mov	r1, r0
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	f000 b82d 	b.w	80119ec <_malloc_r>
 8011992:	bf00      	nop
 8011994:	2000004c 	.word	0x2000004c

08011998 <free>:
 8011998:	4b02      	ldr	r3, [pc, #8]	@ (80119a4 <free+0xc>)
 801199a:	4601      	mov	r1, r0
 801199c:	6818      	ldr	r0, [r3, #0]
 801199e:	f000 bae9 	b.w	8011f74 <_free_r>
 80119a2:	bf00      	nop
 80119a4:	2000004c 	.word	0x2000004c

080119a8 <sbrk_aligned>:
 80119a8:	b570      	push	{r4, r5, r6, lr}
 80119aa:	4e0f      	ldr	r6, [pc, #60]	@ (80119e8 <sbrk_aligned+0x40>)
 80119ac:	460c      	mov	r4, r1
 80119ae:	6831      	ldr	r1, [r6, #0]
 80119b0:	4605      	mov	r5, r0
 80119b2:	b911      	cbnz	r1, 80119ba <sbrk_aligned+0x12>
 80119b4:	f000 fa78 	bl	8011ea8 <_sbrk_r>
 80119b8:	6030      	str	r0, [r6, #0]
 80119ba:	4621      	mov	r1, r4
 80119bc:	4628      	mov	r0, r5
 80119be:	f000 fa73 	bl	8011ea8 <_sbrk_r>
 80119c2:	1c43      	adds	r3, r0, #1
 80119c4:	d103      	bne.n	80119ce <sbrk_aligned+0x26>
 80119c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80119ca:	4620      	mov	r0, r4
 80119cc:	bd70      	pop	{r4, r5, r6, pc}
 80119ce:	1cc4      	adds	r4, r0, #3
 80119d0:	f024 0403 	bic.w	r4, r4, #3
 80119d4:	42a0      	cmp	r0, r4
 80119d6:	d0f8      	beq.n	80119ca <sbrk_aligned+0x22>
 80119d8:	1a21      	subs	r1, r4, r0
 80119da:	4628      	mov	r0, r5
 80119dc:	f000 fa64 	bl	8011ea8 <_sbrk_r>
 80119e0:	3001      	adds	r0, #1
 80119e2:	d1f2      	bne.n	80119ca <sbrk_aligned+0x22>
 80119e4:	e7ef      	b.n	80119c6 <sbrk_aligned+0x1e>
 80119e6:	bf00      	nop
 80119e8:	20007148 	.word	0x20007148

080119ec <_malloc_r>:
 80119ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119f0:	1ccd      	adds	r5, r1, #3
 80119f2:	f025 0503 	bic.w	r5, r5, #3
 80119f6:	3508      	adds	r5, #8
 80119f8:	2d0c      	cmp	r5, #12
 80119fa:	bf38      	it	cc
 80119fc:	250c      	movcc	r5, #12
 80119fe:	2d00      	cmp	r5, #0
 8011a00:	4606      	mov	r6, r0
 8011a02:	db01      	blt.n	8011a08 <_malloc_r+0x1c>
 8011a04:	42a9      	cmp	r1, r5
 8011a06:	d904      	bls.n	8011a12 <_malloc_r+0x26>
 8011a08:	230c      	movs	r3, #12
 8011a0a:	6033      	str	r3, [r6, #0]
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011ae8 <_malloc_r+0xfc>
 8011a16:	f000 f869 	bl	8011aec <__malloc_lock>
 8011a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8011a1e:	461c      	mov	r4, r3
 8011a20:	bb44      	cbnz	r4, 8011a74 <_malloc_r+0x88>
 8011a22:	4629      	mov	r1, r5
 8011a24:	4630      	mov	r0, r6
 8011a26:	f7ff ffbf 	bl	80119a8 <sbrk_aligned>
 8011a2a:	1c43      	adds	r3, r0, #1
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	d158      	bne.n	8011ae2 <_malloc_r+0xf6>
 8011a30:	f8d8 4000 	ldr.w	r4, [r8]
 8011a34:	4627      	mov	r7, r4
 8011a36:	2f00      	cmp	r7, #0
 8011a38:	d143      	bne.n	8011ac2 <_malloc_r+0xd6>
 8011a3a:	2c00      	cmp	r4, #0
 8011a3c:	d04b      	beq.n	8011ad6 <_malloc_r+0xea>
 8011a3e:	6823      	ldr	r3, [r4, #0]
 8011a40:	4639      	mov	r1, r7
 8011a42:	4630      	mov	r0, r6
 8011a44:	eb04 0903 	add.w	r9, r4, r3
 8011a48:	f000 fa2e 	bl	8011ea8 <_sbrk_r>
 8011a4c:	4581      	cmp	r9, r0
 8011a4e:	d142      	bne.n	8011ad6 <_malloc_r+0xea>
 8011a50:	6821      	ldr	r1, [r4, #0]
 8011a52:	1a6d      	subs	r5, r5, r1
 8011a54:	4629      	mov	r1, r5
 8011a56:	4630      	mov	r0, r6
 8011a58:	f7ff ffa6 	bl	80119a8 <sbrk_aligned>
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	d03a      	beq.n	8011ad6 <_malloc_r+0xea>
 8011a60:	6823      	ldr	r3, [r4, #0]
 8011a62:	442b      	add	r3, r5
 8011a64:	6023      	str	r3, [r4, #0]
 8011a66:	f8d8 3000 	ldr.w	r3, [r8]
 8011a6a:	685a      	ldr	r2, [r3, #4]
 8011a6c:	bb62      	cbnz	r2, 8011ac8 <_malloc_r+0xdc>
 8011a6e:	f8c8 7000 	str.w	r7, [r8]
 8011a72:	e00f      	b.n	8011a94 <_malloc_r+0xa8>
 8011a74:	6822      	ldr	r2, [r4, #0]
 8011a76:	1b52      	subs	r2, r2, r5
 8011a78:	d420      	bmi.n	8011abc <_malloc_r+0xd0>
 8011a7a:	2a0b      	cmp	r2, #11
 8011a7c:	d917      	bls.n	8011aae <_malloc_r+0xc2>
 8011a7e:	1961      	adds	r1, r4, r5
 8011a80:	42a3      	cmp	r3, r4
 8011a82:	6025      	str	r5, [r4, #0]
 8011a84:	bf18      	it	ne
 8011a86:	6059      	strne	r1, [r3, #4]
 8011a88:	6863      	ldr	r3, [r4, #4]
 8011a8a:	bf08      	it	eq
 8011a8c:	f8c8 1000 	streq.w	r1, [r8]
 8011a90:	5162      	str	r2, [r4, r5]
 8011a92:	604b      	str	r3, [r1, #4]
 8011a94:	4630      	mov	r0, r6
 8011a96:	f000 f82f 	bl	8011af8 <__malloc_unlock>
 8011a9a:	f104 000b 	add.w	r0, r4, #11
 8011a9e:	1d23      	adds	r3, r4, #4
 8011aa0:	f020 0007 	bic.w	r0, r0, #7
 8011aa4:	1ac2      	subs	r2, r0, r3
 8011aa6:	bf1c      	itt	ne
 8011aa8:	1a1b      	subne	r3, r3, r0
 8011aaa:	50a3      	strne	r3, [r4, r2]
 8011aac:	e7af      	b.n	8011a0e <_malloc_r+0x22>
 8011aae:	6862      	ldr	r2, [r4, #4]
 8011ab0:	42a3      	cmp	r3, r4
 8011ab2:	bf0c      	ite	eq
 8011ab4:	f8c8 2000 	streq.w	r2, [r8]
 8011ab8:	605a      	strne	r2, [r3, #4]
 8011aba:	e7eb      	b.n	8011a94 <_malloc_r+0xa8>
 8011abc:	4623      	mov	r3, r4
 8011abe:	6864      	ldr	r4, [r4, #4]
 8011ac0:	e7ae      	b.n	8011a20 <_malloc_r+0x34>
 8011ac2:	463c      	mov	r4, r7
 8011ac4:	687f      	ldr	r7, [r7, #4]
 8011ac6:	e7b6      	b.n	8011a36 <_malloc_r+0x4a>
 8011ac8:	461a      	mov	r2, r3
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	42a3      	cmp	r3, r4
 8011ace:	d1fb      	bne.n	8011ac8 <_malloc_r+0xdc>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	6053      	str	r3, [r2, #4]
 8011ad4:	e7de      	b.n	8011a94 <_malloc_r+0xa8>
 8011ad6:	230c      	movs	r3, #12
 8011ad8:	6033      	str	r3, [r6, #0]
 8011ada:	4630      	mov	r0, r6
 8011adc:	f000 f80c 	bl	8011af8 <__malloc_unlock>
 8011ae0:	e794      	b.n	8011a0c <_malloc_r+0x20>
 8011ae2:	6005      	str	r5, [r0, #0]
 8011ae4:	e7d6      	b.n	8011a94 <_malloc_r+0xa8>
 8011ae6:	bf00      	nop
 8011ae8:	2000714c 	.word	0x2000714c

08011aec <__malloc_lock>:
 8011aec:	4801      	ldr	r0, [pc, #4]	@ (8011af4 <__malloc_lock+0x8>)
 8011aee:	f000 ba28 	b.w	8011f42 <__retarget_lock_acquire_recursive>
 8011af2:	bf00      	nop
 8011af4:	20007290 	.word	0x20007290

08011af8 <__malloc_unlock>:
 8011af8:	4801      	ldr	r0, [pc, #4]	@ (8011b00 <__malloc_unlock+0x8>)
 8011afa:	f000 ba23 	b.w	8011f44 <__retarget_lock_release_recursive>
 8011afe:	bf00      	nop
 8011b00:	20007290 	.word	0x20007290

08011b04 <std>:
 8011b04:	2300      	movs	r3, #0
 8011b06:	b510      	push	{r4, lr}
 8011b08:	4604      	mov	r4, r0
 8011b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b12:	6083      	str	r3, [r0, #8]
 8011b14:	8181      	strh	r1, [r0, #12]
 8011b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b18:	81c2      	strh	r2, [r0, #14]
 8011b1a:	6183      	str	r3, [r0, #24]
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	2208      	movs	r2, #8
 8011b20:	305c      	adds	r0, #92	@ 0x5c
 8011b22:	f000 f92e 	bl	8011d82 <memset>
 8011b26:	4b0d      	ldr	r3, [pc, #52]	@ (8011b5c <std+0x58>)
 8011b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b60 <std+0x5c>)
 8011b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b64 <std+0x60>)
 8011b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011b32:	4b0d      	ldr	r3, [pc, #52]	@ (8011b68 <std+0x64>)
 8011b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b36:	4b0d      	ldr	r3, [pc, #52]	@ (8011b6c <std+0x68>)
 8011b38:	6224      	str	r4, [r4, #32]
 8011b3a:	429c      	cmp	r4, r3
 8011b3c:	d006      	beq.n	8011b4c <std+0x48>
 8011b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011b42:	4294      	cmp	r4, r2
 8011b44:	d002      	beq.n	8011b4c <std+0x48>
 8011b46:	33d0      	adds	r3, #208	@ 0xd0
 8011b48:	429c      	cmp	r4, r3
 8011b4a:	d105      	bne.n	8011b58 <std+0x54>
 8011b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b54:	f000 b9f4 	b.w	8011f40 <__retarget_lock_init_recursive>
 8011b58:	bd10      	pop	{r4, pc}
 8011b5a:	bf00      	nop
 8011b5c:	08011cfd 	.word	0x08011cfd
 8011b60:	08011d1f 	.word	0x08011d1f
 8011b64:	08011d57 	.word	0x08011d57
 8011b68:	08011d7b 	.word	0x08011d7b
 8011b6c:	20007150 	.word	0x20007150

08011b70 <stdio_exit_handler>:
 8011b70:	4a02      	ldr	r2, [pc, #8]	@ (8011b7c <stdio_exit_handler+0xc>)
 8011b72:	4903      	ldr	r1, [pc, #12]	@ (8011b80 <stdio_exit_handler+0x10>)
 8011b74:	4803      	ldr	r0, [pc, #12]	@ (8011b84 <stdio_exit_handler+0x14>)
 8011b76:	f000 b869 	b.w	8011c4c <_fwalk_sglue>
 8011b7a:	bf00      	nop
 8011b7c:	20000040 	.word	0x20000040
 8011b80:	08012961 	.word	0x08012961
 8011b84:	20000050 	.word	0x20000050

08011b88 <cleanup_stdio>:
 8011b88:	6841      	ldr	r1, [r0, #4]
 8011b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8011bbc <cleanup_stdio+0x34>)
 8011b8c:	4299      	cmp	r1, r3
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	4604      	mov	r4, r0
 8011b92:	d001      	beq.n	8011b98 <cleanup_stdio+0x10>
 8011b94:	f000 fee4 	bl	8012960 <_fflush_r>
 8011b98:	68a1      	ldr	r1, [r4, #8]
 8011b9a:	4b09      	ldr	r3, [pc, #36]	@ (8011bc0 <cleanup_stdio+0x38>)
 8011b9c:	4299      	cmp	r1, r3
 8011b9e:	d002      	beq.n	8011ba6 <cleanup_stdio+0x1e>
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f000 fedd 	bl	8012960 <_fflush_r>
 8011ba6:	68e1      	ldr	r1, [r4, #12]
 8011ba8:	4b06      	ldr	r3, [pc, #24]	@ (8011bc4 <cleanup_stdio+0x3c>)
 8011baa:	4299      	cmp	r1, r3
 8011bac:	d004      	beq.n	8011bb8 <cleanup_stdio+0x30>
 8011bae:	4620      	mov	r0, r4
 8011bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bb4:	f000 bed4 	b.w	8012960 <_fflush_r>
 8011bb8:	bd10      	pop	{r4, pc}
 8011bba:	bf00      	nop
 8011bbc:	20007150 	.word	0x20007150
 8011bc0:	200071b8 	.word	0x200071b8
 8011bc4:	20007220 	.word	0x20007220

08011bc8 <global_stdio_init.part.0>:
 8011bc8:	b510      	push	{r4, lr}
 8011bca:	4b0b      	ldr	r3, [pc, #44]	@ (8011bf8 <global_stdio_init.part.0+0x30>)
 8011bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8011bfc <global_stdio_init.part.0+0x34>)
 8011bce:	4a0c      	ldr	r2, [pc, #48]	@ (8011c00 <global_stdio_init.part.0+0x38>)
 8011bd0:	601a      	str	r2, [r3, #0]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2104      	movs	r1, #4
 8011bd8:	f7ff ff94 	bl	8011b04 <std>
 8011bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011be0:	2201      	movs	r2, #1
 8011be2:	2109      	movs	r1, #9
 8011be4:	f7ff ff8e 	bl	8011b04 <std>
 8011be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011bec:	2202      	movs	r2, #2
 8011bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf2:	2112      	movs	r1, #18
 8011bf4:	f7ff bf86 	b.w	8011b04 <std>
 8011bf8:	20007288 	.word	0x20007288
 8011bfc:	20007150 	.word	0x20007150
 8011c00:	08011b71 	.word	0x08011b71

08011c04 <__sfp_lock_acquire>:
 8011c04:	4801      	ldr	r0, [pc, #4]	@ (8011c0c <__sfp_lock_acquire+0x8>)
 8011c06:	f000 b99c 	b.w	8011f42 <__retarget_lock_acquire_recursive>
 8011c0a:	bf00      	nop
 8011c0c:	20007291 	.word	0x20007291

08011c10 <__sfp_lock_release>:
 8011c10:	4801      	ldr	r0, [pc, #4]	@ (8011c18 <__sfp_lock_release+0x8>)
 8011c12:	f000 b997 	b.w	8011f44 <__retarget_lock_release_recursive>
 8011c16:	bf00      	nop
 8011c18:	20007291 	.word	0x20007291

08011c1c <__sinit>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	4604      	mov	r4, r0
 8011c20:	f7ff fff0 	bl	8011c04 <__sfp_lock_acquire>
 8011c24:	6a23      	ldr	r3, [r4, #32]
 8011c26:	b11b      	cbz	r3, 8011c30 <__sinit+0x14>
 8011c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c2c:	f7ff bff0 	b.w	8011c10 <__sfp_lock_release>
 8011c30:	4b04      	ldr	r3, [pc, #16]	@ (8011c44 <__sinit+0x28>)
 8011c32:	6223      	str	r3, [r4, #32]
 8011c34:	4b04      	ldr	r3, [pc, #16]	@ (8011c48 <__sinit+0x2c>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1f5      	bne.n	8011c28 <__sinit+0xc>
 8011c3c:	f7ff ffc4 	bl	8011bc8 <global_stdio_init.part.0>
 8011c40:	e7f2      	b.n	8011c28 <__sinit+0xc>
 8011c42:	bf00      	nop
 8011c44:	08011b89 	.word	0x08011b89
 8011c48:	20007288 	.word	0x20007288

08011c4c <_fwalk_sglue>:
 8011c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c50:	4607      	mov	r7, r0
 8011c52:	4688      	mov	r8, r1
 8011c54:	4614      	mov	r4, r2
 8011c56:	2600      	movs	r6, #0
 8011c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8011c60:	d505      	bpl.n	8011c6e <_fwalk_sglue+0x22>
 8011c62:	6824      	ldr	r4, [r4, #0]
 8011c64:	2c00      	cmp	r4, #0
 8011c66:	d1f7      	bne.n	8011c58 <_fwalk_sglue+0xc>
 8011c68:	4630      	mov	r0, r6
 8011c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d907      	bls.n	8011c84 <_fwalk_sglue+0x38>
 8011c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	d003      	beq.n	8011c84 <_fwalk_sglue+0x38>
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	4638      	mov	r0, r7
 8011c80:	47c0      	blx	r8
 8011c82:	4306      	orrs	r6, r0
 8011c84:	3568      	adds	r5, #104	@ 0x68
 8011c86:	e7e9      	b.n	8011c5c <_fwalk_sglue+0x10>

08011c88 <iprintf>:
 8011c88:	b40f      	push	{r0, r1, r2, r3}
 8011c8a:	b507      	push	{r0, r1, r2, lr}
 8011c8c:	4906      	ldr	r1, [pc, #24]	@ (8011ca8 <iprintf+0x20>)
 8011c8e:	ab04      	add	r3, sp, #16
 8011c90:	6808      	ldr	r0, [r1, #0]
 8011c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c96:	6881      	ldr	r1, [r0, #8]
 8011c98:	9301      	str	r3, [sp, #4]
 8011c9a:	f000 fb37 	bl	801230c <_vfiprintf_r>
 8011c9e:	b003      	add	sp, #12
 8011ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ca4:	b004      	add	sp, #16
 8011ca6:	4770      	bx	lr
 8011ca8:	2000004c 	.word	0x2000004c

08011cac <putchar>:
 8011cac:	4b02      	ldr	r3, [pc, #8]	@ (8011cb8 <putchar+0xc>)
 8011cae:	4601      	mov	r1, r0
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	6882      	ldr	r2, [r0, #8]
 8011cb4:	f000 be7c 	b.w	80129b0 <_putc_r>
 8011cb8:	2000004c 	.word	0x2000004c

08011cbc <siprintf>:
 8011cbc:	b40e      	push	{r1, r2, r3}
 8011cbe:	b500      	push	{lr}
 8011cc0:	b09c      	sub	sp, #112	@ 0x70
 8011cc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8011cc4:	9002      	str	r0, [sp, #8]
 8011cc6:	9006      	str	r0, [sp, #24]
 8011cc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ccc:	4809      	ldr	r0, [pc, #36]	@ (8011cf4 <siprintf+0x38>)
 8011cce:	9107      	str	r1, [sp, #28]
 8011cd0:	9104      	str	r1, [sp, #16]
 8011cd2:	4909      	ldr	r1, [pc, #36]	@ (8011cf8 <siprintf+0x3c>)
 8011cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cd8:	9105      	str	r1, [sp, #20]
 8011cda:	6800      	ldr	r0, [r0, #0]
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	a902      	add	r1, sp, #8
 8011ce0:	f000 f9ee 	bl	80120c0 <_svfiprintf_r>
 8011ce4:	9b02      	ldr	r3, [sp, #8]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	701a      	strb	r2, [r3, #0]
 8011cea:	b01c      	add	sp, #112	@ 0x70
 8011cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cf0:	b003      	add	sp, #12
 8011cf2:	4770      	bx	lr
 8011cf4:	2000004c 	.word	0x2000004c
 8011cf8:	ffff0208 	.word	0xffff0208

08011cfc <__sread>:
 8011cfc:	b510      	push	{r4, lr}
 8011cfe:	460c      	mov	r4, r1
 8011d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d04:	f000 f8be 	bl	8011e84 <_read_r>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	bfab      	itete	ge
 8011d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d10:	181b      	addge	r3, r3, r0
 8011d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d16:	bfac      	ite	ge
 8011d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d1a:	81a3      	strhlt	r3, [r4, #12]
 8011d1c:	bd10      	pop	{r4, pc}

08011d1e <__swrite>:
 8011d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d22:	461f      	mov	r7, r3
 8011d24:	898b      	ldrh	r3, [r1, #12]
 8011d26:	05db      	lsls	r3, r3, #23
 8011d28:	4605      	mov	r5, r0
 8011d2a:	460c      	mov	r4, r1
 8011d2c:	4616      	mov	r6, r2
 8011d2e:	d505      	bpl.n	8011d3c <__swrite+0x1e>
 8011d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d34:	2302      	movs	r3, #2
 8011d36:	2200      	movs	r2, #0
 8011d38:	f000 f892 	bl	8011e60 <_lseek_r>
 8011d3c:	89a3      	ldrh	r3, [r4, #12]
 8011d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d46:	81a3      	strh	r3, [r4, #12]
 8011d48:	4632      	mov	r2, r6
 8011d4a:	463b      	mov	r3, r7
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d52:	f000 b8b9 	b.w	8011ec8 <_write_r>

08011d56 <__sseek>:
 8011d56:	b510      	push	{r4, lr}
 8011d58:	460c      	mov	r4, r1
 8011d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d5e:	f000 f87f 	bl	8011e60 <_lseek_r>
 8011d62:	1c43      	adds	r3, r0, #1
 8011d64:	89a3      	ldrh	r3, [r4, #12]
 8011d66:	bf15      	itete	ne
 8011d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d72:	81a3      	strheq	r3, [r4, #12]
 8011d74:	bf18      	it	ne
 8011d76:	81a3      	strhne	r3, [r4, #12]
 8011d78:	bd10      	pop	{r4, pc}

08011d7a <__sclose>:
 8011d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d7e:	f000 b809 	b.w	8011d94 <_close_r>

08011d82 <memset>:
 8011d82:	4402      	add	r2, r0
 8011d84:	4603      	mov	r3, r0
 8011d86:	4293      	cmp	r3, r2
 8011d88:	d100      	bne.n	8011d8c <memset+0xa>
 8011d8a:	4770      	bx	lr
 8011d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8011d90:	e7f9      	b.n	8011d86 <memset+0x4>
	...

08011d94 <_close_r>:
 8011d94:	b538      	push	{r3, r4, r5, lr}
 8011d96:	4d06      	ldr	r5, [pc, #24]	@ (8011db0 <_close_r+0x1c>)
 8011d98:	2300      	movs	r3, #0
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	4608      	mov	r0, r1
 8011d9e:	602b      	str	r3, [r5, #0]
 8011da0:	f7f0 fdfd 	bl	800299e <_close>
 8011da4:	1c43      	adds	r3, r0, #1
 8011da6:	d102      	bne.n	8011dae <_close_r+0x1a>
 8011da8:	682b      	ldr	r3, [r5, #0]
 8011daa:	b103      	cbz	r3, 8011dae <_close_r+0x1a>
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	bd38      	pop	{r3, r4, r5, pc}
 8011db0:	2000728c 	.word	0x2000728c

08011db4 <_reclaim_reent>:
 8011db4:	4b29      	ldr	r3, [pc, #164]	@ (8011e5c <_reclaim_reent+0xa8>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4283      	cmp	r3, r0
 8011dba:	b570      	push	{r4, r5, r6, lr}
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	d04b      	beq.n	8011e58 <_reclaim_reent+0xa4>
 8011dc0:	69c3      	ldr	r3, [r0, #28]
 8011dc2:	b1ab      	cbz	r3, 8011df0 <_reclaim_reent+0x3c>
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	b16b      	cbz	r3, 8011de4 <_reclaim_reent+0x30>
 8011dc8:	2500      	movs	r5, #0
 8011dca:	69e3      	ldr	r3, [r4, #28]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	5959      	ldr	r1, [r3, r5]
 8011dd0:	2900      	cmp	r1, #0
 8011dd2:	d13b      	bne.n	8011e4c <_reclaim_reent+0x98>
 8011dd4:	3504      	adds	r5, #4
 8011dd6:	2d80      	cmp	r5, #128	@ 0x80
 8011dd8:	d1f7      	bne.n	8011dca <_reclaim_reent+0x16>
 8011dda:	69e3      	ldr	r3, [r4, #28]
 8011ddc:	4620      	mov	r0, r4
 8011dde:	68d9      	ldr	r1, [r3, #12]
 8011de0:	f000 f8c8 	bl	8011f74 <_free_r>
 8011de4:	69e3      	ldr	r3, [r4, #28]
 8011de6:	6819      	ldr	r1, [r3, #0]
 8011de8:	b111      	cbz	r1, 8011df0 <_reclaim_reent+0x3c>
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 f8c2 	bl	8011f74 <_free_r>
 8011df0:	6961      	ldr	r1, [r4, #20]
 8011df2:	b111      	cbz	r1, 8011dfa <_reclaim_reent+0x46>
 8011df4:	4620      	mov	r0, r4
 8011df6:	f000 f8bd 	bl	8011f74 <_free_r>
 8011dfa:	69e1      	ldr	r1, [r4, #28]
 8011dfc:	b111      	cbz	r1, 8011e04 <_reclaim_reent+0x50>
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 f8b8 	bl	8011f74 <_free_r>
 8011e04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011e06:	b111      	cbz	r1, 8011e0e <_reclaim_reent+0x5a>
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f000 f8b3 	bl	8011f74 <_free_r>
 8011e0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e10:	b111      	cbz	r1, 8011e18 <_reclaim_reent+0x64>
 8011e12:	4620      	mov	r0, r4
 8011e14:	f000 f8ae 	bl	8011f74 <_free_r>
 8011e18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011e1a:	b111      	cbz	r1, 8011e22 <_reclaim_reent+0x6e>
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f000 f8a9 	bl	8011f74 <_free_r>
 8011e22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011e24:	b111      	cbz	r1, 8011e2c <_reclaim_reent+0x78>
 8011e26:	4620      	mov	r0, r4
 8011e28:	f000 f8a4 	bl	8011f74 <_free_r>
 8011e2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011e2e:	b111      	cbz	r1, 8011e36 <_reclaim_reent+0x82>
 8011e30:	4620      	mov	r0, r4
 8011e32:	f000 f89f 	bl	8011f74 <_free_r>
 8011e36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011e38:	b111      	cbz	r1, 8011e40 <_reclaim_reent+0x8c>
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f000 f89a 	bl	8011f74 <_free_r>
 8011e40:	6a23      	ldr	r3, [r4, #32]
 8011e42:	b14b      	cbz	r3, 8011e58 <_reclaim_reent+0xa4>
 8011e44:	4620      	mov	r0, r4
 8011e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e4a:	4718      	bx	r3
 8011e4c:	680e      	ldr	r6, [r1, #0]
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f000 f890 	bl	8011f74 <_free_r>
 8011e54:	4631      	mov	r1, r6
 8011e56:	e7bb      	b.n	8011dd0 <_reclaim_reent+0x1c>
 8011e58:	bd70      	pop	{r4, r5, r6, pc}
 8011e5a:	bf00      	nop
 8011e5c:	2000004c 	.word	0x2000004c

08011e60 <_lseek_r>:
 8011e60:	b538      	push	{r3, r4, r5, lr}
 8011e62:	4d07      	ldr	r5, [pc, #28]	@ (8011e80 <_lseek_r+0x20>)
 8011e64:	4604      	mov	r4, r0
 8011e66:	4608      	mov	r0, r1
 8011e68:	4611      	mov	r1, r2
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	602a      	str	r2, [r5, #0]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	f7f0 fdbc 	bl	80029ec <_lseek>
 8011e74:	1c43      	adds	r3, r0, #1
 8011e76:	d102      	bne.n	8011e7e <_lseek_r+0x1e>
 8011e78:	682b      	ldr	r3, [r5, #0]
 8011e7a:	b103      	cbz	r3, 8011e7e <_lseek_r+0x1e>
 8011e7c:	6023      	str	r3, [r4, #0]
 8011e7e:	bd38      	pop	{r3, r4, r5, pc}
 8011e80:	2000728c 	.word	0x2000728c

08011e84 <_read_r>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	4d07      	ldr	r5, [pc, #28]	@ (8011ea4 <_read_r+0x20>)
 8011e88:	4604      	mov	r4, r0
 8011e8a:	4608      	mov	r0, r1
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	2200      	movs	r2, #0
 8011e90:	602a      	str	r2, [r5, #0]
 8011e92:	461a      	mov	r2, r3
 8011e94:	f7f0 fd4a 	bl	800292c <_read>
 8011e98:	1c43      	adds	r3, r0, #1
 8011e9a:	d102      	bne.n	8011ea2 <_read_r+0x1e>
 8011e9c:	682b      	ldr	r3, [r5, #0]
 8011e9e:	b103      	cbz	r3, 8011ea2 <_read_r+0x1e>
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	bd38      	pop	{r3, r4, r5, pc}
 8011ea4:	2000728c 	.word	0x2000728c

08011ea8 <_sbrk_r>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	4d06      	ldr	r5, [pc, #24]	@ (8011ec4 <_sbrk_r+0x1c>)
 8011eac:	2300      	movs	r3, #0
 8011eae:	4604      	mov	r4, r0
 8011eb0:	4608      	mov	r0, r1
 8011eb2:	602b      	str	r3, [r5, #0]
 8011eb4:	f7f0 fda8 	bl	8002a08 <_sbrk>
 8011eb8:	1c43      	adds	r3, r0, #1
 8011eba:	d102      	bne.n	8011ec2 <_sbrk_r+0x1a>
 8011ebc:	682b      	ldr	r3, [r5, #0]
 8011ebe:	b103      	cbz	r3, 8011ec2 <_sbrk_r+0x1a>
 8011ec0:	6023      	str	r3, [r4, #0]
 8011ec2:	bd38      	pop	{r3, r4, r5, pc}
 8011ec4:	2000728c 	.word	0x2000728c

08011ec8 <_write_r>:
 8011ec8:	b538      	push	{r3, r4, r5, lr}
 8011eca:	4d07      	ldr	r5, [pc, #28]	@ (8011ee8 <_write_r+0x20>)
 8011ecc:	4604      	mov	r4, r0
 8011ece:	4608      	mov	r0, r1
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	602a      	str	r2, [r5, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f7f0 fd45 	bl	8002966 <_write>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d102      	bne.n	8011ee6 <_write_r+0x1e>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	b103      	cbz	r3, 8011ee6 <_write_r+0x1e>
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	2000728c 	.word	0x2000728c

08011eec <__errno>:
 8011eec:	4b01      	ldr	r3, [pc, #4]	@ (8011ef4 <__errno+0x8>)
 8011eee:	6818      	ldr	r0, [r3, #0]
 8011ef0:	4770      	bx	lr
 8011ef2:	bf00      	nop
 8011ef4:	2000004c 	.word	0x2000004c

08011ef8 <__libc_init_array>:
 8011ef8:	b570      	push	{r4, r5, r6, lr}
 8011efa:	4d0d      	ldr	r5, [pc, #52]	@ (8011f30 <__libc_init_array+0x38>)
 8011efc:	4c0d      	ldr	r4, [pc, #52]	@ (8011f34 <__libc_init_array+0x3c>)
 8011efe:	1b64      	subs	r4, r4, r5
 8011f00:	10a4      	asrs	r4, r4, #2
 8011f02:	2600      	movs	r6, #0
 8011f04:	42a6      	cmp	r6, r4
 8011f06:	d109      	bne.n	8011f1c <__libc_init_array+0x24>
 8011f08:	4d0b      	ldr	r5, [pc, #44]	@ (8011f38 <__libc_init_array+0x40>)
 8011f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8011f3c <__libc_init_array+0x44>)
 8011f0c:	f001 fa5c 	bl	80133c8 <_init>
 8011f10:	1b64      	subs	r4, r4, r5
 8011f12:	10a4      	asrs	r4, r4, #2
 8011f14:	2600      	movs	r6, #0
 8011f16:	42a6      	cmp	r6, r4
 8011f18:	d105      	bne.n	8011f26 <__libc_init_array+0x2e>
 8011f1a:	bd70      	pop	{r4, r5, r6, pc}
 8011f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f20:	4798      	blx	r3
 8011f22:	3601      	adds	r6, #1
 8011f24:	e7ee      	b.n	8011f04 <__libc_init_array+0xc>
 8011f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f2a:	4798      	blx	r3
 8011f2c:	3601      	adds	r6, #1
 8011f2e:	e7f2      	b.n	8011f16 <__libc_init_array+0x1e>
 8011f30:	08013700 	.word	0x08013700
 8011f34:	08013700 	.word	0x08013700
 8011f38:	08013700 	.word	0x08013700
 8011f3c:	08013704 	.word	0x08013704

08011f40 <__retarget_lock_init_recursive>:
 8011f40:	4770      	bx	lr

08011f42 <__retarget_lock_acquire_recursive>:
 8011f42:	4770      	bx	lr

08011f44 <__retarget_lock_release_recursive>:
 8011f44:	4770      	bx	lr

08011f46 <strcpy>:
 8011f46:	4603      	mov	r3, r0
 8011f48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f4c:	f803 2b01 	strb.w	r2, [r3], #1
 8011f50:	2a00      	cmp	r2, #0
 8011f52:	d1f9      	bne.n	8011f48 <strcpy+0x2>
 8011f54:	4770      	bx	lr

08011f56 <memcpy>:
 8011f56:	440a      	add	r2, r1
 8011f58:	4291      	cmp	r1, r2
 8011f5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011f5e:	d100      	bne.n	8011f62 <memcpy+0xc>
 8011f60:	4770      	bx	lr
 8011f62:	b510      	push	{r4, lr}
 8011f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f6c:	4291      	cmp	r1, r2
 8011f6e:	d1f9      	bne.n	8011f64 <memcpy+0xe>
 8011f70:	bd10      	pop	{r4, pc}
	...

08011f74 <_free_r>:
 8011f74:	b538      	push	{r3, r4, r5, lr}
 8011f76:	4605      	mov	r5, r0
 8011f78:	2900      	cmp	r1, #0
 8011f7a:	d041      	beq.n	8012000 <_free_r+0x8c>
 8011f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f80:	1f0c      	subs	r4, r1, #4
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	bfb8      	it	lt
 8011f86:	18e4      	addlt	r4, r4, r3
 8011f88:	f7ff fdb0 	bl	8011aec <__malloc_lock>
 8011f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8012004 <_free_r+0x90>)
 8011f8e:	6813      	ldr	r3, [r2, #0]
 8011f90:	b933      	cbnz	r3, 8011fa0 <_free_r+0x2c>
 8011f92:	6063      	str	r3, [r4, #4]
 8011f94:	6014      	str	r4, [r2, #0]
 8011f96:	4628      	mov	r0, r5
 8011f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f9c:	f7ff bdac 	b.w	8011af8 <__malloc_unlock>
 8011fa0:	42a3      	cmp	r3, r4
 8011fa2:	d908      	bls.n	8011fb6 <_free_r+0x42>
 8011fa4:	6820      	ldr	r0, [r4, #0]
 8011fa6:	1821      	adds	r1, r4, r0
 8011fa8:	428b      	cmp	r3, r1
 8011faa:	bf01      	itttt	eq
 8011fac:	6819      	ldreq	r1, [r3, #0]
 8011fae:	685b      	ldreq	r3, [r3, #4]
 8011fb0:	1809      	addeq	r1, r1, r0
 8011fb2:	6021      	streq	r1, [r4, #0]
 8011fb4:	e7ed      	b.n	8011f92 <_free_r+0x1e>
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	b10b      	cbz	r3, 8011fc0 <_free_r+0x4c>
 8011fbc:	42a3      	cmp	r3, r4
 8011fbe:	d9fa      	bls.n	8011fb6 <_free_r+0x42>
 8011fc0:	6811      	ldr	r1, [r2, #0]
 8011fc2:	1850      	adds	r0, r2, r1
 8011fc4:	42a0      	cmp	r0, r4
 8011fc6:	d10b      	bne.n	8011fe0 <_free_r+0x6c>
 8011fc8:	6820      	ldr	r0, [r4, #0]
 8011fca:	4401      	add	r1, r0
 8011fcc:	1850      	adds	r0, r2, r1
 8011fce:	4283      	cmp	r3, r0
 8011fd0:	6011      	str	r1, [r2, #0]
 8011fd2:	d1e0      	bne.n	8011f96 <_free_r+0x22>
 8011fd4:	6818      	ldr	r0, [r3, #0]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	6053      	str	r3, [r2, #4]
 8011fda:	4408      	add	r0, r1
 8011fdc:	6010      	str	r0, [r2, #0]
 8011fde:	e7da      	b.n	8011f96 <_free_r+0x22>
 8011fe0:	d902      	bls.n	8011fe8 <_free_r+0x74>
 8011fe2:	230c      	movs	r3, #12
 8011fe4:	602b      	str	r3, [r5, #0]
 8011fe6:	e7d6      	b.n	8011f96 <_free_r+0x22>
 8011fe8:	6820      	ldr	r0, [r4, #0]
 8011fea:	1821      	adds	r1, r4, r0
 8011fec:	428b      	cmp	r3, r1
 8011fee:	bf04      	itt	eq
 8011ff0:	6819      	ldreq	r1, [r3, #0]
 8011ff2:	685b      	ldreq	r3, [r3, #4]
 8011ff4:	6063      	str	r3, [r4, #4]
 8011ff6:	bf04      	itt	eq
 8011ff8:	1809      	addeq	r1, r1, r0
 8011ffa:	6021      	streq	r1, [r4, #0]
 8011ffc:	6054      	str	r4, [r2, #4]
 8011ffe:	e7ca      	b.n	8011f96 <_free_r+0x22>
 8012000:	bd38      	pop	{r3, r4, r5, pc}
 8012002:	bf00      	nop
 8012004:	2000714c 	.word	0x2000714c

08012008 <__ssputs_r>:
 8012008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801200c:	688e      	ldr	r6, [r1, #8]
 801200e:	461f      	mov	r7, r3
 8012010:	42be      	cmp	r6, r7
 8012012:	680b      	ldr	r3, [r1, #0]
 8012014:	4682      	mov	sl, r0
 8012016:	460c      	mov	r4, r1
 8012018:	4690      	mov	r8, r2
 801201a:	d82d      	bhi.n	8012078 <__ssputs_r+0x70>
 801201c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012020:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012024:	d026      	beq.n	8012074 <__ssputs_r+0x6c>
 8012026:	6965      	ldr	r5, [r4, #20]
 8012028:	6909      	ldr	r1, [r1, #16]
 801202a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801202e:	eba3 0901 	sub.w	r9, r3, r1
 8012032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012036:	1c7b      	adds	r3, r7, #1
 8012038:	444b      	add	r3, r9
 801203a:	106d      	asrs	r5, r5, #1
 801203c:	429d      	cmp	r5, r3
 801203e:	bf38      	it	cc
 8012040:	461d      	movcc	r5, r3
 8012042:	0553      	lsls	r3, r2, #21
 8012044:	d527      	bpl.n	8012096 <__ssputs_r+0x8e>
 8012046:	4629      	mov	r1, r5
 8012048:	f7ff fcd0 	bl	80119ec <_malloc_r>
 801204c:	4606      	mov	r6, r0
 801204e:	b360      	cbz	r0, 80120aa <__ssputs_r+0xa2>
 8012050:	6921      	ldr	r1, [r4, #16]
 8012052:	464a      	mov	r2, r9
 8012054:	f7ff ff7f 	bl	8011f56 <memcpy>
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801205e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012062:	81a3      	strh	r3, [r4, #12]
 8012064:	6126      	str	r6, [r4, #16]
 8012066:	6165      	str	r5, [r4, #20]
 8012068:	444e      	add	r6, r9
 801206a:	eba5 0509 	sub.w	r5, r5, r9
 801206e:	6026      	str	r6, [r4, #0]
 8012070:	60a5      	str	r5, [r4, #8]
 8012072:	463e      	mov	r6, r7
 8012074:	42be      	cmp	r6, r7
 8012076:	d900      	bls.n	801207a <__ssputs_r+0x72>
 8012078:	463e      	mov	r6, r7
 801207a:	6820      	ldr	r0, [r4, #0]
 801207c:	4632      	mov	r2, r6
 801207e:	4641      	mov	r1, r8
 8012080:	f000 fd5e 	bl	8012b40 <memmove>
 8012084:	68a3      	ldr	r3, [r4, #8]
 8012086:	1b9b      	subs	r3, r3, r6
 8012088:	60a3      	str	r3, [r4, #8]
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	4433      	add	r3, r6
 801208e:	6023      	str	r3, [r4, #0]
 8012090:	2000      	movs	r0, #0
 8012092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012096:	462a      	mov	r2, r5
 8012098:	f000 fd6c 	bl	8012b74 <_realloc_r>
 801209c:	4606      	mov	r6, r0
 801209e:	2800      	cmp	r0, #0
 80120a0:	d1e0      	bne.n	8012064 <__ssputs_r+0x5c>
 80120a2:	6921      	ldr	r1, [r4, #16]
 80120a4:	4650      	mov	r0, sl
 80120a6:	f7ff ff65 	bl	8011f74 <_free_r>
 80120aa:	230c      	movs	r3, #12
 80120ac:	f8ca 3000 	str.w	r3, [sl]
 80120b0:	89a3      	ldrh	r3, [r4, #12]
 80120b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120b6:	81a3      	strh	r3, [r4, #12]
 80120b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120bc:	e7e9      	b.n	8012092 <__ssputs_r+0x8a>
	...

080120c0 <_svfiprintf_r>:
 80120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	4698      	mov	r8, r3
 80120c6:	898b      	ldrh	r3, [r1, #12]
 80120c8:	061b      	lsls	r3, r3, #24
 80120ca:	b09d      	sub	sp, #116	@ 0x74
 80120cc:	4607      	mov	r7, r0
 80120ce:	460d      	mov	r5, r1
 80120d0:	4614      	mov	r4, r2
 80120d2:	d510      	bpl.n	80120f6 <_svfiprintf_r+0x36>
 80120d4:	690b      	ldr	r3, [r1, #16]
 80120d6:	b973      	cbnz	r3, 80120f6 <_svfiprintf_r+0x36>
 80120d8:	2140      	movs	r1, #64	@ 0x40
 80120da:	f7ff fc87 	bl	80119ec <_malloc_r>
 80120de:	6028      	str	r0, [r5, #0]
 80120e0:	6128      	str	r0, [r5, #16]
 80120e2:	b930      	cbnz	r0, 80120f2 <_svfiprintf_r+0x32>
 80120e4:	230c      	movs	r3, #12
 80120e6:	603b      	str	r3, [r7, #0]
 80120e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120ec:	b01d      	add	sp, #116	@ 0x74
 80120ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f2:	2340      	movs	r3, #64	@ 0x40
 80120f4:	616b      	str	r3, [r5, #20]
 80120f6:	2300      	movs	r3, #0
 80120f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120fa:	2320      	movs	r3, #32
 80120fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012100:	f8cd 800c 	str.w	r8, [sp, #12]
 8012104:	2330      	movs	r3, #48	@ 0x30
 8012106:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80122a4 <_svfiprintf_r+0x1e4>
 801210a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801210e:	f04f 0901 	mov.w	r9, #1
 8012112:	4623      	mov	r3, r4
 8012114:	469a      	mov	sl, r3
 8012116:	f813 2b01 	ldrb.w	r2, [r3], #1
 801211a:	b10a      	cbz	r2, 8012120 <_svfiprintf_r+0x60>
 801211c:	2a25      	cmp	r2, #37	@ 0x25
 801211e:	d1f9      	bne.n	8012114 <_svfiprintf_r+0x54>
 8012120:	ebba 0b04 	subs.w	fp, sl, r4
 8012124:	d00b      	beq.n	801213e <_svfiprintf_r+0x7e>
 8012126:	465b      	mov	r3, fp
 8012128:	4622      	mov	r2, r4
 801212a:	4629      	mov	r1, r5
 801212c:	4638      	mov	r0, r7
 801212e:	f7ff ff6b 	bl	8012008 <__ssputs_r>
 8012132:	3001      	adds	r0, #1
 8012134:	f000 80a7 	beq.w	8012286 <_svfiprintf_r+0x1c6>
 8012138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801213a:	445a      	add	r2, fp
 801213c:	9209      	str	r2, [sp, #36]	@ 0x24
 801213e:	f89a 3000 	ldrb.w	r3, [sl]
 8012142:	2b00      	cmp	r3, #0
 8012144:	f000 809f 	beq.w	8012286 <_svfiprintf_r+0x1c6>
 8012148:	2300      	movs	r3, #0
 801214a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801214e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012152:	f10a 0a01 	add.w	sl, sl, #1
 8012156:	9304      	str	r3, [sp, #16]
 8012158:	9307      	str	r3, [sp, #28]
 801215a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801215e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012160:	4654      	mov	r4, sl
 8012162:	2205      	movs	r2, #5
 8012164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012168:	484e      	ldr	r0, [pc, #312]	@ (80122a4 <_svfiprintf_r+0x1e4>)
 801216a:	f7ee f839 	bl	80001e0 <memchr>
 801216e:	9a04      	ldr	r2, [sp, #16]
 8012170:	b9d8      	cbnz	r0, 80121aa <_svfiprintf_r+0xea>
 8012172:	06d0      	lsls	r0, r2, #27
 8012174:	bf44      	itt	mi
 8012176:	2320      	movmi	r3, #32
 8012178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801217c:	0711      	lsls	r1, r2, #28
 801217e:	bf44      	itt	mi
 8012180:	232b      	movmi	r3, #43	@ 0x2b
 8012182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012186:	f89a 3000 	ldrb.w	r3, [sl]
 801218a:	2b2a      	cmp	r3, #42	@ 0x2a
 801218c:	d015      	beq.n	80121ba <_svfiprintf_r+0xfa>
 801218e:	9a07      	ldr	r2, [sp, #28]
 8012190:	4654      	mov	r4, sl
 8012192:	2000      	movs	r0, #0
 8012194:	f04f 0c0a 	mov.w	ip, #10
 8012198:	4621      	mov	r1, r4
 801219a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801219e:	3b30      	subs	r3, #48	@ 0x30
 80121a0:	2b09      	cmp	r3, #9
 80121a2:	d94b      	bls.n	801223c <_svfiprintf_r+0x17c>
 80121a4:	b1b0      	cbz	r0, 80121d4 <_svfiprintf_r+0x114>
 80121a6:	9207      	str	r2, [sp, #28]
 80121a8:	e014      	b.n	80121d4 <_svfiprintf_r+0x114>
 80121aa:	eba0 0308 	sub.w	r3, r0, r8
 80121ae:	fa09 f303 	lsl.w	r3, r9, r3
 80121b2:	4313      	orrs	r3, r2
 80121b4:	9304      	str	r3, [sp, #16]
 80121b6:	46a2      	mov	sl, r4
 80121b8:	e7d2      	b.n	8012160 <_svfiprintf_r+0xa0>
 80121ba:	9b03      	ldr	r3, [sp, #12]
 80121bc:	1d19      	adds	r1, r3, #4
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	9103      	str	r1, [sp, #12]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	bfbb      	ittet	lt
 80121c6:	425b      	neglt	r3, r3
 80121c8:	f042 0202 	orrlt.w	r2, r2, #2
 80121cc:	9307      	strge	r3, [sp, #28]
 80121ce:	9307      	strlt	r3, [sp, #28]
 80121d0:	bfb8      	it	lt
 80121d2:	9204      	strlt	r2, [sp, #16]
 80121d4:	7823      	ldrb	r3, [r4, #0]
 80121d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80121d8:	d10a      	bne.n	80121f0 <_svfiprintf_r+0x130>
 80121da:	7863      	ldrb	r3, [r4, #1]
 80121dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80121de:	d132      	bne.n	8012246 <_svfiprintf_r+0x186>
 80121e0:	9b03      	ldr	r3, [sp, #12]
 80121e2:	1d1a      	adds	r2, r3, #4
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	9203      	str	r2, [sp, #12]
 80121e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121ec:	3402      	adds	r4, #2
 80121ee:	9305      	str	r3, [sp, #20]
 80121f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80122b4 <_svfiprintf_r+0x1f4>
 80121f4:	7821      	ldrb	r1, [r4, #0]
 80121f6:	2203      	movs	r2, #3
 80121f8:	4650      	mov	r0, sl
 80121fa:	f7ed fff1 	bl	80001e0 <memchr>
 80121fe:	b138      	cbz	r0, 8012210 <_svfiprintf_r+0x150>
 8012200:	9b04      	ldr	r3, [sp, #16]
 8012202:	eba0 000a 	sub.w	r0, r0, sl
 8012206:	2240      	movs	r2, #64	@ 0x40
 8012208:	4082      	lsls	r2, r0
 801220a:	4313      	orrs	r3, r2
 801220c:	3401      	adds	r4, #1
 801220e:	9304      	str	r3, [sp, #16]
 8012210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012214:	4824      	ldr	r0, [pc, #144]	@ (80122a8 <_svfiprintf_r+0x1e8>)
 8012216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801221a:	2206      	movs	r2, #6
 801221c:	f7ed ffe0 	bl	80001e0 <memchr>
 8012220:	2800      	cmp	r0, #0
 8012222:	d036      	beq.n	8012292 <_svfiprintf_r+0x1d2>
 8012224:	4b21      	ldr	r3, [pc, #132]	@ (80122ac <_svfiprintf_r+0x1ec>)
 8012226:	bb1b      	cbnz	r3, 8012270 <_svfiprintf_r+0x1b0>
 8012228:	9b03      	ldr	r3, [sp, #12]
 801222a:	3307      	adds	r3, #7
 801222c:	f023 0307 	bic.w	r3, r3, #7
 8012230:	3308      	adds	r3, #8
 8012232:	9303      	str	r3, [sp, #12]
 8012234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012236:	4433      	add	r3, r6
 8012238:	9309      	str	r3, [sp, #36]	@ 0x24
 801223a:	e76a      	b.n	8012112 <_svfiprintf_r+0x52>
 801223c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012240:	460c      	mov	r4, r1
 8012242:	2001      	movs	r0, #1
 8012244:	e7a8      	b.n	8012198 <_svfiprintf_r+0xd8>
 8012246:	2300      	movs	r3, #0
 8012248:	3401      	adds	r4, #1
 801224a:	9305      	str	r3, [sp, #20]
 801224c:	4619      	mov	r1, r3
 801224e:	f04f 0c0a 	mov.w	ip, #10
 8012252:	4620      	mov	r0, r4
 8012254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012258:	3a30      	subs	r2, #48	@ 0x30
 801225a:	2a09      	cmp	r2, #9
 801225c:	d903      	bls.n	8012266 <_svfiprintf_r+0x1a6>
 801225e:	2b00      	cmp	r3, #0
 8012260:	d0c6      	beq.n	80121f0 <_svfiprintf_r+0x130>
 8012262:	9105      	str	r1, [sp, #20]
 8012264:	e7c4      	b.n	80121f0 <_svfiprintf_r+0x130>
 8012266:	fb0c 2101 	mla	r1, ip, r1, r2
 801226a:	4604      	mov	r4, r0
 801226c:	2301      	movs	r3, #1
 801226e:	e7f0      	b.n	8012252 <_svfiprintf_r+0x192>
 8012270:	ab03      	add	r3, sp, #12
 8012272:	9300      	str	r3, [sp, #0]
 8012274:	462a      	mov	r2, r5
 8012276:	4b0e      	ldr	r3, [pc, #56]	@ (80122b0 <_svfiprintf_r+0x1f0>)
 8012278:	a904      	add	r1, sp, #16
 801227a:	4638      	mov	r0, r7
 801227c:	f3af 8000 	nop.w
 8012280:	1c42      	adds	r2, r0, #1
 8012282:	4606      	mov	r6, r0
 8012284:	d1d6      	bne.n	8012234 <_svfiprintf_r+0x174>
 8012286:	89ab      	ldrh	r3, [r5, #12]
 8012288:	065b      	lsls	r3, r3, #25
 801228a:	f53f af2d 	bmi.w	80120e8 <_svfiprintf_r+0x28>
 801228e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012290:	e72c      	b.n	80120ec <_svfiprintf_r+0x2c>
 8012292:	ab03      	add	r3, sp, #12
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	462a      	mov	r2, r5
 8012298:	4b05      	ldr	r3, [pc, #20]	@ (80122b0 <_svfiprintf_r+0x1f0>)
 801229a:	a904      	add	r1, sp, #16
 801229c:	4638      	mov	r0, r7
 801229e:	f000 f9bb 	bl	8012618 <_printf_i>
 80122a2:	e7ed      	b.n	8012280 <_svfiprintf_r+0x1c0>
 80122a4:	08013650 	.word	0x08013650
 80122a8:	0801365a 	.word	0x0801365a
 80122ac:	00000000 	.word	0x00000000
 80122b0:	08012009 	.word	0x08012009
 80122b4:	08013656 	.word	0x08013656

080122b8 <__sfputc_r>:
 80122b8:	6893      	ldr	r3, [r2, #8]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	b410      	push	{r4}
 80122c0:	6093      	str	r3, [r2, #8]
 80122c2:	da08      	bge.n	80122d6 <__sfputc_r+0x1e>
 80122c4:	6994      	ldr	r4, [r2, #24]
 80122c6:	42a3      	cmp	r3, r4
 80122c8:	db01      	blt.n	80122ce <__sfputc_r+0x16>
 80122ca:	290a      	cmp	r1, #10
 80122cc:	d103      	bne.n	80122d6 <__sfputc_r+0x1e>
 80122ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122d2:	f000 bba1 	b.w	8012a18 <__swbuf_r>
 80122d6:	6813      	ldr	r3, [r2, #0]
 80122d8:	1c58      	adds	r0, r3, #1
 80122da:	6010      	str	r0, [r2, #0]
 80122dc:	7019      	strb	r1, [r3, #0]
 80122de:	4608      	mov	r0, r1
 80122e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122e4:	4770      	bx	lr

080122e6 <__sfputs_r>:
 80122e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122e8:	4606      	mov	r6, r0
 80122ea:	460f      	mov	r7, r1
 80122ec:	4614      	mov	r4, r2
 80122ee:	18d5      	adds	r5, r2, r3
 80122f0:	42ac      	cmp	r4, r5
 80122f2:	d101      	bne.n	80122f8 <__sfputs_r+0x12>
 80122f4:	2000      	movs	r0, #0
 80122f6:	e007      	b.n	8012308 <__sfputs_r+0x22>
 80122f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122fc:	463a      	mov	r2, r7
 80122fe:	4630      	mov	r0, r6
 8012300:	f7ff ffda 	bl	80122b8 <__sfputc_r>
 8012304:	1c43      	adds	r3, r0, #1
 8012306:	d1f3      	bne.n	80122f0 <__sfputs_r+0xa>
 8012308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801230c <_vfiprintf_r>:
 801230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012310:	460d      	mov	r5, r1
 8012312:	b09d      	sub	sp, #116	@ 0x74
 8012314:	4614      	mov	r4, r2
 8012316:	4698      	mov	r8, r3
 8012318:	4606      	mov	r6, r0
 801231a:	b118      	cbz	r0, 8012324 <_vfiprintf_r+0x18>
 801231c:	6a03      	ldr	r3, [r0, #32]
 801231e:	b90b      	cbnz	r3, 8012324 <_vfiprintf_r+0x18>
 8012320:	f7ff fc7c 	bl	8011c1c <__sinit>
 8012324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012326:	07d9      	lsls	r1, r3, #31
 8012328:	d405      	bmi.n	8012336 <_vfiprintf_r+0x2a>
 801232a:	89ab      	ldrh	r3, [r5, #12]
 801232c:	059a      	lsls	r2, r3, #22
 801232e:	d402      	bmi.n	8012336 <_vfiprintf_r+0x2a>
 8012330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012332:	f7ff fe06 	bl	8011f42 <__retarget_lock_acquire_recursive>
 8012336:	89ab      	ldrh	r3, [r5, #12]
 8012338:	071b      	lsls	r3, r3, #28
 801233a:	d501      	bpl.n	8012340 <_vfiprintf_r+0x34>
 801233c:	692b      	ldr	r3, [r5, #16]
 801233e:	b99b      	cbnz	r3, 8012368 <_vfiprintf_r+0x5c>
 8012340:	4629      	mov	r1, r5
 8012342:	4630      	mov	r0, r6
 8012344:	f000 fba6 	bl	8012a94 <__swsetup_r>
 8012348:	b170      	cbz	r0, 8012368 <_vfiprintf_r+0x5c>
 801234a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801234c:	07dc      	lsls	r4, r3, #31
 801234e:	d504      	bpl.n	801235a <_vfiprintf_r+0x4e>
 8012350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012354:	b01d      	add	sp, #116	@ 0x74
 8012356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235a:	89ab      	ldrh	r3, [r5, #12]
 801235c:	0598      	lsls	r0, r3, #22
 801235e:	d4f7      	bmi.n	8012350 <_vfiprintf_r+0x44>
 8012360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012362:	f7ff fdef 	bl	8011f44 <__retarget_lock_release_recursive>
 8012366:	e7f3      	b.n	8012350 <_vfiprintf_r+0x44>
 8012368:	2300      	movs	r3, #0
 801236a:	9309      	str	r3, [sp, #36]	@ 0x24
 801236c:	2320      	movs	r3, #32
 801236e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012372:	f8cd 800c 	str.w	r8, [sp, #12]
 8012376:	2330      	movs	r3, #48	@ 0x30
 8012378:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012528 <_vfiprintf_r+0x21c>
 801237c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012380:	f04f 0901 	mov.w	r9, #1
 8012384:	4623      	mov	r3, r4
 8012386:	469a      	mov	sl, r3
 8012388:	f813 2b01 	ldrb.w	r2, [r3], #1
 801238c:	b10a      	cbz	r2, 8012392 <_vfiprintf_r+0x86>
 801238e:	2a25      	cmp	r2, #37	@ 0x25
 8012390:	d1f9      	bne.n	8012386 <_vfiprintf_r+0x7a>
 8012392:	ebba 0b04 	subs.w	fp, sl, r4
 8012396:	d00b      	beq.n	80123b0 <_vfiprintf_r+0xa4>
 8012398:	465b      	mov	r3, fp
 801239a:	4622      	mov	r2, r4
 801239c:	4629      	mov	r1, r5
 801239e:	4630      	mov	r0, r6
 80123a0:	f7ff ffa1 	bl	80122e6 <__sfputs_r>
 80123a4:	3001      	adds	r0, #1
 80123a6:	f000 80a7 	beq.w	80124f8 <_vfiprintf_r+0x1ec>
 80123aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123ac:	445a      	add	r2, fp
 80123ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80123b0:	f89a 3000 	ldrb.w	r3, [sl]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f000 809f 	beq.w	80124f8 <_vfiprintf_r+0x1ec>
 80123ba:	2300      	movs	r3, #0
 80123bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80123c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123c4:	f10a 0a01 	add.w	sl, sl, #1
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	9307      	str	r3, [sp, #28]
 80123cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80123d2:	4654      	mov	r4, sl
 80123d4:	2205      	movs	r2, #5
 80123d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123da:	4853      	ldr	r0, [pc, #332]	@ (8012528 <_vfiprintf_r+0x21c>)
 80123dc:	f7ed ff00 	bl	80001e0 <memchr>
 80123e0:	9a04      	ldr	r2, [sp, #16]
 80123e2:	b9d8      	cbnz	r0, 801241c <_vfiprintf_r+0x110>
 80123e4:	06d1      	lsls	r1, r2, #27
 80123e6:	bf44      	itt	mi
 80123e8:	2320      	movmi	r3, #32
 80123ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123ee:	0713      	lsls	r3, r2, #28
 80123f0:	bf44      	itt	mi
 80123f2:	232b      	movmi	r3, #43	@ 0x2b
 80123f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123f8:	f89a 3000 	ldrb.w	r3, [sl]
 80123fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80123fe:	d015      	beq.n	801242c <_vfiprintf_r+0x120>
 8012400:	9a07      	ldr	r2, [sp, #28]
 8012402:	4654      	mov	r4, sl
 8012404:	2000      	movs	r0, #0
 8012406:	f04f 0c0a 	mov.w	ip, #10
 801240a:	4621      	mov	r1, r4
 801240c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012410:	3b30      	subs	r3, #48	@ 0x30
 8012412:	2b09      	cmp	r3, #9
 8012414:	d94b      	bls.n	80124ae <_vfiprintf_r+0x1a2>
 8012416:	b1b0      	cbz	r0, 8012446 <_vfiprintf_r+0x13a>
 8012418:	9207      	str	r2, [sp, #28]
 801241a:	e014      	b.n	8012446 <_vfiprintf_r+0x13a>
 801241c:	eba0 0308 	sub.w	r3, r0, r8
 8012420:	fa09 f303 	lsl.w	r3, r9, r3
 8012424:	4313      	orrs	r3, r2
 8012426:	9304      	str	r3, [sp, #16]
 8012428:	46a2      	mov	sl, r4
 801242a:	e7d2      	b.n	80123d2 <_vfiprintf_r+0xc6>
 801242c:	9b03      	ldr	r3, [sp, #12]
 801242e:	1d19      	adds	r1, r3, #4
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	9103      	str	r1, [sp, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	bfbb      	ittet	lt
 8012438:	425b      	neglt	r3, r3
 801243a:	f042 0202 	orrlt.w	r2, r2, #2
 801243e:	9307      	strge	r3, [sp, #28]
 8012440:	9307      	strlt	r3, [sp, #28]
 8012442:	bfb8      	it	lt
 8012444:	9204      	strlt	r2, [sp, #16]
 8012446:	7823      	ldrb	r3, [r4, #0]
 8012448:	2b2e      	cmp	r3, #46	@ 0x2e
 801244a:	d10a      	bne.n	8012462 <_vfiprintf_r+0x156>
 801244c:	7863      	ldrb	r3, [r4, #1]
 801244e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012450:	d132      	bne.n	80124b8 <_vfiprintf_r+0x1ac>
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	1d1a      	adds	r2, r3, #4
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	9203      	str	r2, [sp, #12]
 801245a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801245e:	3402      	adds	r4, #2
 8012460:	9305      	str	r3, [sp, #20]
 8012462:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012538 <_vfiprintf_r+0x22c>
 8012466:	7821      	ldrb	r1, [r4, #0]
 8012468:	2203      	movs	r2, #3
 801246a:	4650      	mov	r0, sl
 801246c:	f7ed feb8 	bl	80001e0 <memchr>
 8012470:	b138      	cbz	r0, 8012482 <_vfiprintf_r+0x176>
 8012472:	9b04      	ldr	r3, [sp, #16]
 8012474:	eba0 000a 	sub.w	r0, r0, sl
 8012478:	2240      	movs	r2, #64	@ 0x40
 801247a:	4082      	lsls	r2, r0
 801247c:	4313      	orrs	r3, r2
 801247e:	3401      	adds	r4, #1
 8012480:	9304      	str	r3, [sp, #16]
 8012482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012486:	4829      	ldr	r0, [pc, #164]	@ (801252c <_vfiprintf_r+0x220>)
 8012488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801248c:	2206      	movs	r2, #6
 801248e:	f7ed fea7 	bl	80001e0 <memchr>
 8012492:	2800      	cmp	r0, #0
 8012494:	d03f      	beq.n	8012516 <_vfiprintf_r+0x20a>
 8012496:	4b26      	ldr	r3, [pc, #152]	@ (8012530 <_vfiprintf_r+0x224>)
 8012498:	bb1b      	cbnz	r3, 80124e2 <_vfiprintf_r+0x1d6>
 801249a:	9b03      	ldr	r3, [sp, #12]
 801249c:	3307      	adds	r3, #7
 801249e:	f023 0307 	bic.w	r3, r3, #7
 80124a2:	3308      	adds	r3, #8
 80124a4:	9303      	str	r3, [sp, #12]
 80124a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124a8:	443b      	add	r3, r7
 80124aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80124ac:	e76a      	b.n	8012384 <_vfiprintf_r+0x78>
 80124ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80124b2:	460c      	mov	r4, r1
 80124b4:	2001      	movs	r0, #1
 80124b6:	e7a8      	b.n	801240a <_vfiprintf_r+0xfe>
 80124b8:	2300      	movs	r3, #0
 80124ba:	3401      	adds	r4, #1
 80124bc:	9305      	str	r3, [sp, #20]
 80124be:	4619      	mov	r1, r3
 80124c0:	f04f 0c0a 	mov.w	ip, #10
 80124c4:	4620      	mov	r0, r4
 80124c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124ca:	3a30      	subs	r2, #48	@ 0x30
 80124cc:	2a09      	cmp	r2, #9
 80124ce:	d903      	bls.n	80124d8 <_vfiprintf_r+0x1cc>
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d0c6      	beq.n	8012462 <_vfiprintf_r+0x156>
 80124d4:	9105      	str	r1, [sp, #20]
 80124d6:	e7c4      	b.n	8012462 <_vfiprintf_r+0x156>
 80124d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80124dc:	4604      	mov	r4, r0
 80124de:	2301      	movs	r3, #1
 80124e0:	e7f0      	b.n	80124c4 <_vfiprintf_r+0x1b8>
 80124e2:	ab03      	add	r3, sp, #12
 80124e4:	9300      	str	r3, [sp, #0]
 80124e6:	462a      	mov	r2, r5
 80124e8:	4b12      	ldr	r3, [pc, #72]	@ (8012534 <_vfiprintf_r+0x228>)
 80124ea:	a904      	add	r1, sp, #16
 80124ec:	4630      	mov	r0, r6
 80124ee:	f3af 8000 	nop.w
 80124f2:	4607      	mov	r7, r0
 80124f4:	1c78      	adds	r0, r7, #1
 80124f6:	d1d6      	bne.n	80124a6 <_vfiprintf_r+0x19a>
 80124f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124fa:	07d9      	lsls	r1, r3, #31
 80124fc:	d405      	bmi.n	801250a <_vfiprintf_r+0x1fe>
 80124fe:	89ab      	ldrh	r3, [r5, #12]
 8012500:	059a      	lsls	r2, r3, #22
 8012502:	d402      	bmi.n	801250a <_vfiprintf_r+0x1fe>
 8012504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012506:	f7ff fd1d 	bl	8011f44 <__retarget_lock_release_recursive>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	065b      	lsls	r3, r3, #25
 801250e:	f53f af1f 	bmi.w	8012350 <_vfiprintf_r+0x44>
 8012512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012514:	e71e      	b.n	8012354 <_vfiprintf_r+0x48>
 8012516:	ab03      	add	r3, sp, #12
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	462a      	mov	r2, r5
 801251c:	4b05      	ldr	r3, [pc, #20]	@ (8012534 <_vfiprintf_r+0x228>)
 801251e:	a904      	add	r1, sp, #16
 8012520:	4630      	mov	r0, r6
 8012522:	f000 f879 	bl	8012618 <_printf_i>
 8012526:	e7e4      	b.n	80124f2 <_vfiprintf_r+0x1e6>
 8012528:	08013650 	.word	0x08013650
 801252c:	0801365a 	.word	0x0801365a
 8012530:	00000000 	.word	0x00000000
 8012534:	080122e7 	.word	0x080122e7
 8012538:	08013656 	.word	0x08013656

0801253c <_printf_common>:
 801253c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012540:	4616      	mov	r6, r2
 8012542:	4698      	mov	r8, r3
 8012544:	688a      	ldr	r2, [r1, #8]
 8012546:	690b      	ldr	r3, [r1, #16]
 8012548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801254c:	4293      	cmp	r3, r2
 801254e:	bfb8      	it	lt
 8012550:	4613      	movlt	r3, r2
 8012552:	6033      	str	r3, [r6, #0]
 8012554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012558:	4607      	mov	r7, r0
 801255a:	460c      	mov	r4, r1
 801255c:	b10a      	cbz	r2, 8012562 <_printf_common+0x26>
 801255e:	3301      	adds	r3, #1
 8012560:	6033      	str	r3, [r6, #0]
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	0699      	lsls	r1, r3, #26
 8012566:	bf42      	ittt	mi
 8012568:	6833      	ldrmi	r3, [r6, #0]
 801256a:	3302      	addmi	r3, #2
 801256c:	6033      	strmi	r3, [r6, #0]
 801256e:	6825      	ldr	r5, [r4, #0]
 8012570:	f015 0506 	ands.w	r5, r5, #6
 8012574:	d106      	bne.n	8012584 <_printf_common+0x48>
 8012576:	f104 0a19 	add.w	sl, r4, #25
 801257a:	68e3      	ldr	r3, [r4, #12]
 801257c:	6832      	ldr	r2, [r6, #0]
 801257e:	1a9b      	subs	r3, r3, r2
 8012580:	42ab      	cmp	r3, r5
 8012582:	dc26      	bgt.n	80125d2 <_printf_common+0x96>
 8012584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012588:	6822      	ldr	r2, [r4, #0]
 801258a:	3b00      	subs	r3, #0
 801258c:	bf18      	it	ne
 801258e:	2301      	movne	r3, #1
 8012590:	0692      	lsls	r2, r2, #26
 8012592:	d42b      	bmi.n	80125ec <_printf_common+0xb0>
 8012594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012598:	4641      	mov	r1, r8
 801259a:	4638      	mov	r0, r7
 801259c:	47c8      	blx	r9
 801259e:	3001      	adds	r0, #1
 80125a0:	d01e      	beq.n	80125e0 <_printf_common+0xa4>
 80125a2:	6823      	ldr	r3, [r4, #0]
 80125a4:	6922      	ldr	r2, [r4, #16]
 80125a6:	f003 0306 	and.w	r3, r3, #6
 80125aa:	2b04      	cmp	r3, #4
 80125ac:	bf02      	ittt	eq
 80125ae:	68e5      	ldreq	r5, [r4, #12]
 80125b0:	6833      	ldreq	r3, [r6, #0]
 80125b2:	1aed      	subeq	r5, r5, r3
 80125b4:	68a3      	ldr	r3, [r4, #8]
 80125b6:	bf0c      	ite	eq
 80125b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125bc:	2500      	movne	r5, #0
 80125be:	4293      	cmp	r3, r2
 80125c0:	bfc4      	itt	gt
 80125c2:	1a9b      	subgt	r3, r3, r2
 80125c4:	18ed      	addgt	r5, r5, r3
 80125c6:	2600      	movs	r6, #0
 80125c8:	341a      	adds	r4, #26
 80125ca:	42b5      	cmp	r5, r6
 80125cc:	d11a      	bne.n	8012604 <_printf_common+0xc8>
 80125ce:	2000      	movs	r0, #0
 80125d0:	e008      	b.n	80125e4 <_printf_common+0xa8>
 80125d2:	2301      	movs	r3, #1
 80125d4:	4652      	mov	r2, sl
 80125d6:	4641      	mov	r1, r8
 80125d8:	4638      	mov	r0, r7
 80125da:	47c8      	blx	r9
 80125dc:	3001      	adds	r0, #1
 80125de:	d103      	bne.n	80125e8 <_printf_common+0xac>
 80125e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80125e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e8:	3501      	adds	r5, #1
 80125ea:	e7c6      	b.n	801257a <_printf_common+0x3e>
 80125ec:	18e1      	adds	r1, r4, r3
 80125ee:	1c5a      	adds	r2, r3, #1
 80125f0:	2030      	movs	r0, #48	@ 0x30
 80125f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80125f6:	4422      	add	r2, r4
 80125f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80125fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012600:	3302      	adds	r3, #2
 8012602:	e7c7      	b.n	8012594 <_printf_common+0x58>
 8012604:	2301      	movs	r3, #1
 8012606:	4622      	mov	r2, r4
 8012608:	4641      	mov	r1, r8
 801260a:	4638      	mov	r0, r7
 801260c:	47c8      	blx	r9
 801260e:	3001      	adds	r0, #1
 8012610:	d0e6      	beq.n	80125e0 <_printf_common+0xa4>
 8012612:	3601      	adds	r6, #1
 8012614:	e7d9      	b.n	80125ca <_printf_common+0x8e>
	...

08012618 <_printf_i>:
 8012618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801261c:	7e0f      	ldrb	r7, [r1, #24]
 801261e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012620:	2f78      	cmp	r7, #120	@ 0x78
 8012622:	4691      	mov	r9, r2
 8012624:	4680      	mov	r8, r0
 8012626:	460c      	mov	r4, r1
 8012628:	469a      	mov	sl, r3
 801262a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801262e:	d807      	bhi.n	8012640 <_printf_i+0x28>
 8012630:	2f62      	cmp	r7, #98	@ 0x62
 8012632:	d80a      	bhi.n	801264a <_printf_i+0x32>
 8012634:	2f00      	cmp	r7, #0
 8012636:	f000 80d2 	beq.w	80127de <_printf_i+0x1c6>
 801263a:	2f58      	cmp	r7, #88	@ 0x58
 801263c:	f000 80b9 	beq.w	80127b2 <_printf_i+0x19a>
 8012640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012648:	e03a      	b.n	80126c0 <_printf_i+0xa8>
 801264a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801264e:	2b15      	cmp	r3, #21
 8012650:	d8f6      	bhi.n	8012640 <_printf_i+0x28>
 8012652:	a101      	add	r1, pc, #4	@ (adr r1, 8012658 <_printf_i+0x40>)
 8012654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012658:	080126b1 	.word	0x080126b1
 801265c:	080126c5 	.word	0x080126c5
 8012660:	08012641 	.word	0x08012641
 8012664:	08012641 	.word	0x08012641
 8012668:	08012641 	.word	0x08012641
 801266c:	08012641 	.word	0x08012641
 8012670:	080126c5 	.word	0x080126c5
 8012674:	08012641 	.word	0x08012641
 8012678:	08012641 	.word	0x08012641
 801267c:	08012641 	.word	0x08012641
 8012680:	08012641 	.word	0x08012641
 8012684:	080127c5 	.word	0x080127c5
 8012688:	080126ef 	.word	0x080126ef
 801268c:	0801277f 	.word	0x0801277f
 8012690:	08012641 	.word	0x08012641
 8012694:	08012641 	.word	0x08012641
 8012698:	080127e7 	.word	0x080127e7
 801269c:	08012641 	.word	0x08012641
 80126a0:	080126ef 	.word	0x080126ef
 80126a4:	08012641 	.word	0x08012641
 80126a8:	08012641 	.word	0x08012641
 80126ac:	08012787 	.word	0x08012787
 80126b0:	6833      	ldr	r3, [r6, #0]
 80126b2:	1d1a      	adds	r2, r3, #4
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	6032      	str	r2, [r6, #0]
 80126b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80126c0:	2301      	movs	r3, #1
 80126c2:	e09d      	b.n	8012800 <_printf_i+0x1e8>
 80126c4:	6833      	ldr	r3, [r6, #0]
 80126c6:	6820      	ldr	r0, [r4, #0]
 80126c8:	1d19      	adds	r1, r3, #4
 80126ca:	6031      	str	r1, [r6, #0]
 80126cc:	0606      	lsls	r6, r0, #24
 80126ce:	d501      	bpl.n	80126d4 <_printf_i+0xbc>
 80126d0:	681d      	ldr	r5, [r3, #0]
 80126d2:	e003      	b.n	80126dc <_printf_i+0xc4>
 80126d4:	0645      	lsls	r5, r0, #25
 80126d6:	d5fb      	bpl.n	80126d0 <_printf_i+0xb8>
 80126d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80126dc:	2d00      	cmp	r5, #0
 80126de:	da03      	bge.n	80126e8 <_printf_i+0xd0>
 80126e0:	232d      	movs	r3, #45	@ 0x2d
 80126e2:	426d      	negs	r5, r5
 80126e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126e8:	4859      	ldr	r0, [pc, #356]	@ (8012850 <_printf_i+0x238>)
 80126ea:	230a      	movs	r3, #10
 80126ec:	e011      	b.n	8012712 <_printf_i+0xfa>
 80126ee:	6821      	ldr	r1, [r4, #0]
 80126f0:	6833      	ldr	r3, [r6, #0]
 80126f2:	0608      	lsls	r0, r1, #24
 80126f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80126f8:	d402      	bmi.n	8012700 <_printf_i+0xe8>
 80126fa:	0649      	lsls	r1, r1, #25
 80126fc:	bf48      	it	mi
 80126fe:	b2ad      	uxthmi	r5, r5
 8012700:	2f6f      	cmp	r7, #111	@ 0x6f
 8012702:	4853      	ldr	r0, [pc, #332]	@ (8012850 <_printf_i+0x238>)
 8012704:	6033      	str	r3, [r6, #0]
 8012706:	bf14      	ite	ne
 8012708:	230a      	movne	r3, #10
 801270a:	2308      	moveq	r3, #8
 801270c:	2100      	movs	r1, #0
 801270e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012712:	6866      	ldr	r6, [r4, #4]
 8012714:	60a6      	str	r6, [r4, #8]
 8012716:	2e00      	cmp	r6, #0
 8012718:	bfa2      	ittt	ge
 801271a:	6821      	ldrge	r1, [r4, #0]
 801271c:	f021 0104 	bicge.w	r1, r1, #4
 8012720:	6021      	strge	r1, [r4, #0]
 8012722:	b90d      	cbnz	r5, 8012728 <_printf_i+0x110>
 8012724:	2e00      	cmp	r6, #0
 8012726:	d04b      	beq.n	80127c0 <_printf_i+0x1a8>
 8012728:	4616      	mov	r6, r2
 801272a:	fbb5 f1f3 	udiv	r1, r5, r3
 801272e:	fb03 5711 	mls	r7, r3, r1, r5
 8012732:	5dc7      	ldrb	r7, [r0, r7]
 8012734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012738:	462f      	mov	r7, r5
 801273a:	42bb      	cmp	r3, r7
 801273c:	460d      	mov	r5, r1
 801273e:	d9f4      	bls.n	801272a <_printf_i+0x112>
 8012740:	2b08      	cmp	r3, #8
 8012742:	d10b      	bne.n	801275c <_printf_i+0x144>
 8012744:	6823      	ldr	r3, [r4, #0]
 8012746:	07df      	lsls	r7, r3, #31
 8012748:	d508      	bpl.n	801275c <_printf_i+0x144>
 801274a:	6923      	ldr	r3, [r4, #16]
 801274c:	6861      	ldr	r1, [r4, #4]
 801274e:	4299      	cmp	r1, r3
 8012750:	bfde      	ittt	le
 8012752:	2330      	movle	r3, #48	@ 0x30
 8012754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012758:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801275c:	1b92      	subs	r2, r2, r6
 801275e:	6122      	str	r2, [r4, #16]
 8012760:	f8cd a000 	str.w	sl, [sp]
 8012764:	464b      	mov	r3, r9
 8012766:	aa03      	add	r2, sp, #12
 8012768:	4621      	mov	r1, r4
 801276a:	4640      	mov	r0, r8
 801276c:	f7ff fee6 	bl	801253c <_printf_common>
 8012770:	3001      	adds	r0, #1
 8012772:	d14a      	bne.n	801280a <_printf_i+0x1f2>
 8012774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012778:	b004      	add	sp, #16
 801277a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	f043 0320 	orr.w	r3, r3, #32
 8012784:	6023      	str	r3, [r4, #0]
 8012786:	4833      	ldr	r0, [pc, #204]	@ (8012854 <_printf_i+0x23c>)
 8012788:	2778      	movs	r7, #120	@ 0x78
 801278a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	6831      	ldr	r1, [r6, #0]
 8012792:	061f      	lsls	r7, r3, #24
 8012794:	f851 5b04 	ldr.w	r5, [r1], #4
 8012798:	d402      	bmi.n	80127a0 <_printf_i+0x188>
 801279a:	065f      	lsls	r7, r3, #25
 801279c:	bf48      	it	mi
 801279e:	b2ad      	uxthmi	r5, r5
 80127a0:	6031      	str	r1, [r6, #0]
 80127a2:	07d9      	lsls	r1, r3, #31
 80127a4:	bf44      	itt	mi
 80127a6:	f043 0320 	orrmi.w	r3, r3, #32
 80127aa:	6023      	strmi	r3, [r4, #0]
 80127ac:	b11d      	cbz	r5, 80127b6 <_printf_i+0x19e>
 80127ae:	2310      	movs	r3, #16
 80127b0:	e7ac      	b.n	801270c <_printf_i+0xf4>
 80127b2:	4827      	ldr	r0, [pc, #156]	@ (8012850 <_printf_i+0x238>)
 80127b4:	e7e9      	b.n	801278a <_printf_i+0x172>
 80127b6:	6823      	ldr	r3, [r4, #0]
 80127b8:	f023 0320 	bic.w	r3, r3, #32
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	e7f6      	b.n	80127ae <_printf_i+0x196>
 80127c0:	4616      	mov	r6, r2
 80127c2:	e7bd      	b.n	8012740 <_printf_i+0x128>
 80127c4:	6833      	ldr	r3, [r6, #0]
 80127c6:	6825      	ldr	r5, [r4, #0]
 80127c8:	6961      	ldr	r1, [r4, #20]
 80127ca:	1d18      	adds	r0, r3, #4
 80127cc:	6030      	str	r0, [r6, #0]
 80127ce:	062e      	lsls	r6, r5, #24
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	d501      	bpl.n	80127d8 <_printf_i+0x1c0>
 80127d4:	6019      	str	r1, [r3, #0]
 80127d6:	e002      	b.n	80127de <_printf_i+0x1c6>
 80127d8:	0668      	lsls	r0, r5, #25
 80127da:	d5fb      	bpl.n	80127d4 <_printf_i+0x1bc>
 80127dc:	8019      	strh	r1, [r3, #0]
 80127de:	2300      	movs	r3, #0
 80127e0:	6123      	str	r3, [r4, #16]
 80127e2:	4616      	mov	r6, r2
 80127e4:	e7bc      	b.n	8012760 <_printf_i+0x148>
 80127e6:	6833      	ldr	r3, [r6, #0]
 80127e8:	1d1a      	adds	r2, r3, #4
 80127ea:	6032      	str	r2, [r6, #0]
 80127ec:	681e      	ldr	r6, [r3, #0]
 80127ee:	6862      	ldr	r2, [r4, #4]
 80127f0:	2100      	movs	r1, #0
 80127f2:	4630      	mov	r0, r6
 80127f4:	f7ed fcf4 	bl	80001e0 <memchr>
 80127f8:	b108      	cbz	r0, 80127fe <_printf_i+0x1e6>
 80127fa:	1b80      	subs	r0, r0, r6
 80127fc:	6060      	str	r0, [r4, #4]
 80127fe:	6863      	ldr	r3, [r4, #4]
 8012800:	6123      	str	r3, [r4, #16]
 8012802:	2300      	movs	r3, #0
 8012804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012808:	e7aa      	b.n	8012760 <_printf_i+0x148>
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	4632      	mov	r2, r6
 801280e:	4649      	mov	r1, r9
 8012810:	4640      	mov	r0, r8
 8012812:	47d0      	blx	sl
 8012814:	3001      	adds	r0, #1
 8012816:	d0ad      	beq.n	8012774 <_printf_i+0x15c>
 8012818:	6823      	ldr	r3, [r4, #0]
 801281a:	079b      	lsls	r3, r3, #30
 801281c:	d413      	bmi.n	8012846 <_printf_i+0x22e>
 801281e:	68e0      	ldr	r0, [r4, #12]
 8012820:	9b03      	ldr	r3, [sp, #12]
 8012822:	4298      	cmp	r0, r3
 8012824:	bfb8      	it	lt
 8012826:	4618      	movlt	r0, r3
 8012828:	e7a6      	b.n	8012778 <_printf_i+0x160>
 801282a:	2301      	movs	r3, #1
 801282c:	4632      	mov	r2, r6
 801282e:	4649      	mov	r1, r9
 8012830:	4640      	mov	r0, r8
 8012832:	47d0      	blx	sl
 8012834:	3001      	adds	r0, #1
 8012836:	d09d      	beq.n	8012774 <_printf_i+0x15c>
 8012838:	3501      	adds	r5, #1
 801283a:	68e3      	ldr	r3, [r4, #12]
 801283c:	9903      	ldr	r1, [sp, #12]
 801283e:	1a5b      	subs	r3, r3, r1
 8012840:	42ab      	cmp	r3, r5
 8012842:	dcf2      	bgt.n	801282a <_printf_i+0x212>
 8012844:	e7eb      	b.n	801281e <_printf_i+0x206>
 8012846:	2500      	movs	r5, #0
 8012848:	f104 0619 	add.w	r6, r4, #25
 801284c:	e7f5      	b.n	801283a <_printf_i+0x222>
 801284e:	bf00      	nop
 8012850:	08013661 	.word	0x08013661
 8012854:	08013672 	.word	0x08013672

08012858 <__sflush_r>:
 8012858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801285c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012860:	0716      	lsls	r6, r2, #28
 8012862:	4605      	mov	r5, r0
 8012864:	460c      	mov	r4, r1
 8012866:	d454      	bmi.n	8012912 <__sflush_r+0xba>
 8012868:	684b      	ldr	r3, [r1, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	dc02      	bgt.n	8012874 <__sflush_r+0x1c>
 801286e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012870:	2b00      	cmp	r3, #0
 8012872:	dd48      	ble.n	8012906 <__sflush_r+0xae>
 8012874:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012876:	2e00      	cmp	r6, #0
 8012878:	d045      	beq.n	8012906 <__sflush_r+0xae>
 801287a:	2300      	movs	r3, #0
 801287c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012880:	682f      	ldr	r7, [r5, #0]
 8012882:	6a21      	ldr	r1, [r4, #32]
 8012884:	602b      	str	r3, [r5, #0]
 8012886:	d030      	beq.n	80128ea <__sflush_r+0x92>
 8012888:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801288a:	89a3      	ldrh	r3, [r4, #12]
 801288c:	0759      	lsls	r1, r3, #29
 801288e:	d505      	bpl.n	801289c <__sflush_r+0x44>
 8012890:	6863      	ldr	r3, [r4, #4]
 8012892:	1ad2      	subs	r2, r2, r3
 8012894:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012896:	b10b      	cbz	r3, 801289c <__sflush_r+0x44>
 8012898:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801289a:	1ad2      	subs	r2, r2, r3
 801289c:	2300      	movs	r3, #0
 801289e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128a0:	6a21      	ldr	r1, [r4, #32]
 80128a2:	4628      	mov	r0, r5
 80128a4:	47b0      	blx	r6
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	d106      	bne.n	80128ba <__sflush_r+0x62>
 80128ac:	6829      	ldr	r1, [r5, #0]
 80128ae:	291d      	cmp	r1, #29
 80128b0:	d82b      	bhi.n	801290a <__sflush_r+0xb2>
 80128b2:	4a2a      	ldr	r2, [pc, #168]	@ (801295c <__sflush_r+0x104>)
 80128b4:	410a      	asrs	r2, r1
 80128b6:	07d6      	lsls	r6, r2, #31
 80128b8:	d427      	bmi.n	801290a <__sflush_r+0xb2>
 80128ba:	2200      	movs	r2, #0
 80128bc:	6062      	str	r2, [r4, #4]
 80128be:	04d9      	lsls	r1, r3, #19
 80128c0:	6922      	ldr	r2, [r4, #16]
 80128c2:	6022      	str	r2, [r4, #0]
 80128c4:	d504      	bpl.n	80128d0 <__sflush_r+0x78>
 80128c6:	1c42      	adds	r2, r0, #1
 80128c8:	d101      	bne.n	80128ce <__sflush_r+0x76>
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	b903      	cbnz	r3, 80128d0 <__sflush_r+0x78>
 80128ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80128d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128d2:	602f      	str	r7, [r5, #0]
 80128d4:	b1b9      	cbz	r1, 8012906 <__sflush_r+0xae>
 80128d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80128da:	4299      	cmp	r1, r3
 80128dc:	d002      	beq.n	80128e4 <__sflush_r+0x8c>
 80128de:	4628      	mov	r0, r5
 80128e0:	f7ff fb48 	bl	8011f74 <_free_r>
 80128e4:	2300      	movs	r3, #0
 80128e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80128e8:	e00d      	b.n	8012906 <__sflush_r+0xae>
 80128ea:	2301      	movs	r3, #1
 80128ec:	4628      	mov	r0, r5
 80128ee:	47b0      	blx	r6
 80128f0:	4602      	mov	r2, r0
 80128f2:	1c50      	adds	r0, r2, #1
 80128f4:	d1c9      	bne.n	801288a <__sflush_r+0x32>
 80128f6:	682b      	ldr	r3, [r5, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d0c6      	beq.n	801288a <__sflush_r+0x32>
 80128fc:	2b1d      	cmp	r3, #29
 80128fe:	d001      	beq.n	8012904 <__sflush_r+0xac>
 8012900:	2b16      	cmp	r3, #22
 8012902:	d11e      	bne.n	8012942 <__sflush_r+0xea>
 8012904:	602f      	str	r7, [r5, #0]
 8012906:	2000      	movs	r0, #0
 8012908:	e022      	b.n	8012950 <__sflush_r+0xf8>
 801290a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801290e:	b21b      	sxth	r3, r3
 8012910:	e01b      	b.n	801294a <__sflush_r+0xf2>
 8012912:	690f      	ldr	r7, [r1, #16]
 8012914:	2f00      	cmp	r7, #0
 8012916:	d0f6      	beq.n	8012906 <__sflush_r+0xae>
 8012918:	0793      	lsls	r3, r2, #30
 801291a:	680e      	ldr	r6, [r1, #0]
 801291c:	bf08      	it	eq
 801291e:	694b      	ldreq	r3, [r1, #20]
 8012920:	600f      	str	r7, [r1, #0]
 8012922:	bf18      	it	ne
 8012924:	2300      	movne	r3, #0
 8012926:	eba6 0807 	sub.w	r8, r6, r7
 801292a:	608b      	str	r3, [r1, #8]
 801292c:	f1b8 0f00 	cmp.w	r8, #0
 8012930:	dde9      	ble.n	8012906 <__sflush_r+0xae>
 8012932:	6a21      	ldr	r1, [r4, #32]
 8012934:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012936:	4643      	mov	r3, r8
 8012938:	463a      	mov	r2, r7
 801293a:	4628      	mov	r0, r5
 801293c:	47b0      	blx	r6
 801293e:	2800      	cmp	r0, #0
 8012940:	dc08      	bgt.n	8012954 <__sflush_r+0xfc>
 8012942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801294a:	81a3      	strh	r3, [r4, #12]
 801294c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012954:	4407      	add	r7, r0
 8012956:	eba8 0800 	sub.w	r8, r8, r0
 801295a:	e7e7      	b.n	801292c <__sflush_r+0xd4>
 801295c:	dfbffffe 	.word	0xdfbffffe

08012960 <_fflush_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	690b      	ldr	r3, [r1, #16]
 8012964:	4605      	mov	r5, r0
 8012966:	460c      	mov	r4, r1
 8012968:	b913      	cbnz	r3, 8012970 <_fflush_r+0x10>
 801296a:	2500      	movs	r5, #0
 801296c:	4628      	mov	r0, r5
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	b118      	cbz	r0, 801297a <_fflush_r+0x1a>
 8012972:	6a03      	ldr	r3, [r0, #32]
 8012974:	b90b      	cbnz	r3, 801297a <_fflush_r+0x1a>
 8012976:	f7ff f951 	bl	8011c1c <__sinit>
 801297a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d0f3      	beq.n	801296a <_fflush_r+0xa>
 8012982:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012984:	07d0      	lsls	r0, r2, #31
 8012986:	d404      	bmi.n	8012992 <_fflush_r+0x32>
 8012988:	0599      	lsls	r1, r3, #22
 801298a:	d402      	bmi.n	8012992 <_fflush_r+0x32>
 801298c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801298e:	f7ff fad8 	bl	8011f42 <__retarget_lock_acquire_recursive>
 8012992:	4628      	mov	r0, r5
 8012994:	4621      	mov	r1, r4
 8012996:	f7ff ff5f 	bl	8012858 <__sflush_r>
 801299a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801299c:	07da      	lsls	r2, r3, #31
 801299e:	4605      	mov	r5, r0
 80129a0:	d4e4      	bmi.n	801296c <_fflush_r+0xc>
 80129a2:	89a3      	ldrh	r3, [r4, #12]
 80129a4:	059b      	lsls	r3, r3, #22
 80129a6:	d4e1      	bmi.n	801296c <_fflush_r+0xc>
 80129a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129aa:	f7ff facb 	bl	8011f44 <__retarget_lock_release_recursive>
 80129ae:	e7dd      	b.n	801296c <_fflush_r+0xc>

080129b0 <_putc_r>:
 80129b0:	b570      	push	{r4, r5, r6, lr}
 80129b2:	460d      	mov	r5, r1
 80129b4:	4614      	mov	r4, r2
 80129b6:	4606      	mov	r6, r0
 80129b8:	b118      	cbz	r0, 80129c2 <_putc_r+0x12>
 80129ba:	6a03      	ldr	r3, [r0, #32]
 80129bc:	b90b      	cbnz	r3, 80129c2 <_putc_r+0x12>
 80129be:	f7ff f92d 	bl	8011c1c <__sinit>
 80129c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80129c4:	07d8      	lsls	r0, r3, #31
 80129c6:	d405      	bmi.n	80129d4 <_putc_r+0x24>
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	0599      	lsls	r1, r3, #22
 80129cc:	d402      	bmi.n	80129d4 <_putc_r+0x24>
 80129ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129d0:	f7ff fab7 	bl	8011f42 <__retarget_lock_acquire_recursive>
 80129d4:	68a3      	ldr	r3, [r4, #8]
 80129d6:	3b01      	subs	r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	60a3      	str	r3, [r4, #8]
 80129dc:	da05      	bge.n	80129ea <_putc_r+0x3a>
 80129de:	69a2      	ldr	r2, [r4, #24]
 80129e0:	4293      	cmp	r3, r2
 80129e2:	db12      	blt.n	8012a0a <_putc_r+0x5a>
 80129e4:	b2eb      	uxtb	r3, r5
 80129e6:	2b0a      	cmp	r3, #10
 80129e8:	d00f      	beq.n	8012a0a <_putc_r+0x5a>
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	1c5a      	adds	r2, r3, #1
 80129ee:	6022      	str	r2, [r4, #0]
 80129f0:	701d      	strb	r5, [r3, #0]
 80129f2:	b2ed      	uxtb	r5, r5
 80129f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80129f6:	07da      	lsls	r2, r3, #31
 80129f8:	d405      	bmi.n	8012a06 <_putc_r+0x56>
 80129fa:	89a3      	ldrh	r3, [r4, #12]
 80129fc:	059b      	lsls	r3, r3, #22
 80129fe:	d402      	bmi.n	8012a06 <_putc_r+0x56>
 8012a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a02:	f7ff fa9f 	bl	8011f44 <__retarget_lock_release_recursive>
 8012a06:	4628      	mov	r0, r5
 8012a08:	bd70      	pop	{r4, r5, r6, pc}
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	4622      	mov	r2, r4
 8012a0e:	4630      	mov	r0, r6
 8012a10:	f000 f802 	bl	8012a18 <__swbuf_r>
 8012a14:	4605      	mov	r5, r0
 8012a16:	e7ed      	b.n	80129f4 <_putc_r+0x44>

08012a18 <__swbuf_r>:
 8012a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a1a:	460e      	mov	r6, r1
 8012a1c:	4614      	mov	r4, r2
 8012a1e:	4605      	mov	r5, r0
 8012a20:	b118      	cbz	r0, 8012a2a <__swbuf_r+0x12>
 8012a22:	6a03      	ldr	r3, [r0, #32]
 8012a24:	b90b      	cbnz	r3, 8012a2a <__swbuf_r+0x12>
 8012a26:	f7ff f8f9 	bl	8011c1c <__sinit>
 8012a2a:	69a3      	ldr	r3, [r4, #24]
 8012a2c:	60a3      	str	r3, [r4, #8]
 8012a2e:	89a3      	ldrh	r3, [r4, #12]
 8012a30:	071a      	lsls	r2, r3, #28
 8012a32:	d501      	bpl.n	8012a38 <__swbuf_r+0x20>
 8012a34:	6923      	ldr	r3, [r4, #16]
 8012a36:	b943      	cbnz	r3, 8012a4a <__swbuf_r+0x32>
 8012a38:	4621      	mov	r1, r4
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	f000 f82a 	bl	8012a94 <__swsetup_r>
 8012a40:	b118      	cbz	r0, 8012a4a <__swbuf_r+0x32>
 8012a42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012a46:	4638      	mov	r0, r7
 8012a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a4a:	6823      	ldr	r3, [r4, #0]
 8012a4c:	6922      	ldr	r2, [r4, #16]
 8012a4e:	1a98      	subs	r0, r3, r2
 8012a50:	6963      	ldr	r3, [r4, #20]
 8012a52:	b2f6      	uxtb	r6, r6
 8012a54:	4283      	cmp	r3, r0
 8012a56:	4637      	mov	r7, r6
 8012a58:	dc05      	bgt.n	8012a66 <__swbuf_r+0x4e>
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	f7ff ff7f 	bl	8012960 <_fflush_r>
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d1ed      	bne.n	8012a42 <__swbuf_r+0x2a>
 8012a66:	68a3      	ldr	r3, [r4, #8]
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	60a3      	str	r3, [r4, #8]
 8012a6c:	6823      	ldr	r3, [r4, #0]
 8012a6e:	1c5a      	adds	r2, r3, #1
 8012a70:	6022      	str	r2, [r4, #0]
 8012a72:	701e      	strb	r6, [r3, #0]
 8012a74:	6962      	ldr	r2, [r4, #20]
 8012a76:	1c43      	adds	r3, r0, #1
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d004      	beq.n	8012a86 <__swbuf_r+0x6e>
 8012a7c:	89a3      	ldrh	r3, [r4, #12]
 8012a7e:	07db      	lsls	r3, r3, #31
 8012a80:	d5e1      	bpl.n	8012a46 <__swbuf_r+0x2e>
 8012a82:	2e0a      	cmp	r6, #10
 8012a84:	d1df      	bne.n	8012a46 <__swbuf_r+0x2e>
 8012a86:	4621      	mov	r1, r4
 8012a88:	4628      	mov	r0, r5
 8012a8a:	f7ff ff69 	bl	8012960 <_fflush_r>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d0d9      	beq.n	8012a46 <__swbuf_r+0x2e>
 8012a92:	e7d6      	b.n	8012a42 <__swbuf_r+0x2a>

08012a94 <__swsetup_r>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	4b29      	ldr	r3, [pc, #164]	@ (8012b3c <__swsetup_r+0xa8>)
 8012a98:	4605      	mov	r5, r0
 8012a9a:	6818      	ldr	r0, [r3, #0]
 8012a9c:	460c      	mov	r4, r1
 8012a9e:	b118      	cbz	r0, 8012aa8 <__swsetup_r+0x14>
 8012aa0:	6a03      	ldr	r3, [r0, #32]
 8012aa2:	b90b      	cbnz	r3, 8012aa8 <__swsetup_r+0x14>
 8012aa4:	f7ff f8ba 	bl	8011c1c <__sinit>
 8012aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aac:	0719      	lsls	r1, r3, #28
 8012aae:	d422      	bmi.n	8012af6 <__swsetup_r+0x62>
 8012ab0:	06da      	lsls	r2, r3, #27
 8012ab2:	d407      	bmi.n	8012ac4 <__swsetup_r+0x30>
 8012ab4:	2209      	movs	r2, #9
 8012ab6:	602a      	str	r2, [r5, #0]
 8012ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012abc:	81a3      	strh	r3, [r4, #12]
 8012abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ac2:	e033      	b.n	8012b2c <__swsetup_r+0x98>
 8012ac4:	0758      	lsls	r0, r3, #29
 8012ac6:	d512      	bpl.n	8012aee <__swsetup_r+0x5a>
 8012ac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012aca:	b141      	cbz	r1, 8012ade <__swsetup_r+0x4a>
 8012acc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ad0:	4299      	cmp	r1, r3
 8012ad2:	d002      	beq.n	8012ada <__swsetup_r+0x46>
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	f7ff fa4d 	bl	8011f74 <_free_r>
 8012ada:	2300      	movs	r3, #0
 8012adc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ade:	89a3      	ldrh	r3, [r4, #12]
 8012ae0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012ae4:	81a3      	strh	r3, [r4, #12]
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	6063      	str	r3, [r4, #4]
 8012aea:	6923      	ldr	r3, [r4, #16]
 8012aec:	6023      	str	r3, [r4, #0]
 8012aee:	89a3      	ldrh	r3, [r4, #12]
 8012af0:	f043 0308 	orr.w	r3, r3, #8
 8012af4:	81a3      	strh	r3, [r4, #12]
 8012af6:	6923      	ldr	r3, [r4, #16]
 8012af8:	b94b      	cbnz	r3, 8012b0e <__swsetup_r+0x7a>
 8012afa:	89a3      	ldrh	r3, [r4, #12]
 8012afc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b04:	d003      	beq.n	8012b0e <__swsetup_r+0x7a>
 8012b06:	4621      	mov	r1, r4
 8012b08:	4628      	mov	r0, r5
 8012b0a:	f000 f887 	bl	8012c1c <__smakebuf_r>
 8012b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b12:	f013 0201 	ands.w	r2, r3, #1
 8012b16:	d00a      	beq.n	8012b2e <__swsetup_r+0x9a>
 8012b18:	2200      	movs	r2, #0
 8012b1a:	60a2      	str	r2, [r4, #8]
 8012b1c:	6962      	ldr	r2, [r4, #20]
 8012b1e:	4252      	negs	r2, r2
 8012b20:	61a2      	str	r2, [r4, #24]
 8012b22:	6922      	ldr	r2, [r4, #16]
 8012b24:	b942      	cbnz	r2, 8012b38 <__swsetup_r+0xa4>
 8012b26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b2a:	d1c5      	bne.n	8012ab8 <__swsetup_r+0x24>
 8012b2c:	bd38      	pop	{r3, r4, r5, pc}
 8012b2e:	0799      	lsls	r1, r3, #30
 8012b30:	bf58      	it	pl
 8012b32:	6962      	ldrpl	r2, [r4, #20]
 8012b34:	60a2      	str	r2, [r4, #8]
 8012b36:	e7f4      	b.n	8012b22 <__swsetup_r+0x8e>
 8012b38:	2000      	movs	r0, #0
 8012b3a:	e7f7      	b.n	8012b2c <__swsetup_r+0x98>
 8012b3c:	2000004c 	.word	0x2000004c

08012b40 <memmove>:
 8012b40:	4288      	cmp	r0, r1
 8012b42:	b510      	push	{r4, lr}
 8012b44:	eb01 0402 	add.w	r4, r1, r2
 8012b48:	d902      	bls.n	8012b50 <memmove+0x10>
 8012b4a:	4284      	cmp	r4, r0
 8012b4c:	4623      	mov	r3, r4
 8012b4e:	d807      	bhi.n	8012b60 <memmove+0x20>
 8012b50:	1e43      	subs	r3, r0, #1
 8012b52:	42a1      	cmp	r1, r4
 8012b54:	d008      	beq.n	8012b68 <memmove+0x28>
 8012b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b5e:	e7f8      	b.n	8012b52 <memmove+0x12>
 8012b60:	4402      	add	r2, r0
 8012b62:	4601      	mov	r1, r0
 8012b64:	428a      	cmp	r2, r1
 8012b66:	d100      	bne.n	8012b6a <memmove+0x2a>
 8012b68:	bd10      	pop	{r4, pc}
 8012b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b72:	e7f7      	b.n	8012b64 <memmove+0x24>

08012b74 <_realloc_r>:
 8012b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b78:	4680      	mov	r8, r0
 8012b7a:	4615      	mov	r5, r2
 8012b7c:	460c      	mov	r4, r1
 8012b7e:	b921      	cbnz	r1, 8012b8a <_realloc_r+0x16>
 8012b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b84:	4611      	mov	r1, r2
 8012b86:	f7fe bf31 	b.w	80119ec <_malloc_r>
 8012b8a:	b92a      	cbnz	r2, 8012b98 <_realloc_r+0x24>
 8012b8c:	f7ff f9f2 	bl	8011f74 <_free_r>
 8012b90:	2400      	movs	r4, #0
 8012b92:	4620      	mov	r0, r4
 8012b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b98:	f000 f89e 	bl	8012cd8 <_malloc_usable_size_r>
 8012b9c:	4285      	cmp	r5, r0
 8012b9e:	4606      	mov	r6, r0
 8012ba0:	d802      	bhi.n	8012ba8 <_realloc_r+0x34>
 8012ba2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012ba6:	d8f4      	bhi.n	8012b92 <_realloc_r+0x1e>
 8012ba8:	4629      	mov	r1, r5
 8012baa:	4640      	mov	r0, r8
 8012bac:	f7fe ff1e 	bl	80119ec <_malloc_r>
 8012bb0:	4607      	mov	r7, r0
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	d0ec      	beq.n	8012b90 <_realloc_r+0x1c>
 8012bb6:	42b5      	cmp	r5, r6
 8012bb8:	462a      	mov	r2, r5
 8012bba:	4621      	mov	r1, r4
 8012bbc:	bf28      	it	cs
 8012bbe:	4632      	movcs	r2, r6
 8012bc0:	f7ff f9c9 	bl	8011f56 <memcpy>
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	f7ff f9d4 	bl	8011f74 <_free_r>
 8012bcc:	463c      	mov	r4, r7
 8012bce:	e7e0      	b.n	8012b92 <_realloc_r+0x1e>

08012bd0 <__swhatbuf_r>:
 8012bd0:	b570      	push	{r4, r5, r6, lr}
 8012bd2:	460c      	mov	r4, r1
 8012bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd8:	2900      	cmp	r1, #0
 8012bda:	b096      	sub	sp, #88	@ 0x58
 8012bdc:	4615      	mov	r5, r2
 8012bde:	461e      	mov	r6, r3
 8012be0:	da0d      	bge.n	8012bfe <__swhatbuf_r+0x2e>
 8012be2:	89a3      	ldrh	r3, [r4, #12]
 8012be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012be8:	f04f 0100 	mov.w	r1, #0
 8012bec:	bf14      	ite	ne
 8012bee:	2340      	movne	r3, #64	@ 0x40
 8012bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	6031      	str	r1, [r6, #0]
 8012bf8:	602b      	str	r3, [r5, #0]
 8012bfa:	b016      	add	sp, #88	@ 0x58
 8012bfc:	bd70      	pop	{r4, r5, r6, pc}
 8012bfe:	466a      	mov	r2, sp
 8012c00:	f000 f848 	bl	8012c94 <_fstat_r>
 8012c04:	2800      	cmp	r0, #0
 8012c06:	dbec      	blt.n	8012be2 <__swhatbuf_r+0x12>
 8012c08:	9901      	ldr	r1, [sp, #4]
 8012c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c12:	4259      	negs	r1, r3
 8012c14:	4159      	adcs	r1, r3
 8012c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c1a:	e7eb      	b.n	8012bf4 <__swhatbuf_r+0x24>

08012c1c <__smakebuf_r>:
 8012c1c:	898b      	ldrh	r3, [r1, #12]
 8012c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c20:	079d      	lsls	r5, r3, #30
 8012c22:	4606      	mov	r6, r0
 8012c24:	460c      	mov	r4, r1
 8012c26:	d507      	bpl.n	8012c38 <__smakebuf_r+0x1c>
 8012c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	6123      	str	r3, [r4, #16]
 8012c30:	2301      	movs	r3, #1
 8012c32:	6163      	str	r3, [r4, #20]
 8012c34:	b003      	add	sp, #12
 8012c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c38:	ab01      	add	r3, sp, #4
 8012c3a:	466a      	mov	r2, sp
 8012c3c:	f7ff ffc8 	bl	8012bd0 <__swhatbuf_r>
 8012c40:	9f00      	ldr	r7, [sp, #0]
 8012c42:	4605      	mov	r5, r0
 8012c44:	4639      	mov	r1, r7
 8012c46:	4630      	mov	r0, r6
 8012c48:	f7fe fed0 	bl	80119ec <_malloc_r>
 8012c4c:	b948      	cbnz	r0, 8012c62 <__smakebuf_r+0x46>
 8012c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c52:	059a      	lsls	r2, r3, #22
 8012c54:	d4ee      	bmi.n	8012c34 <__smakebuf_r+0x18>
 8012c56:	f023 0303 	bic.w	r3, r3, #3
 8012c5a:	f043 0302 	orr.w	r3, r3, #2
 8012c5e:	81a3      	strh	r3, [r4, #12]
 8012c60:	e7e2      	b.n	8012c28 <__smakebuf_r+0xc>
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	6020      	str	r0, [r4, #0]
 8012c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c6a:	81a3      	strh	r3, [r4, #12]
 8012c6c:	9b01      	ldr	r3, [sp, #4]
 8012c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c72:	b15b      	cbz	r3, 8012c8c <__smakebuf_r+0x70>
 8012c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c78:	4630      	mov	r0, r6
 8012c7a:	f000 f81d 	bl	8012cb8 <_isatty_r>
 8012c7e:	b128      	cbz	r0, 8012c8c <__smakebuf_r+0x70>
 8012c80:	89a3      	ldrh	r3, [r4, #12]
 8012c82:	f023 0303 	bic.w	r3, r3, #3
 8012c86:	f043 0301 	orr.w	r3, r3, #1
 8012c8a:	81a3      	strh	r3, [r4, #12]
 8012c8c:	89a3      	ldrh	r3, [r4, #12]
 8012c8e:	431d      	orrs	r5, r3
 8012c90:	81a5      	strh	r5, [r4, #12]
 8012c92:	e7cf      	b.n	8012c34 <__smakebuf_r+0x18>

08012c94 <_fstat_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	4d07      	ldr	r5, [pc, #28]	@ (8012cb4 <_fstat_r+0x20>)
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	4608      	mov	r0, r1
 8012c9e:	4611      	mov	r1, r2
 8012ca0:	602b      	str	r3, [r5, #0]
 8012ca2:	f7ef fe88 	bl	80029b6 <_fstat>
 8012ca6:	1c43      	adds	r3, r0, #1
 8012ca8:	d102      	bne.n	8012cb0 <_fstat_r+0x1c>
 8012caa:	682b      	ldr	r3, [r5, #0]
 8012cac:	b103      	cbz	r3, 8012cb0 <_fstat_r+0x1c>
 8012cae:	6023      	str	r3, [r4, #0]
 8012cb0:	bd38      	pop	{r3, r4, r5, pc}
 8012cb2:	bf00      	nop
 8012cb4:	2000728c 	.word	0x2000728c

08012cb8 <_isatty_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4d06      	ldr	r5, [pc, #24]	@ (8012cd4 <_isatty_r+0x1c>)
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	4608      	mov	r0, r1
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	f7ef fe87 	bl	80029d6 <_isatty>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_isatty_r+0x1a>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_isatty_r+0x1a>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	2000728c 	.word	0x2000728c

08012cd8 <_malloc_usable_size_r>:
 8012cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cdc:	1f18      	subs	r0, r3, #4
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	bfbc      	itt	lt
 8012ce2:	580b      	ldrlt	r3, [r1, r0]
 8012ce4:	18c0      	addlt	r0, r0, r3
 8012ce6:	4770      	bx	lr

08012ce8 <atan2>:
 8012ce8:	f000 b906 	b.w	8012ef8 <__ieee754_atan2>

08012cec <sqrt>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	ed2d 8b02 	vpush	{d8}
 8012cf2:	ec55 4b10 	vmov	r4, r5, d0
 8012cf6:	f000 f825 	bl	8012d44 <__ieee754_sqrt>
 8012cfa:	4622      	mov	r2, r4
 8012cfc:	462b      	mov	r3, r5
 8012cfe:	4620      	mov	r0, r4
 8012d00:	4629      	mov	r1, r5
 8012d02:	eeb0 8a40 	vmov.f32	s16, s0
 8012d06:	eef0 8a60 	vmov.f32	s17, s1
 8012d0a:	f7ed ff0f 	bl	8000b2c <__aeabi_dcmpun>
 8012d0e:	b990      	cbnz	r0, 8012d36 <sqrt+0x4a>
 8012d10:	2200      	movs	r2, #0
 8012d12:	2300      	movs	r3, #0
 8012d14:	4620      	mov	r0, r4
 8012d16:	4629      	mov	r1, r5
 8012d18:	f7ed fee0 	bl	8000adc <__aeabi_dcmplt>
 8012d1c:	b158      	cbz	r0, 8012d36 <sqrt+0x4a>
 8012d1e:	f7ff f8e5 	bl	8011eec <__errno>
 8012d22:	2321      	movs	r3, #33	@ 0x21
 8012d24:	6003      	str	r3, [r0, #0]
 8012d26:	2200      	movs	r2, #0
 8012d28:	2300      	movs	r3, #0
 8012d2a:	4610      	mov	r0, r2
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	f7ed fd8d 	bl	800084c <__aeabi_ddiv>
 8012d32:	ec41 0b18 	vmov	d8, r0, r1
 8012d36:	eeb0 0a48 	vmov.f32	s0, s16
 8012d3a:	eef0 0a68 	vmov.f32	s1, s17
 8012d3e:	ecbd 8b02 	vpop	{d8}
 8012d42:	bd38      	pop	{r3, r4, r5, pc}

08012d44 <__ieee754_sqrt>:
 8012d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d48:	4a68      	ldr	r2, [pc, #416]	@ (8012eec <__ieee754_sqrt+0x1a8>)
 8012d4a:	ec55 4b10 	vmov	r4, r5, d0
 8012d4e:	43aa      	bics	r2, r5
 8012d50:	462b      	mov	r3, r5
 8012d52:	4621      	mov	r1, r4
 8012d54:	d110      	bne.n	8012d78 <__ieee754_sqrt+0x34>
 8012d56:	4622      	mov	r2, r4
 8012d58:	4620      	mov	r0, r4
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	f7ed fc4c 	bl	80005f8 <__aeabi_dmul>
 8012d60:	4602      	mov	r2, r0
 8012d62:	460b      	mov	r3, r1
 8012d64:	4620      	mov	r0, r4
 8012d66:	4629      	mov	r1, r5
 8012d68:	f7ed fa90 	bl	800028c <__adddf3>
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	460d      	mov	r5, r1
 8012d70:	ec45 4b10 	vmov	d0, r4, r5
 8012d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d78:	2d00      	cmp	r5, #0
 8012d7a:	dc0e      	bgt.n	8012d9a <__ieee754_sqrt+0x56>
 8012d7c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012d80:	4322      	orrs	r2, r4
 8012d82:	d0f5      	beq.n	8012d70 <__ieee754_sqrt+0x2c>
 8012d84:	b19d      	cbz	r5, 8012dae <__ieee754_sqrt+0x6a>
 8012d86:	4622      	mov	r2, r4
 8012d88:	4620      	mov	r0, r4
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7ed fa7c 	bl	8000288 <__aeabi_dsub>
 8012d90:	4602      	mov	r2, r0
 8012d92:	460b      	mov	r3, r1
 8012d94:	f7ed fd5a 	bl	800084c <__aeabi_ddiv>
 8012d98:	e7e8      	b.n	8012d6c <__ieee754_sqrt+0x28>
 8012d9a:	152a      	asrs	r2, r5, #20
 8012d9c:	d115      	bne.n	8012dca <__ieee754_sqrt+0x86>
 8012d9e:	2000      	movs	r0, #0
 8012da0:	e009      	b.n	8012db6 <__ieee754_sqrt+0x72>
 8012da2:	0acb      	lsrs	r3, r1, #11
 8012da4:	3a15      	subs	r2, #21
 8012da6:	0549      	lsls	r1, r1, #21
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d0fa      	beq.n	8012da2 <__ieee754_sqrt+0x5e>
 8012dac:	e7f7      	b.n	8012d9e <__ieee754_sqrt+0x5a>
 8012dae:	462a      	mov	r2, r5
 8012db0:	e7fa      	b.n	8012da8 <__ieee754_sqrt+0x64>
 8012db2:	005b      	lsls	r3, r3, #1
 8012db4:	3001      	adds	r0, #1
 8012db6:	02dc      	lsls	r4, r3, #11
 8012db8:	d5fb      	bpl.n	8012db2 <__ieee754_sqrt+0x6e>
 8012dba:	1e44      	subs	r4, r0, #1
 8012dbc:	1b12      	subs	r2, r2, r4
 8012dbe:	f1c0 0420 	rsb	r4, r0, #32
 8012dc2:	fa21 f404 	lsr.w	r4, r1, r4
 8012dc6:	4323      	orrs	r3, r4
 8012dc8:	4081      	lsls	r1, r0
 8012dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012dce:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012dd6:	07d2      	lsls	r2, r2, #31
 8012dd8:	bf5c      	itt	pl
 8012dda:	005b      	lslpl	r3, r3, #1
 8012ddc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012de0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012de4:	bf58      	it	pl
 8012de6:	0049      	lslpl	r1, r1, #1
 8012de8:	2600      	movs	r6, #0
 8012dea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012dee:	106d      	asrs	r5, r5, #1
 8012df0:	0049      	lsls	r1, r1, #1
 8012df2:	2016      	movs	r0, #22
 8012df4:	4632      	mov	r2, r6
 8012df6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012dfa:	1917      	adds	r7, r2, r4
 8012dfc:	429f      	cmp	r7, r3
 8012dfe:	bfde      	ittt	le
 8012e00:	193a      	addle	r2, r7, r4
 8012e02:	1bdb      	suble	r3, r3, r7
 8012e04:	1936      	addle	r6, r6, r4
 8012e06:	0fcf      	lsrs	r7, r1, #31
 8012e08:	3801      	subs	r0, #1
 8012e0a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012e0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012e12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012e16:	d1f0      	bne.n	8012dfa <__ieee754_sqrt+0xb6>
 8012e18:	4604      	mov	r4, r0
 8012e1a:	2720      	movs	r7, #32
 8012e1c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012e20:	429a      	cmp	r2, r3
 8012e22:	eb00 0e0c 	add.w	lr, r0, ip
 8012e26:	db02      	blt.n	8012e2e <__ieee754_sqrt+0xea>
 8012e28:	d113      	bne.n	8012e52 <__ieee754_sqrt+0x10e>
 8012e2a:	458e      	cmp	lr, r1
 8012e2c:	d811      	bhi.n	8012e52 <__ieee754_sqrt+0x10e>
 8012e2e:	f1be 0f00 	cmp.w	lr, #0
 8012e32:	eb0e 000c 	add.w	r0, lr, ip
 8012e36:	da42      	bge.n	8012ebe <__ieee754_sqrt+0x17a>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	db40      	blt.n	8012ebe <__ieee754_sqrt+0x17a>
 8012e3c:	f102 0801 	add.w	r8, r2, #1
 8012e40:	1a9b      	subs	r3, r3, r2
 8012e42:	458e      	cmp	lr, r1
 8012e44:	bf88      	it	hi
 8012e46:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8012e4a:	eba1 010e 	sub.w	r1, r1, lr
 8012e4e:	4464      	add	r4, ip
 8012e50:	4642      	mov	r2, r8
 8012e52:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012e56:	3f01      	subs	r7, #1
 8012e58:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012e5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012e60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012e64:	d1dc      	bne.n	8012e20 <__ieee754_sqrt+0xdc>
 8012e66:	4319      	orrs	r1, r3
 8012e68:	d01b      	beq.n	8012ea2 <__ieee754_sqrt+0x15e>
 8012e6a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012ef0 <__ieee754_sqrt+0x1ac>
 8012e6e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012ef4 <__ieee754_sqrt+0x1b0>
 8012e72:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e76:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e7a:	f7ed fa05 	bl	8000288 <__aeabi_dsub>
 8012e7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	4640      	mov	r0, r8
 8012e88:	4649      	mov	r1, r9
 8012e8a:	f7ed fe31 	bl	8000af0 <__aeabi_dcmple>
 8012e8e:	b140      	cbz	r0, 8012ea2 <__ieee754_sqrt+0x15e>
 8012e90:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8012e94:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e98:	e9db 2300 	ldrd	r2, r3, [fp]
 8012e9c:	d111      	bne.n	8012ec2 <__ieee754_sqrt+0x17e>
 8012e9e:	3601      	adds	r6, #1
 8012ea0:	463c      	mov	r4, r7
 8012ea2:	1072      	asrs	r2, r6, #1
 8012ea4:	0863      	lsrs	r3, r4, #1
 8012ea6:	07f1      	lsls	r1, r6, #31
 8012ea8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012eac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012eb0:	bf48      	it	mi
 8012eb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012eb6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012eba:	4618      	mov	r0, r3
 8012ebc:	e756      	b.n	8012d6c <__ieee754_sqrt+0x28>
 8012ebe:	4690      	mov	r8, r2
 8012ec0:	e7be      	b.n	8012e40 <__ieee754_sqrt+0xfc>
 8012ec2:	f7ed f9e3 	bl	800028c <__adddf3>
 8012ec6:	e9da 8900 	ldrd	r8, r9, [sl]
 8012eca:	4602      	mov	r2, r0
 8012ecc:	460b      	mov	r3, r1
 8012ece:	4640      	mov	r0, r8
 8012ed0:	4649      	mov	r1, r9
 8012ed2:	f7ed fe03 	bl	8000adc <__aeabi_dcmplt>
 8012ed6:	b120      	cbz	r0, 8012ee2 <__ieee754_sqrt+0x19e>
 8012ed8:	1ca0      	adds	r0, r4, #2
 8012eda:	bf08      	it	eq
 8012edc:	3601      	addeq	r6, #1
 8012ede:	3402      	adds	r4, #2
 8012ee0:	e7df      	b.n	8012ea2 <__ieee754_sqrt+0x15e>
 8012ee2:	1c63      	adds	r3, r4, #1
 8012ee4:	f023 0401 	bic.w	r4, r3, #1
 8012ee8:	e7db      	b.n	8012ea2 <__ieee754_sqrt+0x15e>
 8012eea:	bf00      	nop
 8012eec:	7ff00000 	.word	0x7ff00000
 8012ef0:	200000a8 	.word	0x200000a8
 8012ef4:	200000a0 	.word	0x200000a0

08012ef8 <__ieee754_atan2>:
 8012ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012efc:	ec57 6b11 	vmov	r6, r7, d1
 8012f00:	4273      	negs	r3, r6
 8012f02:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013080 <__ieee754_atan2+0x188>
 8012f06:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8012f0a:	4333      	orrs	r3, r6
 8012f0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012f10:	4543      	cmp	r3, r8
 8012f12:	ec51 0b10 	vmov	r0, r1, d0
 8012f16:	4635      	mov	r5, r6
 8012f18:	d809      	bhi.n	8012f2e <__ieee754_atan2+0x36>
 8012f1a:	4244      	negs	r4, r0
 8012f1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012f20:	4304      	orrs	r4, r0
 8012f22:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012f26:	4544      	cmp	r4, r8
 8012f28:	468e      	mov	lr, r1
 8012f2a:	4681      	mov	r9, r0
 8012f2c:	d907      	bls.n	8012f3e <__ieee754_atan2+0x46>
 8012f2e:	4632      	mov	r2, r6
 8012f30:	463b      	mov	r3, r7
 8012f32:	f7ed f9ab 	bl	800028c <__adddf3>
 8012f36:	ec41 0b10 	vmov	d0, r0, r1
 8012f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f3e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8012f42:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8012f46:	4334      	orrs	r4, r6
 8012f48:	d103      	bne.n	8012f52 <__ieee754_atan2+0x5a>
 8012f4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f4e:	f000 b89b 	b.w	8013088 <atan>
 8012f52:	17bc      	asrs	r4, r7, #30
 8012f54:	f004 0402 	and.w	r4, r4, #2
 8012f58:	ea53 0909 	orrs.w	r9, r3, r9
 8012f5c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012f60:	d107      	bne.n	8012f72 <__ieee754_atan2+0x7a>
 8012f62:	2c02      	cmp	r4, #2
 8012f64:	d05f      	beq.n	8013026 <__ieee754_atan2+0x12e>
 8012f66:	2c03      	cmp	r4, #3
 8012f68:	d1e5      	bne.n	8012f36 <__ieee754_atan2+0x3e>
 8012f6a:	a141      	add	r1, pc, #260	@ (adr r1, 8013070 <__ieee754_atan2+0x178>)
 8012f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f70:	e7e1      	b.n	8012f36 <__ieee754_atan2+0x3e>
 8012f72:	4315      	orrs	r5, r2
 8012f74:	d106      	bne.n	8012f84 <__ieee754_atan2+0x8c>
 8012f76:	f1be 0f00 	cmp.w	lr, #0
 8012f7a:	da5f      	bge.n	801303c <__ieee754_atan2+0x144>
 8012f7c:	a13e      	add	r1, pc, #248	@ (adr r1, 8013078 <__ieee754_atan2+0x180>)
 8012f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f82:	e7d8      	b.n	8012f36 <__ieee754_atan2+0x3e>
 8012f84:	4542      	cmp	r2, r8
 8012f86:	d10f      	bne.n	8012fa8 <__ieee754_atan2+0xb0>
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8012f8e:	d107      	bne.n	8012fa0 <__ieee754_atan2+0xa8>
 8012f90:	2c02      	cmp	r4, #2
 8012f92:	d84c      	bhi.n	801302e <__ieee754_atan2+0x136>
 8012f94:	4b34      	ldr	r3, [pc, #208]	@ (8013068 <__ieee754_atan2+0x170>)
 8012f96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f9e:	e7ca      	b.n	8012f36 <__ieee754_atan2+0x3e>
 8012fa0:	2c02      	cmp	r4, #2
 8012fa2:	d848      	bhi.n	8013036 <__ieee754_atan2+0x13e>
 8012fa4:	4b31      	ldr	r3, [pc, #196]	@ (801306c <__ieee754_atan2+0x174>)
 8012fa6:	e7f6      	b.n	8012f96 <__ieee754_atan2+0x9e>
 8012fa8:	4543      	cmp	r3, r8
 8012faa:	d0e4      	beq.n	8012f76 <__ieee754_atan2+0x7e>
 8012fac:	1a9b      	subs	r3, r3, r2
 8012fae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8012fb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012fb6:	da1e      	bge.n	8012ff6 <__ieee754_atan2+0xfe>
 8012fb8:	2f00      	cmp	r7, #0
 8012fba:	da01      	bge.n	8012fc0 <__ieee754_atan2+0xc8>
 8012fbc:	323c      	adds	r2, #60	@ 0x3c
 8012fbe:	db1e      	blt.n	8012ffe <__ieee754_atan2+0x106>
 8012fc0:	4632      	mov	r2, r6
 8012fc2:	463b      	mov	r3, r7
 8012fc4:	f7ed fc42 	bl	800084c <__aeabi_ddiv>
 8012fc8:	ec41 0b10 	vmov	d0, r0, r1
 8012fcc:	f000 f9f4 	bl	80133b8 <fabs>
 8012fd0:	f000 f85a 	bl	8013088 <atan>
 8012fd4:	ec51 0b10 	vmov	r0, r1, d0
 8012fd8:	2c01      	cmp	r4, #1
 8012fda:	d013      	beq.n	8013004 <__ieee754_atan2+0x10c>
 8012fdc:	2c02      	cmp	r4, #2
 8012fde:	d015      	beq.n	801300c <__ieee754_atan2+0x114>
 8012fe0:	2c00      	cmp	r4, #0
 8012fe2:	d0a8      	beq.n	8012f36 <__ieee754_atan2+0x3e>
 8012fe4:	a318      	add	r3, pc, #96	@ (adr r3, 8013048 <__ieee754_atan2+0x150>)
 8012fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fea:	f7ed f94d 	bl	8000288 <__aeabi_dsub>
 8012fee:	a318      	add	r3, pc, #96	@ (adr r3, 8013050 <__ieee754_atan2+0x158>)
 8012ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff4:	e014      	b.n	8013020 <__ieee754_atan2+0x128>
 8012ff6:	a118      	add	r1, pc, #96	@ (adr r1, 8013058 <__ieee754_atan2+0x160>)
 8012ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ffc:	e7ec      	b.n	8012fd8 <__ieee754_atan2+0xe0>
 8012ffe:	2000      	movs	r0, #0
 8013000:	2100      	movs	r1, #0
 8013002:	e7e9      	b.n	8012fd8 <__ieee754_atan2+0xe0>
 8013004:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013008:	4619      	mov	r1, r3
 801300a:	e794      	b.n	8012f36 <__ieee754_atan2+0x3e>
 801300c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013048 <__ieee754_atan2+0x150>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	f7ed f939 	bl	8000288 <__aeabi_dsub>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	a10d      	add	r1, pc, #52	@ (adr r1, 8013050 <__ieee754_atan2+0x158>)
 801301c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013020:	f7ed f932 	bl	8000288 <__aeabi_dsub>
 8013024:	e787      	b.n	8012f36 <__ieee754_atan2+0x3e>
 8013026:	a10a      	add	r1, pc, #40	@ (adr r1, 8013050 <__ieee754_atan2+0x158>)
 8013028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801302c:	e783      	b.n	8012f36 <__ieee754_atan2+0x3e>
 801302e:	a10c      	add	r1, pc, #48	@ (adr r1, 8013060 <__ieee754_atan2+0x168>)
 8013030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013034:	e77f      	b.n	8012f36 <__ieee754_atan2+0x3e>
 8013036:	2000      	movs	r0, #0
 8013038:	2100      	movs	r1, #0
 801303a:	e77c      	b.n	8012f36 <__ieee754_atan2+0x3e>
 801303c:	a106      	add	r1, pc, #24	@ (adr r1, 8013058 <__ieee754_atan2+0x160>)
 801303e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013042:	e778      	b.n	8012f36 <__ieee754_atan2+0x3e>
 8013044:	f3af 8000 	nop.w
 8013048:	33145c07 	.word	0x33145c07
 801304c:	3ca1a626 	.word	0x3ca1a626
 8013050:	54442d18 	.word	0x54442d18
 8013054:	400921fb 	.word	0x400921fb
 8013058:	54442d18 	.word	0x54442d18
 801305c:	3ff921fb 	.word	0x3ff921fb
 8013060:	54442d18 	.word	0x54442d18
 8013064:	3fe921fb 	.word	0x3fe921fb
 8013068:	080136a0 	.word	0x080136a0
 801306c:	08013688 	.word	0x08013688
 8013070:	54442d18 	.word	0x54442d18
 8013074:	c00921fb 	.word	0xc00921fb
 8013078:	54442d18 	.word	0x54442d18
 801307c:	bff921fb 	.word	0xbff921fb
 8013080:	7ff00000 	.word	0x7ff00000
 8013084:	00000000 	.word	0x00000000

08013088 <atan>:
 8013088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308c:	ec55 4b10 	vmov	r4, r5, d0
 8013090:	4bbf      	ldr	r3, [pc, #764]	@ (8013390 <atan+0x308>)
 8013092:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013096:	429e      	cmp	r6, r3
 8013098:	46ab      	mov	fp, r5
 801309a:	d918      	bls.n	80130ce <atan+0x46>
 801309c:	4bbd      	ldr	r3, [pc, #756]	@ (8013394 <atan+0x30c>)
 801309e:	429e      	cmp	r6, r3
 80130a0:	d801      	bhi.n	80130a6 <atan+0x1e>
 80130a2:	d109      	bne.n	80130b8 <atan+0x30>
 80130a4:	b144      	cbz	r4, 80130b8 <atan+0x30>
 80130a6:	4622      	mov	r2, r4
 80130a8:	462b      	mov	r3, r5
 80130aa:	4620      	mov	r0, r4
 80130ac:	4629      	mov	r1, r5
 80130ae:	f7ed f8ed 	bl	800028c <__adddf3>
 80130b2:	4604      	mov	r4, r0
 80130b4:	460d      	mov	r5, r1
 80130b6:	e006      	b.n	80130c6 <atan+0x3e>
 80130b8:	f1bb 0f00 	cmp.w	fp, #0
 80130bc:	f340 812b 	ble.w	8013316 <atan+0x28e>
 80130c0:	a597      	add	r5, pc, #604	@ (adr r5, 8013320 <atan+0x298>)
 80130c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80130c6:	ec45 4b10 	vmov	d0, r4, r5
 80130ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ce:	4bb2      	ldr	r3, [pc, #712]	@ (8013398 <atan+0x310>)
 80130d0:	429e      	cmp	r6, r3
 80130d2:	d813      	bhi.n	80130fc <atan+0x74>
 80130d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80130d8:	429e      	cmp	r6, r3
 80130da:	d80c      	bhi.n	80130f6 <atan+0x6e>
 80130dc:	a392      	add	r3, pc, #584	@ (adr r3, 8013328 <atan+0x2a0>)
 80130de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e2:	4620      	mov	r0, r4
 80130e4:	4629      	mov	r1, r5
 80130e6:	f7ed f8d1 	bl	800028c <__adddf3>
 80130ea:	4bac      	ldr	r3, [pc, #688]	@ (801339c <atan+0x314>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	f7ed fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d1e7      	bne.n	80130c6 <atan+0x3e>
 80130f6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80130fa:	e029      	b.n	8013150 <atan+0xc8>
 80130fc:	f000 f95c 	bl	80133b8 <fabs>
 8013100:	4ba7      	ldr	r3, [pc, #668]	@ (80133a0 <atan+0x318>)
 8013102:	429e      	cmp	r6, r3
 8013104:	ec55 4b10 	vmov	r4, r5, d0
 8013108:	f200 80bc 	bhi.w	8013284 <atan+0x1fc>
 801310c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013110:	429e      	cmp	r6, r3
 8013112:	f200 809e 	bhi.w	8013252 <atan+0x1ca>
 8013116:	4622      	mov	r2, r4
 8013118:	462b      	mov	r3, r5
 801311a:	4620      	mov	r0, r4
 801311c:	4629      	mov	r1, r5
 801311e:	f7ed f8b5 	bl	800028c <__adddf3>
 8013122:	4b9e      	ldr	r3, [pc, #632]	@ (801339c <atan+0x314>)
 8013124:	2200      	movs	r2, #0
 8013126:	f7ed f8af 	bl	8000288 <__aeabi_dsub>
 801312a:	2200      	movs	r2, #0
 801312c:	4606      	mov	r6, r0
 801312e:	460f      	mov	r7, r1
 8013130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013134:	4620      	mov	r0, r4
 8013136:	4629      	mov	r1, r5
 8013138:	f7ed f8a8 	bl	800028c <__adddf3>
 801313c:	4602      	mov	r2, r0
 801313e:	460b      	mov	r3, r1
 8013140:	4630      	mov	r0, r6
 8013142:	4639      	mov	r1, r7
 8013144:	f7ed fb82 	bl	800084c <__aeabi_ddiv>
 8013148:	f04f 0a00 	mov.w	sl, #0
 801314c:	4604      	mov	r4, r0
 801314e:	460d      	mov	r5, r1
 8013150:	4622      	mov	r2, r4
 8013152:	462b      	mov	r3, r5
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed fa4e 	bl	80005f8 <__aeabi_dmul>
 801315c:	4602      	mov	r2, r0
 801315e:	460b      	mov	r3, r1
 8013160:	4680      	mov	r8, r0
 8013162:	4689      	mov	r9, r1
 8013164:	f7ed fa48 	bl	80005f8 <__aeabi_dmul>
 8013168:	a371      	add	r3, pc, #452	@ (adr r3, 8013330 <atan+0x2a8>)
 801316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316e:	4606      	mov	r6, r0
 8013170:	460f      	mov	r7, r1
 8013172:	f7ed fa41 	bl	80005f8 <__aeabi_dmul>
 8013176:	a370      	add	r3, pc, #448	@ (adr r3, 8013338 <atan+0x2b0>)
 8013178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317c:	f7ed f886 	bl	800028c <__adddf3>
 8013180:	4632      	mov	r2, r6
 8013182:	463b      	mov	r3, r7
 8013184:	f7ed fa38 	bl	80005f8 <__aeabi_dmul>
 8013188:	a36d      	add	r3, pc, #436	@ (adr r3, 8013340 <atan+0x2b8>)
 801318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318e:	f7ed f87d 	bl	800028c <__adddf3>
 8013192:	4632      	mov	r2, r6
 8013194:	463b      	mov	r3, r7
 8013196:	f7ed fa2f 	bl	80005f8 <__aeabi_dmul>
 801319a:	a36b      	add	r3, pc, #428	@ (adr r3, 8013348 <atan+0x2c0>)
 801319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a0:	f7ed f874 	bl	800028c <__adddf3>
 80131a4:	4632      	mov	r2, r6
 80131a6:	463b      	mov	r3, r7
 80131a8:	f7ed fa26 	bl	80005f8 <__aeabi_dmul>
 80131ac:	a368      	add	r3, pc, #416	@ (adr r3, 8013350 <atan+0x2c8>)
 80131ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b2:	f7ed f86b 	bl	800028c <__adddf3>
 80131b6:	4632      	mov	r2, r6
 80131b8:	463b      	mov	r3, r7
 80131ba:	f7ed fa1d 	bl	80005f8 <__aeabi_dmul>
 80131be:	a366      	add	r3, pc, #408	@ (adr r3, 8013358 <atan+0x2d0>)
 80131c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c4:	f7ed f862 	bl	800028c <__adddf3>
 80131c8:	4642      	mov	r2, r8
 80131ca:	464b      	mov	r3, r9
 80131cc:	f7ed fa14 	bl	80005f8 <__aeabi_dmul>
 80131d0:	a363      	add	r3, pc, #396	@ (adr r3, 8013360 <atan+0x2d8>)
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	4680      	mov	r8, r0
 80131d8:	4689      	mov	r9, r1
 80131da:	4630      	mov	r0, r6
 80131dc:	4639      	mov	r1, r7
 80131de:	f7ed fa0b 	bl	80005f8 <__aeabi_dmul>
 80131e2:	a361      	add	r3, pc, #388	@ (adr r3, 8013368 <atan+0x2e0>)
 80131e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e8:	f7ed f84e 	bl	8000288 <__aeabi_dsub>
 80131ec:	4632      	mov	r2, r6
 80131ee:	463b      	mov	r3, r7
 80131f0:	f7ed fa02 	bl	80005f8 <__aeabi_dmul>
 80131f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8013370 <atan+0x2e8>)
 80131f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fa:	f7ed f845 	bl	8000288 <__aeabi_dsub>
 80131fe:	4632      	mov	r2, r6
 8013200:	463b      	mov	r3, r7
 8013202:	f7ed f9f9 	bl	80005f8 <__aeabi_dmul>
 8013206:	a35c      	add	r3, pc, #368	@ (adr r3, 8013378 <atan+0x2f0>)
 8013208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320c:	f7ed f83c 	bl	8000288 <__aeabi_dsub>
 8013210:	4632      	mov	r2, r6
 8013212:	463b      	mov	r3, r7
 8013214:	f7ed f9f0 	bl	80005f8 <__aeabi_dmul>
 8013218:	a359      	add	r3, pc, #356	@ (adr r3, 8013380 <atan+0x2f8>)
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	f7ed f833 	bl	8000288 <__aeabi_dsub>
 8013222:	4632      	mov	r2, r6
 8013224:	463b      	mov	r3, r7
 8013226:	f7ed f9e7 	bl	80005f8 <__aeabi_dmul>
 801322a:	4602      	mov	r2, r0
 801322c:	460b      	mov	r3, r1
 801322e:	4640      	mov	r0, r8
 8013230:	4649      	mov	r1, r9
 8013232:	f7ed f82b 	bl	800028c <__adddf3>
 8013236:	4622      	mov	r2, r4
 8013238:	462b      	mov	r3, r5
 801323a:	f7ed f9dd 	bl	80005f8 <__aeabi_dmul>
 801323e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8013242:	4602      	mov	r2, r0
 8013244:	460b      	mov	r3, r1
 8013246:	d148      	bne.n	80132da <atan+0x252>
 8013248:	4620      	mov	r0, r4
 801324a:	4629      	mov	r1, r5
 801324c:	f7ed f81c 	bl	8000288 <__aeabi_dsub>
 8013250:	e72f      	b.n	80130b2 <atan+0x2a>
 8013252:	4b52      	ldr	r3, [pc, #328]	@ (801339c <atan+0x314>)
 8013254:	2200      	movs	r2, #0
 8013256:	4620      	mov	r0, r4
 8013258:	4629      	mov	r1, r5
 801325a:	f7ed f815 	bl	8000288 <__aeabi_dsub>
 801325e:	4b4f      	ldr	r3, [pc, #316]	@ (801339c <atan+0x314>)
 8013260:	4606      	mov	r6, r0
 8013262:	460f      	mov	r7, r1
 8013264:	2200      	movs	r2, #0
 8013266:	4620      	mov	r0, r4
 8013268:	4629      	mov	r1, r5
 801326a:	f7ed f80f 	bl	800028c <__adddf3>
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4630      	mov	r0, r6
 8013274:	4639      	mov	r1, r7
 8013276:	f7ed fae9 	bl	800084c <__aeabi_ddiv>
 801327a:	f04f 0a01 	mov.w	sl, #1
 801327e:	4604      	mov	r4, r0
 8013280:	460d      	mov	r5, r1
 8013282:	e765      	b.n	8013150 <atan+0xc8>
 8013284:	4b47      	ldr	r3, [pc, #284]	@ (80133a4 <atan+0x31c>)
 8013286:	429e      	cmp	r6, r3
 8013288:	d21c      	bcs.n	80132c4 <atan+0x23c>
 801328a:	4b47      	ldr	r3, [pc, #284]	@ (80133a8 <atan+0x320>)
 801328c:	2200      	movs	r2, #0
 801328e:	4620      	mov	r0, r4
 8013290:	4629      	mov	r1, r5
 8013292:	f7ec fff9 	bl	8000288 <__aeabi_dsub>
 8013296:	4b44      	ldr	r3, [pc, #272]	@ (80133a8 <atan+0x320>)
 8013298:	4606      	mov	r6, r0
 801329a:	460f      	mov	r7, r1
 801329c:	2200      	movs	r2, #0
 801329e:	4620      	mov	r0, r4
 80132a0:	4629      	mov	r1, r5
 80132a2:	f7ed f9a9 	bl	80005f8 <__aeabi_dmul>
 80132a6:	4b3d      	ldr	r3, [pc, #244]	@ (801339c <atan+0x314>)
 80132a8:	2200      	movs	r2, #0
 80132aa:	f7ec ffef 	bl	800028c <__adddf3>
 80132ae:	4602      	mov	r2, r0
 80132b0:	460b      	mov	r3, r1
 80132b2:	4630      	mov	r0, r6
 80132b4:	4639      	mov	r1, r7
 80132b6:	f7ed fac9 	bl	800084c <__aeabi_ddiv>
 80132ba:	f04f 0a02 	mov.w	sl, #2
 80132be:	4604      	mov	r4, r0
 80132c0:	460d      	mov	r5, r1
 80132c2:	e745      	b.n	8013150 <atan+0xc8>
 80132c4:	4622      	mov	r2, r4
 80132c6:	462b      	mov	r3, r5
 80132c8:	4938      	ldr	r1, [pc, #224]	@ (80133ac <atan+0x324>)
 80132ca:	2000      	movs	r0, #0
 80132cc:	f7ed fabe 	bl	800084c <__aeabi_ddiv>
 80132d0:	f04f 0a03 	mov.w	sl, #3
 80132d4:	4604      	mov	r4, r0
 80132d6:	460d      	mov	r5, r1
 80132d8:	e73a      	b.n	8013150 <atan+0xc8>
 80132da:	4b35      	ldr	r3, [pc, #212]	@ (80133b0 <atan+0x328>)
 80132dc:	4e35      	ldr	r6, [pc, #212]	@ (80133b4 <atan+0x32c>)
 80132de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80132e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e6:	f7ec ffcf 	bl	8000288 <__aeabi_dsub>
 80132ea:	4622      	mov	r2, r4
 80132ec:	462b      	mov	r3, r5
 80132ee:	f7ec ffcb 	bl	8000288 <__aeabi_dsub>
 80132f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80132f6:	4602      	mov	r2, r0
 80132f8:	460b      	mov	r3, r1
 80132fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80132fe:	f7ec ffc3 	bl	8000288 <__aeabi_dsub>
 8013302:	f1bb 0f00 	cmp.w	fp, #0
 8013306:	4604      	mov	r4, r0
 8013308:	460d      	mov	r5, r1
 801330a:	f6bf aedc 	bge.w	80130c6 <atan+0x3e>
 801330e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013312:	461d      	mov	r5, r3
 8013314:	e6d7      	b.n	80130c6 <atan+0x3e>
 8013316:	a51c      	add	r5, pc, #112	@ (adr r5, 8013388 <atan+0x300>)
 8013318:	e9d5 4500 	ldrd	r4, r5, [r5]
 801331c:	e6d3      	b.n	80130c6 <atan+0x3e>
 801331e:	bf00      	nop
 8013320:	54442d18 	.word	0x54442d18
 8013324:	3ff921fb 	.word	0x3ff921fb
 8013328:	8800759c 	.word	0x8800759c
 801332c:	7e37e43c 	.word	0x7e37e43c
 8013330:	e322da11 	.word	0xe322da11
 8013334:	3f90ad3a 	.word	0x3f90ad3a
 8013338:	24760deb 	.word	0x24760deb
 801333c:	3fa97b4b 	.word	0x3fa97b4b
 8013340:	a0d03d51 	.word	0xa0d03d51
 8013344:	3fb10d66 	.word	0x3fb10d66
 8013348:	c54c206e 	.word	0xc54c206e
 801334c:	3fb745cd 	.word	0x3fb745cd
 8013350:	920083ff 	.word	0x920083ff
 8013354:	3fc24924 	.word	0x3fc24924
 8013358:	5555550d 	.word	0x5555550d
 801335c:	3fd55555 	.word	0x3fd55555
 8013360:	2c6a6c2f 	.word	0x2c6a6c2f
 8013364:	bfa2b444 	.word	0xbfa2b444
 8013368:	52defd9a 	.word	0x52defd9a
 801336c:	3fadde2d 	.word	0x3fadde2d
 8013370:	af749a6d 	.word	0xaf749a6d
 8013374:	3fb3b0f2 	.word	0x3fb3b0f2
 8013378:	fe231671 	.word	0xfe231671
 801337c:	3fbc71c6 	.word	0x3fbc71c6
 8013380:	9998ebc4 	.word	0x9998ebc4
 8013384:	3fc99999 	.word	0x3fc99999
 8013388:	54442d18 	.word	0x54442d18
 801338c:	bff921fb 	.word	0xbff921fb
 8013390:	440fffff 	.word	0x440fffff
 8013394:	7ff00000 	.word	0x7ff00000
 8013398:	3fdbffff 	.word	0x3fdbffff
 801339c:	3ff00000 	.word	0x3ff00000
 80133a0:	3ff2ffff 	.word	0x3ff2ffff
 80133a4:	40038000 	.word	0x40038000
 80133a8:	3ff80000 	.word	0x3ff80000
 80133ac:	bff00000 	.word	0xbff00000
 80133b0:	080136b8 	.word	0x080136b8
 80133b4:	080136d8 	.word	0x080136d8

080133b8 <fabs>:
 80133b8:	ec51 0b10 	vmov	r0, r1, d0
 80133bc:	4602      	mov	r2, r0
 80133be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80133c2:	ec43 2b10 	vmov	d0, r2, r3
 80133c6:	4770      	bx	lr

080133c8 <_init>:
 80133c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ca:	bf00      	nop
 80133cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ce:	bc08      	pop	{r3}
 80133d0:	469e      	mov	lr, r3
 80133d2:	4770      	bx	lr

080133d4 <_fini>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	bf00      	nop
 80133d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133da:	bc08      	pop	{r3}
 80133dc:	469e      	mov	lr, r3
 80133de:	4770      	bx	lr
